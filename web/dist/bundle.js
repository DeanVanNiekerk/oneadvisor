!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!_[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===m&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="2ab79a3d494b215fd97c",i=1e4,a={},u=[],s=[];function l(e){var t=S[e];if(!t)return T;var r=function(r){return t.hot.active?(S[r]?-1===S[r].parents.indexOf(e)&&S[r].parents.push(e):(u=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),u=[]),T(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return T[e]},set:function(t){T[e]=t}}};for(var i in T)Object.prototype.hasOwnProperty.call(T,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===f&&d("prepare"),m++,T.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===f&&(g[e]||k(e),0===m&&0===y&&E())}},r.t=function(e,t){return 1&t&&(e=r(e)),T.t(e,-2&t)},r}var c=[],f="idle";function d(e){f=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var p,h,v,y=0,m=0,g={},b={},_={};function w(e){return+e+""===e?+e:e}function x(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=T.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(i).then(function(e){if(!e)return d("idle"),null;b={},g={},_=e.c,v=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return k(0),"prepare"===f&&0===m&&0===y&&E(),t})}function k(e){_[e]?(b[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=T.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function E(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return O(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function O(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,i,s,l;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),i=o.id,a=o.chain;if((s=S[i])&&!s.hot._selfAccepted){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var u=0;u<s.parents.length;u++){var l=s.parents[u],c=S[l];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(c.hot._acceptedDependencies[i]?(n[l]||(n[l]=[]),p(n[l],[i])):(delete n[l],t.push(l),r.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var y={},m=[],g={},b=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var x in h)if(Object.prototype.hasOwnProperty.call(h,x)){var k;l=w(x);var E=!1,O=!1,C=!1,P="";switch((k=h[x]?c(l):{type:"disposed",moduleId:x}).chain&&(P="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+k.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(E=new Error("Aborted because "+l+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(k),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),C=!0;break;default:throw new Error("Unexception type "+k.type)}if(E)return d("abort"),Promise.reject(E);if(O)for(l in g[l]=h[l],p(m,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,l)&&(y[l]||(y[l]=[]),p(y[l],k.outdatedDependencies[l]));C&&(p(m,[k.moduleId]),g[l]=b)}var R,j=[];for(r=0;r<m.length;r++)l=m[r],S[l]&&S[l].hot._selfAccepted&&j.push({module:l,errorHandler:S[l].hot._selfAccepted});d("dispose"),Object.keys(_).forEach(function(e){!1===_[e]&&function(e){delete installedChunks[e]}(e)});for(var A,M,I=m.slice();I.length>0;)if(l=I.pop(),s=S[l]){var N={},D=s.hot._disposeHandlers;for(i=0;i<D.length;i++)(n=D[i])(N);for(a[l]=N,s.hot.active=!1,delete S[l],delete y[l],i=0;i<s.children.length;i++){var L=S[s.children[i]];L&&((R=L.parents.indexOf(l))>=0&&L.parents.splice(R,1))}}for(l in y)if(Object.prototype.hasOwnProperty.call(y,l)&&(s=S[l]))for(M=y[l],i=0;i<M.length;i++)A=M[i],(R=s.children.indexOf(A))>=0&&s.children.splice(R,1);for(l in d("apply"),o=v,g)Object.prototype.hasOwnProperty.call(g,l)&&(e[l]=g[l]);var U=null;for(l in y)if(Object.prototype.hasOwnProperty.call(y,l)&&(s=S[l])){M=y[l];var F=[];for(r=0;r<M.length;r++)if(A=M[r],n=s.hot._acceptedDependencies[A]){if(-1!==F.indexOf(n))continue;F.push(n)}for(r=0;r<F.length;r++){n=F[r];try{n(M)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:M[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<j.length;r++){var W=j[r];l=W.module,u=[l];try{T(l)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||U||(U=e)}}return U?(d("fail"),Promise.reject(U)):(d("idle"),new Promise(function(e){e(m)}))}var S={};function T(t){if(S[t])return S[t].exports;var r=S[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:x,apply:O,status:function(e){if(!e)return f;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:a[e]};return n=void 0,t}(t),parents:(s=u,u=[],s),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}T.m=e,T.c=S,T.d=function(e,t,n){T.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},T.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},T.t=function(e,t){if(1&t&&(e=T(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(T.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)T.d(n,r,function(t){return e[t]}.bind(null,r));return n},T.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return T.d(t,"a",t),t},T.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},T.p="/",T.h=function(){return o},l(232)(T.s=232)}([function(e,t,n){"use strict";e.exports=n(234)},function(e,t,n){e.exports=n(238)()},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){var r=n(345);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(91),o=n(18);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(340);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var i=typeof r;if("string"===i||"number"===i)e.push(r);else if(Array.isArray(r)&&r.length){var a=o.apply(null,r);a&&e.push(a)}else if("object"===i)for(var u in r)n.call(r,u)&&r[u]&&e.push(u)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.sheetsManager=void 0;var o=r(n(4)),i=r(n(3)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(5)),d=r(n(0)),p=r(n(1)),h=(r(n(13)),r(n(184))),v=n(35),y=n(188),m=r(n(364)),g=r(n(194)),b=r(n(195)),_=r(n(378)),w=r(n(135)),x=r(n(137)),k=r(n(197)),E=r(n(393)),O=r(n(394)),S=(0,y.create)((0,g.default)()),T=(0,k.default)(),C=-1e11,P=new Map;t.sheetsManager=P;var R,j={};function A(){return R||(R=(0,w.default)({typography:{suppressWarning:!0}}))}v.ponyfillGlobal.__MUI_DEFAULT_THEME__=A();v.ponyfillGlobal.__MUI_STYLES__||(v.ponyfillGlobal.__MUI_STYLES__={}),v.ponyfillGlobal.__MUI_STYLES__.withStyles||(v.ponyfillGlobal.__MUI_STYLES__.withStyles=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var r,v=t.withTheme,y=void 0!==v&&v,g=t.flip,w=void 0===g?null:g,k=t.name,R=(0,f.default)(t,["withTheme","flip","name"]),M=(0,E.default)(e),I=M.themingEnabled||"string"==typeof k||y;C+=1,M.options.index=C;var N=function(e){function t(e,n){var r;(0,a.default)(this,t),(r=(0,s.default)(this,(0,l.default)(t).call(this,e,n))).jss=n[m.default.jss]||S,r.sheetsManager=P,r.unsubscribeId=null;var o=n.muiThemeProviderOptions;return o&&(o.sheetsManager&&(r.sheetsManager=o.sheetsManager),r.sheetsCache=o.sheetsCache,r.disableStylesGeneration=o.disableStylesGeneration),r.stylesCreatorSaved=M,r.sheetOptions=(0,i.default)({generateClassName:T},n[m.default.sheetOptions]),r.theme=I?x.default.initial(n)||A():j,r.attach(r.theme),r.cacheClasses={value:null,lastProp:null,lastJSS:{}},r}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){var e=this;I&&(this.unsubscribeId=x.default.subscribe(this.context,function(t){var n=e.theme;e.theme=t,e.attach(e.theme),e.setState({},function(){e.detach(n)})}))}},{key:"componentDidUpdate",value:function(){this.stylesCreatorSaved}},{key:"componentWillUnmount",value:function(){this.detach(this.theme),null!==this.unsubscribeId&&x.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"getClasses",value:function(){if(this.disableStylesGeneration)return this.props.classes||{};var e=!1,t=_.default.get(this.sheetsManager,this.stylesCreatorSaved,this.theme);return t.sheet.classes!==this.cacheClasses.lastJSS&&(this.cacheClasses.lastJSS=t.sheet.classes,e=!0),this.props.classes!==this.cacheClasses.lastProp&&(this.cacheClasses.lastProp=this.props.classes,e=!0),e&&(this.cacheClasses.value=(0,b.default)({baseClasses:this.cacheClasses.lastJSS,newClasses:this.props.classes,Component:n})),this.cacheClasses.value}},{key:"attach",value:function(e){if(!this.disableStylesGeneration){var t=this.stylesCreatorSaved,n=_.default.get(this.sheetsManager,t,e);if(n||(n={refs:0,sheet:null},_.default.set(this.sheetsManager,t,e,n)),0===n.refs){var r;this.sheetsCache&&(r=_.default.get(this.sheetsCache,t,e)),r||((r=this.createSheet(e)).attach(),this.sheetsCache&&_.default.set(this.sheetsCache,t,e,r)),n.sheet=r;var o=this.context[m.default.sheetsRegistry];o&&o.add(r)}n.refs+=1}}},{key:"createSheet",value:function(e){var t=this.stylesCreatorSaved.create(e,k),r=k;return this.jss.createStyleSheet(t,(0,i.default)({meta:r,classNamePrefix:r,flip:"boolean"==typeof w?w:"rtl"===e.direction,link:!1},this.sheetOptions,this.stylesCreatorSaved.options,{name:k||n.displayName},R))}},{key:"detach",value:function(e){if(!this.disableStylesGeneration){var t=_.default.get(this.sheetsManager,this.stylesCreatorSaved,e);if(t.refs-=1,0===t.refs){_.default.delete(this.sheetsManager,this.stylesCreatorSaved,e),this.jss.removeStyleSheet(t.sheet);var n=this.context[m.default.sheetsRegistry];n&&n.remove(t.sheet)}}}},{key:"render",value:function(){var e=this.props,t=(e.classes,e.innerRef),r=(0,f.default)(e,["classes","innerRef"]),o=(0,O.default)({theme:this.theme,name:k,props:r});return y&&!o.theme&&(o.theme=this.theme),d.default.createElement(n,(0,i.default)({},o,{classes:this.getClasses(),ref:t}))}}]),t}(d.default.Component);return N.propTypes={},N.contextTypes=(0,i.default)((r={muiThemeProviderOptions:p.default.object},(0,o.default)(r,m.default.jss,p.default.object),(0,o.default)(r,m.default.sheetOptions,p.default.object),(0,o.default)(r,m.default.sheetsRegistry,p.default.object),r),I?x.default.contextTypes:{}),(0,h.default)(N,n),N}});var M=v.ponyfillGlobal.__MUI_STYLES__.withStyles;t.default=M},function(e,t,n){"use strict";var r=function(){};e.exports=r},function(e,t){e.exports=function(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}},function(e,t,n){"use strict";(function(e){n.d(t,"a",function(){return me});var r=n(154),o=n.n(r),i=n(217),a=n.n(i),u=n(0),s=n.n(u),l=n(218),c=n(42),f=n(155),d=(n(1),n(23),n(231)),p=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},y=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},b=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},_=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},w=function(e){return"object"===(void 0===e?"undefined":h(e))&&e.constructor===Object},x=Object.freeze([]),k=Object.freeze({});function E(e){return"function"==typeof e}function O(e){return e.displayName||e.name||"Component"}function S(e){return e&&"string"==typeof e.styledComponentId}var T=void 0!==e&&e.env.SC_ATTR||"data-styled",C="undefined"!=typeof window&&"HTMLElement"in window,P="boolean"==typeof SC_DISABLE_SPEEDY&&SC_DISABLE_SPEEDY||!1;var R=function(e){function t(n){v(this,t);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];var a=_(this,e.call(this,"An error occurred. See https://github.com/styled-components/styled-components/blob/master/src/utils/errors.md#"+n+" for more information. "+(o?"Additional arguments: "+o.join(", "):"")));return _(a)}return g(t,e),t}(Error),j=/^[^\S\n]*?\/\* sc-component-id:\s*(\S+)\s+\*\//gm,A=function(e){var t=""+(e||""),n=[];return t.replace(j,function(e,t,r){return n.push({componentId:t,matchIndex:r}),e}),n.map(function(e,r){var o=e.componentId,i=e.matchIndex,a=n[r+1];return{componentId:o,cssFromDOM:a?t.slice(i,a.matchIndex):t.slice(i)}})},M=/^\s*\/\/.*$/gm,I=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!1,compress:!1,semicolon:!0}),N=new o.a({global:!1,cascade:!0,keyframe:!1,prefix:!0,compress:!1,semicolon:!1}),D=[],L=function(e){if(-2===e){var t=D;return D=[],t}},U=a()(function(e){D.push(e)}),F=void 0,W=void 0,z=void 0,B=function(e,t,n){return t>0&&-1!==n.slice(0,t).indexOf(W)&&n.slice(t-W.length,t)!==W?"."+F:e};N.use([function(e,t,n){2===e&&n.length&&n[0].lastIndexOf(W)>0&&(n[0]=n[0].replace(z,B))},U,L]),I.use([U,L]);var $=function(e){return I("",e)};function H(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"&",o=e.join("").replace(M,""),i=t&&n?n+" "+t+" { "+o+" }":o;return F=r,W=t,z=new RegExp("\\"+W+"\\b","g"),N(n||!t?"":t,i)}var G=function(){return n.nc},q=function(e,t,n){n&&((e[t]||(e[t]=Object.create(null)))[n]=!0)},V=function(e,t){e[t]=Object.create(null)},Y=function(e){return function(t,n){return void 0!==e[t]&&e[t][n]}},K=function(e){var t="";for(var n in e)t+=Object.keys(e[n]).join(" ")+" ";return t.trim()},X=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets.length,n=0;n<t;n+=1){var r=document.styleSheets[n];if(r.ownerNode===e)return r}throw new R(10)},J=function(e,t,n){if(!t)return!1;var r=e.cssRules.length;try{e.insertRule(t,n<=r?n:r)}catch(e){return!1}return!0},Q=function(e){return"\n/* sc-component-id: "+e+" */\n"},Z=function(e,t){for(var n=0,r=0;r<=t;r+=1)n+=e[r];return n},ee=function(e,t){return function(n){var r=G();return"<style "+[r&&'nonce="'+r+'"',T+'="'+K(t)+'"','data-styled-version="4.1.1"',n].filter(Boolean).join(" ")+">"+e()+"</style>"}},te=function(e,t){return function(){var n,r=((n={})[T]=K(t),n["data-styled-version"]="4.1.1",n),o=G();return o&&(r.nonce=o),s.a.createElement("style",m({},r,{dangerouslySetInnerHTML:{__html:e()}}))}},ne=function(e){return function(){return Object.keys(e)}},re=function(e){return document.createTextNode(Q(e))},oe=function e(t,n){var r=void 0===t?Object.create(null):t,o=void 0===n?Object.create(null):n,i=function(e){var t=o[e];return void 0!==t?t:o[e]=[""]},a=function(){var e="";for(var t in o){var n=o[t][0];n&&(e+=Q(t)+n)}return e};return{clone:function(){var t=function(e){var t=Object.create(null);for(var n in e)t[n]=m({},e[n]);return t}(r),n=Object.create(null);for(var i in o)n[i]=[o[i][0]];return e(t,n)},css:a,getIds:ne(o),hasNameForId:Y(r),insertMarker:i,insertRules:function(e,t,n){i(e)[0]+=t.join(" "),q(r,e,n)},removeRules:function(e){var t=o[e];void 0!==t&&(t[0]="",V(r,e))},sealed:!1,styleTag:null,toElement:te(a,r),toHTML:ee(a,r)}},ie=function(e,t,n,r,o){if(C&&!n){var i=function(e,t,n){var r=document.createElement("style");r.setAttribute(T,""),r.setAttribute("data-styled-version","4.1.1");var o=G();if(o&&r.setAttribute("nonce",o),r.appendChild(document.createTextNode("")),e&&!t)e.appendChild(r);else{if(!t||!e||!t.parentNode)throw new R(6);t.parentNode.insertBefore(r,n?t:t.nextSibling)}return r}(e,t,r);return P?function(e,t){var n=Object.create(null),r=Object.create(null),o=void 0!==t,i=!1,a=function(t){var o=r[t];return void 0!==o?o:(r[t]=re(t),e.appendChild(r[t]),n[t]=Object.create(null),r[t])},u=function(){var e="";for(var t in r)e+=r[t].data;return e};return{clone:function(){throw new R(5)},css:u,getIds:ne(r),hasNameForId:Y(n),insertMarker:a,insertRules:function(e,r,u){for(var s=a(e),l=[],c=r.length,f=0;f<c;f+=1){var d=r[f],p=o;if(p&&-1!==d.indexOf("@import"))l.push(d);else{p=!1;var h=f===c-1?"":" ";s.appendData(""+d+h)}}q(n,e,u),o&&l.length>0&&(i=!0,t().insertRules(e+"-import",l))},removeRules:function(a){var u=r[a];if(void 0!==u){var s=re(a);e.replaceChild(s,u),r[a]=s,V(n,a),o&&i&&t().removeRules(a+"-import")}},sealed:!1,styleTag:e,toElement:te(u,n),toHTML:ee(u,n)}}(i,o):function(e,t){var n=Object.create(null),r=Object.create(null),o=[],i=void 0!==t,a=!1,u=function(e){var t=r[e];return void 0!==t?t:(r[e]=o.length,o.push(0),V(n,e),r[e])},s=function(){var t=X(e).cssRules,n="";for(var i in r){n+=Q(i);for(var a=r[i],u=Z(o,a),s=u-o[a];s<u;s+=1){var l=t[s];void 0!==l&&(n+=l.cssText)}}return n};return{clone:function(){throw new R(5)},css:s,getIds:ne(r),hasNameForId:Y(n),insertMarker:u,insertRules:function(r,s,l){for(var c=u(r),f=X(e),d=Z(o,c),p=0,h=[],v=s.length,y=0;y<v;y+=1){var m=s[y],g=i;g&&-1!==m.indexOf("@import")?h.push(m):J(f,m,d+p)&&(g=!1,p+=1)}i&&h.length>0&&(a=!0,t().insertRules(r+"-import",h)),o[c]+=p,q(n,r,l)},removeRules:function(u){var s=r[u];if(void 0!==s){var l=o[s];!function(e,t,n){for(var r=t-n,o=t;o>r;o-=1)e.deleteRule(o)}(X(e),Z(o,s)-1,l),o[s]=0,V(n,u),i&&a&&t().removeRules(u+"-import")}},sealed:!1,styleTag:e,toElement:te(s,n),toHTML:ee(s,n)}}(i,o)}return oe()},ae=/\s+/,ue=void 0;ue=C?P?40:1e3:-1;var se=0,le=void 0,ce=function(){function e(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:C?document.head:null,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];v(this,e),this.getImportRuleTag=function(){var e=t.importRuleTag;if(void 0!==e)return e;var n=t.tags[0];return t.importRuleTag=ie(t.target,n?n.styleTag:null,t.forceServer,!0)},se+=1,this.id=se,this.forceServer=r,this.target=r?null:n,this.tagMap={},this.deferred={},this.rehydratedNames={},this.ignoreRehydratedNames={},this.tags=[],this.capacity=1,this.clones=[]}return e.prototype.rehydrate=function(){if(!C||this.forceServer)return this;var e=[],t=[],n=!1,r=document.querySelectorAll("style["+T+'][data-styled-version="4.1.1"]'),o=r.length;if(!o)return this;for(var i=0;i<o;i+=1){var a=r[i];n||(n=!!a.getAttribute("data-styled-streamed"));for(var u,s=(a.getAttribute(T)||"").trim().split(ae),l=s.length,c=0;c<l;c+=1)u=s[c],this.rehydratedNames[u]=!0;t.push.apply(t,A(a.textContent)),e.push(a)}var f=t.length;if(!f)return this;var d=this.makeTag(null);!function(e,t,n){for(var r=0,o=n.length;r<o;r+=1){var i=n[r],a=i.componentId,u=i.cssFromDOM,s=$(u);e.insertRules(a,s)}for(var l=0,c=t.length;l<c;l+=1){var f=t[l];f.parentNode&&f.parentNode.removeChild(f)}}(d,e,t),this.capacity=Math.max(1,ue-f),this.tags.push(d);for(var p=0;p<f;p+=1)this.tagMap[t[p].componentId]=d;return this},e.reset=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];le=new e(void 0,t).rehydrate()},e.prototype.clone=function(){var t=new e(this.target,this.forceServer);return this.clones.push(t),t.tags=this.tags.map(function(e){for(var n=e.getIds(),r=e.clone(),o=0;o<n.length;o+=1)t.tagMap[n[o]]=r;return r}),t.rehydratedNames=m({},this.rehydratedNames),t.deferred=m({},this.deferred),t},e.prototype.sealAllTags=function(){this.capacity=1,this.tags.forEach(function(e){e.sealed=!0})},e.prototype.makeTag=function(e){var t=e?e.styleTag:null;return ie(this.target,t,this.forceServer,!1,this.getImportRuleTag)},e.prototype.getTagForId=function(e){var t=this.tagMap[e];if(void 0!==t&&!t.sealed)return t;var n=this.tags[this.tags.length-1];return this.capacity-=1,0===this.capacity&&(this.capacity=ue,n=this.makeTag(n),this.tags.push(n)),this.tagMap[e]=n},e.prototype.hasId=function(e){return void 0!==this.tagMap[e]},e.prototype.hasNameForId=function(e,t){if(void 0===this.ignoreRehydratedNames[e]&&this.rehydratedNames[t])return!0;var n=this.tagMap[e];return void 0!==n&&n.hasNameForId(e,t)},e.prototype.deferredInject=function(e,t){if(void 0===this.tagMap[e]){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].deferredInject(e,t);this.getTagForId(e).insertMarker(e),this.deferred[e]=t}},e.prototype.inject=function(e,t,n){for(var r=this.clones,o=0;o<r.length;o+=1)r[o].inject(e,t,n);var i=this.getTagForId(e);if(void 0!==this.deferred[e]){var a=this.deferred[e].concat(t);i.insertRules(e,a,n),this.deferred[e]=void 0}else i.insertRules(e,t,n)},e.prototype.remove=function(e){var t=this.tagMap[e];if(void 0!==t){for(var n=this.clones,r=0;r<n.length;r+=1)n[r].remove(e);t.removeRules(e),this.ignoreRehydratedNames[e]=!0,this.deferred[e]=void 0}},e.prototype.toHTML=function(){return this.tags.map(function(e){return e.toHTML()}).join("")},e.prototype.toReactElements=function(){var e=this.id;return this.tags.map(function(t,n){var r="sc-"+e+"-"+n;return Object(u.cloneElement)(t.toElement(),{key:r})})},y(e,null,[{key:"master",get:function(){return le||(le=(new e).rehydrate())}},{key:"instance",get:function(){return e.master}}]),e}(),fe=function(){function e(t,n){var r=this;v(this,e),this.inject=function(e){e.hasNameForId(r.id,r.name)||e.inject(r.id,r.rules,r.name)},this.toString=function(){throw new R(12,String(r.name))},this.name=t,this.rules=n,this.id="sc-keyframes-"+t}return e.prototype.getName=function(){return this.name},e}(),de=/([A-Z])/g,pe=/^ms-/;var he=function(e){return void 0===e||null===e||!1===e||""===e},ve=function e(t,n){var r=Object.keys(t).filter(function(e){return!he(t[e])}).map(function(n){return w(t[n])?e(t[n],n):function(e){return e.replace(de,"-$1").toLowerCase().replace(pe,"-ms-")}(n)+": "+function(e,t){return null==t||"boolean"==typeof t||""===t?"":"number"!=typeof t||0===t||e in l.a?String(t).trim():t+"px"}(n,t[n])+";"}).join(" ");return n?n+" {\n  "+r+"\n}":r};function ye(e,t,n){if(Array.isArray(e)){for(var r,o=[],i=0,a=e.length;i<a;i+=1)null!==(r=ye(e[i],t,n))&&(Array.isArray(r)?o.push.apply(o,r):o.push(r));return o}if(he(e))return null;if(S(e))return"."+e.styledComponentId;if(E(e)){if(t){var u=!1;try{Object(c.isElement)(new e(t))&&(u=!0)}catch(e){}if(u)throw new R(13,O(e));return ye(e(t),t,n)}return e}return e instanceof fe?n?(e.inject(n),e.getName()):e:w(e)?ve(e):e.toString()}function me(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return E(e)||w(e)?ye(p(x,[e].concat(n))):ye(p(e,n))}function ge(e){for(var t,n=0|e.length,r=0|n,o=0;n>=4;)t=1540483477*(65535&(t=255&e.charCodeAt(o)|(255&e.charCodeAt(++o))<<8|(255&e.charCodeAt(++o))<<16|(255&e.charCodeAt(++o))<<24))+((1540483477*(t>>>16)&65535)<<16),r=1540483477*(65535&r)+((1540483477*(r>>>16)&65535)<<16)^(t=1540483477*(65535&(t^=t>>>24))+((1540483477*(t>>>16)&65535)<<16)),n-=4,++o;switch(n){case 3:r^=(255&e.charCodeAt(o+2))<<16;case 2:r^=(255&e.charCodeAt(o+1))<<8;case 1:r=1540483477*(65535&(r^=255&e.charCodeAt(o)))+((1540483477*(r>>>16)&65535)<<16)}return((r=1540483477*(65535&(r^=r>>>13))+((1540483477*(r>>>16)&65535)<<16))^r>>>15)>>>0}var be=52,_e=function(e){return String.fromCharCode(e+(e>25?39:97))};function we(e){var t="",n=void 0;for(n=e;n>be;n=Math.floor(n/be))t=_e(n%be)+t;return _e(n%be)+t}function xe(e,t){for(var n=0;n<e.length;n+=1){var r=e[n];if(Array.isArray(r)&&!xe(r,t))return!1;if(E(r)&&!S(r))return!1}return!t.some(function(e){return E(e)||function(e){for(var t in e)if(E(e[t]))return!0;return!1}(e)})}var ke,Ee=!1,Oe=function(e){return we(ge(e))},Se=function(){function e(t,n,r){v(this,e),this.rules=t,this.isStatic=!Ee&&xe(t,n),this.componentId=r,ce.master.hasId(r)||ce.master.deferredInject(r,[])}return e.prototype.generateAndInjectStyles=function(e,t){var n=this.isStatic,r=this.componentId,o=this.lastClassName;if(C&&n&&"string"==typeof o&&t.hasNameForId(r,o))return o;var i=ye(this.rules,e,t),a=Oe(this.componentId+i.join(""));return t.hasNameForId(r,a)||t.inject(this.componentId,H(i,"."+a,void 0,r),a),this.lastClassName=a,a},e.generateName=function(e){return Oe(e)},e}(),Te=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k,r=!!n&&e.theme===n.theme;return e.theme&&!r?e.theme:t||n.theme},Ce=/[[\].#*$><+~=|^:(),"'`-]+/g,Pe=/(^-|-$)/g;function Re(e){return e.replace(Ce,"-").replace(Pe,"")}function je(e){return"string"==typeof e}var Ae={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDerivedStateFromProps:!0,propTypes:!0,type:!0},Me={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},Ie=((ke={})[c.ForwardRef]={$$typeof:!0,render:!0},ke),Ne=Object.defineProperty,De=Object.getOwnPropertyNames,Le=Object.getOwnPropertySymbols,Ue=void 0===Le?function(){return[]}:Le,Fe=Object.getOwnPropertyDescriptor,We=Object.getPrototypeOf,ze=Object.prototype,Be=Array.prototype;function $e(e,t,n){if("string"!=typeof t){var r=We(t);r&&r!==ze&&$e(e,r,n);for(var o=Be.concat(De(t),Ue(t)),i=Ie[e.$$typeof]||Ae,a=Ie[t.$$typeof]||Ae,u=o.length,s=void 0,l=void 0;u--;)if(l=o[u],!(Me[l]||n&&n[l]||a&&a[l]||i&&i[l])&&(s=Fe(t,l)))try{Ne(e,l,s)}catch(e){}return e}return e}function He(e){return!!(e&&e.prototype&&e.prototype.isReactComponent)}var Ge=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}},qe=Object(u.createContext)(),Ve=qe.Consumer,Ye=(function(e){function t(n){v(this,t);var r=_(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext.bind(r)),r.renderInner=r.renderInner.bind(r),r}g(t,e),t.prototype.render=function(){return this.props.children?s.a.createElement(qe.Consumer,null,this.renderInner):null},t.prototype.renderInner=function(e){var t=this.getContext(this.props.theme,e);return s.a.createElement(qe.Provider,{value:t},s.a.Children.only(this.props.children))},t.prototype.getTheme=function(e,t){if(E(e))return e(t);if(null===e||Array.isArray(e)||"object"!==(void 0===e?"undefined":h(e)))throw new R(8);return m({},t,e)},t.prototype.getContext=function(e,t){return this.getTheme(e,t)}}(u.Component),function(){function e(){v(this,e),this.masterSheet=ce.master,this.instance=this.masterSheet.clone(),this.sealed=!1}e.prototype.seal=function(){if(!this.sealed){var e=this.masterSheet.clones.indexOf(this.instance);this.masterSheet.clones.splice(e,1),this.sealed=!0}},e.prototype.collectStyles=function(e){if(this.sealed)throw new R(2);return s.a.createElement(Xe,{sheet:this.instance},e)},e.prototype.getStyleTags=function(){return this.seal(),this.instance.toHTML()},e.prototype.getStyleElement=function(){return this.seal(),this.instance.toReactElements()},e.prototype.interleaveWithNodeStream=function(e){throw new R(3)}}(),Object(u.createContext)()),Ke=Ye.Consumer,Xe=function(e){function t(n){v(this,t);var r=_(this,e.call(this,n));return r.getContext=Object(f.a)(r.getContext),r}return g(t,e),t.prototype.getContext=function(e,t){if(e)return e;if(t)return new ce(t);throw new R(4)},t.prototype.render=function(){var e=this.props,t=e.children,n=e.sheet,r=e.target;return s.a.createElement(Ye.Provider,{value:this.getContext(n,r)},t)},t}(u.Component),Je=(new Set,{});Ge(function(){return console.warn('The "innerRef" API has been removed in styled-components v4 in favor of React 16 ref forwarding, use "ref" instead like a typical component.')}),Ge(function(e,t){return console.warn('Functions as object-form attrs({}) keys are now deprecated and will be removed in a future version of styled-components. Switch to the new attrs(props => ({})) syntax instead for easier and more powerful composition. The attrs key in question is "'+e+'" on component "'+t+'".')}),Ge(function(e,t){return console.warn("It looks like you've used a non styled-component as the value for the \""+e+'" prop in an object-form attrs constructor of "'+t+"\".\nYou should use the new function-form attrs constructor which avoids this issue: attrs(props => ({ yourStuff }))\nTo continue using the deprecated object syntax, you'll need to wrap your component prop in a function to make it available inside the styled component (you'll still get the deprecation warning though.)\nFor example, { "+e+": () => InnerComponent } instead of { "+e+": InnerComponent }")});var Qe=function(e){function t(){v(this,t);var n=_(this,e.call(this));return n.attrs={},n.renderOuter=n.renderOuter.bind(n),n.renderInner=n.renderInner.bind(n),n}return g(t,e),t.prototype.render=function(){return s.a.createElement(Ke,null,this.renderOuter)},t.prototype.renderOuter=function(e){return this.styleSheet=e,this.props.forwardedClass.componentStyle.isStatic?this.renderInner():s.a.createElement(Ve,null,this.renderInner)},t.prototype.renderInner=function(e){var t=this.props.forwardedClass,n=t.componentStyle,r=t.defaultProps,o=t.styledComponentId,i=t.target,a=void 0;a=n.isStatic?this.generateAndInjectStyles(k,this.props,this.styleSheet):void 0!==e?this.generateAndInjectStyles(Te(this.props,e,r),this.props,this.styleSheet):this.generateAndInjectStyles(this.props.theme||k,this.props,this.styleSheet);var s=this.props.as||this.attrs.as||i,l=je(s),c={},f=m({},this.attrs,this.props),p=void 0;for(p in f)"forwardedClass"!==p&&"as"!==p&&("forwardedRef"===p?c.ref=f[p]:l&&!Object(d.a)(p)||(c[p]=f[p]));return this.props.style&&this.attrs.style&&(c.style=m({},this.attrs.style,this.props.style)),c.className=[this.props.className,o,this.attrs.className,a].filter(Boolean).join(" "),Object(u.createElement)(s,c)},t.prototype.buildExecutionContext=function(e,t,n){var r=this,o=m({},t,{theme:e});return n.length?(this.attrs={},n.forEach(function(e){var n=e,i=!1,a=void 0,u=void 0;for(u in E(n)&&(n=n(t),i=!0),n)a=n[u],i||!E(a)||He(a)||S(a)||(a=a(o)),r.attrs[u]=a,o[u]=a}),o):o},t.prototype.generateAndInjectStyles=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:ce.master,r=t.forwardedClass,o=r.attrs,i=r.componentStyle;r.warnTooManyClasses;return i.isStatic&&!o.length?i.generateAndInjectStyles(k,n):i.generateAndInjectStyles(this.buildExecutionContext(e,t,o),n)},t}(u.Component);function Ze(e,t,n){var r=S(e),o=!je(e),i=t.displayName,a=void 0===i?function(e){return je(e)?"styled."+e:"Styled("+O(e)+")"}(e):i,u=t.componentId,l=void 0===u?function(e,t,n){var r="string"!=typeof t?"sc":Re(t),o=(Je[r]||0)+1;Je[r]=o;var i=r+"-"+e.generateName(r+o);return n?n+"-"+i:i}(Se,t.displayName,t.parentComponentId):u,c=t.ParentComponent,f=void 0===c?Qe:c,d=t.attrs,p=void 0===d?x:d,h=t.displayName&&t.componentId?Re(t.displayName)+"-"+t.componentId:t.componentId||l,v=r&&e.attrs?Array.prototype.concat(e.attrs,p).filter(Boolean):p,y=new Se(r?e.componentStyle.rules.concat(n):n,v,h),g=s.a.forwardRef(function(e,t){return s.a.createElement(f,m({},e,{forwardedClass:g,forwardedRef:t}))});return g.attrs=v,g.componentStyle=y,g.displayName=a,g.styledComponentId=h,g.target=r?e.target:e,g.withComponent=function(e){var r=t.componentId,o=b(t,["componentId"]),i=r&&r+"-"+(je(e)?e:Re(O(e)));return Ze(e,m({},o,{attrs:v,componentId:i,ParentComponent:f}),n)},g.toString=function(){return"."+g.styledComponentId},o&&$e(g,e,{attrs:!0,componentStyle:!0,displayName:!0,styledComponentId:!0,target:!0,withComponent:!0}),g}var et=function(e){return function e(t,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:k;if(!Object(c.isValidElementType)(n))throw new R(1,String(n));var o=function(){return t(n,r,me.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,m({},r,o))},o.attrs=function(o){return e(t,n,m({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Ze,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach(function(e){et[e]=et(e)});!function(){function e(t,n){v(this,e),this.rules=t,this.componentId=n,this.isStatic=xe(t,x),ce.master.hasId(n)||ce.master.deferredInject(n,[])}e.prototype.createStyles=function(e,t){var n=H(ye(this.rules,e,t),"");t.inject(this.componentId,n)},e.prototype.removeStyles=function(e){var t=this.componentId;e.hasId(t)&&e.remove(t)},e.prototype.renderStyles=function(e,t){this.removeStyles(t),this.createStyles(e,t)}}();C&&(window.scCGSHMRCache={});t.b=et}).call(this,n(129))},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,i,a,u],c=0;(s=new Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){var r=n(4);e.exports=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){r(e,t,n[t])})}return e}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){var n=e.exports={version:"2.5.7"};"number"==typeof __e&&(__e=n)},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var o=n(0),i=n(1),a=n.n(i),u=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),s=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function l(e){var t;void 0===e&&(e="store");var n=e+"Subscription",i=function(t){r(a,t);var i=a.prototype;function a(n,r){var o;return(o=t.call(this,n,r)||this)[e]=n.store,o}return i.getChildContext=function(){var t;return(t={})[e]=this[e],t[n]=null,t},i.render=function(){return o.Children.only(this.props.children)},a}(o.Component);return i.propTypes={store:s.isRequired,children:a.a.element.isRequired},i.childContextTypes=((t={})[e]=s.isRequired,t[n]=u,t),i}var c=l();function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var h=n(212),v=n.n(h),y=n(16),m=n.n(y),g=n(42),b=null,_={notify:function(){}};var w=function(){function e(e,t,n){this.store=e,this.parentSub=t,this.onStateChange=n,this.unsubscribe=null,this.listeners=_}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=b,e=b},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==b&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=_)},e}(),x=0,k={};function E(){}function O(e,t){var n,i;void 0===t&&(t={});var a=t,l=a.getDisplayName,c=void 0===l?function(e){return"ConnectAdvanced("+e+")"}:l,h=a.methodName,y=void 0===h?"connectAdvanced":h,b=a.renderCountProp,_=void 0===b?void 0:b,O=a.shouldHandleStateChanges,S=void 0===O||O,T=a.storeKey,C=void 0===T?"store":T,P=a.withRef,R=void 0!==P&&P,j=p(a,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),A=C+"Subscription",M=x++,I=((n={})[C]=s,n[A]=u,n),N=((i={})[A]=u,i);return function(t){m()(Object(g.isValidElementType)(t),"You must pass a component to the function returned by "+y+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",i=c(n),a=d({},j,{getDisplayName:c,methodName:y,renderCountProp:_,shouldHandleStateChanges:S,storeKey:C,withRef:R,displayName:i,wrappedComponentName:n,WrappedComponent:t}),u=function(n){function u(e,t){var r;return(r=n.call(this,e,t)||this).version=M,r.state={},r.renderCount=0,r.store=e[C]||t[C],r.propsMode=Boolean(e[C]),r.setWrappedInstance=r.setWrappedInstance.bind(f(f(r))),m()(r.store,'Could not find "'+C+'" in either the context or props of "'+i+'". Either wrap the root component in a <Provider>, or explicitly pass "'+C+'" as a prop to "'+i+'".'),r.initSelector(),r.initSubscription(),r}r(u,n);var s=u.prototype;return s.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[A]=t||this.context[A],e},s.componentDidMount=function(){S&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},s.componentWillReceiveProps=function(e){this.selector.run(e)},s.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},s.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=E,this.store=null,this.selector.run=E,this.selector.shouldComponentUpdate=!1},s.getWrappedInstance=function(){return m()(R,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+y+"() call."),this.wrappedInstance},s.setWrappedInstance=function(e){this.wrappedInstance=e},s.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},s.initSubscription=function(){if(S){var e=(this.propsMode?this.props:this.context)[A];this.subscription=new w(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},s.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(k)):this.notifyNestedSubs()},s.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},s.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},s.addExtraProps=function(e){if(!(R||_||this.propsMode&&this.subscription))return e;var t=d({},e);return R&&(t.ref=this.setWrappedInstance),_&&(t[_]=this.renderCount++),this.propsMode&&this.subscription&&(t[A]=this.subscription),t},s.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(o.createElement)(t,this.addExtraProps(e.props))},u}(o.Component);return u.WrappedComponent=t,u.displayName=i,u.childContextTypes=N,u.contextTypes=I,u.propTypes=I,v()(u,t)}}var S=Object.prototype.hasOwnProperty;function T(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function C(e,t){if(T(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!S.call(t,n[o])||!T(e[n[o]],t[n[o]]))return!1;return!0}var P=n(27);function R(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function j(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function A(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=j(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=j(o),o=r(t,n)),o},r}}var M=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:R(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?R(function(t){return Object(P.b)(e,t)}):void 0}];var I=[function(e){return"function"==typeof e?A(e):void 0},function(e){return e?void 0:R(function(){return{}})}];function N(e,t,n){return d({},n,e,t)}var D=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var s=e(t,n,u);return a?o&&i(s,r)||(r=s):(a=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return N}}];function L(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function U(e,t,n,r,o){var i,a,u,s,l,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;function h(o,p){var h=!f(p,a),v=!c(o,i);return i=o,a=p,h&&v?(u=e(i,a),t.dependsOnOwnProps&&(s=t(r,a)),l=n(u,s,a)):h?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(s=t(r,a)),l=n(u,s,a)):v?function(){var t=e(i,a),r=!d(t,u);return u=t,r&&(l=n(u,s,a)),l}():l}return function(o,c){return p?h(o,c):function(o,c){return u=e(i=o,a=c),s=t(r,a),l=n(u,s,a),p=!0,l}(o,c)}}function F(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,i),u=r(e,i),s=o(e,i);return(i.pure?U:L)(a,u,s,e,i)}function W(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function z(e,t){return e===t}var B=function(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?O:n,o=t.mapStateToPropsFactories,i=void 0===o?I:o,a=t.mapDispatchToPropsFactories,u=void 0===a?M:a,s=t.mergePropsFactories,l=void 0===s?D:s,c=t.selectorFactory,f=void 0===c?F:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,s=a.pure,c=void 0===s||s,h=a.areStatesEqual,v=void 0===h?z:h,y=a.areOwnPropsEqual,m=void 0===y?C:y,g=a.areStatePropsEqual,b=void 0===g?C:g,_=a.areMergedPropsEqual,w=void 0===_?C:_,x=p(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),k=W(e,i,"mapStateToProps"),E=W(t,u,"mapDispatchToProps"),O=W(n,l,"mergeProps");return r(f,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:k,initMapDispatchToProps:E,initMergeProps:O,pure:c,areStatesEqual:v,areOwnPropsEqual:m,areStatePropsEqual:b,areMergedPropsEqual:w},x))}}();n.d(t,"Provider",function(){return c}),n.d(t,"createProvider",function(){return l}),n.d(t,"connectAdvanced",function(){return O}),n.d(t,"connect",function(){return B})},function(e,t,n){"use strict";e.exports=function(){}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(235)},function(e,t,n){"use strict";var r=n(21),o=n.n(r),i=n(16),a=n.n(i);function u(e){return"/"===e.charAt(0)}function s(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}var l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],r=t&&t.split("/")||[],o=e&&u(e),i=t&&u(t),a=o||i;if(e&&u(e)?r=n:n.length&&(r.pop(),r=r.concat(n)),!r.length)return"/";var l=void 0;if(r.length){var c=r[r.length-1];l="."===c||".."===c||""===c}else l=!1;for(var f=0,d=r.length;d>=0;d--){var p=r[d];"."===p?s(r,d):".."===p?(s(r,d),f++):f&&(s(r,d),f--)}if(!a)for(;f--;f)r.unshift("..");!a||""===r[0]||r[0]&&u(r[0])||r.unshift("");var h=r.join("/");return l&&"/"!==h.substr(-1)&&(h+="/"),h},c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var f=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var r=void 0===t?"undefined":c(t);if(r!==(void 0===n?"undefined":c(n)))return!1;if("object"===r){var o=t.valueOf(),i=n.valueOf();if(o!==t||i!==n)return e(o,i);var a=Object.keys(t),u=Object.keys(n);return a.length===u.length&&a.every(function(r){return e(t[r],n[r])})}return!1},d=function(e){return"/"===e.charAt(0)?e:"/"+e},p=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)},h=function(e,t){return p(e,t)?e.substr(t.length):e},v=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},y=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=m({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=l(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},b=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&f(e.state,t.state)},_=function(){var e=null,t=[];return{setPrompt:function(t){return o()(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==a)}else i(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}},w=!("undefined"==typeof window||!window.document||!window.document.createElement),x=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},k=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},E=function(e,t){return t(window.confirm(e))},O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},T=function(){try{return window.history.state||{}}catch(e){return{}}},C=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};a()(w,"Browser history needs a DOM");var t=window.history,n=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history}(),r=!(-1===window.navigator.userAgent.indexOf("Trident")),i=e.forceRefresh,u=void 0!==i&&i,s=e.getUserConfirmation,l=void 0===s?E:s,c=e.keyLength,f=void 0===c?6:c,m=e.basename?v(d(e.basename)):"",b=function(e){var t=e||{},n=t.key,r=t.state,i=window.location,a=i.pathname+i.search+i.hash;return o()(!m||p(a,m),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+m+'".'),m&&(a=h(a,m)),g(a,r,n)},C=function(){return Math.random().toString(36).substr(2,f)},P=_(),R=function(e){S($,e),$.length=t.length,P.notifyListeners($.location,$.action)},j=function(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||I(b(e.state))},A=function(){I(b(T()))},M=!1,I=function(e){M?(M=!1,R()):P.confirmTransitionTo(e,"POP",l,function(t){t?R({action:"POP",location:e}):N(e)})},N=function(e){var t=$.location,n=L.indexOf(t.key);-1===n&&(n=0);var r=L.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(M=!0,F(o))},D=b(T()),L=[D.key],U=function(e){return m+y(e)},F=function(e){t.go(e)},W=0,z=function(e){1===(W+=e)?(x(window,"popstate",j),r&&x(window,"hashchange",A)):0===W&&(k(window,"popstate",j),r&&k(window,"hashchange",A))},B=!1,$={length:t.length,action:"POP",location:D,createHref:U,push:function(e,r){o()(!("object"===(void 0===e?"undefined":O(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=g(e,r,C(),$.location);P.confirmTransitionTo(i,"PUSH",l,function(e){if(e){var r=U(i),a=i.key,s=i.state;if(n)if(t.pushState({key:a,state:s},null,r),u)window.location.href=r;else{var l=L.indexOf($.location.key),c=L.slice(0,-1===l?0:l+1);c.push(i.key),L=c,R({action:"PUSH",location:i})}else o()(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,r){o()(!("object"===(void 0===e?"undefined":O(e))&&void 0!==e.state&&void 0!==r),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=g(e,r,C(),$.location);P.confirmTransitionTo(i,"REPLACE",l,function(e){if(e){var r=U(i),a=i.key,s=i.state;if(n)if(t.replaceState({key:a,state:s},null,r),u)window.location.replace(r);else{var l=L.indexOf($.location.key);-1!==l&&(L[l]=i.key),R({action:"REPLACE",location:i})}else o()(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:F,goBack:function(){return F(-1)},goForward:function(){return F(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=P.setPrompt(e);return B||(z(1),B=!0),function(){return B&&(B=!1,z(-1)),t()}},listen:function(e){var t=P.appendListener(e);return z(1),function(){z(-1),t()}}};return $},P=(Object.assign,"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e}),R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},j=function(e,t,n){return Math.min(Math.max(e,t),n)},A=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,r=void 0===n?["/"]:n,i=e.initialIndex,a=void 0===i?0:i,u=e.keyLength,s=void 0===u?6:u,l=_(),c=function(e){R(m,e),m.length=m.entries.length,l.notifyListeners(m.location,m.action)},f=function(){return Math.random().toString(36).substr(2,s)},d=j(a,0,r.length-1),p=r.map(function(e){return g(e,void 0,"string"==typeof e?f():e.key||f())}),h=y,v=function(e){var n=j(m.index+e,0,m.entries.length-1),r=m.entries[n];l.confirmTransitionTo(r,"POP",t,function(e){e?c({action:"POP",location:r,index:n}):c()})},m={length:p.length,action:"POP",location:p[d],index:d,entries:p,createHref:h,push:function(e,n){o()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=g(e,n,f(),m.location);l.confirmTransitionTo(r,"PUSH",t,function(e){if(e){var t=m.index+1,n=m.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),c({action:"PUSH",location:r,index:t,entries:n})}})},replace:function(e,n){o()(!("object"===(void 0===e?"undefined":P(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=g(e,n,f(),m.location);l.confirmTransitionTo(r,"REPLACE",t,function(e){e&&(m.entries[m.index]=r,c({action:"REPLACE",location:r}))})},go:v,goBack:function(){return v(-1)},goForward:function(){return v(1)},canGo:function(e){var t=m.index+e;return t>=0&&t<m.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return m};n.d(t,"a",function(){return C}),n.d(t,"c",function(){return A}),n.d(t,"b",function(){return g}),n.d(t,"e",function(){return b}),n.d(t,"d",function(){return y})},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t,n){var r=n(119)("wks"),o=n(82),i=n(25).Symbol,a="function"==typeof i;(e.exports=function(e){return r[e]||(r[e]=a&&i[e]||(a?i:o)("Symbol."+e))}).store=r},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"c",function(){return l}),n.d(t,"b",function(){return f}),n.d(t,"a",function(){return h}),n.d(t,"d",function(){return p});var r=n(152),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},i={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var s=e,l=t,c=[],f=c,d=!1;function p(){f===c&&(f=c.slice())}function h(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1)}}}function y(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,l=s(l,e)}finally{d=!1}for(var t=c=f,n=0;n<t.length;n++){(0,t[n])()}return e}return y({type:i.INIT}),(o={dispatch:y,subscribe:v,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");s=e,y({type:i.REPLACE})}})[r.a]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},o}function s(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];0,"function"==typeof e[o]&&(n[o]=e[o])}var a,u=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:i.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:i.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+i.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},i=0;i<u.length;i++){var l=u[i],c=n[l],f=e[l],d=c(f,t);if(void 0===d){var p=s(l,t);throw new Error(p)}o[l]=d,r=r||d!==f}return r?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],a=e[i];"function"==typeof a&&(r[i]=c(a,t))}return r}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){d(e,t,n[t])})}return e}({},n,{dispatch:r=p.apply(void 0,i)(n.dispatch)})}}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.capitalize=function(e){0;return e.charAt(0).toUpperCase()+e.slice(1)},t.contains=i,t.findIndex=a,t.find=function(e,t){var n=a(e,t);return n>-1?e[n]:void 0},t.createChainedFunction=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce(function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}},function(){})};var o=r(n(91));r(n(13));function i(e,t){return Object.keys(t).every(function(n){return e.hasOwnProperty(n)&&e[n]===t[n]})}function a(e,t){for(var n=(0,o.default)(t),r=0;r<e.length;r+=1){if("function"===n&&!0==!!t(e[r],r,e))return r;if("object"===n&&i(e[r],t))return r;if(-1!==["string","number","boolean"].indexOf(n))return e.indexOf(t)}return-1}},function(e,t,n){var r=n(25),o=n(19),i=n(51),a=n(44),u=n(45),s=function(e,t,n){var l,c,f,d=e&s.F,p=e&s.G,h=e&s.S,v=e&s.P,y=e&s.B,m=e&s.W,g=p?o:o[t]||(o[t]={}),b=g.prototype,_=p?r:h?r[t]:(r[t]||{}).prototype;for(l in p&&(n=t),n)(c=!d&&_&&void 0!==_[l])&&u(g,l)||(f=c?_[l]:n[l],g[l]=p&&"function"!=typeof _[l]?n[l]:y&&c?i(f,r):m&&_[l]==f?function(e){var t=function(t,n,r){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,n)}return new e(t,n,r)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):v&&"function"==typeof f?i(Function.call,f):f,v&&((g.virtual||(g.virtual={}))[l]=f,e&s.R&&b&&!b[l]&&a(b,l,f)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,e.exports=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Auth=t.withAuth=t.Security=t.SecureRoute=t.ImplicitCallback=void 0;var r=s(n(307)),o=s(n(335)),i=s(n(337)),a=s(n(131)),u=s(n(181));function s(e){return e&&e.__esModule?e:{default:e}}t.ImplicitCallback=o.default,t.SecureRoute=i.default,t.Security=r.default,t.withAuth=a.default,t.Auth=u.default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(452))},function(e,t,n){var r=n(37);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t,n){"use strict";t.a={oidc:{clientId:"0oagr58c4ncsC9gr70h7",issuer:"https://dev-396180.oktapreview.com/oauth2/default",audience:"api://default",redirectUri:"".concat(window.location.protocol,"//").concat(window.location.hostname).concat(window.location.port?":".concat(window.location.port):"","/implicit/callback"),scope:"openid profile email"},baseApi:"https://localhost:6001",ui:{sideBarWidth:240}}},function(e,t,n){var r=n(32),o=n(164),i=n(114),a=Object.defineProperty;t.f=n(38)?Object.defineProperty:function(e,t,n){if(r(e),t=i(t,!0),r(n),o)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){"use strict";n.r(t);var r=n(185),o=n.n(r);n.d(t,"exactProp",function(){return o.a});var i=n(186),a=n.n(i);n.d(t,"getDisplayName",function(){return a.a});var u=n(187),s=n.n(u);n.d(t,"ponyfillGlobal",function(){return s.a})},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"createMuiTheme",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"jssPreset",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"MuiThemeProvider",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"createStyles",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"withStyles",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"withTheme",{enumerable:!0,get:function(){return c.default}});var o=r(n(197)),i=r(n(135)),a=r(n(194)),u=r(n(409)),s=r(n(412)),l=r(n(12)),c=r(n(99))},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){e.exports=!n(52)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var n=e.exports;n.base64UrlToBase64=function(e){return e.replace(/\-/g,"+").replace(/_/g,"/")},n.base64UrlToString=function(e){var t=n.base64UrlToBase64(e);switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw"Not a valid Base64Url"}var r=atob(t);try{return decodeURIComponent(escape(r))}catch(e){return r}},n.stringToBuffer=function(e){for(var t=new Uint8Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t},n.base64UrlDecode=function(e){return atob(n.base64UrlToBase64(e))},n.bind=function(e,t){var n=Array.prototype.slice.call(arguments,2);return function(){var r=Array.prototype.slice.call(arguments);return r=n.concat(r),e.apply(t,r)}},n.isAbsoluteUrl=function(e){return/^(?:[a-z]+:)?\/\//i.test(e)},n.isString=function(e){return"[object String]"===Object.prototype.toString.call(e)},n.isObject=function(e){return"[object Object]"===Object.prototype.toString.call(e)},n.isNumber=function(e){return"[object Number]"===Object.prototype.toString.call(e)},n.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},n.isoToUTCString=function(e){var t=e.match(/\d+/g),n=Date.UTC(t[0],t[1]-1,t[2],t[3],t[4],t[5]);return new Date(n).toUTCString()},n.toQueryParams=function(e){var t=[];if(null!==e)for(var n in e)e.hasOwnProperty(n)&&void 0!==e[n]&&null!==e[n]&&t.push(n+"="+encodeURIComponent(e[n]));return t.length?"?"+t.join("&"):""},n.genRandomString=function(e){for(var t="abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",n="",r=0,o=t.length;r<e;++r)n+=t[Math.floor(Math.random()*o)];return n},n.extend=function(){var e=arguments[0];[].slice.call(arguments,1).forEach(function(t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})},n.removeNils=function(e){var t={};for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];null!==r&&void 0!==r&&(t[n]=r)}return t},n.clone=function(e){if(e){var t=JSON.stringify(e);if(t)return JSON.parse(t)}return e},n.omit=function(e){var t=Array.prototype.slice.call(arguments,1),r={};for(var o in e)e.hasOwnProperty(o)&&-1==t.indexOf(o)&&(r[o]=e[o]);return n.clone(r)},n.find=function(e,t){for(var n=e.length;n--;){var r=e[n],o=!0;for(var i in t)if(t.hasOwnProperty(i)&&r[i]!==t[i]){o=!1;break}if(o)return r}},n.getLink=function(e,t,r){if(e&&e._links){var o=n.clone(e._links[t]);return o&&o.name&&r?o.name===r?o:void 0:o}},n.getNativeConsole=function(){return window.console},n.getConsole=function(){var e=n.getNativeConsole();return e&&e.log?e:{log:function(){}}},n.warn=function(e){n.getConsole().log("[okta-auth-sdk] WARN: "+e)},n.deprecate=function(e){n.getConsole().log("[okta-auth-sdk] DEPRECATION: "+e)},n.deprecateWrap=function(e,t){return function(){return n.deprecate(e),t.apply(null,arguments)}},n.removeTrailingSlash=function(e){if(e){var t=e.replace(/^\s+|\s+$/gm,"");return"/"===t.slice(-1)?t.slice(0,-1):t}},n.isIE11OrLess=function(){return!!document.documentMode&&document.documentMode<=11}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return e&&e.ownerDocument||document};t.default=r},function(e,t,n){"use strict";n.r(t);var r=n(13),o=n.n(r),i=n(0),a=n.n(i),u=n(1),s=n.n(u),l=n(24),c=n(16),f=n.n(c),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;f()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);h.propTypes={history:s.a.object.isRequired,children:s.a.node},h.contextTypes={router:s.a.object},h.childContextTypes={router:s.a.object.isRequired};var v=h;function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=y(this,e.call.apply(e,[this].concat(i))),r.history=Object(l.c)(r.props),y(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(v,{history:this.history,children:this.props.children})},t}(a.a.Component);m.propTypes={initialEntries:s.a.array,initialIndex:s.a.number,getUserConfirmation:s.a.func,keyLength:s.a.number,children:s.a.node};var g=m;var b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);b.propTypes={when:s.a.bool,message:s.a.oneOfType([s.a.func,s.a.string]).isRequired},b.defaultProps={when:!0},b.contextTypes={router:s.a.shape({history:s.a.shape({block:s.a.func.isRequired}).isRequired}).isRequired};var _=b,w=n(104),x=n.n(w),k={},E=0,O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"/",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"/"===e?e:function(e){var t=e,n=k[t]||(k[t]={});if(n[e])return n[e];var r=x.a.compile(e);return E<1e4&&(n[e]=r,E++),r}(e)(t,{pretty:!0})},S=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var T=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=Object(l.b)(e.to),n=Object(l.b)(this.props.to);Object(l.e)(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.computeTo=function(e){var t=e.computedMatch,n=e.to;return t?"string"==typeof n?O(n,t.params):S({},n,{pathname:O(n.pathname,t.params)}):n},t.prototype.perform=function(){var e=this.context.router.history,t=this.props.push,n=this.computeTo(this.props);t?e.push(n):e.replace(n)},t.prototype.render=function(){return null},t}(a.a.Component);T.propTypes={computedMatch:s.a.object,push:s.a.bool,from:s.a.string,to:s.a.oneOfType([s.a.string,s.a.object]).isRequired},T.defaultProps={push:!1},T.contextTypes={router:s.a.shape({history:s.a.shape({push:s.a.func.isRequired,replace:s.a.func.isRequired}).isRequired,staticContext:s.a.object}).isRequired};var C=T,P=n(101),R=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function j(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var A=function(e){return"/"===e.charAt(0)?e:"/"+e},M=function(e,t){return e?R({},t,{pathname:A(e)+t.pathname}):t},I=function(e){return"string"==typeof e?e:Object(l.d)(e)},N=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},D=function(){},L=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=j(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return A(r.props.basename+I(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=M(n,Object(l.b)(e)),o.url=I(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=M(n,Object(l.b)(e)),o.url=I(o.location)},r.handleListen=function(){return D},r.handleBlock=function(){return D},j(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=A(e);return 0!==t.pathname.indexOf(n)?t:R({},t,{pathname:t.pathname.substr(n.length)})}(t,Object(l.b)(n)),push:this.handlePush,replace:this.handleReplace,go:N("go"),goBack:N("goBack"),goForward:N("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(v,R({},r,{history:o}))},t}(a.a.Component);L.propTypes={basename:s.a.string,context:s.a.object.isRequired,location:s.a.oneOfType([s.a.string,s.a.object])},L.defaultProps={basename:"",location:"/"},L.childContextTypes={router:s.a.object.isRequired};var U=L,F=n(160),W=n(60),z=n(102);n.d(t,"MemoryRouter",function(){return g}),n.d(t,"Prompt",function(){return _}),n.d(t,"Redirect",function(){return C}),n.d(t,"Route",function(){return P.a}),n.d(t,"Router",function(){return v}),n.d(t,"StaticRouter",function(){return U}),n.d(t,"Switch",function(){return F.a}),n.d(t,"generatePath",function(){return O}),n.d(t,"matchPath",function(){return W.a}),n.d(t,"withRouter",function(){return z.a})},function(e,t,n){"use strict";e.exports=n(240)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apiMiddleware=t.getJSON=t.ApiError=t.RequestError=t.InternalError=t.InvalidRSAA=t.isValidRSAA=t.validateRSAA=t.isRSAA=t.RSAA=t.CALL_API=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(110)),o=n(161),i=n(126),a=n(173),u=n(306);t.CALL_API=r.default,t.RSAA=r.default,t.isRSAA=o.isRSAA,t.validateRSAA=o.validateRSAA,t.isValidRSAA=o.isValidRSAA,t.InvalidRSAA=i.InvalidRSAA,t.InternalError=i.InternalError,t.RequestError=i.RequestError,t.ApiError=i.ApiError,t.getJSON=a.getJSON,t.apiMiddleware=u.apiMiddleware},function(e,t,n){var r=n(34),o=n(67);e.exports=n(38)?function(e,t,n){return r.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"c",function(){return o}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return u});var r="DIRECTORY",o="MEMBER",i=r,a=function(e,t,n,r,o){return{id:e,name:t,color:n,relativePath:r,icon:o,isCurrent:!1}},u=[a(r,"Directory","#607D8B","/directory","security"),a(o,"Member","#2962FF","/member","account_circle")]},function(e,t,n){e.exports=n(338)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(462))},function(e,t){e.exports={}},function(e,t,n){var r=n(162),o=n(112);e.exports=function(e){return r(o(e))}},function(e,t,n){var r=n(80);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
function n(e,t){this.name="AuthSdkError",this.message=e,this.errorCode="INTERNAL",this.errorSummary=e,this.errorLink="INTERNAL",this.errorId="INTERNAL",this.errorCauses=[],t&&(this.xhr=t)}n.prototype=new Error,e.exports=n},function(e,t){e.exports={STATE_TOKEN_COOKIE_NAME:"oktaStateToken",DEFAULT_POLLING_DELAY:500,DEFAULT_MAX_CLOCK_SKEW:300,DEFAULT_CACHE_DURATION:86400,FRAME_ID:"okta-oauth-helper-frame",REDIRECT_OAUTH_PARAMS_COOKIE_NAME:"okta-oauth-redirect-params",REDIRECT_STATE_COOKIE_NAME:"okta-oauth-state",REDIRECT_NONCE_COOKIE_NAME:"okta-oauth-nonce",TOKEN_STORAGE_NAME:"okta-token-storage",CACHE_STORAGE_NAME:"okta-cache-storage",SDK_VERSION:"2.0.1"}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=l(n(56)),u=l(n(132)),s=l(n(92));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="style",this.isProcessed=!1;var o=r.sheet,i=r.Renderer,a=r.selector;this.key=t,this.options=r,this.style=n,a&&(this.selectorText=a),this.renderer=o?o.renderer:new i}return i(e,[{key:"prop",value:function(e,t){if(void 0===t)return this.style[e];if(this.style[e]===t)return this;var n=null==(t=this.options.jss.plugins.onChangeValue(t,e,this))||!1===t,r=e in this.style;if(n&&!r)return this;var o=n&&r;if(o?delete this.style[e]:this.style[e]=t,this.renderable)return o?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,t),this;var i=this.options.sheet;return i&&i.attached&&(0,a.default)(!1,'Rule is not linked. Missing sheet option "link: true".'),this}},{key:"applyTo",value:function(e){var t=this.toJSON();for(var n in t)this.renderer.setProperty(e,n,t[n]);return this}},{key:"toJSON",value:function(){var e={};for(var t in this.style){var n=this.style[t];"object"!==(void 0===n?"undefined":o(n))?e[t]=n:Array.isArray(n)&&(e[t]=(0,s.default)(n))}return e}},{key:"toString",value:function(e){var t=this.options.sheet,n=!!t&&t.options.link?r({},e,{allowEmpty:!0}):e;return(0,u.default)(this.selector,this.style,n)}},{key:"selector",set:function(e){if(e!==this.selectorText&&(this.selectorText=e,this.renderable&&!this.renderer.setSelector(this.renderable,e)&&this.renderable)){var t=this.renderer.replaceRule(this.renderable,this);t&&(this.renderable=t)}},get:function(){return this.selectorText}}]),e}();t.default=c},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.cloneElementWithClassName=a,t.cloneChildrenWithClassName=function(e,t){return o.default.Children.map(e,function(e){return o.default.isValidElement(e)&&a(e,t)})},t.isMuiElement=function(e,t){return o.default.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)},t.setRef=function(e,t){"function"==typeof e?e(t):e&&(e.current=t)};var o=r(n(0)),i=r(n(11));function a(e,t){return o.default.cloneElement(e,{className:(0,i.default)(e.props.className,t)})}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.formControlState=_,t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(8)),l=r(n(9)),c=r(n(7)),f=r(n(10)),d=r(n(0)),p=r(n(1)),h=r(n(11)),v=r(n(12)),y=n(58),m=r(n(466)),g=n(147),b=function(e){var t="light"===e.palette.type,n={color:"currentColor",opacity:t?.42:.5,transition:e.transitions.create("opacity",{duration:e.transitions.duration.shorter})},r={opacity:0},o={opacity:t?.42:.5};return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.primary,fontSize:e.typography.pxToRem(16),lineHeight:"1.1875em",cursor:"text",display:"inline-flex",alignItems:"center","&$disabled":{color:e.palette.text.disabled,cursor:"default"}},formControl:{},focused:{},disabled:{},adornedStart:{},adornedEnd:{},error:{},marginDense:{},multiline:{padding:"".concat(6,"px 0 ").concat(7,"px")},fullWidth:{width:"100%"},input:{font:"inherit",color:"currentColor",padding:"".concat(6,"px 0 ").concat(7,"px"),border:0,boxSizing:"content-box",background:"none",margin:0,WebkitTapHighlightColor:"transparent",display:"block",minWidth:0,width:"100%","&::-webkit-input-placeholder":n,"&::-moz-placeholder":n,"&:-ms-input-placeholder":n,"&::-ms-input-placeholder":n,"&:focus":{outline:0},"&:invalid":{boxShadow:"none"},"&::-webkit-search-decoration":{"-webkit-appearance":"none"},"label[data-shrink=false] + $formControl &":{"&::-webkit-input-placeholder":r,"&::-moz-placeholder":r,"&:-ms-input-placeholder":r,"&::-ms-input-placeholder":r,"&:focus::-webkit-input-placeholder":o,"&:focus::-moz-placeholder":o,"&:focus:-ms-input-placeholder":o,"&:focus::-ms-input-placeholder":o},"&$disabled":{opacity:1}},inputMarginDense:{paddingTop:3},inputMultiline:{resize:"none",padding:0},inputType:{height:"1.1875em"},inputTypeSearch:{"-moz-appearance":"textfield","-webkit-appearance":"textfield"},inputAdornedStart:{},inputAdornedEnd:{}}};function _(e){var t=e.props,n=e.states,r=e.context;return n.reduce(function(e,n){return e[n]=t[n],r&&r.muiFormControl&&void 0===t[n]&&(e[n]=r.muiFormControl[n]),e},{})}t.styles=b;var w=function(e){function t(e,n){var r;return(0,u.default)(this,t),(r=(0,s.default)(this,(0,l.default)(t).call(this,e,n))).state={focused:!1},r.handleFocus=function(e){if(_({props:r.props,context:r.context,states:["disabled"]}).disabled)e.stopPropagation();else{r.setState({focused:!0}),r.props.onFocus&&r.props.onFocus(e);var t=r.context.muiFormControl;t&&t.onFocus&&t.onFocus(e)}},r.handleBlur=function(e){r.setState({focused:!1}),r.props.onBlur&&r.props.onBlur(e);var t=r.context.muiFormControl;t&&t.onBlur&&t.onBlur(e)},r.handleChange=function(){var e;(r.isControlled||r.checkDirty(r.inputRef),r.props.onChange)&&(e=r.props).onChange.apply(e,arguments)},r.handleRefInput=function(e){var t;r.inputRef=e,r.props.inputRef?t=r.props.inputRef:r.props.inputProps&&r.props.inputProps.ref&&(t=r.props.inputProps.ref),(0,y.setRef)(t,e)},r.handleClick=function(e){r.inputRef&&e.currentTarget===e.target&&r.inputRef.focus(),r.props.onClick&&r.props.onClick(e)},r.isControlled=null!=e.value,r.isControlled&&r.checkDirty(e),r}return(0,f.default)(t,e),(0,c.default)(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return e.disabled&&t.focused?{focused:!1}:null}}]),(0,c.default)(t,[{key:"getChildContext",value:function(){return{muiFormControl:null}}},{key:"componentDidMount",value:function(){this.isControlled||this.checkDirty(this.inputRef)}},{key:"componentDidUpdate",value:function(e){if(!e.disabled&&this.props.disabled){var t=this.context.muiFormControl;t&&t.onBlur&&t.onBlur()}this.isControlled&&this.checkDirty(this.props)}},{key:"checkDirty",value:function(e){var t=this.context.muiFormControl;if((0,g.isFilled)(e))return t&&t.onFilled&&t.onFilled(),void(this.props.onFilled&&this.props.onFilled());t&&t.onEmpty&&t.onEmpty(),this.props.onEmpty&&this.props.onEmpty()}},{key:"render",value:function(){var e,t,n=this.props,r=n.autoComplete,u=n.autoFocus,s=n.classes,l=n.className,c=n.defaultValue,f=(n.disabled,n.endAdornment),p=(n.error,n.fullWidth),v=n.id,y=n.inputComponent,g=n.inputProps,b=(g=void 0===g?{}:g).className,w=(0,a.default)(g,["className"]),x=(n.inputRef,n.margin,n.multiline),k=n.name,E=(n.onBlur,n.onChange,n.onClick,n.onEmpty,n.onFilled,n.onFocus,n.onKeyDown),O=n.onKeyUp,S=n.placeholder,T=n.readOnly,C=n.renderPrefix,P=n.rows,R=n.rowsMax,j=n.startAdornment,A=n.type,M=n.value,I=(0,a.default)(n,["autoComplete","autoFocus","classes","className","defaultValue","disabled","endAdornment","error","fullWidth","id","inputComponent","inputProps","inputRef","margin","multiline","name","onBlur","onChange","onClick","onEmpty","onFilled","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","renderPrefix","rows","rowsMax","startAdornment","type","value"]),N=this.context.muiFormControl,D=_({props:this.props,context:this.context,states:["disabled","error","margin","required","filled"]}),L=N?N.focused:this.state.focused,U=(0,h.default)(s.root,(e={},(0,i.default)(e,s.disabled,D.disabled),(0,i.default)(e,s.error,D.error),(0,i.default)(e,s.fullWidth,p),(0,i.default)(e,s.focused,L),(0,i.default)(e,s.formControl,N),(0,i.default)(e,s.marginDense,"dense"===D.margin),(0,i.default)(e,s.multiline,x),(0,i.default)(e,s.adornedStart,j),(0,i.default)(e,s.adornedEnd,f),e),l),F=(0,h.default)(s.input,(t={},(0,i.default)(t,s.disabled,D.disabled),(0,i.default)(t,s.inputType,"text"!==A),(0,i.default)(t,s.inputTypeSearch,"search"===A),(0,i.default)(t,s.inputMultiline,x),(0,i.default)(t,s.inputMarginDense,"dense"===D.margin),(0,i.default)(t,s.inputAdornedStart,j),(0,i.default)(t,s.inputAdornedEnd,f),t),b),W=y,z=(0,o.default)({},w,{ref:this.handleRefInput});return"string"!=typeof W?z=(0,o.default)({inputRef:this.handleRefInput,type:A},z,{ref:null}):x?P&&!R?W="textarea":(z=(0,o.default)({rowsMax:R,textareaRef:this.handleRefInput},z,{ref:null}),W=m.default):z=(0,o.default)({type:A},z),d.default.createElement("div",(0,o.default)({className:U,onClick:this.handleClick},I),C?C((0,o.default)({},D,{startAdornment:j,focused:L})):null,j,d.default.createElement(W,(0,o.default)({"aria-invalid":D.error,autoComplete:r,autoFocus:u,className:F,defaultValue:c,disabled:D.disabled,id:v,name:k,onBlur:this.handleBlur,onChange:this.handleChange,onFocus:this.handleFocus,onKeyDown:E,onKeyUp:O,placeholder:S,readOnly:T,required:D.required,rows:P,value:M},z)),f)}}]),t}(d.default.Component);w.propTypes={},w.defaultProps={fullWidth:!1,inputComponent:"input",multiline:!1,type:"text"},w.contextTypes={muiFormControl:p.default.object},w.childContextTypes={muiFormControl:p.default.object};var x=(0,v.default)(b,{name:"MuiInputBase"})(w);t.default=x},function(e,t,n){"use strict";var r=n(104),o=n.n(r),i={},a=0;t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments[2];"string"==typeof t&&(t={path:t});var r=t,u=r.path,s=r.exact,l=void 0!==s&&s,c=r.strict,f=void 0!==c&&c,d=r.sensitive,p=void 0!==d&&d;if(null==u)return n;var h=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=i[n]||(i[n]={});if(r[e])return r[e];var u=[],s={re:o()(e,u,t),keys:u};return a<1e4&&(r[e]=s,a++),s}(u,{end:l,strict:f,sensitive:p}),v=h.re,y=h.keys,m=v.exec(e);if(!m)return null;var g=m[0],b=m.slice(1),_=e===g;return l&&!_?null:{path:u,url:"/"===u&&""===g?"/":g,isExact:_,params:y.reduce(function(e,t,n){return e[t.name]=b[n],e},{})}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(451))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=t.createMatchSelector=t.getAction=t.getLocation=t.routerMiddleware=t.connectRouter=t.ConnectedRouter=t.routerActions=t.goForward=t.goBack=t.go=t.replace=t.push=t.CALL_HISTORY_METHOD=t.LOCATION_CHANGE=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=a(n(241)),i=a(n(247));function a(e){return e&&e.__esModule?e:{default:e}}var u=P("createAll")(P("plainStructure")),s=u.LOCATION_CHANGE,l=u.CALL_HISTORY_METHOD,c=u.push,f=u.replace,d=u.go,p=u.goBack,h=u.goForward,v=u.routerActions,y=u.ConnectedRouter,m=u.connectRouter,g=u.routerMiddleware,b=u.getLocation,_=u.getAction,w=u.createMatchSelector;function x(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.LOCATION_CHANGE=s,t.CALL_HISTORY_METHOD=l,t.push=c,t.replace=f,t.go=d,t.goBack=p,t.goForward=h,t.routerActions=v,t.ConnectedRouter=y,t.connectRouter=m,t.routerMiddleware=g,t.getLocation=b,t.getAction=_,t.createMatchSelector=w;var k=null;function E(){if(null===k){var e=x();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),k=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return k}function O(){var e=x();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function S(){var e=E(),t=O(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=x();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var T="__INTENTIONAL_UNDEFINED__",C={};function P(e){var t=S();if(void 0===t[e])return function(e){switch(e){case"createAll":return o.default;case"plainStructure":return i.default}return}(e);var n=t[e];return n===T?void 0:n}function R(e,t){var n=S();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?T:t,function(){j(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function j(e){var t=S();delete t[e],0==Object.keys(t).length&&delete O()[E]}function A(e){var t=S(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(C,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",P),e("__GetDependency__",P),e("__Rewire__",R),e("__set__",R),e("__reset__",j),e("__ResetDependency__",j),e("__with__",A)}(),t.__get__=P,t.__GetDependency__=P,t.__Rewire__=R,t.__set__=R,t.__ResetDependency__=j,t.__RewireAPI__=C,t.default=C}).call(this,n(22))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(344))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(396))},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=!0},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){"use strict";var r=n(258)(!0);n(163)(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})})},function(e,t,n){e.exports={default:n(274),__esModule:!0}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(85));t.default=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":(0,r.default)(t))&&"function"!=typeof t?e:t}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(277)),o=a(n(281)),i=a(n(85));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":(0,i.default)(t)));e.prototype=(0,o.default)(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(r.default?(0,r.default)(e,t):e.__proto__=t)}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(308));t.default=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),(0,r.default)(e,o.key,o)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}()},function(e,t,n){(function(t,n){
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
!function(t){"use strict";"function"==typeof bootstrap?bootstrap("promise",t):e.exports=t()}(function(){"use strict";var e=!1;try{throw new Error}catch(t){e=!!t.stack}var r,o=k(),i=function(){},a=function(){var e={task:void 0,next:null},r=e,o=!1,i=void 0,u=!1,s=[];function l(){for(var t,n;e.next;)t=(e=e.next).task,e.task=void 0,(n=e.domain)&&(e.domain=void 0,n.enter()),c(t,n);for(;s.length;)c(t=s.pop());o=!1}function c(e,t){try{e()}catch(e){if(u)throw t&&t.exit(),setTimeout(l,0),t&&t.enter(),e;setTimeout(function(){throw e},0)}t&&t.exit()}if(a=function(e){r=r.next={task:e,domain:u&&t.domain,next:null},o||(o=!0,i())},"object"==typeof t&&"[object process]"===t.toString()&&t.nextTick)u=!0,i=function(){t.nextTick(l)};else if("function"==typeof n)i="undefined"!=typeof window?n.bind(window,l):function(){n(l)};else if("undefined"!=typeof MessageChannel){var f=new MessageChannel;f.port1.onmessage=function(){i=d,f.port1.onmessage=l,l()};var d=function(){f.port2.postMessage(0)};i=function(){setTimeout(l,0),d()}}else i=function(){setTimeout(l,0)};return a.runAfter=function(e){s.push(e),o||(o=!0,i())},a}(),u=Function.call;function s(e){return function(){return u.apply(e,arguments)}}var l,c=s(Array.prototype.slice),f=s(Array.prototype.reduce||function(e,t){var n=0,r=this.length;if(1===arguments.length)for(;;){if(n in this){t=this[n++];break}if(++n>=r)throw new TypeError}for(;n<r;n++)n in this&&(t=e(t,this[n],n));return t}),d=s(Array.prototype.indexOf||function(e){for(var t=0;t<this.length;t++)if(this[t]===e)return t;return-1}),p=s(Array.prototype.map||function(e,t){var n=this,r=[];return f(n,function(o,i,a){r.push(e.call(t,i,a,n))},void 0),r}),h=Object.create||function(e){function t(){}return t.prototype=e,new t},v=s(Object.prototype.hasOwnProperty),y=Object.keys||function(e){var t=[];for(var n in e)v(e,n)&&t.push(n);return t},m=s(Object.prototype.toString);l="undefined"!=typeof ReturnValue?ReturnValue:function(e){this.value=e};var g="From previous event:";function b(t,n){if(e&&n.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(g)){for(var r=[],o=n;o;o=o.source)o.stack&&r.unshift(o.stack);r.unshift(t.stack);var i=r.join("\n"+g+"\n");t.stack=function(e){for(var t=e.split("\n"),n=[],r=0;r<t.length;++r){var o=t[r];x(o)||_(o)||!o||n.push(o)}return n.join("\n")}(i)}}function _(e){return-1!==e.indexOf("(module.js:")||-1!==e.indexOf("(node.js:")}function w(e){var t=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(e);if(t)return[t[1],Number(t[2])];var n=/at ([^ ]+):(\d+):(?:\d+)$/.exec(e);if(n)return[n[1],Number(n[2])];var r=/.*@(.+):(\d+)$/.exec(e);return r?[r[1],Number(r[2])]:void 0}function x(e){var t=w(e);if(!t)return!1;var n=t[0],i=t[1];return n===r&&i>=o&&i<=G}function k(){if(e)try{throw new Error}catch(e){var t=e.stack.split("\n"),n=w(t[0].indexOf("@")>0?t[1]:t[2]);if(!n)return;return r=n[0],n[1]}}function E(e){return e instanceof C?e:A(e)?function(e){var t=O();return E.nextTick(function(){try{e.then(t.resolve,t.reject,t.notify)}catch(e){t.reject(e)}}),t.promise}(e):F(e)}function O(){var t,n=[],r=[],o=h(O.prototype),i=h(C.prototype);if(i.promiseDispatch=function(e,o,i){var a=c(arguments);n?(n.push(a),"when"===o&&i[1]&&r.push(i[1])):E.nextTick(function(){t.promiseDispatch.apply(t,a)})},i.valueOf=function(){if(n)return i;var e=R(t);return j(e)&&(t=e),e},i.inspect=function(){return t?t.inspect():{state:"pending"}},E.longStackSupport&&e)try{throw new Error}catch(e){i.stack=e.stack.substring(e.stack.indexOf("\n")+1)}function a(e){t=e,i.source=e,f(n,function(t,n){E.nextTick(function(){e.promiseDispatch.apply(e,n)})},void 0),n=void 0,r=void 0}return o.promise=i,o.resolve=function(e){t||a(E(e))},o.fulfill=function(e){t||a(F(e))},o.reject=function(e){t||a(U(e))},o.notify=function(e){t||f(r,function(t,n){E.nextTick(function(){n(e)})},void 0)},o}function S(e){if("function"!=typeof e)throw new TypeError("resolver must be a function.");var t=O();try{e(t.resolve,t.reject,t.notify)}catch(e){t.reject(e)}return t.promise}function T(e){return S(function(t,n){for(var r=0,o=e.length;r<o;r++)E(e[r]).then(t,n)})}function C(e,t,n){void 0===t&&(t=function(e){return U(new Error("Promise does not support operation: "+e))}),void 0===n&&(n=function(){return{state:"unknown"}});var r=h(C.prototype);if(r.promiseDispatch=function(n,o,i){var a;try{a=e[o]?e[o].apply(r,i):t.call(r,o,i)}catch(e){a=U(e)}n&&n(a)},r.inspect=n,n){var o=n();"rejected"===o.state&&(r.exception=o.reason),r.valueOf=function(){var e=n();return"pending"===e.state||"rejected"===e.state?r:e.value}}return r}function P(e,t,n,r){return E(e).then(t,n,r)}function R(e){if(j(e)){var t=e.inspect();if("fulfilled"===t.state)return t.value}return e}function j(e){return e instanceof C}function A(e){return function(e){return e===Object(e)}(e)&&"function"==typeof e.then}E.resolve=E,E.nextTick=a,E.longStackSupport=!1,"object"==typeof t&&t&&t.env&&t.env.Q_DEBUG&&(E.longStackSupport=!0),E.defer=O,O.prototype.makeNodeResolver=function(){var e=this;return function(t,n){t?e.reject(t):arguments.length>2?e.resolve(c(arguments,1)):e.resolve(n)}},E.Promise=S,E.promise=S,S.race=T,S.all=B,S.reject=U,S.resolve=E,E.passByCopy=function(e){return e},C.prototype.passByCopy=function(){return this},E.join=function(e,t){return E(e).join(t)},C.prototype.join=function(e){return E([this,e]).spread(function(e,t){if(e===t)return e;throw new Error("Can't join: not the same: "+e+" "+t)})},E.race=T,C.prototype.race=function(){return this.then(E.race)},E.makePromise=C,C.prototype.toString=function(){return"[object Promise]"},C.prototype.then=function(e,t,n){var r=this,o=O(),i=!1;return E.nextTick(function(){r.promiseDispatch(function(t){i||(i=!0,o.resolve(function(t){try{return"function"==typeof e?e(t):t}catch(e){return U(e)}}(t)))},"when",[function(e){i||(i=!0,o.resolve(function(e){if("function"==typeof t){b(e,r);try{return t(e)}catch(e){return U(e)}}return U(e)}(e)))}])}),r.promiseDispatch(void 0,"when",[void 0,function(e){var t,r=!1;try{t=function(e){return"function"==typeof n?n(e):e}(e)}catch(e){if(r=!0,!E.onerror)throw e;E.onerror(e)}r||o.notify(t)}]),o.promise},E.tap=function(e,t){return E(e).tap(t)},C.prototype.tap=function(e){return e=E(e),this.then(function(t){return e.fcall(t).thenResolve(t)})},E.when=P,C.prototype.thenResolve=function(e){return this.then(function(){return e})},E.thenResolve=function(e,t){return E(e).thenResolve(t)},C.prototype.thenReject=function(e){return this.then(function(){throw e})},E.thenReject=function(e,t){return E(e).thenReject(t)},E.nearer=R,E.isPromise=j,E.isPromiseAlike=A,E.isPending=function(e){return j(e)&&"pending"===e.inspect().state},C.prototype.isPending=function(){return"pending"===this.inspect().state},E.isFulfilled=function(e){return!j(e)||"fulfilled"===e.inspect().state},C.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},E.isRejected=function(e){return j(e)&&"rejected"===e.inspect().state},C.prototype.isRejected=function(){return"rejected"===this.inspect().state};var M=[],I=[],N=[],D=!0;function L(){M.length=0,I.length=0,D||(D=!0)}function U(e){var n=C({when:function(n){return n&&function(e){if(D){var n=d(I,e);-1!==n&&("object"==typeof t&&"function"==typeof t.emit&&E.nextTick.runAfter(function(){var r=d(N,e);-1!==r&&(t.emit("rejectionHandled",M[n],e),N.splice(r,1))}),I.splice(n,1),M.splice(n,1))}}(this),n?n(e):this}},function(){return this},function(){return{state:"rejected",reason:e}});return function(e,n){D&&("object"==typeof t&&"function"==typeof t.emit&&E.nextTick.runAfter(function(){-1!==d(I,e)&&(t.emit("unhandledRejection",n,e),N.push(e))}),I.push(e),n&&void 0!==n.stack?M.push(n.stack):M.push("(no stack) "+n))}(n,e),n}function F(e){return C({when:function(){return e},get:function(t){return e[t]},set:function(t,n){e[t]=n},delete:function(t){delete e[t]},post:function(t,n){return null===t||void 0===t?e.apply(void 0,n):e[t].apply(e,n)},apply:function(t,n){return e.apply(t,n)},keys:function(){return y(e)}},void 0,function(){return{state:"fulfilled",value:e}})}function W(e,t,n){return E(e).spread(t,n)}function z(e,t,n){return E(e).dispatch(t,n)}function B(e){return P(e,function(e){var t=0,n=O();return f(e,function(r,o,i){var a;j(o)&&"fulfilled"===(a=o.inspect()).state?e[i]=a.value:(++t,P(o,function(r){e[i]=r,0==--t&&n.resolve(e)},n.reject,function(e){n.notify({index:i,value:e})}))},void 0),0===t&&n.resolve(e),n.promise})}function $(e){if(0===e.length)return E.resolve();var t=E.defer(),n=0;return f(e,function(r,o,i){var a=e[i];n++,P(a,function(e){t.resolve(e)},function(){0==--n&&t.reject(new Error("Can't get fulfillment value from any promise, all promises were rejected."))},function(e){t.notify({index:i,value:e})})},void 0),t.promise}function H(e){return P(e,function(e){return e=p(e,E),P(B(p(e,function(e){return P(e,i,i)})),function(){return e})})}E.resetUnhandledRejections=L,E.getUnhandledReasons=function(){return M.slice()},E.stopUnhandledRejectionTracking=function(){L(),D=!1},L(),E.reject=U,E.fulfill=F,E.master=function(e){return C({isDef:function(){}},function(t,n){return z(e,t,n)},function(){return E(e).inspect()})},E.spread=W,C.prototype.spread=function(e,t){return this.all().then(function(t){return e.apply(void 0,t)},t)},E.async=function(e){return function(){function t(e,t){var i;if("undefined"==typeof StopIteration){try{i=n[e](t)}catch(e){return U(e)}return i.done?E(i.value):P(i.value,r,o)}try{i=n[e](t)}catch(e){return function(e){return"[object StopIteration]"===m(e)||e instanceof l}(e)?E(e.value):U(e)}return P(i,r,o)}var n=e.apply(this,arguments),r=t.bind(t,"next"),o=t.bind(t,"throw");return r()}},E.spawn=function(e){E.done(E.async(e)())},E.return=function(e){throw new l(e)},E.promised=function(e){return function(){return W([this,B(arguments)],function(t,n){return e.apply(t,n)})}},E.dispatch=z,C.prototype.dispatch=function(e,t){var n=this,r=O();return E.nextTick(function(){n.promiseDispatch(r.resolve,e,t)}),r.promise},E.get=function(e,t){return E(e).dispatch("get",[t])},C.prototype.get=function(e){return this.dispatch("get",[e])},E.set=function(e,t,n){return E(e).dispatch("set",[t,n])},C.prototype.set=function(e,t){return this.dispatch("set",[e,t])},E.del=E.delete=function(e,t){return E(e).dispatch("delete",[t])},C.prototype.del=C.prototype.delete=function(e){return this.dispatch("delete",[e])},E.mapply=E.post=function(e,t,n){return E(e).dispatch("post",[t,n])},C.prototype.mapply=C.prototype.post=function(e,t){return this.dispatch("post",[e,t])},E.send=E.mcall=E.invoke=function(e,t){return E(e).dispatch("post",[t,c(arguments,2)])},C.prototype.send=C.prototype.mcall=C.prototype.invoke=function(e){return this.dispatch("post",[e,c(arguments,1)])},E.fapply=function(e,t){return E(e).dispatch("apply",[void 0,t])},C.prototype.fapply=function(e){return this.dispatch("apply",[void 0,e])},E.try=E.fcall=function(e){return E(e).dispatch("apply",[void 0,c(arguments,1)])},C.prototype.fcall=function(){return this.dispatch("apply",[void 0,c(arguments)])},E.fbind=function(e){var t=E(e),n=c(arguments,1);return function(){return t.dispatch("apply",[this,n.concat(c(arguments))])}},C.prototype.fbind=function(){var e=this,t=c(arguments);return function(){return e.dispatch("apply",[this,t.concat(c(arguments))])}},E.keys=function(e){return E(e).dispatch("keys",[])},C.prototype.keys=function(){return this.dispatch("keys",[])},E.all=B,C.prototype.all=function(){return B(this)},E.any=$,C.prototype.any=function(){return $(this)},E.allResolved=function(e,t,n){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t+" is deprecated, use "+n+" instead.",new Error("").stack),e.apply(e,arguments)}}(H,"allResolved","allSettled"),C.prototype.allResolved=function(){return H(this)},E.allSettled=function(e){return E(e).allSettled()},C.prototype.allSettled=function(){return this.then(function(e){return B(p(e,function(e){function t(){return e.inspect()}return(e=E(e)).then(t,t)}))})},E.fail=E.catch=function(e,t){return E(e).then(void 0,t)},C.prototype.fail=C.prototype.catch=function(e){return this.then(void 0,e)},E.progress=function(e,t){return E(e).then(void 0,void 0,t)},C.prototype.progress=function(e){return this.then(void 0,void 0,e)},E.fin=E.finally=function(e,t){return E(e).finally(t)},C.prototype.fin=C.prototype.finally=function(e){return e=E(e),this.then(function(t){return e.fcall().then(function(){return t})},function(t){return e.fcall().then(function(){throw t})})},E.done=function(e,t,n,r){return E(e).done(t,n,r)},C.prototype.done=function(e,n,r){var o=function(e){E.nextTick(function(){if(b(e,i),!E.onerror)throw e;E.onerror(e)})},i=e||n||r?this.then(e,n,r):this;"object"==typeof t&&t&&t.domain&&(o=t.domain.bind(o)),i.then(void 0,o)},E.timeout=function(e,t,n){return E(e).timeout(t,n)},C.prototype.timeout=function(e,t){var n=O(),r=setTimeout(function(){t&&"string"!=typeof t||((t=new Error(t||"Timed out after "+e+" ms")).code="ETIMEDOUT"),n.reject(t)},e);return this.then(function(e){clearTimeout(r),n.resolve(e)},function(e){clearTimeout(r),n.reject(e)},n.notify),n.promise},E.delay=function(e,t){return void 0===t&&(t=e,e=void 0),E(e).delay(t)},C.prototype.delay=function(e){return this.then(function(t){var n=O();return setTimeout(function(){n.resolve(t)},e),n.promise})},E.nfapply=function(e,t){return E(e).nfapply(t)},C.prototype.nfapply=function(e){var t=O(),n=c(e);return n.push(t.makeNodeResolver()),this.fapply(n).fail(t.reject),t.promise},E.nfcall=function(e){var t=c(arguments,1);return E(e).nfapply(t)},C.prototype.nfcall=function(){var e=c(arguments),t=O();return e.push(t.makeNodeResolver()),this.fapply(e).fail(t.reject),t.promise},E.nfbind=E.denodeify=function(e){var t=c(arguments,1);return function(){var n=t.concat(c(arguments)),r=O();return n.push(r.makeNodeResolver()),E(e).fapply(n).fail(r.reject),r.promise}},C.prototype.nfbind=C.prototype.denodeify=function(){var e=c(arguments);return e.unshift(this),E.denodeify.apply(void 0,e)},E.nbind=function(e,t){var n=c(arguments,2);return function(){var r=n.concat(c(arguments)),o=O();return r.push(o.makeNodeResolver()),E(function(){return e.apply(t,arguments)}).fapply(r).fail(o.reject),o.promise}},C.prototype.nbind=function(){var e=c(arguments,0);return e.unshift(this),E.nbind.apply(void 0,e)},E.nmapply=E.npost=function(e,t,n){return E(e).npost(t,n)},C.prototype.nmapply=C.prototype.npost=function(e,t){var n=c(t||[]),r=O();return n.push(r.makeNodeResolver()),this.dispatch("post",[e,n]).fail(r.reject),r.promise},E.nsend=E.nmcall=E.ninvoke=function(e,t){var n=c(arguments,2),r=O();return n.push(r.makeNodeResolver()),E(e).dispatch("post",[t,n]).fail(r.reject),r.promise},C.prototype.nsend=C.prototype.nmcall=C.prototype.ninvoke=function(e){var t=c(arguments,1),n=O();return t.push(n.makeNodeResolver()),this.dispatch("post",[e,t]).fail(n.reject),n.promise},E.nodeify=function(e,t){return E(e).nodeify(t)},C.prototype.nodeify=function(e){if(!e)return this;this.then(function(t){E.nextTick(function(){e(null,t)})},function(t){E.nextTick(function(){e(t)})})},E.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var G=k();return E})}).call(this,n(129),n(322).setImmediate)},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(39),o=n(90),i=n(130),a=n(73),u=n(325),s=n(55);function l(e,t){var n=(t=t||{}).url,l=t.method,c=t.args,f=t.saveAuthnState,d=t.accessToken,p=i.getHttpCache();if(t.cacheResponse){var h=p.getStorage()[n];if(h&&Date.now()/1e3<h.expiresAt)return a.resolve(h.response)}var v={Accept:"application/json","Content-Type":"application/json","X-Okta-User-Agent-Extended":e.userAgent};r.extend(v,e.options.headers,t.headers),d&&r.isString(d)&&(v.Authorization="Bearer "+d);var y,m,g={headers:v,data:c||void 0};return new a(e.options.ajaxRequest(l,n,g)).then(function(e){return(m=e.responseText)&&r.isString(m)&&(m=JSON.parse(m)),f&&(m.stateToken||o.deleteCookie(s.STATE_TOKEN_COOKIE_NAME)),m&&m.stateToken&&m.expiresAt&&o.setCookie(s.STATE_TOKEN_COOKIE_NAME,m.stateToken,m.expiresAt),m&&t.cacheResponse&&p.updateStorage(n,{expiresAt:Math.floor(Date.now()/1e3)+s.DEFAULT_CACHE_DURATION,response:m}),m}).fail(function(t){var n=t.responseText||{};if(r.isString(n))try{n=JSON.parse(n)}catch(e){n={errorSummary:"Unknown error"}}throw t.status>=500&&(n.errorSummary="Unknown error"),e.options.transformErrorXHR&&(t=e.options.transformErrorXHR(r.clone(t))),"E0000011"===(y=new u(n,t)).errorCode&&o.deleteCookie(s.STATE_TOKEN_COOKIE_NAME),y})}e.exports={get:function(e,t,n){var o={url:t=r.isAbsoluteUrl(t)?t:e.options.url+t,method:"GET"};return r.extend(o,n),l(e,o)},post:function(e,t,n,o){var i={url:t=r.isAbsoluteUrl(t)?t:e.options.url+t,method:"POST",args:n,saveAuthnState:!0};return r.extend(i,o),l(e,i)},httpRequest:l}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=l(n(93)),a=l(n(191)),u=l(n(57)),s=l(n(350));function l(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.map={},this.raw={},this.index=[],this.update=function(e,t){var r=n.options,o=r.jss.plugins,i=r.sheet;if("string"==typeof e)o.onUpdate(t,n.get(e),i);else for(var a=0;a<n.index.length;a++)o.onUpdate(e,n.index[a],i)},this.options=t,this.classes=t.classes}return o(e,[{key:"add",value:function(e,t,n){var o=this.options,a=o.parent,l=o.sheet,c=o.jss,f=o.Renderer,d=o.generateClassName;!(n=r({classes:this.classes,parent:a,sheet:l,jss:c,Renderer:f,generateClassName:d},n)).selector&&this.classes[e]&&(n.selector="."+(0,s.default)(this.classes[e])),this.raw[e]=t;var p=(0,i.default)(e,t,n),h=void 0;!n.selector&&p instanceof u.default&&(h=d(p,l),p.selector="."+(0,s.default)(h)),this.register(p,h);var v=void 0===n.index?this.index.length:n.index;return this.index.splice(v,0,p),p}},{key:"get",value:function(e){return this.map[e]}},{key:"remove",value:function(e){this.unregister(e),this.index.splice(this.indexOf(e),1)}},{key:"indexOf",value:function(e){return this.index.indexOf(e)}},{key:"process",value:function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)}},{key:"register",value:function(e,t){this.map[e.key]=e,e instanceof u.default&&(this.map[e.selector]=e,t&&(this.classes[e.key]=t))}},{key:"unregister",value:function(e){delete this.map[e.key],e instanceof u.default&&(delete this.map[e.selector],delete this.classes[e.key])}},{key:"link",value:function(e){for(var t=this.options.sheet.renderer.getUnescapedKeysMap(this.index),n=0;n<e.length;n++){var r=e[n],o=this.options.sheet.renderer.getKey(r);t[o]&&(o=t[o]);var i=this.map[o];i&&(0,a.default)(i,r)}}},{key:"toString",value:function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t}}]),e}();t.default=c},function(e,t){function n(e){if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}if("number"==typeof e)return a[e];var n,i=String(e);return(n=r[i.toLowerCase()])?n:(n=o[i.toLowerCase()])||(1===i.length?i.charCodeAt(0):void 0)}n.isEventKey=function(e,t){if(e&&"object"==typeof e){var n=e.which||e.keyCode||e.charCode;if(null===n||void 0===n)return!1;if("string"==typeof t){var i;if(i=r[t.toLowerCase()])return i===n;if(i=o[t.toLowerCase()])return i===n}else if("number"==typeof t)return t===n;return!1}};var r=(t=e.exports=n).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},o=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};
/*!
 * Programatically add the following
 */
for(i=97;i<123;i++)r[String.fromCharCode(i)]=i-32;for(var i=48;i<58;i++)r[i-48]=i;for(i=1;i<13;i++)r["f"+i]=i+111;for(i=0;i<10;i++)r["numpad "+i]=i+96;var a=t.names=t.title={};for(i in r)a[r[i]]=i;for(var u in o)r[u]=o[u]},function(e,t,n){"use strict";n.r(t);var r,o=n(27),i=n(62),a=n(17),u=n.n(a),s=(n(149),{items:[],fetching:!1,error:!1}),l=(n(150),{user:null,fetching:!1,error:!1}),c=Object(o.c)({list:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:s,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"USERS_LIST_RECEIVE":return u()({},e,{items:t.payload,fetching:!1,error:!1});case"USERS_LIST_FETCHING":return u()({},e,{fetching:!0});case"USERS_LIST_FETCHING_ERROR":return u()({},e,{items:[],fetching:!1,error:!0});default:return e}},user:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"USERS_USER_RECEIVE":return u()({},e,{user:t.payload,fetching:!1,error:!1});case"USERS_USER_FETCHING":return u()({},e,{fetching:!0});case"USERS_USER_FETCHING_ERROR":return u()({},e,{user:null,fetching:!1,error:!0});default:return e}}}),f=Object(o.c)({users:c}),d=Object(o.c)({directory:f}),p=n(4),h=n.n(p),v=n(46),y=(r={},h()(r,v.b,{relativePath:"/directory",groups:[{name:"Management",links:[{name:"Users",icon:"people",relativePath:"/users",isDefault:!0,isCurrent:!1},{name:"Organisations",icon:"business",relativePath:"/organisations",isDefault:!1,isCurrent:!1}]}]}),h()(r,v.c,{relativePath:"/member",groups:[{name:"Management",links:[{name:"Members",icon:"people",relativePath:"/members",isDefault:!0,isCurrent:!1}]}]}),r),m={applications:v.d,menus:y,breadCrumb:""},g=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:m,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"CONTEXT_RECIEVE_BREADCRUMB":return u()({},e,{breadCrumb:t.payload});default:return e}},b=(n(106),{authenticated:!1,userInfo:null,idToken:null,accessToken:null}),_=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:b,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"AUTH_RECIEVE_AUTHENTICATION":return u()({},e,{authenticated:!0,userInfo:t.payload.userInfo,idToken:t.payload.idToken,accessToken:t.payload.accessToken});case"AUTH_RECIEVE_AUTHENTICATION_CLEAR":return u()({},b);default:return e}};t.default=function(e){return Object(o.c)({app:d,context:g,auth:_,router:Object(i.connectRouter)(e)})}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=t.LOCATION_CHANGE="@@router/LOCATION_CHANGE",o=(t.onLocationChanged=function(e,t){return{type:g("LOCATION_CHANGE"),payload:{location:e,action:t}}},t.CALL_HISTORY_METHOD="@@router/CALL_HISTORY_METHOD"),i=function(e){return function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return{type:g("CALL_HISTORY_METHOD"),payload:{method:e,args:n}}}},a=t.push=g("updateLocation")("push"),u=t.replace=g("updateLocation")("replace"),s=t.go=g("updateLocation")("go"),l=t.goBack=g("updateLocation")("goBack"),c=t.goForward=g("updateLocation")("goForward");t.routerActions={push:g("push"),replace:g("replace"),go:g("go"),goBack:g("goBack"),goForward:g("goForward")};function f(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}var d=null;function p(){if(null===d){var e=f();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),d=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return d}function h(){var e=f();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function v(){var e=p(),t=h(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=f();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var y="__INTENTIONAL_UNDEFINED__",m={};function g(e){var t=v();if(void 0===t[e])return function(e){switch(e){case"LOCATION_CHANGE":return r;case"CALL_HISTORY_METHOD":return o;case"updateLocation":return i;case"push":return a;case"replace":return u;case"go":return s;case"goBack":return l;case"goForward":return c}return}(e);var n=t[e];return n===y?void 0:n}function b(e,t){var r=v();if("object"!==(void 0===e?"undefined":n(e)))return r[e]=void 0===t?y:t,function(){_(e)};Object.keys(e).forEach(function(t){r[t]=e[t]})}function _(e){var t=v();delete t[e],0==Object.keys(t).length&&delete h()[p]}function w(e){var t=v(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(m,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",g),e("__GetDependency__",g),e("__Rewire__",b),e("__set__",b),e("__reset__",_),e("__ResetDependency__",_),e("__with__",w)}(),t.__get__=g,t.__GetDependency__=g,t.__Rewire__=b,t.__set__=b,t.__ResetDependency__=_,t.__RewireAPI__=m,t.default=m}).call(this,n(22))},function(e,t,n){n(251);for(var r=n(25),o=n(44),i=n(49),a=n(26)("toStringTag"),u="CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","),s=0;s<u.length;s++){var l=u[s],c=r[l],f=c&&c.prototype;f&&!f[a]&&o(f,a,l),i[l]=i.Array}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){var r=n(166),o=n(120);e.exports=Object.keys||function(e){return r(e,o)}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(34).f,o=n(45),i=n(26)("toStringTag");e.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})}},function(e,t,n){var r=n(112);e.exports=function(e){return Object(r(e))}},function(e,t,n){"use strict";t.__esModule=!0;var r=a(n(262)),o=a(n(264)),i="function"==typeof o.default&&"symbol"==typeof r.default?function(e){return typeof e}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":typeof e};function a(e){return e&&e.__esModule?e:{default:e}}t.default="function"==typeof o.default&&"symbol"===i(r.default)?function(e){return void 0===e?"undefined":i(e)}:function(e){return e&&"function"==typeof o.default&&e.constructor===o.default&&e!==o.default.prototype?"symbol":void 0===e?"undefined":i(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(289));t.default=r.default||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}},function(e,t,n){e.exports=n(293)},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(127));t.default=function(e){return function(){var t=e.apply(this,arguments);return new r.default(function(e,n){return function o(i,a){try{var u=t[i](a),s=u.value}catch(e){return void n(e)}if(!u.done)return r.default.resolve(s).then(function(e){o("next",e)},function(e){o("throw",e)});e(s)}("next")})}}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(324);function o(e){return r.get(e)}e.exports={setCookie:function(e,t,n){var i={path:"/"};return Date.parse(n)&&(i.expires=new Date(n)),r.set(e,t,i),o(e)},getCookie:o,deleteCookie:function(e){return r.remove(e,{path:"/"})}}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var o=0;o<e.length&&"!important"!==e[o];o++)n&&(n+=", "),n+=r(e[o]," ");else n=r(e,", ");t||"!important"!==e[e.length-1]||(n+=" !important");return n};var r=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"unnamed",t=arguments[1],n=arguments[2],a=n.jss,u=(0,i.default)(t),s=a.plugins.onCreateRule(e,u,n);if(s)return s;"@"===e[0]&&(0,r.default)(!1,"[JSS] Unknown at-rule %s",e);return new o.default(e,u,n)};var r=a(n(56)),o=a(n(57)),i=a(n(348));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";n.r(t),n.d(t,"isBrowser",function(){return o});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o="object"===("undefined"==typeof window?"undefined":r(window))&&"object"===("undefined"==typeof document?"undefined":r(document))&&9===document.nodeType;t.default=o},function(e,t,n){"use strict";n.r(t);var r=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===o}(e)}(e)};var o="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function i(e,t){return!1!==t.clone&&t.isMergeableObject(e)?u(function(e){return Array.isArray(e)?[]:{}}(e),e,t):e}function a(e,t,n){return e.concat(t).map(function(e){return i(e,n)})}function u(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||a,n.isMergeableObject=n.isMergeableObject||r;var o=Array.isArray(t);return o===Array.isArray(e)?o?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach(function(t){r[t]=i(e[t],n)}),Object.keys(t).forEach(function(o){n.isMergeableObject(t[o])&&e[o]?r[o]=u(e[o],t[o],n):r[o]=i(t[o],n)}),r}(e,t,n):i(t,n)}u.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce(function(e,n){return u(e,n,t)},{})};var s=u;t.default=s},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.isNumber=t.isString=t.formatMs=t.duration=t.easing=void 0;var o=r(n(5)),i=(r(n(13)),{easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"});t.easing=i;var a={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};t.duration=a;var u=function(e){return"".concat(Math.round(e),"ms")};t.formatMs=u;t.isString=function(e){return"string"==typeof e};t.isNumber=function(e){return!isNaN(parseFloat(e))};var s={easing:i,duration:a,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,r=void 0===n?a.standard:n,s=t.easing,l=void 0===s?i.easeInOut:s,c=t.delay,f=void 0===c?0:c;(0,o.default)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map(function(e){return"".concat(e," ").concat("string"==typeof r?r:u(r)," ").concat(l," ").concat("string"==typeof f?f:u(f))}).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}};t.default=s},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(40));var i=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window,n=(0,o.default)(e);return n.defaultView||n.parentView||t};t.default=i},function(e,t,n){"use strict";t.__esModule=!0,t.default=t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(1)),o=u(n(0)),i=u(n(23)),a=n(199);n(407);function u(e){return e&&e.__esModule?e:{default:e}}var s="unmounted";t.UNMOUNTED=s;var l="exited";t.EXITED=l;var c="entering";t.ENTERING=c;var f="entered";t.ENTERED=f;t.EXITING="exiting";var d=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,i=n.transitionGroup,a=i&&!i.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=l,r.appearStatus=c):o=f:o=t.unmountOnExit||t.mountOnEnter?s:l,r.state={status:o},r.nextCallback=null,r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.getChildContext=function(){return{transitionGroup:null}},t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===s?{status:l}:null},n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==c&&n!==f&&(t=c):n!==c&&n!==f||(t="exiting")}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=r.appear),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t){this.cancelNextCallback();var n=i.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===l&&this.setState({status:s})},n.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,i=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,i.enter,function(){n.safeSetState({status:f},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:f},function(){n.props.onEntered(e)})},n.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:"exiting"},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:l},function(){t.props.onExited(e)})})})):this.safeSetState({status:l},function(){t.props.onExited(e)})},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===s)return null;var t=this.props,n=t.children,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["children"]);if(delete r.in,delete r.mountOnEnter,delete r.unmountOnExit,delete r.appear,delete r.enter,delete r.exit,delete r.timeout,delete r.addEndListener,delete r.onEnter,delete r.onEntering,delete r.onEntered,delete r.onExit,delete r.onExiting,delete r.onExited,"function"==typeof n)return n(e,r);var i=o.default.Children.only(n);return o.default.cloneElement(i,r)},t}(o.default.Component);function p(){}d.contextTypes={transitionGroup:r.object},d.childContextTypes={transitionGroup:function(){}},d.propTypes={},d.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:p,onEntering:p,onEntered:p,onExit:p,onExiting:p,onExited:p},d.UNMOUNTED=0,d.EXITED=1,d.ENTERING=2,d.ENTERED=3,d.EXITING=4;var h=(0,a.polyfill)(d);t.default=h},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o,i=r(n(3)),a=r(n(5)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(0)),p=(r(n(1)),r(n(184))),h=n(35),v=r(n(135)),y=r(n(137));h.ponyfillGlobal.__MUI_STYLES__||(h.ponyfillGlobal.__MUI_STYLES__={}),h.ponyfillGlobal.__MUI_STYLES__.withTheme||(h.ponyfillGlobal.__MUI_STYLES__.withTheme=function(){return function(e){var t=function(t){function n(e,t){var r;return(0,u.default)(this,n),(r=(0,l.default)(this,(0,c.default)(n).call(this))).state={theme:y.default.initial(t)||o||(o=(0,v.default)())},r}return(0,f.default)(n,t),(0,s.default)(n,[{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=y.default.subscribe(this.context,function(t){e.setState({theme:t})})}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&y.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"render",value:function(){var t=this.props,n=t.innerRef,r=(0,a.default)(t,["innerRef"]);return d.default.createElement(e,(0,i.default)({theme:this.state.theme,ref:n},r))}}]),n}(d.default.Component);return t.propTypes={},t.contextTypes=y.default.contextTypes,(0,p.default)(t,e),t}});var m=h.ponyfillGlobal.__MUI_STYLES__.withTheme;t.default=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)).default.createContext();t.default=o},function(e,t,n){"use strict";var r=n(13),o=n.n(r),i=n(16),a=n.n(i),u=n(0),s=n.n(u),l=n(1),c=n.n(l),f=n(60),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function p(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){return 0===s.a.Children.count(e)},v=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=p(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},p(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,u=e.exact,s=e.sensitive;if(n)return n;a()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,c=(r||l.location).pathname;return Object(f.a)(c,{path:o,strict:i,exact:u,sensitive:s},l.match)},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!h(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!h(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,a=i.history,u=i.route,l=i.staticContext,c={match:e,location:this.props.location||u.location,history:a,staticContext:l};return r?e?s.a.createElement(r,c):null:o?e?o(c):null:"function"==typeof n?n(c):n&&!h(n)?s.a.Children.only(n):null},t}(s.a.Component);v.propTypes={computedMatch:c.a.object,path:c.a.string,exact:c.a.bool,strict:c.a.bool,sensitive:c.a.bool,component:c.a.func,render:c.a.func,children:c.a.oneOfType([c.a.func,c.a.node]),location:c.a.object},v.contextTypes={router:c.a.shape({history:c.a.object.isRequired,route:c.a.object.isRequired,staticContext:c.a.object})},v.childContextTypes={router:c.a.object.isRequired},t.a=v},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),a=n.n(i),u=n(214),s=n.n(u),l=n(101),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.a=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return o.a.createElement(l.a,{children:function(t){return o.a.createElement(e,c({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:a.a.func},s()(t,e)}},function(e,t,n){var r=n(341),o=n(342),i=n(343);e.exports=function(e){return r(e)||o(e)||i()}},function(e,t,n){var r=n(243);e.exports=h,e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],y=n[3],m=n[4],g=n[5],b=n[6],_=n[7];u&&(r.push(u),u="");var w=null!=v&&null!=h&&h!==v,x="+"===b||"*"===b,k="?"===b||"*"===b,E=n[2]||s,O=m||g;r.push({name:y||i++,prefix:v||"",delimiter:E,optional:k,repeat:x,partial:w,asterisk:!!_,pattern:O?c(O):_?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){return encodeURI(e).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",s=n||{},l=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var f=e[c];if("string"!=typeof f){var d,p=s[f.name];if(null==p){if(f.optional){f.partial&&(i+=f.prefix);continue}throw new TypeError('Expected "'+f.name+'" to be defined')}if(r(p)){if(!f.repeat)throw new TypeError('Expected "'+f.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(f.optional)continue;throw new TypeError('Expected "'+f.name+'" to not be empty')}for(var h=0;h<p.length;h++){if(d=l(p[h]),!t[c].test(d))throw new TypeError('Expected all "'+f.name+'" to match "'+f.pattern+'", but received `'+JSON.stringify(d)+"`");i+=(0===h?f.prefix:f.delimiter)+d}}else{if(d=f.asterisk?u(p):l(p),!t[c].test(d))throw new TypeError('Expected "'+f.name+'" to match "'+f.pattern+'", but received "'+d+'"');i+=f.prefix+d}}else i+=f}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function d(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)a+=l(s);else{var c=l(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+c+p+")*"),a+=p=s.optional?s.partial?c+"("+p+")?":"(?:"+c+"("+p+"))?":c+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return o||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+h+"|$)",f(new RegExp("^"+a,d(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(h(e[o],t,n).source);return f(new RegExp("(?:"+r.join("|")+")",d(n)),t)}(e,t,n):function(e,t,n){return p(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(33),o="".concat(r.a.baseApi,"/api/directory"),i="".concat(o,"/users")},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return o});var r=function(e,t,n){return{type:"AUTH_RECIEVE_AUTHENTICATION",payload:{userInfo:e,idToken:t,accessToken:n}}},o=function(){return{type:"AUTH_RECIEVE_AUTHENTICATION_CLEAR"}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(397))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(398))},function(e,t){function n(e,t,n,r,o,i,a){try{var u=e[i](a),s=u.value}catch(e){return void n(e)}u.done?t(s):Promise.resolve(s).then(r,o)}e.exports=function(e){return function(){var t=this,r=arguments;return new Promise(function(o,i){var a=e.apply(t,r);function u(e){n(a,o,i,u,s,"next",e)}function s(e){n(a,o,i,u,s,"throw",e)}u(void 0)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default="@@redux-api-middleware/RSAA"},function(e,t,n){"use strict";t.__esModule=!0;var r=i(n(249)),o=i(n(169));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return function(e,t){if(Array.isArray(e))return e;if((0,r.default)(Object(e)))return function(e,t){var n=[],r=!0,i=!1,a=void 0;try{for(var u,s=(0,o.default)(e);!(r=(u=s.next()).done)&&(n.push(u.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(i)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}()},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(37),o=n(25).document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},function(e,t,n){var r=n(37);e.exports=function(e,t){if(!r(e))return e;var n,o;if(t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;if("function"==typeof(n=e.valueOf)&&!r(o=n.call(e)))return o;if(!t&&"function"==typeof(n=e.toString)&&!r(o=n.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(32),o=n(255),i=n(120),a=n(118)("IE_PROTO"),u=function(){},s=function(){var e,t=n(113)("iframe"),r=i.length;for(t.style.display="none",n(167).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),s=e.F;r--;)delete s.prototype[i[r]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(u.prototype=r(e),n=new u,u.prototype=null,n[a]=e):n=s(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(117),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(119)("keys"),o=n(82);e.exports=function(e){return r[e]||(r[e]=o(e))}},function(e,t,n){var r=n(19),o=n(25),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(66)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(65),o=n(26)("toStringTag"),i="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(121),o=n(26)("iterator"),i=n(49);e.exports=n(19).getIteratorMethod=function(e){if(void 0!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){t.f=n(26)},function(e,t,n){var r=n(25),o=n(19),i=n(66),a=n(123),u=n(34).f;e.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||u(t,e,{value:a.f(e)})}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ApiError=t.RequestError=t.InternalError=t.InvalidRSAA=void 0;var r=u(n(69)),o=u(n(53)),i=u(n(70)),a=u(n(71));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){(0,o.default)(this,t);var n=(0,i.default)(this,(t.__proto__||(0,r.default)(t)).call(this));return n.name="InvalidRSAA",n.message="Invalid RSAA",n.validationErrors=e,n}return(0,a.default)(t,e),t}(Error),l=function(e){function t(e){(0,o.default)(this,t);var n=(0,i.default)(this,(t.__proto__||(0,r.default)(t)).call(this));return n.name="InternalError",n.message=e,n}return(0,a.default)(t,e),t}(Error),c=function(e){function t(e){(0,o.default)(this,t);var n=(0,i.default)(this,(t.__proto__||(0,r.default)(t)).call(this));return n.name="RequestError",n.message=e,n}return(0,a.default)(t,e),t}(Error),f=function(e){function t(e,n,a){(0,o.default)(this,t);var u=(0,i.default)(this,(t.__proto__||(0,r.default)(t)).call(this));return u.name="ApiError",u.status=e,u.statusText=n,u.response=a,u.message=e+" - "+n,u}return(0,a.default)(t,e),t}(Error);t.InvalidRSAA=s,t.InternalError=l,t.RequestError=c,t.ApiError=f},function(e,t,n){e.exports={default:n(295),__esModule:!0}},function(e,t,n){"use strict";var r=n(80);e.exports.f=function(e){return new function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=r(t),this.reject=r(n)}(e)}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var s,l=[],c=!1,f=-1;function d(){c&&s&&(c=!1,s.length?l=s.concat(l):f=-1,l.length&&p())}function p(){if(!c){var e=u(d);c=!0;for(var t=l.length;t;){for(s=l,l=[];++f<t;)s&&s[f].run();f=-1,t=l.length}s=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||c||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(90),o=n(183),i=n(55),a={browserHasLocalStorage:function(){try{return!!a.getLocalStorage()}catch(e){return!1}},browserHasSessionStorage:function(){try{return!!a.getSessionStorage()}catch(e){return!1}},getHttpCache:function(){return a.browserHasLocalStorage()?o(a.getLocalStorage(),i.CACHE_STORAGE_NAME):a.browserHasSessionStorage()?o(a.getSessionStorage(),i.CACHE_STORAGE_NAME):o(a.getCookieStorage(),i.CACHE_STORAGE_NAME)},getLocalStorage:function(){return localStorage},getSessionStorage:function(){return sessionStorage},getCookieStorage:function(){return{getItem:r.getCookie,setItem:function(e,t){r.setCookie(e,t,"2038-01-19T03:14:07.000Z")}}}};e.exports=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(87)),o=a(n(0)),i=a(n(336));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=function(t){return o.default.createElement(i.default,{render:function(n){return o.default.createElement(e,(0,r.default)({},t,n))}})};return t.displayName="withAuth("+(e.displayName||e.name)+")",t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i="";if(!t)return i;var a=n.indent,u=void 0===a?0:a,s=t.fallbacks;if(u++,s)if(Array.isArray(s))for(var l=0;l<s.length;l++){var c=s[l];for(var f in c){var d=c[f];null!=d&&(i+="\n"+o(f+": "+(0,r.default)(d)+";",u))}}else for(var p in s){var h=s[p];null!=h&&(i+="\n"+o(p+": "+(0,r.default)(h)+";",u))}for(var v in t){var y=t[v];null!=y&&"fallbacks"!==v&&(i+="\n"+o(v+": "+(0,r.default)(y)+";",u))}return i||n.allowEmpty?i=o(e+" {"+i+"\n",--u)+o("}",u):i};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(92));function o(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(189));t.default=new r.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="",o="";if(function(e){return e&&e.__esModule?e:{default:e}}(n(94)).default){var i={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},a=document.createElement("p").style;for(var u in i)if(u+"Transform"in a){r=u,o=i[u];break}}t.default={js:r,css:o}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(95)),u=r(n(379)),s=(r(n(13)),r(n(196))),l=r(n(381)),c=r(n(382)),f=r(n(388)),d=r(n(389)),p=r(n(390)),h=r(n(391)),v=r(n(96)),y=r(n(392));var m=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,r=e.mixins,m=void 0===r?{}:r,g=e.palette,b=void 0===g?{}:g,_=e.shadows,w=e.spacing,x=void 0===w?{}:w,k=e.typography,E=void 0===k?{}:k,O=(0,i.default)(e,["breakpoints","mixins","palette","shadows","spacing","typography"]),S=(0,c.default)(b),T=(0,s.default)(n),C=(0,o.default)({},h.default,x);return(0,o.default)({breakpoints:T,direction:"ltr",mixins:(0,l.default)(T,C,m),overrides:{},palette:S,props:{},shadows:_||d.default,typography:(0,f.default)(S,E)},(0,a.default)({shape:p.default,spacing:C,transitions:v.default,zIndex:y.default},O,{isMergeableObject:u.default}))};t.default=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.convertHexToRGB=i,t.rgbToHex=function(e){if(0===e.indexOf("#"))return e;var t=a(e).values;return t=t.map(function(e){return function(e){var t=e.toString(16);return 1===t.length?"0".concat(t):t}(e)}),"#".concat(t.join(""))},t.decomposeColor=a,t.recomposeColor=u,t.getContrastRatio=function(e,t){var n=s(e),r=s(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)},t.getLuminance=s,t.emphasize=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.15;return s(e)>.5?l(e,t):c(e,t)},t.fade=function(e,t){if(!e)return e;e=a(e),t=o(t),("rgb"===e.type||"hsl"===e.type)&&(e.type+="a");return e.values[3]=t,u(e)},t.darken=l,t.lighten=c;r(n(13));function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e<t?t:e>n?n:e}function i(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length/3,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map(function(e){return e+e})),n?"rgb(".concat(n.map(function(e){return parseInt(e,16)}).join(", "),")"):""}function a(e){if("#"===e.charAt(0))return a(i(e));var t=e.indexOf("("),n=e.substring(0,t),r=e.substring(t+1,e.length-1).split(",");return{type:n,values:r=r.map(function(e){return parseFloat(e)})}}function u(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")&&(n=n.map(function(e,t){return t<3?parseInt(e,10):e})),-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(e.type,"(").concat(n.join(", "),")")}function s(e){var t=a(e);if(-1!==t.type.indexOf("rgb")){var n=t.values.map(function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)});return Number((.2126*n[0]+.7152*n[1]+.0722*n[2]).toFixed(3))}return t.values[2]/100}function l(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function c(e,t){if(!e)return e;if(e=a(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return u(e)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.CHANNEL=void 0;var o=r(n(4)),i="__THEMING__";t.CHANNEL=i;var a={contextTypes:(0,o.default)({},i,function(){}),initial:function(e){return e[i]?e[i].getState():null},subscribe:function(e,t){return e[i]?e[i].subscribe(t):null},unsubscribe:function(e,t){e[i]&&e[i].unsubscribe(t)}};t.default=a},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(395))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t){return function(){return null}};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTransitionProps=function(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode],delay:o.transitionDelay}},t.reflow=void 0;t.reflow=function(e){return e.scrollTop}},function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(435)),i=r(n(436)),a=r(n(437)),u=r(n(439)),s=r(n(440)),l=r(n(206)),c=r(n(442)),f=r(n(444)),d=r(n(0));r(n(1)),r(n(13));var p=function(){var e=null;return function(){if(null!==e)return e;var t=!1;try{window.addEventListener("test",null,function(e,t,n){return Object.defineProperty(e,t,n)}({},"passive",{get:function(){t=!0}}))}catch(e){}return e=t,t}()}(),h={capture:!1,passive:!1};function v(e){return f({},h,e)}function y(e,t,n){var r=[e,t];return r.push(p?n:n.capture),r}function m(e,t,n,r){e.addEventListener.apply(e,y(t,n,r))}function g(e,t,n,r){e.removeEventListener.apply(e,y(t,n,r))}var b=function(e){function t(){return o(this,t),a(this,u(t).apply(this,arguments))}return s(t,e),i(t,[{key:"componentDidMount",value:function(){this.applyListeners(m)}},{key:"componentDidUpdate",value:function(e){this.applyListeners(g,e),this.applyListeners(m)}},{key:"componentWillUnmount",value:function(){this.applyListeners(g)}},{key:"applyListeners",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.props,n=t.target;if(n){var r=n;"string"==typeof n&&(r=window[n]),function(e,t){e.children,e.target;var n=c(e,["children","target"]);Object.keys(n).forEach(function(e){if("on"===e.substring(0,2)){var r=n[e],o=l(r),i="object"===o;if(i||"function"===o){var a="capture"===e.substr(-7).toLowerCase(),u=e.substring(2).toLowerCase();u=a?u.substring(0,u.length-7):u,i?t(u,r.handler,r.options):t(u,r,v({capture:a}))}}})}(t,e.bind(null,r))}}},{key:"render",value:function(){return this.props.children||null}}]),t}(d.PureComponent);b.propTypes={},t.withOptions=function(e,t){return{handler:e,options:v(t)}},t.default=b},function(e,t){function n(e,t,n){var r,o,i,a,u;function s(){var l=Date.now()-a;l<t&&l>=0?r=setTimeout(s,t-l):(r=null,n||(u=e.apply(i,o),i=o=null))}null==t&&(t=100);var l=function(){i=this,o=arguments,a=Date.now();var l=n&&!r;return r||(r=setTimeout(s,t)),l&&(u=e.apply(i,o),i=o=null),u};return l.clear=function(){r&&(clearTimeout(r),r=null)},l.flush=function(){r&&(u=e.apply(i,o),i=o=null,clearTimeout(r),r=null)},l}n.debounce=n,e.exports=n},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)).default.createContext({});t.default=o},function(e,t,n){(e.exports=n(456)(!1)).push([e.i,"html, body, #root, #root > div {\n    height: 100%;\n}",""])},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(465))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(59))},function(e,t,n){"use strict";function r(e){return null!=e&&!(Array.isArray(e)&&0===e.length)}Object.defineProperty(t,"__esModule",{value:!0}),t.hasValue=r,t.isFilled=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return e&&(r(e.value)&&""!==e.value||t&&r(e.defaultValue)&&""!==e.defaultValue)},t.isAdornedStart=function(e){return e.startAdornment}},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(160),a=n(101),u=n(30),s=n(230),l=n.n(s),c=n(36),f=n(33),d=n(47),p=n.n(d),h=n(109),v=n.n(h),y=n(6),m=n.n(y),g=n(7),b=n.n(g),_=n(8),w=n.n(_),x=n(9),k=n.n(x),E=n(10),O=n.n(E),S=n(18),T=n.n(S),C=n(4),P=n.n(C),R=n(1),j=n.n(R),A=n(20),M=n(14),I=n.n(M),N=n(15),D=n(102),L=D.a,U=n(107),F=n.n(U),W=n(63),z=n.n(W),B=n(64),$=n.n(B),H=n(108),G=n.n(H),q=n(103),V=n.n(q),Y=n(17),K=n.n(Y);function X(e,t){return e===t}var J=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];var i=0,a=r.pop(),u=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every(function(e){return"function"==typeof e})){var n=t.map(function(e){return typeof e}).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}(r),s=e.apply(void 0,[function(){return i++,a.apply(null,arguments)}].concat(n)),l=e(function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return s.apply(null,e)});return l.resultFunc=a,l.dependencies=u,l.recomputations=function(){return i},l.resetRecomputations=function(){return i=0},l}}(function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:X,n=null,r=null;return function(){return function(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}});var Q=n(46),Z=function(e){return e.router?e.router.location.pathname:""},ee=J(Z,function(e){return e.context.applications},function(e,t){return t.map(function(t){return K()({},t,{isCurrent:oe(t,e)})})}),te=J(ee,function(e){return e.filter(function(e){return e.isCurrent})[0]}),ne=J(Z,te,function(e){return e.context.menus},function(e,t,n){var r=n[t.id];return K()({},r,{groups:r.groups.map(function(t){return K()({},t,{links:t.links.map(function(t){return K()({},t,{isCurrent:ie(r,t,e)})})})})})}),re=J(ne,function(e){return e.groups.reduce(function(e,t){return e.push.apply(e,V()(t.links)),e},[]).filter(function(e){return e.isCurrent})[0]}),oe=function(e,t){return t&&"/"!==t?-1!==t.indexOf(e.relativePath):e.id===Q.a},ie=function(e,t,n){return n&&"/"!==n&&n!==e.relativePath?0===n.indexOf("".concat(e.relativePath).concat(t.relativePath)):!!t.isDefault};function ae(){var e=I()(["\n    padding-left: 5px;\n"]);return ae=function(){return e},e}function ue(){var e=I()(["\n            background-color: ",";\n        "]);return ue=function(){return e},e}function se(){var e=I()(["\n    cursor: pointer;\n    ",";\n"]);return se=function(){return e},e}function le(){var e=I()(["\n    font-weight: 800;\n"]);return le=function(){return e},e}function ce(){var e=I()(["\n    font-weight: 100;\n"]);return ce=function(){return e},e}function fe(){var e=I()(["\n    justify-content: left;\n    width: 215px;\n    font-size: 1.6rem;\n"]);return fe=function(){return e},e}function de(){var e=I()(["\n    display: flex;\n    min-height: 0px;\n    width: 145px;\n    align-items: center;\n    justify-content: center;\n    font-family: ",";\n    font-weight: ",";\n    text-transform: uppercase;\n"]);return de=function(){return e},e}function pe(){var e=I()(["\n    align-items: normal !important;\n"]);return pe=function(){return e},e}function he(){var e=I()(["\n    z-index: "," !important;\n    border-bottom: 4px solid ",";\n"]);return he=function(){return e},e}var ve=Object(N.b)(z.a)(he(),function(e){return e.theme.zIndex.drawer+1},function(e){return e.application.color}),ye=Object(N.b)($.a)(pe()),me=N.b.div(de(),function(e){return e.theme.typography.fontFamily},function(e){return e.theme.typography.fontWeightMedium}),ge=Object(N.b)(me)(fe()),be=N.b.span(ce()),_e=N.b.span(le()),we=Object(N.b)(me)(se(),function(e){return e.application.isCurrent&&Object(N.a)(ue(),e.application.color)}),xe=N.b.span(ae()),ke=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"navigate",value:function(e){this.props.history.push(e)}},{key:"render",value:function(){var e=this;return o.a.createElement(ve,{position:"fixed",application:this.props.currentApplication,theme:this.props.theme},o.a.createElement(ye,null,o.a.createElement(ge,{theme:this.props.theme},o.a.createElement(_e,null,"One"),o.a.createElement(be,null,"Advisor")),this.props.applications.map(function(t){return o.a.createElement(we,{key:t.id,application:t,theme:e.props.theme,onClick:function(){return e.navigate(t.relativePath)}},o.a.createElement(F.a,null,t.icon),o.a.createElement(xe,null,t.name))}),o.a.createElement(G.a,{color:"inherit",onClick:function(){return e.props.onLogout()}},"Signout")))}}]),t}(r.Component),Ee=Object(A.connect)(function(e){return{applications:ee(e),currentApplication:te(e)||{}}})(Object(c.withTheme)()(L(ke))),Oe=n(3),Se=n.n(Oe),Te=n(16),Ce=n.n(Te),Pe=n(24),Re=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function je(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var Ae=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},Me=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=je(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!Ae(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},je(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);Ce()(this.context.router,"You should not use <Link> outside a <Router>"),Ce()(void 0!==t,'You must specify the "to" property');var i=this.context.router.history,a="string"==typeof t?Object(Pe.b)(t,null,null,i.location):t,u=i.createHref(a);return o.a.createElement("a",Re({},r,{onClick:this.handleClick,href:u,ref:n}))},t}(o.a.Component);Me.propTypes={onClick:j.a.func,target:j.a.string,replace:j.a.bool,to:j.a.oneOfType([j.a.string,j.a.object]).isRequired,innerRef:j.a.oneOfType([j.a.string,j.a.func])},Me.defaultProps={replace:!1},Me.contextTypes={router:j.a.shape({history:j.a.shape({push:j.a.func.isRequired,replace:j.a.func.isRequired,createHref:j.a.func.isRequired}).isRequired}).isRequired};var Ie=Me,Ne=n(220),De=n.n(Ne),Le=n(151),Ue=n.n(Le),Fe=n(222),We=n.n(Fe),ze=n(223),Be=n.n(ze),$e=n(224),He=n.n($e),Ge=n(221),qe=n.n(Ge);function Ve(){var e=I()(["\n            border-left: 6px solid transparent;\n        "]);return Ve=function(){return e},e}function Ye(){var e=I()(["\n            border-left: 6px solid ",";\n        "]);return Ye=function(){return e},e}function Ke(){var e=I()(["\n    "," ",";\n"]);return Ke=function(){return e},e}function Xe(){var e=I()(["\n    margin-top:5px !important;\n"]);return Xe=function(){return e},e}function Je(){var e=I()(["\n    width: ","px !important;\n    flex-shrink: 0 !important;\n\n    & > div {\n        width: ","px !important;\n    }\n"]);return Je=function(){return e},e}var Qe=f.a.ui.sideBarWidth,Ze=Object(N.b)(De.a)(Je(),Qe,Qe),et=Object(N.b)(Ue.a)(Xe()),tt=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){var e=this;return o.a.createElement(Ze,{variant:"permanent"},o.a.createElement(z.a,{position:"static"},o.a.createElement($.a,null)),this.props.menu.groups.map(function(t){return o.a.createElement(et,{key:t.name,subheader:o.a.createElement(qe.a,null,t.name)},t.links.map(function(t){return o.a.createElement(rt,{key:t.relativePath,link:t,menu:e.props.menu,application:e.props.application})}))}))}}]),t}(r.Component),nt=N.b.li(Ke(),function(e){return e.link.isCurrent&&Object(N.a)(Ye(),function(e){return e.application.color})},function(e){return!e.link.isCurrent&&Object(N.a)(Ve())}),rt=function(e){function t(){var e,n;m()(this,t);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return n=w()(this,(e=k()(t)).call.apply(e,[this].concat(i))),P()(T()(T()(n)),"renderLink",function(e){return o.a.createElement(Ie,Se()({to:"".concat(n.props.menu.relativePath).concat(n.props.link.relativePath)},e))}),n}return O()(t,e),b()(t,[{key:"render",value:function(){var e=this.props,t=e.link,n=e.application;return o.a.createElement(nt,{link:t,application:n},o.a.createElement(We.a,{button:!0,component:this.renderLink,selected:t.isCurrent},o.a.createElement(Be.a,null,o.a.createElement(F.a,null,t.icon)),o.a.createElement(He.a,{primary:t.name})))}}]),t}(o.a.Component),ot=Object(A.connect)(function(e){return{menu:ne(e),application:te(e)}})(tt),it=n(31),at=n.n(it);function ut(){var e=I()(["\n    font-weight: 100;\n    font-size: 0.97rem;\n"]);return ut=function(){return e},e}function st(){var e=I()(["\n    font-size: 1.2rem;\n    padding-left: 15px;\n    font-weight: 500;\n"]);return st=function(){return e},e}function lt(){var e=I()(["\n    color: #ffffff !important;\n    background-color: ",";\n    height: 53px;\n    padding-top: 5px;\n"]);return lt=function(){return e},e}var ct=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){return o.a.createElement(ft,{container:!0,direction:"column",justify:"center",alignItems:"stretch",application:this.props.application},o.a.createElement(dt,{item:!0},this.props.link.name,this.props.breadCrumb&&o.a.createElement(pt,null," / ",this.props.breadCrumb)))}}]),t}(r.Component),ft=Object(N.b)(at.a)(lt(),function(e){return e.application.color}),dt=Object(N.b)(at.a)(st()),pt=N.b.span(ut()),ht=Object(A.connect)(function(e){return{link:re(e),application:te(e),breadCrumb:function(e){return e.context.breadCrumb}(e)}})(ct),vt=n(61),yt=n.n(vt);function mt(){var e=I()(["\n    flex-grow: 1 !important;\n"]);return mt=function(){return e},e}var gt=Object(N.b)(yt.a)(mt()),bt=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){return r.createElement(gt,{variant:"body1",component:"div"},r.createElement(z.a,{position:"static"},r.createElement($.a,null)),r.createElement(ht,null),this.props.children)}}]),t}(r.Component);function _t(){var e=I()(["\n    height: 100%;\n    display: flex;\n"]);return _t=function(){return e},e}var wt=N.b.div(_t()),xt=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){return o.a.createElement(wt,null,o.a.createElement(Ee,{onLogout:this.props.onLogout}),o.a.createElement(ot,null),o.a.createElement(bt,null,this.props.children))}}]),t}(r.Component),kt=n(225),Et=n.n(kt);function Ot(){var e=I()(["\n    padding-top: 10px !important;\n"]);return Ot=function(){return e},e}function St(){var e=I()(["\n    padding-top: 60px;\n"]);return St=function(){return e},e}var Tt=Object(N.b)(at.a)(St()),Ct=Object(N.b)(yt.a)(Ot()),Pt=function(e){var t=e.text,n=void 0===t?"loading...":t;return o.a.createElement(Tt,{container:!0,direction:"column",justify:"center",alignItems:"center"},o.a.createElement(at.a,{item:!0},o.a.createElement(Et.a,{color:"secondary"})),o.a.createElement(at.a,{item:!0},o.a.createElement(Ct,{variant:"body1"},n)))},Rt=n(106),jt=function(e){function t(e){var n;return m()(this,t),n=w()(this,k()(t).call(this,e)),P()(T()(T()(n)),"checkAuthentication",v()(p.a.mark(function e(){var t,r,o,i;return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.props.auth.isAuthenticated();case 2:if(t=e.sent){e.next=6;break}return n.props.auth.redirect(),e.abrupt("return");case 6:if(n.props.authenticated!==t){e.next=8;break}return e.abrupt("return");case 8:if(!t){e.next=21;break}return e.next=11,n.props.auth.getUser();case 11:return r=e.sent,e.next=14,n.props.auth.getIdToken();case 14:return o=e.sent,e.next=17,n.props.auth.getAccessToken();case 17:i=e.sent,n.props.dispatch(Object(Rt.b)(r,o,i)),e.next=22;break;case 21:n.props.dispatch(Object(Rt.a)());case 22:case"end":return e.stop()}},e,this)}))),P()(T()(T()(n)),"logout",function(){n.props.auth.logout()}),n}return O()(t,e),b()(t,[{key:"componentDidMount",value:function(){var e=v()(p.a.mark(function e(){return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:this.checkAuthentication();case 1:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"componentDidUpdate",value:function(){var e=v()(p.a.mark(function e(){return p.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:this.checkAuthentication();case 1:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"render",value:function(){return this.props.authenticated?o.a.createElement(xt,{onLogout:this.logout},this.props.children):o.a.createElement(Pt,{text:"signing in..."})}}]),t}(o.a.Component),At=Object(A.connect)(function(e){return{authenticated:e.auth.authenticated,userInfo:e.auth.userInfo}})(Object(u.withAuth)(jt)),Mt=n(226),It=n.n(Mt),Nt=Object(c.createMuiTheme)({palette:{primary:It.a},typography:{useNextVariants:!0}}),Dt=(n(455),n(227)),Lt=n.n(Dt),Ut=n(229),Ft=n.n(Ut),Wt=n(48),zt=n.n(Wt),Bt=n(228),$t=n.n(Bt),Ht=n(156),Gt=n.n(Ht),qt=function(e){var t=e.text,n=void 0===t?"An error has occured, please reload the application":t;return o.a.createElement("div",{className:"mt-5 mb-5"},o.a.createElement("div",{className:"row justify-content-center text-danger"},o.a.createElement("h5",null,n)))},Vt=function(e){return e.app.directory.users.list},Yt=J(Vt,function(e){return e}),Kt=J([Vt,function(e,t){return t.match.params.userId}],function(e,t){return e.items.find(function(e){return e.id===t})}),Xt=n(149),Jt=function(e){function t(){var e,n;m()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=w()(this,(e=k()(t)).call.apply(e,[this].concat(o))),P()(T()(T()(n)),"editUser",function(e){n.props.history.push("/directory/users/".concat(e))}),n}return O()(t,e),b()(t,[{key:"componentDidMount",value:function(){this.props.dispatch(Object(Xt.a)())}},{key:"render",value:function(){var e=this;return this.props.error?o.a.createElement(qt,null):this.props.fetching?o.a.createElement(Pt,{text:"loading users..."}):o.a.createElement(Lt.a,null,o.a.createElement($t.a,null,o.a.createElement(Gt.a,null,o.a.createElement(zt.a,null,"Id"),o.a.createElement(zt.a,null,"First Name"),o.a.createElement(zt.a,null,"Last Name"))),o.a.createElement(Ft.a,null,this.props.users.map(function(t){return o.a.createElement(Gt.a,{key:t.id,onClick:function(){return e.editUser(t.id)}},o.a.createElement(zt.a,null,t.id),o.a.createElement(zt.a,null,t.firstName),o.a.createElement(zt.a,null,t.lastName))})))}}]),t}(r.Component),Qt=Object(D.a)(Object(A.connect)(function(e){return{users:Yt(e).items||[],fetching:Yt(e).fetching,error:Yt(e).error}})(Jt)),Zt=n(157),en=n.n(Zt);function tn(){var e=I()(["\n    padding: 10px;\n    width: auto !important;\n    margin: 0px !important;\n"]);return tn=function(){return e},e}var nn=Object(N.b)(at.a)(tn()),rn=function(e){function t(e){var n;return m()(this,t),n=w()(this,k()(t).call(this,e)),P()(T()(T()(n)),"handleChange",function(e){return function(t){var r=K()({},n.state.user,P()({},e,t.target.value));n.setState({user:r})}}),n.state={user:e.user},n}return O()(t,e),b()(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){return o.a.createElement(nn,{container:!0,spacing:24},o.a.createElement(at.a,{item:!0,xs:12},o.a.createElement(en.a,{label:"First Name",value:this.state.user.firstName,onChange:this.handleChange("firstName"),fullWidth:!0})),o.a.createElement(at.a,{item:!0,xs:12},o.a.createElement(en.a,{label:"Last Name",value:this.state.user.lastName,onChange:this.handleChange("lastName"),fullWidth:!0})))}}]),t}(r.Component),on=Object(A.connect)(function(e){return{}})(rn),an=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){return o.a.createElement(o.a.Fragment,null,"NewUser")}}]),t}(r.Component);function un(){var e=I()(["\n    height: calc(100% - 180px);\n    overflow: auto;\n"]);return un=function(){return e},e}var sn=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"componentDidMount",value:function(){this.props.dispatch(function(e){return{type:"CONTEXT_RECIEVE_BREADCRUMB",payload:e}}(this.props.breadCrumb))}},{key:"render",value:function(){return r.createElement(ln,null,this.props.children)}}]),t}(r.Component),ln=N.b.div(un()),cn=Object(A.connect)()(sn);function fn(){var e=I()(["\n    position: absolute;\n    height: 55px;\n    bottom: 0;\n    width: calc(100% - ","px);\n    background-color: #E6E6E6;\n    border-top: 1px solid #C4C4C4;\n    padding: 10px 20px;\n    display: flex;\n    justify-content: flex-end;\n"]);return fn=function(){return e},e}var dn=function(e){function t(){return m()(this,t),w()(this,k()(t).apply(this,arguments))}return O()(t,e),b()(t,[{key:"render",value:function(){return r.createElement(pn,null,this.props.children)}}]),t}(r.Component),pn=N.b.div(fn(),f.a.ui.sideBarWidth);function hn(){var e=I()(["\n   margin-left: 8px !important;\n"]);return hn=function(){return e},e}var vn=Object(N.b)(G.a)(hn()),yn=function(e){var t=Se()({},e);return r.createElement(vn,Se()({variant:"contained"},t),t.children)},mn=J(function(e){return e.app.directory.users.user},function(e){return e}),gn=n(150),bn=function(e){function t(){var e,n;m()(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return n=w()(this,(e=k()(t)).call.apply(e,[this].concat(o))),P()(T()(T()(n)),"cancel",function(){n.props.history.push("/directory/users")}),n}return O()(t,e),b()(t,[{key:"componentDidMount",value:function(){this.props.user||this.props.dispatch(Object(gn.a)(this.props.match.params.userId))}},{key:"render",value:function(){var e=this;return this.props.error?o.a.createElement(qt,null):this.props.fetching||!this.props.user?o.a.createElement(Pt,{text:"loading user..."}):o.a.createElement(cn,{breadCrumb:"Edit User"},o.a.createElement(on,{user:this.props.user}),o.a.createElement(dn,null,o.a.createElement(yn,{color:"default",onClick:function(){return e.cancel()}},"Cancel"),o.a.createElement(yn,{color:"primary"},"Save")))}}]),t}(r.Component),_n=Object(D.a)(Object(A.connect)(function(e,t){return{user:Kt(e,t)||mn(e).user,fetching:mn(e).fetching,error:mn(e).error}})(bn)),wn=function(){return o.a.createElement(o.a.Fragment,null,o.a.createElement(u.SecureRoute,{exact:!0,path:"/directory",component:Qt}),o.a.createElement(u.SecureRoute,{exact:!0,path:"/directory/users",component:Qt}),o.a.createElement(u.SecureRoute,{exact:!0,path:"/directory/users/new",component:an}),o.a.createElement(u.SecureRoute,{exact:!0,path:"/directory/users/:userId",component:_n}))};t.default=function(){return o.a.createElement(u.Security,{issuer:f.a.oidc.issuer,client_id:f.a.oidc.clientId,redirect_uri:f.a.oidc.redirectUri},o.a.createElement(l.a,null),o.a.createElement(c.MuiThemeProvider,{theme:Nt},o.a.createElement(i.a,null,o.a.createElement(a.a,{path:"/implicit/callback",component:u.ImplicitCallback}),o.a.createElement(At,null,o.a.createElement(u.SecureRoute,{exact:!0,path:"/",component:Qt}),o.a.createElement(wn,null)))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),o=n.n(r),i=n(43),a=n(105),u=function(){return o()({},i.RSAA,{endpoint:a.a,method:"GET",types:["USERS_LIST_FETCHING","USERS_LIST_RECEIVE","USERS_LIST_FETCHING_ERROR"]})}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),o=n.n(r),i=n(43),a=n(105),u=function(e){return o()({},i.RSAA,{endpoint:"".concat(a.a,"/").concat(e),method:"GET",types:["USERS_USER_FETCHING","USERS_USER_RECEIVE","USERS_USER_FETCHING_ERROR"]})}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(445))},function(e,t,n){"use strict";(function(e,r){var o,i=n(213);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(22),n(159)(e))},function(e,t,n){"use strict";n.d(t,"b",function(){return c}),n.d(t,"a",function(){return p});var r=n(27),o=n(62),i=n(43),a=n(24),u=n(215),s=n(77),l=n(216),c=Object(a.a)({basename:"/"}),f=[u.a,l.a,i.apiMiddleware,Object(o.routerMiddleware)(c)],d=[];window.__REDUX_DEVTOOLS_EXTENSION__&&d.push(window.__REDUX_DEVTOOLS_EXTENSION__());var p=function(){var t=Object(r.e)(Object(s.default)(c),void 0,r.d.apply(void 0,[r.a.apply(void 0,f)].concat(d)));return e.hot.accept(77,function(e){s=n(77),function(){var e=n(77).default;t.replaceReducer(e(c))}()}),t}},function(e,t,n){e.exports=function e(t){"use strict";var n=/^\0+/g,r=/[\0\r\f]/g,o=/: */g,i=/zoo|gra/,a=/([,: ])(transform)/g,u=/,+\s*(?![^(]*[)])/g,s=/ +\s*(?![^(]*[)])/g,l=/ *[\0] */g,c=/,\r+?/g,f=/([\t\r\n ])*\f?&/g,d=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,p=/\W+/g,h=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,m=/\s+(?=[{\];=:>])/g,g=/([[}=:>])\s+/g,b=/(\{[^{]+?);(?=\})/g,_=/\s{2,}/g,w=/([^\(])(:+) */g,x=/[svh]\w+-[tblr]{2}/,k=/\(\s*(.*)\s*\)/g,E=/([\s\S]*?);/g,O=/-self|flex-/g,S=/[^]*?(:[rp][el]a[\w-]+)[^]*/,T=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,P="-webkit-",R="-moz-",j="-ms-",A=59,M=125,I=123,N=40,D=41,L=91,U=93,F=10,W=13,z=9,B=64,$=32,H=38,G=45,q=95,V=42,Y=44,K=58,X=39,J=34,Q=47,Z=62,ee=43,te=126,ne=0,re=12,oe=11,ie=107,ae=109,ue=115,se=112,le=111,ce=105,fe=99,de=100,pe=112,he=1,ve=1,ye=0,me=1,ge=1,be=1,_e=0,we=0,xe=0,ke=[],Ee=[],Oe=0,Se=null,Te=-2,Ce=-1,Pe=0,Re=1,je=2,Ae=3,Me=0,Ie=1,Ne="",De="",Le="";function Ue(e,t,o,i,a){for(var u,s,c=0,f=0,d=0,p=0,m=0,g=0,b=0,_=0,x=0,E=0,O=0,S=0,T=0,C=0,q=0,_e=0,Ee=0,Se=0,Te=0,Ce=o.length,We=Ce-1,qe="",Ve="",Ye="",Ke="",Xe="",Je="";q<Ce;){if(b=o.charCodeAt(q),q===We&&f+p+d+c!==0&&(0!==f&&(b=f===Q?F:Q),p=d=c=0,Ce++,We++),f+p+d+c===0){if(q===We&&(_e>0&&(Ve=Ve.replace(r,"")),Ve.trim().length>0)){switch(b){case $:case z:case A:case W:case F:break;default:Ve+=o.charAt(q)}b=A}if(1===Ee)switch(b){case I:case M:case A:case J:case X:case N:case D:case Y:Ee=0;case z:case W:case F:case $:break;default:for(Ee=0,Te=q,m=b,q--,b=A;Te<Ce;)switch(o.charCodeAt(Te++)){case F:case W:case A:++q,b=m,Te=Ce;break;case K:_e>0&&(++q,b=m);case I:Te=Ce}}switch(b){case I:for(m=(Ve=Ve.trim()).charCodeAt(0),O=1,Te=++q;q<Ce;){switch(b=o.charCodeAt(q)){case I:O++;break;case M:O--;break;case Q:switch(g=o.charCodeAt(q+1)){case V:case Q:q=Ge(g,q,We,o)}break;case L:b++;case N:b++;case J:case X:for(;q++<We&&o.charCodeAt(q)!==b;);}if(0===O)break;q++}switch(Ye=o.substring(Te,q),m===ne&&(m=(Ve=Ve.replace(n,"").trim()).charCodeAt(0)),m){case B:switch(_e>0&&(Ve=Ve.replace(r,"")),g=Ve.charCodeAt(1)){case de:case ae:case ue:case G:u=t;break;default:u=ke}if(Te=(Ye=Ue(t,u,Ye,g,a+1)).length,xe>0&&0===Te&&(Te=Ve.length),Oe>0&&(u=Fe(ke,Ve,Se),s=He(Ae,Ye,u,t,ve,he,Te,g,a,i),Ve=u.join(""),void 0!==s&&0===(Te=(Ye=s.trim()).length)&&(g=0,Ye="")),Te>0)switch(g){case ue:Ve=Ve.replace(k,$e);case de:case ae:case G:Ye=Ve+"{"+Ye+"}";break;case ie:Ye=(Ve=Ve.replace(h,"$1 $2"+(Ie>0?Ne:"")))+"{"+Ye+"}",Ye=1===ge||2===ge&&Be("@"+Ye,3)?"@"+P+Ye+"@"+Ye:"@"+Ye;break;default:Ye=Ve+Ye,i===pe&&(Ke+=Ye,Ye="")}else Ye="";break;default:Ye=Ue(t,Fe(t,Ve,Se),Ye,i,a+1)}Xe+=Ye,S=0,Ee=0,C=0,_e=0,Se=0,T=0,Ve="",Ye="",b=o.charCodeAt(++q);break;case M:case A:if((Te=(Ve=(_e>0?Ve.replace(r,""):Ve).trim()).length)>1)switch(0===C&&((m=Ve.charCodeAt(0))===G||m>96&&m<123)&&(Te=(Ve=Ve.replace(" ",":")).length),Oe>0&&void 0!==(s=He(Re,Ve,t,e,ve,he,Ke.length,i,a,i))&&0===(Te=(Ve=s.trim()).length)&&(Ve="\0\0"),m=Ve.charCodeAt(0),g=Ve.charCodeAt(1),m){case ne:break;case B:if(g===ce||g===fe){Je+=Ve+o.charAt(q);break}default:if(Ve.charCodeAt(Te-1)===K)break;Ke+=ze(Ve,m,g,Ve.charCodeAt(2))}S=0,Ee=0,C=0,_e=0,Se=0,Ve="",b=o.charCodeAt(++q)}}switch(b){case W:case F:if(f+p+d+c+we===0)switch(E){case D:case X:case J:case B:case te:case Z:case V:case ee:case Q:case G:case K:case Y:case A:case I:case M:break;default:C>0&&(Ee=1)}f===Q?f=0:me+S===0&&i!==ie&&Ve.length>0&&(_e=1,Ve+="\0"),Oe*Me>0&&He(Pe,Ve,t,e,ve,he,Ke.length,i,a,i),he=1,ve++;break;case A:case M:if(f+p+d+c===0){he++;break}default:switch(he++,qe=o.charAt(q),b){case z:case $:if(p+c+f===0)switch(_){case Y:case K:case z:case $:qe="";break;default:b!==$&&(qe=" ")}break;case ne:qe="\\0";break;case re:qe="\\f";break;case oe:qe="\\v";break;case H:p+f+c===0&&me>0&&(Se=1,_e=1,qe="\f"+qe);break;case 108:if(p+f+c+ye===0&&C>0)switch(q-C){case 2:_===se&&o.charCodeAt(q-3)===K&&(ye=_);case 8:x===le&&(ye=x)}break;case K:p+f+c===0&&(C=q);break;case Y:f+d+p+c===0&&(_e=1,qe+="\r");break;case J:case X:0===f&&(p=p===b?0:0===p?b:p);break;case L:p+f+d===0&&c++;break;case U:p+f+d===0&&c--;break;case D:p+f+c===0&&d--;break;case N:if(p+f+c===0){if(0===S)switch(2*_+3*x){case 533:break;default:O=0,S=1}d++}break;case B:f+d+p+c+C+T===0&&(T=1);break;case V:case Q:if(p+c+d>0)break;switch(f){case 0:switch(2*b+3*o.charCodeAt(q+1)){case 235:f=Q;break;case 220:Te=q,f=V}break;case V:b===Q&&_===V&&Te+2!==q&&(33===o.charCodeAt(Te+2)&&(Ke+=o.substring(Te,q+1)),qe="",f=0)}}if(0===f){if(me+p+c+T===0&&i!==ie&&b!==A)switch(b){case Y:case te:case Z:case ee:case D:case N:if(0===S){switch(_){case z:case $:case F:case W:qe+="\0";break;default:qe="\0"+qe+(b===Y?"":"\0")}_e=1}else switch(b){case N:C+7===q&&108===_&&(C=0),S=++O;break;case D:0==(S=--O)&&(_e=1,qe+="\0")}break;case z:case $:switch(_){case ne:case I:case M:case A:case Y:case re:case z:case $:case F:case W:break;default:0===S&&(_e=1,qe+="\0")}}Ve+=qe,b!==$&&b!==z&&(E=b)}}x=_,_=b,q++}if(Te=Ke.length,xe>0&&0===Te&&0===Xe.length&&0===t[0].length==0&&(i!==ae||1===t.length&&(me>0?De:Le)===t[0])&&(Te=t.join(",").length+2),Te>0){if(u=0===me&&i!==ie?function(e){for(var t,n,o=0,i=e.length,a=Array(i);o<i;++o){for(var u=e[o].split(l),s="",c=0,f=0,d=0,p=0,h=u.length;c<h;++c)if(!(0===(f=(n=u[c]).length)&&h>1)){if(d=s.charCodeAt(s.length-1),p=n.charCodeAt(0),t="",0!==c)switch(d){case V:case te:case Z:case ee:case $:case N:break;default:t=" "}switch(p){case H:n=t+De;case te:case Z:case ee:case $:case D:case N:break;case L:n=t+n+De;break;case K:switch(2*n.charCodeAt(1)+3*n.charCodeAt(2)){case 530:if(be>0){n=t+n.substring(8,f-1);break}default:(c<1||u[c-1].length<1)&&(n=t+De+n)}break;case Y:t="";default:n=f>1&&n.indexOf(":")>0?t+n.replace(w,"$1"+De+"$2"):t+n+De}s+=n}a[o]=s.replace(r,"").trim()}return a}(t):t,Oe>0&&void 0!==(s=He(je,Ke,u,e,ve,he,Te,i,a,i))&&0===(Ke=s).length)return Je+Ke+Xe;if(Ke=u.join(",")+"{"+Ke+"}",ge*ye!=0){switch(2!==ge||Be(Ke,2)||(ye=0),ye){case le:Ke=Ke.replace(y,":"+R+"$1")+Ke;break;case se:Ke=Ke.replace(v,"::"+P+"input-$1")+Ke.replace(v,"::"+R+"$1")+Ke.replace(v,":"+j+"input-$1")+Ke}ye=0}}return Je+Ke+Xe}function Fe(e,t,n){var r=t.trim().split(c),o=r,i=r.length,a=e.length;switch(a){case 0:case 1:for(var u=0,s=0===a?"":e[0]+" ";u<i;++u)o[u]=We(s,o[u],n,a).trim();break;default:u=0;var l=0;for(o=[];u<i;++u)for(var f=0;f<a;++f)o[l++]=We(e[f]+" ",r[u],n,a).trim()}return o}function We(e,t,n,r){var o=t,i=o.charCodeAt(0);switch(i<33&&(i=(o=o.trim()).charCodeAt(0)),i){case H:switch(me+r){case 0:case 1:if(0===e.trim().length)break;default:return o.replace(f,"$1"+e.trim())}break;case K:switch(o.charCodeAt(1)){case 103:if(be>0&&me>0)return o.replace(d,"$1").replace(f,"$1"+Le);break;default:return e.trim()+o.replace(f,"$1"+e.trim())}default:if(n*me>0&&o.indexOf("\f")>0)return o.replace(f,(e.charCodeAt(0)===K?"":"$1")+e.trim())}return e+o}function ze(e,t,n,r){var l,c=0,f=e+";",d=2*t+3*n+4*r;if(944===d)return function(e){var t=e.length,n=e.indexOf(":",9)+1,r=e.substring(0,n).trim(),o=e.substring(n,t-1).trim();switch(e.charCodeAt(9)*Ie){case 0:break;case G:if(110!==e.charCodeAt(10))break;default:for(var i=o.split((o="",u)),a=0,n=0,t=i.length;a<t;n=0,++a){for(var l=i[a],c=l.split(s);l=c[n];){var f=l.charCodeAt(0);if(1===Ie&&(f>B&&f<90||f>96&&f<123||f===q||f===G&&l.charCodeAt(1)!==G))switch(isNaN(parseFloat(l))+(-1!==l.indexOf("("))){case 1:switch(l){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:l+=Ne}}c[n++]=l}o+=(0===a?"":",")+c.join(" ")}}return o=r+o+";",1===ge||2===ge&&Be(o,1)?P+o+o:o}(f);if(0===ge||2===ge&&!Be(f,1))return f;switch(d){case 1015:return 97===f.charCodeAt(10)?P+f+f:f;case 951:return 116===f.charCodeAt(3)?P+f+f:f;case 963:return 110===f.charCodeAt(5)?P+f+f:f;case 1009:if(100!==f.charCodeAt(4))break;case 969:case 942:return P+f+f;case 978:return P+f+R+f+f;case 1019:case 983:return P+f+R+f+j+f+f;case 883:return f.charCodeAt(8)===G?P+f+f:f.indexOf("image-set(",11)>0?f.replace(C,"$1"+P+"$2")+f:f;case 932:if(f.charCodeAt(4)===G)switch(f.charCodeAt(5)){case 103:return P+"box-"+f.replace("-grow","")+P+f+j+f.replace("grow","positive")+f;case 115:return P+f+j+f.replace("shrink","negative")+f;case 98:return P+f+j+f.replace("basis","preferred-size")+f}return P+f+j+f+f;case 964:return P+f+j+"flex-"+f+f;case 1023:if(99!==f.charCodeAt(8))break;return l=f.substring(f.indexOf(":",15)).replace("flex-","").replace("space-between","justify"),P+"box-pack"+l+P+f+j+"flex-pack"+l+f;case 1005:return i.test(f)?f.replace(o,":"+P)+f.replace(o,":"+R)+f:f;case 1e3:switch(c=(l=f.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(c)){case 226:l=f.replace(x,"tb");break;case 232:l=f.replace(x,"tb-rl");break;case 220:l=f.replace(x,"lr");break;default:return f}return P+f+j+l+f;case 1017:if(-1===f.indexOf("sticky",9))return f;case 975:switch(c=(f=e).length-10,d=(l=(33===f.charCodeAt(c)?f.substring(0,c):f).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(l.charCodeAt(8)<111)break;case 115:f=f.replace(l,P+l)+";"+f;break;case 207:case 102:f=f.replace(l,P+(d>102?"inline-":"")+"box")+";"+f.replace(l,P+l)+";"+f.replace(l,j+l+"box")+";"+f}return f+";";case 938:if(f.charCodeAt(5)===G)switch(f.charCodeAt(6)){case 105:return l=f.replace("-items",""),P+f+P+"box-"+l+j+"flex-"+l+f;case 115:return P+f+j+"flex-item-"+f.replace(O,"")+f;default:return P+f+j+"flex-line-pack"+f.replace("align-content","").replace(O,"")+f}break;case 973:case 989:if(f.charCodeAt(3)!==G||122===f.charCodeAt(4))break;case 931:case 953:if(!0===T.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?ze(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):f.replace(l,P+l)+f.replace(l,R+l.replace("fill-",""))+f;break;case 962:if(f=P+f+(102===f.charCodeAt(5)?j+f:"")+f,n+r===211&&105===f.charCodeAt(13)&&f.indexOf("transform",10)>0)return f.substring(0,f.indexOf(";",27)+1).replace(a,"$1"+P+"$2")+f}return f}function Be(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10),o=e.substring(n+1,e.length-1);return Se(2!==t?r:r.replace(S,"$1"),o,t)}function $e(e,t){var n=ze(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(E," or ($1)").substring(4):"("+t+")"}function He(e,t,n,r,o,i,a,u,s,l){for(var c,f=0,d=t;f<Oe;++f)switch(c=Ee[f].call(Ve,e,d,n,r,o,i,a,u,s,l)){case void 0:case!1:case!0:case null:break;default:d=c}if(d!==t)return d}function Ge(e,t,n,r){for(var o=t+1;o<n;++o)switch(r.charCodeAt(o)){case Q:if(e===V&&r.charCodeAt(o-1)===V&&t+2!==o)return o+1;break;case F:if(e===Q)return o+1}return o}function qe(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Ie=0|n;break;case"global":be=0|n;break;case"cascade":me=0|n;break;case"compress":_e=0|n;break;case"semicolon":we=0|n;break;case"preserve":xe=0|n;break;case"prefix":Se=null,n?"function"!=typeof n?ge=1:(ge=2,Se=n):ge=0}}return qe}function Ve(t,n){if(void 0!==this&&this.constructor===Ve)return e(t);var o=t,i=o.charCodeAt(0);i<33&&(i=(o=o.trim()).charCodeAt(0)),Ie>0&&(Ne=o.replace(p,i===L?"":"-")),i=1,1===me?Le=o:De=o;var a,u=[Le];Oe>0&&void 0!==(a=He(Ce,n,u,u,ve,he,0,0,0,0))&&"string"==typeof a&&(n=a);var s=Ue(ke,u,n,0,0);return Oe>0&&void 0!==(a=He(Te,s,u,u,ve,he,s.length,0,0,0))&&"string"!=typeof(s=a)&&(i=0),Ne="",Le="",De="",ye=0,ve=1,he=1,_e*i==0?s:s.replace(r,"").replace(m,"").replace(g,"$1").replace(b,"$1").replace(_," ")}return Ve.use=function e(t){switch(t){case void 0:case null:Oe=Ee.length=0;break;default:if("function"==typeof t)Ee[Oe++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else Me=0|!!t}return e},Ve.set=qe,void 0!==t&&qe(t),Ve}(null)},function(e,t,n){"use strict";var r=function(e,t){return e===t};t.a=function(e,t){var n;void 0===t&&(t=r);var o,i=[],a=!1,u=function(e,n){return t(e,i[n])};return function(){for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return a&&n===this&&r.length===i.length&&r.every(u)?o:(o=e.apply(this,r),a=!0,n=this,i=r,o)}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(461))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(464))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var l in n=Object(arguments[s]))o.call(n,l)&&(u[l]=n[l]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(1),a=n.n(i),u=n(13),s=n.n(u),l=n(16),c=n.n(l),f=n(60);var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){c()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){s()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),s()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,i=void 0;return o.a.Children.forEach(t,function(t){if(null==r&&o.a.isValidElement(t)){var a=t.props,u=a.path,s=a.exact,l=a.strict,c=a.sensitive,d=a.from,p=u||d;i=t,r=Object(f.a)(n.pathname,{path:p,exact:s,strict:l,sensitive:c},e.match)}}),r?o.a.cloneElement(i,{location:n,computedMatch:r}):null},t}(o.a.Component);d.contextTypes={router:a.a.shape({route:a.a.object.isRequired}).isRequired},d.propTypes={children:a.a.node,location:a.a.object},t.a=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isValidRSAA=t.validateRSAA=t.isValidTypeDescriptor=t.isRSAA=void 0;var r=u(n(111)),o=u(n(85)),i=u(n(110)),a=u(n(273));function u(e){return e&&e.__esModule?e:{default:e}}function s(e){return(0,a.default)(e)&&e.hasOwnProperty(i.default)}function l(e){var t=["type","payload","meta"];if(!(0,a.default)(e))return!1;for(var n in e)if(!~t.indexOf(n))return!1;return"type"in e&&("string"==typeof e.type||"symbol"===(0,o.default)(e.type))}function c(e){var t=[],n=["endpoint","options","method","body","headers","credentials","bailout","types","fetch"];if(!s(e))return t.push("RSAAs must be plain JavaScript objects with an [RSAA] property"),t;for(var u in e)u!==i.default&&t.push("Invalid root key: "+u);var c=e[i.default];for(var f in(0,a.default)(c)||t.push("[RSAA] property must be a plain JavaScript object"),c)~n.indexOf(f)||t.push("Invalid [RSAA] key: "+f);var d=c.endpoint,p=c.method,h=c.headers,v=c.options,y=c.credentials,m=c.types,g=c.bailout,b=c.fetch;if(void 0===d?t.push("[RSAA] must have an endpoint property"):"string"!=typeof d&&"function"!=typeof d&&t.push("[RSAA].endpoint property must be a string or a function"),void 0===p?t.push("[RSAA] must have a method property"):"string"!=typeof p?t.push("[RSAA].method property must be a string"):~["GET","HEAD","POST","PUT","PATCH","DELETE","OPTIONS"].indexOf(p.toUpperCase())||t.push("Invalid [RSAA].method: "+p.toUpperCase()),void 0===h||(0,a.default)(h)||"function"==typeof h||t.push("[RSAA].headers property must be undefined, a plain JavaScript object, or a function"),void 0===v||(0,a.default)(v)||"function"==typeof v||t.push("[RSAA].options property must be undefined, a plain JavaScript object, or a function"),void 0!==y&&("string"!=typeof y?t.push("[RSAA].credentials property must be undefined, or a string"):~["omit","same-origin","include"].indexOf(y)||t.push("Invalid [RSAA].credentials: "+y)),void 0!==g&&"boolean"!=typeof g&&"function"!=typeof g&&t.push("[RSAA].bailout property must be undefined, a boolean, or a function"),void 0===m)t.push("[RSAA] must have a types property");else if(Array.isArray(m)&&3===m.length){var _=(0,r.default)(m,3),w=_[0],x=_[1],k=_[2];"string"==typeof w||"symbol"===(void 0===w?"undefined":(0,o.default)(w))||l(w)||t.push("Invalid request type"),"string"==typeof x||"symbol"===(void 0===x?"undefined":(0,o.default)(x))||l(x)||t.push("Invalid success type"),"string"==typeof k||"symbol"===(void 0===k?"undefined":(0,o.default)(k))||l(k)||t.push("Invalid failure type")}else t.push("[RSAA].types property must be an array of length 3");return void 0!==b&&"function"!=typeof b&&t.push("[RSAA].fetch property must be a function"),t}t.isRSAA=s,t.isValidTypeDescriptor=l,t.validateRSAA=c,t.isValidRSAA=function(e){return!c(e).length}},function(e,t,n){var r=n(65);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t,n){"use strict";var r=n(66),o=n(29),i=n(165),a=n(44),u=n(49),s=n(254),l=n(83),c=n(168),f=n(26)("iterator"),d=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,h,v,y,m){s(n,t,h);var g,b,_,w=function(e){if(!d&&e in O)return O[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},x=t+" Iterator",k="values"==v,E=!1,O=e.prototype,S=O[f]||O["@@iterator"]||v&&O[v],T=S||w(v),C=v?k?w("entries"):T:void 0,P="Array"==t&&O.entries||S;if(P&&(_=c(P.call(new e)))!==Object.prototype&&_.next&&(l(_,x,!0),r||"function"==typeof _[f]||a(_,f,p)),k&&S&&"values"!==S.name&&(E=!0,T=function(){return S.call(this)}),r&&!m||!d&&!E&&O[f]||a(O,f,T),u[t]=T,u[x]=p,v)if(g={values:k?T:w("values"),keys:y?T:w("keys"),entries:C},m)for(b in g)b in O||i(O,b,g[b]);else o(o.P+o.F*(d||E),t,g);return g}},function(e,t,n){e.exports=!n(38)&&!n(52)(function(){return 7!=Object.defineProperty(n(113)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){e.exports=n(44)},function(e,t,n){var r=n(45),o=n(50),i=n(256)(!1),a=n(118)("IE_PROTO");e.exports=function(e,t){var n,u=o(e),s=0,l=[];for(n in u)n!=a&&r(u,n)&&l.push(n);for(;t.length>s;)r(u,n=t[s++])&&(~i(l,n)||l.push(n));return l}},function(e,t,n){var r=n(25).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(45),o=n(84),i=n(118)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=o(e),r(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){e.exports={default:n(260),__esModule:!0}},function(e,t,n){var r=n(166),o=n(120).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},function(e,t,n){var r=n(86),o=n(67),i=n(50),a=n(114),u=n(45),s=n(164),l=Object.getOwnPropertyDescriptor;t.f=n(38)?l:function(e,t){if(e=i(e),t=a(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return o(!r.f.call(e,t),e[t])}},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.actionWith=t.normalizeTypeDescriptors=t.getJSON=void 0;var r=p(n(284)),o=p(n(87)),i=p(n(85)),a=p(n(111)),u=p(n(88)),s=p(n(127)),l=p(n(89)),c=function(){var e=(0,l.default)(u.default.mark(function e(t){var n;return u.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.headers.get("Content-Type"),~[204,205].indexOf(t.status)||!n||!~n.indexOf("json")){e.next=8;break}return e.next=5,t.json();case 5:return e.abrupt("return",e.sent);case 8:return e.next=10,s.default.resolve();case 10:return e.abrupt("return",e.sent);case 11:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}(),f=function(){var e=(0,l.default)(u.default.mark(function e(t,n){return u.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,"function"==typeof t.payload?t.payload.apply(t,(0,r.default)(n)):t.payload;case 3:t.payload=e.sent,e.next=10;break;case 6:e.prev=6,e.t0=e.catch(0),t.payload=new d.InternalError(e.t0.message),t.error=!0;case 10:return e.prev=10,e.next=13,"function"==typeof t.meta?t.meta.apply(t,(0,r.default)(n)):t.meta;case 13:t.meta=e.sent,e.next=21;break;case 16:e.prev=16,e.t1=e.catch(10),delete t.meta,t.payload=new d.InternalError(e.t1.message),t.error=!0;case 21:return e.abrupt("return",t);case 22:case"end":return e.stop()}},e,this,[[0,6],[10,16]])}));return function(t,n){return e.apply(this,arguments)}}(),d=n(126);function p(e){return e&&e.__esModule?e:{default:e}}t.getJSON=c,t.normalizeTypeDescriptors=function(e){var t=(0,a.default)(e,3),n=t[0],r=t[1],u=t[2];return"string"!=typeof n&&"symbol"!==(void 0===n?"undefined":(0,i.default)(n))||(n={type:n}),"string"!=typeof r&&"symbol"!==(void 0===r?"undefined":(0,i.default)(r))||(r={type:r}),r=(0,o.default)({payload:function(e,t,n){return c(n)}},r),"string"!=typeof u&&"symbol"!==(void 0===u?"undefined":(0,i.default)(u))||(u={type:u}),[n,r,u=(0,o.default)({payload:function(e,t,n){return c(n).then(function(e){return new d.ApiError(n.status,n.statusText,e)})}},u)]},t.actionWith=f},function(e,t,n){var r=n(32);e.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(t){var i=e.return;throw void 0!==i&&r(i.call(e)),t}}},function(e,t,n){var r=n(49),o=n(26)("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},function(e,t,n){var r=n(26)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:n=!0}},i[r]=function(){return a},e(i)}catch(e){}return n}},function(e,t,n){var r=n(32),o=n(80),i=n(26)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||void 0==(n=r(a)[i])?t:o(n)}},function(e,t,n){var r,o,i,a=n(51),u=n(299),s=n(167),l=n(113),c=n(25),f=c.process,d=c.setImmediate,p=c.clearImmediate,h=c.MessageChannel,v=c.Dispatch,y=0,m={},g=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},b=function(e){g.call(e.data)};d&&p||(d=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++y]=function(){u("function"==typeof e?e:Function(e),t)},r(y),y},p=function(e){delete m[e]},"process"==n(65)(f)?r=function(e){f.nextTick(a(g,e,1))}:v&&v.now?r=function(e){v.now(a(g,e,1))}:h?(i=(o=new h).port2,o.port1.onmessage=b,r=a(i.postMessage,i,1)):c.addEventListener&&"function"==typeof postMessage&&!c.importScripts?(r=function(e){c.postMessage(e+"","*")},c.addEventListener("message",b,!1)):r="onreadystatechange"in l("script")?function(e){s.appendChild(l("script")).onreadystatechange=function(){s.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),e.exports={set:d,clear:p}},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(32),o=n(37),i=n(128);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=h(n(127)),o=h(n(87)),i=h(n(311)),a=h(n(88)),u=h(n(169)),s=h(n(89)),l=h(n(53)),c=h(n(72)),f=n(313),d=h(n(314)),p=h(n(334));function h(e){return e&&e.__esModule?e:{default:e}}var v=/id_token|access_token|code/,y=function(){function e(t){(0,l.default)(this,e),(0,f.assertIssuer)(t.issuer),(0,f.assertClientId)(t.client_id),(0,f.assertRedirectUri)(t.redirect_uri),this._oktaAuth=new d.default({url:t.issuer.split("/oauth2/")[0],clientId:t.client_id,issuer:t.issuer,redirectUri:t.redirect_uri}),this._oktaAuth.userAgent=p.default.name+"/"+p.default.version+" "+this._oktaAuth.userAgent,this._config=t,this._history=t.history,this.handleAuthentication=this.handleAuthentication.bind(this),this.isAuthenticated=this.isAuthenticated.bind(this),this.getUser=this.getUser.bind(this),this.getIdToken=this.getIdToken.bind(this),this.getAccessToken=this.getAccessToken.bind(this),this.login=this.login.bind(this),this.logout=this.logout.bind(this),this.redirect=this.redirect.bind(this)}return(0,c.default)(e,[{key:"handleAuthentication",value:function(){var e=(0,s.default)(a.default.mark(function e(){var t,n,r,o,i,s,l;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._oktaAuth.token.parseFromUrl();case 2:for(t=e.sent,t=Array.isArray(t)?t:[t],n=!0,r=!1,o=void 0,e.prev=7,i=(0,u.default)(t);!(n=(s=i.next()).done);n=!0)(l=s.value).idToken?this._oktaAuth.tokenManager.add("idToken",l):l.accessToken&&this._oktaAuth.tokenManager.add("accessToken",l);e.next=15;break;case 11:e.prev=11,e.t0=e.catch(7),r=!0,o=e.t0;case 15:e.prev=15,e.prev=16,!n&&i.return&&i.return();case 18:if(e.prev=18,!r){e.next=21;break}throw o;case 21:return e.finish(18);case 22:return e.finish(15);case 23:case"end":return e.stop()}},e,this,[[7,11,15,23],[16,,18,22]])}));return function(){return e.apply(this,arguments)}}()},{key:"isAuthenticated",value:function(){var e=(0,s.default)(a.default.mark(function e(){return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!(location&&location.hash&&v.test(location.hash))){e.next=2;break}return e.abrupt("return",null);case 2:return e.next=4,this.getAccessToken();case 4:if(e.t0=!!e.sent,e.t0){e.next=9;break}return e.next=8,this.getIdToken();case 8:e.t0=!!e.sent;case 9:return e.abrupt("return",e.t0);case 10:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"getUser",value:function(){var e=(0,s.default)(a.default.mark(function e(){var t,n,r;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this._oktaAuth.tokenManager.get("accessToken");case 2:return t=e.sent,e.next=5,this._oktaAuth.tokenManager.get("idToken");case 5:if(n=e.sent,!t||!n){e.next=12;break}return e.next=9,this._oktaAuth.token.getUserInfo(t);case 9:if((r=e.sent).sub!==n.claims.sub){e.next=12;break}return e.abrupt("return",r);case 12:return e.abrupt("return",n?n.claims:void 0);case 13:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"getIdToken",value:function(){var e=(0,s.default)(a.default.mark(function e(){var t;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this._oktaAuth.tokenManager.get("idToken");case 3:return t=e.sent,e.abrupt("return",t.idToken);case 7:return e.prev=7,e.t0=e.catch(0),e.abrupt("return",void 0);case 10:case"end":return e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}()},{key:"getAccessToken",value:function(){var e=(0,s.default)(a.default.mark(function e(){var t;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,this._oktaAuth.tokenManager.get("accessToken");case 3:return t=e.sent,e.abrupt("return",t.accessToken);case 7:return e.prev=7,e.t0=e.catch(0),e.abrupt("return",void 0);case 10:case"end":return e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}()},{key:"login",value:function(){var e=(0,s.default)(a.default.mark(function e(t,n){var r,o,u;return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(r=t?{pathname:t}:this._history.location,localStorage.setItem("secureRouterReferrerPath",(0,i.default)(r)),!this._config.onAuthRequired){e.next=6;break}return o=this,u=this._history,e.abrupt("return",this._config.onAuthRequired({auth:o,history:u}));case 6:return e.next=8,this.redirect(n);case 8:case"end":return e.stop()}},e,this)}));return function(t,n){return e.apply(this,arguments)}}()},{key:"logout",value:function(){var e=(0,s.default)(a.default.mark(function e(t){return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return this._oktaAuth.tokenManager.clear(),e.next=3,this._oktaAuth.signOut();case 3:this._history.push(t||"/");case 4:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()},{key:"redirect",value:function(){var e=(0,s.default)(a.default.mark(function e(){var t,n,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return a.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=i.response_type||this._config.response_type||["id_token","token"],n=i.scope||this._config.scope||["openid","email","profile"],this._oktaAuth.token.getWithRedirect((0,o.default)({responseType:t,scopes:n},i)),e.abrupt("return",new r.default(function(e,t){}));case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()}]),e}();t.default=y},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(74),o=n(39),i=n(130),a=n(54),u=i.getHttpCache();function s(e,t){return r.get(e,(t||e.options.url)+"/.well-known/openid-configuration",{cacheResponse:!0})}e.exports={getWellKnown:s,getKey:function(e,t,n){return s(e,t).then(function(t){var i=t.jwks_uri,s=u.getStorage()[i];if(s&&Date.now()/1e3<s.expiresAt){var l=o.find(s.response.keys,{kid:n});if(l)return l}return u.clearStorage(i),r.get(e,i,{cacheResponse:!0}).then(function(e){var t=o.find(e.keys,{kid:n});if(t)return t;throw new a("The key id, "+n+", was not found in the server's keys")})})},validateClaims:function(e,t,n){var r=n.clientId,o=n.issuer,i=n.nonce;if(!t||!o||!r)throw new a("The jwt, iss, and aud arguments are all required");if(i&&t.nonce!==i)throw new a("OAuth flow response nonce doesn't match request nonce");var u=Math.floor((new Date).getTime()/1e3);if(t.iss!==o)throw new a("The issuer ["+t.iss+"] does not match ["+o+"]");if(t.aud!==r)throw new a("The audience ["+t.aud+"] does not match ["+r+"]");if(t.iat>t.exp)throw new a("The JWT expired before it was issued");if(u-e.options.maxClockSkew>t.exp)throw new a("The JWT expired and is no longer valid");if(t.iat>u+e.options.maxClockSkew)throw new a("The JWT was issued in the future")},getOAuthUrls:function(e,t,n){n=n||{};var r=o.removeTrailingSlash(n.authorizeUrl)||e.options.authorizeUrl,i=o.removeTrailingSlash(n.issuer)||e.options.issuer,u=o.removeTrailingSlash(n.userinfoUrl)||e.options.userinfoUrl;if(i&&!/^https?:/.test(i)&&(i=e.options.url+"/oauth2/"+i),!i&&r&&-1!==t.responseType.indexOf("id_token"))throw new a("Cannot request idToken with an authorizeUrl without an issuer");if(!i&&-1!==t.responseType.indexOf("token")){if(r&&!u)throw new a("Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl");if(u&&!r)throw new a("Cannot request token with an userinfoUrl without an issuer or authorizeUrl")}var s=new RegExp("^https?://.*?/oauth2/.+");return i=i||e.options.url,s.test(i)?(r=r||i+"/v1/authorize",u=u||i+"/v1/userinfo"):(r=r||i+"/oauth2/v1/authorize",u=u||i+"/oauth2/v1/userinfo"),{issuer:i,authorizeUrl:r,userinfoUrl:u}},loadFrame:function(e){var t=document.createElement("iframe");return t.style.display="none",t.src=e,document.body.appendChild(t)},loadPopup:function(e,t){var n=t.popupTitle||"External Identity Provider User Authentication",r="toolbar=no, scrollbars=yes, resizable=yes, top=100, left=500, width=600, height=600";if(o.isIE11OrLess()){var i=window.open("/",n,r);return i.location.href=e,i}return window.open(e,n,r)},hashToObject:function(e){for(var t,n=/\+/g,r=/([^&=]+)=?([^&]*)/g,o=e.substring(1),i={};t=r.exec(o);){var a=t[1],u=t[2];i[a]="id_token"===a||"access_token"===a||"code"===a?u:decodeURIComponent(u.replace(n," "))}return i},isToken:function(e){return!(!e||!e.accessToken&&!e.idToken||!Array.isArray(e.scopes))},addListener:function(e,t,n){e.addEventListener?e.addEventListener(t,n):e.attachEvent("on"+t,n)},removeListener:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n):e.detachEvent("on"+t,n)}}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(54);e.exports=function(e,t){function n(){var n=e.getItem(t);n=n||"{}";try{return JSON.parse(n)}catch(e){throw new r("Unable to parse storage string: "+t)}}function o(n){try{var o=JSON.stringify(n);e.setItem(t,o)}catch(e){throw new r("Unable to set storage: "+t)}}return{getStorage:n,setStorage:o,clearStorage:function(e){e||o({});var t=n();delete t[e],o(t)},updateStorage:function(e,t){var r=n();r[e]=t,o(r)}}}},function(e,t,n){"use strict";var r=n(42),o=(n(0),{childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0}),i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0};var u=Object.defineProperty,s=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var p=f(n);p&&p!==d&&e(t,p,r)}var h=s(n);l&&(h=h.concat(l(n)));for(var v=a[t.$$typeof]||o,y=a[n.$$typeof]||o,m=0;m<h.length;++m){var g=h[m];if(!(i[g]||r&&r[g]||y&&y[g]||v&&v[g])){var b=c(n,g);try{u(t,g,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.specialProperty=void 0;r(n(4)),r(n(3));var o="exact-prop: ​";t.specialProperty=o;var i=function(e){return e};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFunctionName=o,t.default=void 0;var r=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function o(e){var t="".concat(e).match(r);return t&&t[1]||""}var i=function(e){return"string"==typeof e?e:e?e.displayName||e.name||o(e)||"Component":void 0};t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.create=t.createGenerateClassName=t.sheets=t.RuleList=t.SheetsManager=t.SheetsRegistry=t.toCssValue=t.getDynamicStyles=void 0;var r=n(346);Object.defineProperty(t,"getDynamicStyles",{enumerable:!0,get:function(){return f(r).default}});var o=n(92);Object.defineProperty(t,"toCssValue",{enumerable:!0,get:function(){return f(o).default}});var i=n(189);Object.defineProperty(t,"SheetsRegistry",{enumerable:!0,get:function(){return f(i).default}});var a=n(347);Object.defineProperty(t,"SheetsManager",{enumerable:!0,get:function(){return f(a).default}});var u=n(75);Object.defineProperty(t,"RuleList",{enumerable:!0,get:function(){return f(u).default}});var s=n(133);Object.defineProperty(t,"sheets",{enumerable:!0,get:function(){return f(s).default}});var l=n(192);Object.defineProperty(t,"createGenerateClassName",{enumerable:!0,get:function(){return f(l).default}});var c=f(n(352));function f(e){return e&&e.__esModule?e:{default:e}}var d=t.create=function(e){return new c.default(e)};t.default=d()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.registry=[]}return r(e,[{key:"add",value:function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)}},{key:"reset",value:function(){this.registry=[]}},{key:"remove",value:function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)}},{key:"toString",value:function(e){return this.registry.filter(function(e){return e.attached}).map(function(t){return t.toString(e)}).join("\n")}},{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){return e&&e.__esModule?e:{default:e}}(n(349));t.default=function(e){return e&&e[r.default]&&e===e[r.default]()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){e.renderable=t,e.rules&&t.cssRules&&e.rules.link(t.cssRules)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(56)),o=(i(n(193)),i(n(351)));function i(e){return e&&e.__esModule?e:{default:e}}t.default=function(){var e=0;return function(t,n){(e+=1)>1e10&&(0,r.default)(!1,"[JSS] You might have a memory leak. Rule counter is at %s.",e);var i="c",a="";return n&&(i=n.options.classNamePrefix||"c",null!=n.options.jss.id&&(a+=n.options.jss.id)),""+i+o.default+a+e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(191)),a=u(n(75));function u(e){return e&&e.__esModule?e:{default:e}}var s=function(){function e(t,n){var o=this;for(var i in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.update=function(e,t){return"string"==typeof e?o.rules.update(e,t):o.rules.update(e),o},this.attached=!1,this.deployed=!1,this.linked=!1,this.classes={},this.options=r({},n,{sheet:this,parent:this,classes:this.classes}),this.renderer=new n.Renderer(this),this.rules=new a.default(this.options),t)this.rules.add(i,t[i]);this.rules.process()}return o(e,[{key:"attach",value:function(){return this.attached?this:(this.deployed||this.deploy(),this.renderer.attach(),!this.linked&&this.options.link&&this.link(),this.attached=!0,this)}},{key:"detach",value:function(){return this.attached?(this.renderer.detach(),this.attached=!1,this):this}},{key:"addRule",value:function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)}},{key:"insertRule",value:function(e){var t=this.renderer.insertRule(e);t&&this.options.link&&(0,i.default)(e,t)}},{key:"addRules",value:function(e,t){var n=[];for(var r in e)n.push(this.addRule(r,e[r],t));return n}},{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"deleteRule",value:function(e){var t=this.rules.get(e);return!!t&&(this.rules.remove(t),!this.attached||!t.renderable||this.renderer.deleteRule(t.renderable))}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"deploy",value:function(){return this.renderer.deploy(),this.deployed=!0,this}},{key:"link",value:function(){var e=this.renderer.getRules();return e&&this.rules.link(e),this.linked=!0,this}},{key:"toString",value:function(e){return this.rules.toString(e)}}]),e}();t.default=s},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(365)),i=r(n(366)),a=r(n(368)),u=r(n(370)),s=r(n(372)),l=r(n(377));var c=function(){return{plugins:[(0,o.default)(),(0,i.default)(),(0,a.default)(),(0,u.default)(),"undefined"==typeof window?null:(0,s.default)(),(0,l.default)()]}};t.default=c},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3));r(n(13)),n(35);var i=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;if(e.Component,!n)return t;var r=(0,o.default)({},t);return Object.keys(n).forEach(function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))}),r};t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,r=e.unit,u=void 0===r?"px":r,s=e.step,l=void 0===s?5:s,c=(0,i.default)(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(u,")")}function d(e,t){var r=a.indexOf(t)+1;return r===a.length?f(e):"@media (min-width:".concat(n[e]).concat(u,") and ")+"(max-width:".concat(n[a[r]]-l/100).concat(u,")")}return(0,o.default)({keys:a,values:n,up:f,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];if(t===a.length)return f("xs");return"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-l/100).concat(u,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},c)},t.keys=void 0;var o=r(n(3)),i=r(n(5)),a=["xs","sm","md","lg","xl"];t.keys=a},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.dangerouslyUseGlobalCSS,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,a=e.seed,u=void 0===a?"":a,s=0;return function(e,t){return s+=1,n&&t&&t.options.name?"".concat(i(t.options.name),"-").concat(e.key):"".concat(o).concat(u).concat(s)}};r(n(13));var o=/([[\].#*$><+~=|^:(),"'`\s])/g;function i(e){return String(e).replace(o,"-")}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(399))},function(e,t,n){"use strict";function r(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function o(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function i(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function a(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,a=null,u=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?a="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(a="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?u="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(u="UNSAFE_componentWillUpdate"),null!==n||null!==a||null!==u){var s=e.displayName||e.name,l="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+s+" uses "+l+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==a?"\n  "+a:"")+(null!==u?"\n  "+u:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=r,t.componentWillReceiveProps=o),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=i;var c=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;c.call(this,e,t,r)}}return e}n.r(t),n.d(t,"polyfill",function(){return a}),r.__suppressDeprecationWarning=!0,o.__suppressDeprecationWarning=!0,i.__suppressDeprecationWarning=!0},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"ModalManager",{enumerable:!0,get:function(){return i.default}});var o=r(n(414)),i=r(n(201))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(6)),i=r(n(7)),a=r(n(419)),u=r(n(204)),s=r(n(40)),l=r(n(427)),c=n(205);function f(e,t){var n=-1;return e.some(function(e,r){return!!t(e)&&(n=r,!0)}),n}function d(e){return parseInt((0,a.default)(e,"paddingRight")||0,10)}var p=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.default)(this,e);var n=t.hideSiblingNodes,r=void 0===n||n,i=t.handleContainerOverflow,a=void 0===i||i;this.hideSiblingNodes=r,this.handleContainerOverflow=a,this.modals=[],this.data=[]}return(0,i.default)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&(0,c.ariaHidden)(e.modalRef,!1),this.hideSiblingNodes&&(0,c.ariaHiddenSiblings)(t,e.mountNode,e.modalRef,!0);var r=f(this.data,function(e){return e.container===t});if(-1!==r)return this.data[r].modals.push(e),n;var o={modals:[e],container:t,overflowing:(0,l.default)(t),prevPaddings:[]};return this.handleContainerOverflow&&function(e,t){var n={overflow:"hidden"};if(e.style={overflow:t.style.overflow,paddingRight:t.style.paddingRight},e.overflowing){var r=(0,u.default)();n.paddingRight="".concat(d(t)+r,"px");for(var o=(0,s.default)(t).querySelectorAll(".mui-fixed"),i=0;i<o.length;i+=1){var a=d(o[i]);e.prevPaddings.push(a),o[i].style.paddingRight="".concat(a+r,"px")}}Object.keys(n).forEach(function(e){t.style[e]=n[e]})}(o,t),this.data.push(o),n}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=f(this.data,function(t){return-1!==t.modals.indexOf(e)}),r=this.data[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)this.handleContainerOverflow&&function(e){Object.keys(e.style).forEach(function(t){e.container.style[t]=e.style[t]});for(var t=(0,s.default)(e.container).querySelectorAll(".mui-fixed"),n=0;n<t.length;n+=1)t[n].style.paddingRight="".concat(e.prevPaddings[n],"px")}(r),e.modalRef&&(0,c.ariaHidden)(e.modalRef,!0),this.hideSiblingNodes&&(0,c.ariaHiddenSiblings)(r.container,e.mountNode,e.modalRef,!1),this.data.splice(n,1);else if(this.hideSiblingNodes){var o=r.modals[r.modals.length-1];o.modalRef&&(0,c.ariaHidden)(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}]),e}();t.default=p},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=function(e){return(0,o.default)(e.replace(i,"ms-"))};var o=r(n(420)),i=/^-ms-/;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=!("undefined"==typeof window||!window.document||!window.document.createElement);t.default=r,e.exports=t.default},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=function(e){if((!o&&0!==o||e)&&i.default){var t=document.createElement("div");t.style.position="absolute",t.style.top="-9999px",t.style.width="50px",t.style.height="50px",t.style.overflow="scroll",document.body.appendChild(t),o=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return o};var o,i=r(n(203));e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ariaHidden=o,t.ariaHiddenSiblings=function(e,t,n,i){!function(e,t,n,o){var i=[t,n];[].forEach.call(e.children,function(e){-1===i.indexOf(e)&&function(e){return 1===e.nodeType&&-1===r.indexOf(e.tagName.toLowerCase())}(e)&&o(e)})}(e,t,n,function(e){return o(e,i)})};var r=["template","script","style"];function o(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}},function(e,t){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function r(t){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?e.exports=r=function(e){return n(e)}:e.exports=r=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":n(e)},r(t)}e.exports=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)).default.createContext();t.default=o},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=r(n(490)),a=r(n(497)),u=o.default.createElement("path",{d:"M7 10l5 5 5-5z"}),s=function(e){return o.default.createElement(a.default,e,u)};(s=(0,i.default)(s)).muiName="SvgIcon";var l=s;t.default=l},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=void 0;var o=r(n(493)),i=function(e){return(0,o.default)("displayName",e)};t.default=i},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=void 0;var o=r(n(494)),i=function(e,t){return t+"("+(0,o.default)(e)+")"};t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11)));function l(e){var t,n=e.children,r=e.classes,l=e.className,c=e.disabled,f=e.IconComponent,d=e.inputRef,p=e.name,h=e.onChange,v=e.value,y=e.variant,m=(0,a.default)(e,["children","classes","className","disabled","IconComponent","inputRef","name","onChange","value","variant"]);return u.default.createElement("div",{className:r.root},u.default.createElement("select",(0,o.default)({className:(0,s.default)(r.select,(t={},(0,i.default)(t,r.filled,"filled"===y),(0,i.default)(t,r.outlined,"outlined"===y),(0,i.default)(t,r.disabled,c),t),l),name:p,disabled:c,onChange:h,value:v,ref:d},m),n),u.default.createElement(f,{className:r.icon}))}l.propTypes={};var c=l;t.default=c},function(e,t,n){"use strict";var r=n(42),o=(n(0),{childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0}),i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={};a[r.ForwardRef]={$$typeof:!0,render:!0};var u=Object.defineProperty,s=Object.getOwnPropertyNames,l=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var p=f(n);p&&p!==d&&e(t,p,r)}var h=s(n);l&&(h=h.concat(l(n)));for(var v=a[t.$$typeof]||o,y=a[n.$$typeof]||o,m=0;m<h.length;++m){var g=h[m];if(!(i[g]||r&&r[g]||y&&y[g]||v&&v[g])){var b=c(n,g);try{u(t,g,b)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,a=Object.getOwnPropertyNames,u=Object.getOwnPropertySymbols,s=Object.getOwnPropertyDescriptor,l=Object.getPrototypeOf,c=l&&l(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var d=l(n);d&&d!==c&&e(t,d,f)}var p=a(n);u&&(p=p.concat(u(n)));for(var h=0;h<p.length;++h){var v=p[h];if(!(r[v]||o[v]||f&&f[v])){var y=s(n,v);try{i(t,v,y)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var o=r();o.withExtraArgument=r,t.a=o},function(e,t,n){"use strict";var r=n(17),o=n.n(r),i=n(43);t.a=function(e){return function(t){return function(n){var r=n[i.RSAA];return r&&(r.headers=o()({},r.headers,{Authorization:"Bearer "+e.getState().auth.idToken})),t(n)}}}},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,u,s,l,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===l)return r+"/*|*/";break;case 3:switch(l){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){"use strict";t.a={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(413))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(446))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(447))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(449))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(450))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(454))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(459))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(460))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(463))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(500))},function(e,t,n){"use strict";var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class)|(on[A-Z].*)|((data|aria|x)-.*))$/i,o=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}(r.test.bind(r));t.a=o},function(e,t,n){"use strict";n.r(t);var r=n(0),o=n.n(r),i=n(23),a=n.n(i),u=n(20),s=n(62),l=n(153),c=Object(l.a)(),f=document.getElementById("root"),d=function(){var e=n(148).default;a.a.render(o.a.createElement(u.Provider,{store:c},o.a.createElement(s.ConnectedRouter,{history:l.b},o.a.createElement(e,null))),f)};e.hot.accept(148,function(e){setTimeout(d)}),d()},,function(e,t,n){"use strict";
/** @license React v16.6.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(158),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,l=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.concurrent_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,v=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],l=0;(e=Error(t.replace(/%s/g,function(){return s[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},_={};function w(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}function x(){}function k(e,t,n){this.props=e,this.context=t,this.refs=_,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var E=k.prototype=new x;E.constructor=k,r(E,w.prototype),E.isPureReactComponent=!0;var O={current:null,currentDispatcher:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:O.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var R=/\/+/g,j=[];function A(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var s=!1;if(null===t)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return r(o,t,""===n?"."+N(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var c=n+N(u=t[l],l);s+=e(u,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=m&&t[m]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),l=0;!(u=t.next()).done;)s+=e(u=u.value,c=n+N(u,l++),r,o);else"object"===u&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?U(e,r,n,function(e){return e}):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+n)),r.push(e))}function U(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(R,"$&/")+"/"),I(e,L,t=A(t,i,r,o)),M(t)}var F={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return U(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,D,t=A(null,null,t,n)),M(t)},count:function(e){return I(e,function(){return null},null)},toArray:function(e){var t=[];return U(e,t,null,function(e){return e}),t},only:function(e){return P(e)||g("143"),e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:v,type:e,compare:void 0===t?null:t}},Fragment:u,StrictMode:s,Suspense:h,createElement:C,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,a=r({},e.props),u=e.key,s=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(s=t.ref,l=O.current),void 0!==t.key&&(u=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)S.call(t,o)&&!T.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:i,type:e.type,key:u,ref:s,props:a,_owner:l}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.6.3",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:O,assign:r}};F.unstable_ConcurrentMode=d,F.unstable_Profiler=l;var W={default:F},z=W&&F||W;e.exports=z.default||z},function(e,t,n){"use strict";
/** @license React v16.6.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),o=n(158),i=n(236);function a(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,i,a,u){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],l=0;(e=Error(t.replace(/%s/g,function(){return s[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||a("227");var u=!1,s=null,l=!1,c=null,f={onError:function(e){u=!0,s=e}};function d(e,t,n,r,o,i,a,l,c){u=!1,s=null,function(e,t,n,r,o,i,a,u,s){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function v(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||a("96",e),!m[n])for(var r in t.extractEvents||a("97",e),m[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,s=r;g.hasOwnProperty(s)&&a("99",s),g[s]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],u,s);o=!0}else i.registrationName?(y(i.registrationName,u,s),o=!0):o=!1;o||a("98",r,e)}}}function y(e,t,n){b[e]&&a("100",e),b[e]=t,_[e]=t.eventTypes[n].dependencies}var m=[],g={},b={},_={},w=null,x=null,k=null;function E(e,t,n){var r=e.type||"unknown-event";e.currentTarget=k(n),function(e,t,n,r,o,i,f,p,h){if(d.apply(this,arguments),u){if(u){var v=s;u=!1,s=null}else a("198"),v=void 0;l||(l=!0,c=v)}}(r,t,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&a("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var T=null;function C(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)E(e,t[r],n[r]);else t&&E(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var P={injectEventPluginOrder:function(e){p&&a("101"),p=Array.prototype.slice.call(e),v()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&a("102",t),h[t]=r,n=!0)}n&&v()}};function R(e,t){var n=e.stateNode;if(!n)return null;var r=w(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&a("231",t,typeof n),n)}function j(e){if(null!==e&&(T=O(T,e)),e=T,T=null,e&&(S(e,C),T&&a("95"),l))throw e=c,l=!1,c=null,e}var A=Math.random().toString(36).slice(2),M="__reactInternalInstance$"+A,I="__reactEventHandlers$"+A;function N(e){if(e[M])return e[M];for(;!e[M];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[M]).tag||6===e.tag?e:null}function D(e){return!(e=e[M])||5!==e.tag&&6!==e.tag?null:e}function L(e){if(5===e.tag||6===e.tag)return e.stateNode;a("33")}function U(e){return e[I]||null}function F(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function W(e,t,n){(t=R(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function z(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=F(t);for(t=n.length;0<t--;)W(n[t],"captured",e);for(t=0;t<n.length;t++)W(n[t],"bubbled",e)}}function B(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=R(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function $(e){e&&e.dispatchConfig.registrationName&&B(e._targetInst,null,e)}function H(e){S(e,z)}var G=!("undefined"==typeof window||!window.document||!window.document.createElement);function q(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var V={animationend:q("Animation","AnimationEnd"),animationiteration:q("Animation","AnimationIteration"),animationstart:q("Animation","AnimationStart"),transitionend:q("Transition","TransitionEnd")},Y={},K={};function X(e){if(Y[e])return Y[e];if(!V[e])return e;var t,n=V[e];for(t in n)if(n.hasOwnProperty(t)&&t in K)return Y[e]=n[t];return e}G&&(K=document.createElement("div").style,"AnimationEvent"in window||(delete V.animationend.animation,delete V.animationiteration.animation,delete V.animationstart.animation),"TransitionEvent"in window||delete V.transitionend.transition);var J=X("animationend"),Q=X("animationiteration"),Z=X("animationstart"),ee=X("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,oe=null;function ie(){if(oe)return oe;var e,t,n=re,r=n.length,o="value"in ne?ne.value:ne.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return oe=o.slice(e,1<t?1-t:void 0)}function ae(){return!0}function ue(){return!1}function se(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ae:ue,this.isPropagationStopped=ue,this}function le(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function ce(e){e instanceof this||a("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=le,e.release=ce}o(se.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ae)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ae)},persist:function(){this.isPersistent=ae},isPersistent:ue,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ue,this._dispatchInstances=this._dispatchListeners=null}}),se.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},se.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(se);var de=se.extend({data:null}),pe=se.extend({data:null}),he=[9,13,27,32],ve=G&&"CompositionEvent"in window,ye=null;G&&"documentMode"in document&&(ye=document.documentMode);var me=G&&"TextEvent"in window&&!ye,ge=G&&(!ve||ye&&8<ye&&11>=ye),be=String.fromCharCode(32),_e={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},we=!1;function xe(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ke(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ee=!1;var Oe={eventTypes:_e,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ve)e:{switch(e){case"compositionstart":o=_e.compositionStart;break e;case"compositionend":o=_e.compositionEnd;break e;case"compositionupdate":o=_e.compositionUpdate;break e}o=void 0}else Ee?xe(e,n)&&(o=_e.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=_e.compositionStart);return o?(ge&&"ko"!==n.locale&&(Ee||o!==_e.compositionStart?o===_e.compositionEnd&&Ee&&(i=ie()):(re="value"in(ne=r)?ne.value:ne.textContent,Ee=!0)),o=de.getPooled(o,t,n,r),i?o.data=i:null!==(i=ke(n))&&(o.data=i),H(o),i=o):i=null,(e=me?function(e,t){switch(e){case"compositionend":return ke(t);case"keypress":return 32!==t.which?null:(we=!0,be);case"textInput":return(e=t.data)===be&&we?null:e;default:return null}}(e,n):function(e,t){if(Ee)return"compositionend"===e||!ve&&xe(e,t)?(e=ie(),oe=re=ne=null,Ee=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ge&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(_e.beforeInput,t,n,r)).data=e,H(t)):t=null,null===i?t:null===t?i:[i,t]}},Se=null,Te=null,Ce=null;function Pe(e){if(e=x(e)){"function"!=typeof Se&&a("280");var t=w(e.stateNode);Se(e.stateNode,e.type,t)}}function Re(e){Te?Ce?Ce.push(e):Ce=[e]:Te=e}function je(){if(Te){var e=Te,t=Ce;if(Ce=Te=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Ae(e,t){return e(t)}function Me(e,t,n){return e(t,n)}function Ie(){}var Ne=!1;function De(e,t){if(Ne)return e(t);Ne=!0;try{return Ae(e,t)}finally{Ne=!1,(null!==Te||null!==Ce)&&(Ie(),je())}}var Le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Ue(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Le[e.type]:"textarea"===t}function Fe(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!G)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function ze(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Be(e){e._valueTracker||(e._valueTracker=function(e){var t=ze(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ze(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var He=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ge=/^(.*)[\\\/]/,qe="function"==typeof Symbol&&Symbol.for,Ve=qe?Symbol.for("react.element"):60103,Ye=qe?Symbol.for("react.portal"):60106,Ke=qe?Symbol.for("react.fragment"):60107,Xe=qe?Symbol.for("react.strict_mode"):60108,Je=qe?Symbol.for("react.profiler"):60114,Qe=qe?Symbol.for("react.provider"):60109,Ze=qe?Symbol.for("react.context"):60110,et=qe?Symbol.for("react.concurrent_mode"):60111,tt=qe?Symbol.for("react.forward_ref"):60112,nt=qe?Symbol.for("react.suspense"):60113,rt=qe?Symbol.for("react.memo"):60115,ot=qe?Symbol.for("react.lazy"):60116,it="function"==typeof Symbol&&Symbol.iterator;function at(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case et:return"ConcurrentMode";case Ke:return"Fragment";case Ye:return"Portal";case Je:return"Profiler";case Xe:return"StrictMode";case nt:return"Suspense"}if("object"==typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Qe:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return ut(e.type);case ot:if(e=1===e._status?e._result:null)return ut(e)}return null}function st(e){var t="";do{e:switch(e.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var n=e._debugOwner,r=e._debugSource,o=ut(e.type),i=null;n&&(i=ut(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(Ge,"")+":"+r.lineNumber+")":i&&(o=" (created by "+i+")"),i="\n    in "+(n||"Unknown")+o;break e;default:i=""}t+=i,e=e.return}while(e);return t}var lt=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ct=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function mt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ct.call(dt,e)||!ct.call(ft,e)&&(lt.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function gt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _t(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=gt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&mt(e,"checked",t,!1)}function xt(e,t){wt(e,t);var n=gt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Et(e,t.type,n):t.hasOwnProperty("defaultValue")&&Et(e,t.type,gt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function kt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Et(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,yt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new pt("tabIndex",1,!1,"tabindex",null);var Ot={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function St(e,t,n){return(e=se.getPooled(Ot.change,e,t,n)).type="change",Re(n),H(e),e}var Tt=null,Ct=null;function Pt(e){j(e)}function Rt(e){if($e(L(e)))return e}function jt(e,t){if("change"===e)return t}var At=!1;function Mt(){Tt&&(Tt.detachEvent("onpropertychange",It),Ct=Tt=null)}function It(e){"value"===e.propertyName&&Rt(Ct)&&De(Pt,e=St(Ct,e,Fe(e)))}function Nt(e,t,n){"focus"===e?(Mt(),Ct=n,(Tt=t).attachEvent("onpropertychange",It)):"blur"===e&&Mt()}function Dt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Rt(Ct)}function Lt(e,t){if("click"===e)return Rt(t)}function Ut(e,t){if("input"===e||"change"===e)return Rt(t)}G&&(At=We("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ot,_isInputEventSupported:At,extractEvents:function(e,t,n,r){var o=t?L(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=jt:Ue(o)?At?i=Ut:(i=Dt,a=Nt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return St(i,n,r);a&&a(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Et(o,"number",o.value)}},Wt=se.extend({view:null,detail:null}),zt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=zt[e])&&!!t[e]}function $t(){return Bt}var Ht=0,Gt=0,qt=!1,Vt=!1,Yt=Wt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:$t,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ht;return Ht=e.screenX,qt?"mousemove"===e.type?e.screenX-t:0:(qt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Gt;return Gt=e.screenY,Vt?"mousemove"===e.type?e.screenY-t:0:(Vt=!0,0)}}),Kt=Yt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Xt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i?(i=t,t=(t=n.relatedTarget||n.toElement)?N(t):null):i=null,i===t)return null;var a=void 0,u=void 0,s=void 0,l=void 0;"mouseout"===e||"mouseover"===e?(a=Yt,u=Xt.mouseLeave,s=Xt.mouseEnter,l="mouse"):"pointerout"!==e&&"pointerover"!==e||(a=Kt,u=Xt.pointerLeave,s=Xt.pointerEnter,l="pointer");var c=null==i?o:L(i);if(o=null==t?o:L(t),(e=a.getPooled(u,i,n,r)).type=l+"leave",e.target=c,e.relatedTarget=o,(n=a.getPooled(s,t,n,r)).type=l+"enter",n.target=o,n.relatedTarget=c,r=t,i&&r)e:{for(o=r,l=0,a=t=i;a;a=F(a))l++;for(a=0,s=o;s;s=F(s))a++;for(;0<l-a;)t=F(t),l--;for(;0<a-l;)o=F(o),a--;for(;l--;){if(t===o||t===o.alternate)break e;t=F(t),o=F(o)}t=null}else t=null;for(o=t,t=[];i&&i!==o&&(null===(l=i.alternate)||l!==o);)t.push(i),i=F(i);for(i=[];r&&r!==o&&(null===(l=r.alternate)||l!==o);)i.push(r),r=F(r);for(r=0;r<t.length;r++)B(t[r],"bubbled",e);for(r=i.length;0<r--;)B(i[r],"captured",n);return[e,n]}},Qt=Object.prototype.hasOwnProperty;function Zt(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function en(e,t){if(Zt(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Qt.call(t,n[r])||!Zt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&a("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&a("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var u=o.child;u;){if(u===n)return nn(o),e;if(u===r)return nn(o),t;u=u.sibling}a("188")}if(n.return!==r.return)n=o,r=i;else{u=!1;for(var s=o.child;s;){if(s===n){u=!0,n=o,r=i;break}if(s===r){u=!0,r=o,n=i;break}s=s.sibling}if(!u){for(s=i.child;s;){if(s===n){u=!0,n=i,r=o;break}if(s===r){u=!0,r=i,n=o;break}s=s.sibling}u||a("189")}}n.alternate!==r&&a("190")}return 3!==n.tag&&a("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var on=se.extend({animationName:null,elapsedTime:null,pseudoElement:null}),an=se.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=Wt.extend({relatedTarget:null});function sn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var ln={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=Wt.extend({key:function(e){if(e.key){var t=ln[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=sn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:$t,charCode:function(e){return"keypress"===e.type?sn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?sn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Yt.extend({dataTransfer:null}),pn=Wt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:$t}),hn=se.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Yt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),yn=[["abort","abort"],[J,"animationEnd"],[Q,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],mn={},gn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},mn[e]=t,gn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),yn.forEach(function(e){bn(e,!1)});var _n={eventTypes:mn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=gn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=gn[e];if(!o)return null;switch(e){case"keypress":if(0===sn(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case J:case Q:case Z:e=on;break;case ee:e=hn;break;case"scroll":e=Wt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=an;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Kt;break;default:e=se}return H(t=e.getPooled(o,t,n,r)),t}},wn=_n.isInteractiveTopLevelEventType,xn=[];function kn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=N(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=Fe(e.nativeEvent);r=e.topLevelType;for(var i=e.nativeEvent,a=null,u=0;u<m.length;u++){var s=m[u];s&&(s=s.extractEvents(r,t,i,o))&&(a=O(a,s))}j(a)}}var En=!0;function On(e,t){if(!t)return null;var n=(wn(e)?Tn:Cn).bind(null,e);t.addEventListener(e,n,!1)}function Sn(e,t){if(!t)return null;var n=(wn(e)?Tn:Cn).bind(null,e);t.addEventListener(e,n,!0)}function Tn(e,t){Me(Cn,e,t)}function Cn(e,t){if(En){var n=Fe(t);if(null===(n=N(n))||"number"!=typeof n.tag||2===tn(n)||(n=null),xn.length){var r=xn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(kn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>xn.length&&xn.push(e)}}}var Pn={},Rn=0,jn="_reactListenersID"+(""+Math.random()).slice(2);function An(e){return Object.prototype.hasOwnProperty.call(e,jn)||(e[jn]=Rn++,Pn[e[jn]]={}),Pn[e[jn]]}function Mn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Nn(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function Dn(){for(var e=window,t=Mn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Mn(e.document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Un=G&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Wn=null,zn=null,Bn=null,$n=!1;function Hn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return $n||null==Wn||Wn!==Mn(n)?null:("selectionStart"in(n=Wn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Bn&&en(Bn,n)?null:(Bn=n,(e=se.getPooled(Fn.select,zn,e,t)).type="select",e.target=Wn,H(e),e))}var Gn={eventTypes:Fn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=An(i),o=_.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?L(t):window,e){case"focus":(Ue(i)||"true"===i.contentEditable)&&(Wn=i,zn=t,Bn=null);break;case"blur":Bn=zn=Wn=null;break;case"mousedown":$n=!0;break;case"contextmenu":case"mouseup":case"dragend":return $n=!1,Hn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Hn(n,r)}return null}};function qn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Vn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+gt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&a("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Kn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&a("92"),Array.isArray(t)&&(1>=t.length||a("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:gt(n)}}function Xn(e,t){var n=gt(t.value),r=gt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Jn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}P.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w=U,x=D,k=L,P.injectEventPluginsByName({SimpleEventPlugin:_n,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:Ft,SelectEventPlugin:Gn,BeforeInputEventPlugin:Oe});var Qn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Zn(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function er(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Zn(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var tr=void 0,nr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Qn.svg||"innerHTML"in e)e.innerHTML=t;else{for((tr=tr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=tr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function rr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var or={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ir=["Webkit","ms","Moz","O"];function ar(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||or.hasOwnProperty(e)&&or[e]?(""+t).trim():t+"px"}function ur(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ar(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(or).forEach(function(e){ir.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),or[t]=or[e]})});var sr=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function lr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&a("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&a("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||a("61")),null!=t.style&&"object"!=typeof t.style&&a("62",""))}function cr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(e,t){var n=An(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=_[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Sn("scroll",e);break;case"focus":case"blur":Sn("focus",e),Sn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":We(o)&&Sn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(o)&&On(o,e)}n[o]=!0}}}function dr(){}var pr=null,hr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var mr="function"==typeof setTimeout?setTimeout:void 0,gr="function"==typeof clearTimeout?clearTimeout:void 0;function br(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function _r(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var wr=[],xr=-1;function kr(e){0>xr||(e.current=wr[xr],wr[xr]=null,xr--)}function Er(e,t){wr[++xr]=e.current,e.current=t}var Or={},Sr={current:Or},Tr={current:!1},Cr=Or;function Pr(e,t){var n=e.type.contextTypes;if(!n)return Or;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Rr(e){return null!==(e=e.childContextTypes)&&void 0!==e}function jr(e){kr(Tr),kr(Sr)}function Ar(e){kr(Tr),kr(Sr)}function Mr(e,t,n){Sr.current!==Or&&a("168"),Er(Sr,t),Er(Tr,n)}function Ir(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())i in e||a("108",ut(t)||"Unknown",i);return o({},n,r)}function Nr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Or,Cr=Sr.current,Er(Sr,t),Er(Tr,Tr.current),!0}function Dr(e,t,n){var r=e.stateNode;r||a("169"),n?(t=Ir(e,t,Cr),r.__reactInternalMemoizedMergedChildContext=t,kr(Tr),kr(Sr),Er(Sr,t)):kr(Tr),Er(Tr,n)}var Lr=null,Ur=null;function Fr(e){return function(t){try{return e(t)}catch(e){}}}function Wr(e,t,n,r){return new function(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}(e,t,n,r)}function zr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Br(e,t){var n=e.alternate;return null===n?((n=Wr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.firstContextDependency=e.firstContextDependency,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $r(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)zr(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case Ke:return Hr(n.children,o,i,t);case et:return Gr(n,3|o,i,t);case Xe:return Gr(n,2|o,i,t);case Je:return(e=Wr(12,n,t,4|o)).elementType=Je,e.type=Je,e.expirationTime=i,e;case nt:return(e=Wr(13,n,t,o)).elementType=nt,e.type=nt,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case Qe:u=10;break e;case Ze:u=9;break e;case tt:u=11;break e;case rt:u=14;break e;case ot:u=16,r=null;break e}a("130",null==e?e:typeof e,"")}return(t=Wr(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function Hr(e,t,n,r){return(e=Wr(7,e,r,t)).expirationTime=n,e}function Gr(e,t,n,r){return e=Wr(8,e,r,t),t=0==(1&t)?Xe:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function qr(e,t,n){return(e=Wr(6,e,null,t)).expirationTime=n,e}function Vr(e,t,n){return(t=Wr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),Jr(t,e)}function Kr(e,t){e.didError=!1;var n=e.latestPingedTime;0!==n&&n>=t&&(e.latestPingedTime=0),n=e.earliestPendingTime;var r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),Jr(t,e)}function Xr(e,t){var n=e.earliestPendingTime;return e=e.earliestSuspendedTime,n>t&&(t=n),e>t&&(t=e),t}function Jr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,i=t.latestPingedTime;0===(o=0!==o?o:i)&&(0===e||r<e)&&(o=r),0!==(e=o)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var Qr=!1;function Zr(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function eo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function to(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function no(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function ro(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Zr(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Zr(e.memoizedState),o=n.updateQueue=Zr(n.memoizedState)):r=e.updateQueue=eo(o):null===o&&(o=n.updateQueue=eo(r));null===o||r===o?no(r,t):null===r.lastUpdate||null===o.lastUpdate?(no(r,t),no(o,t)):(no(r,t),o.lastUpdate=t)}function oo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Zr(e.memoizedState):io(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function io(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=eo(t)),t}function ao(e,t,n,r,i,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,i):e;case 3:e.effectTag=-2049&e.effectTag|64;case 0:if(null===(i="function"==typeof(e=n.payload)?e.call(a,r,i):e)||void 0===i)break;return o({},r,i);case 2:Qr=!0}return r}function uo(e,t,n,r,o){Qr=!1;for(var i=(t=io(e,t)).baseState,a=null,u=0,s=t.firstUpdate,l=i;null!==s;){var c=s.expirationTime;c<o?(null===a&&(a=s,i=l),u<c&&(u=c)):(l=ao(e,0,s,l,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=s:(t.lastEffect.nextEffect=s,t.lastEffect=s))),s=s.next}for(c=null,s=t.firstCapturedUpdate;null!==s;){var f=s.expirationTime;f<o?(null===c&&(c=s,null===a&&(i=l)),u<f&&(u=f)):(l=ao(e,0,s,l,n,r),null!==s.callback&&(e.effectTag|=32,s.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=s:(t.lastCapturedEffect.nextEffect=s,t.lastCapturedEffect=s))),s=s.next}null===a&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===c&&(i=l),t.baseState=i,t.firstUpdate=a,t.firstCapturedUpdate=c,e.expirationTime=u,e.memoizedState=l}function so(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),lo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,lo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function lo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&a("191",n),n.call(r)}e=e.nextEffect}}function co(e,t){return{value:e,source:t,stack:st(t)}}var fo={current:null},po=null,ho=null,vo=null;function yo(e,t){var n=e.type._context;Er(fo,n._currentValue),n._currentValue=t}function mo(e){var t=fo.current;kr(fo),e.type._context._currentValue=t}function go(e){po=e,vo=ho=null,e.firstContextDependency=null}function bo(e,t){return vo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(vo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ho?(null===po&&a("293"),po.firstContextDependency=ho=t):ho=ho.next=t),e._currentValue}var _o={},wo={current:_o},xo={current:_o},ko={current:_o};function Eo(e){return e===_o&&a("174"),e}function Oo(e,t){Er(ko,t),Er(xo,e),Er(wo,_o);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:er(null,"");break;default:t=er(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}kr(wo),Er(wo,t)}function So(e){kr(wo),kr(xo),kr(ko)}function To(e){Eo(ko.current);var t=Eo(wo.current),n=er(t,e.type);t!==n&&(Er(xo,e),Er(wo,n))}function Co(e){xo.current===e&&(kr(wo),kr(xo))}function Po(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ro=He.ReactCurrentOwner,jo=(new r.Component).refs;function Ao(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Mo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=xa(),o=to(r=Yi(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),$i(),ro(e,o),Ji(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=xa(),o=to(r=Yi(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),$i(),ro(e,o),Ji(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=xa(),r=to(n=Yi(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),$i(),ro(e,r),Ji(e,n)}};function Io(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(o,i))}function No(e,t,n){var r=!1,o=Or,i=t.contextType;return"object"==typeof i&&null!==i?i=Ro.currentDispatcher.readContext(i):(o=Rr(t)?Cr:Sr.current,i=(r=null!==(r=t.contextTypes)&&void 0!==r)?Pr(e,o):Or),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Mo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Do(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Mo.enqueueReplaceState(t,t.state,null)}function Lo(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=jo;var i=t.contextType;"object"==typeof i&&null!==i?o.context=Ro.currentDispatcher.readContext(i):(i=Rr(t)?Cr:Sr.current,o.context=Pr(e,i)),null!==(i=e.updateQueue)&&(uo(e,i,n,o,r),o.state=e.memoizedState),"function"==typeof(i=t.getDerivedStateFromProps)&&(Ao(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Mo.enqueueReplaceState(o,o.state,null),null!==(i=e.updateQueue)&&(uo(e,i,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Uo=Array.isArray;function Fo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(1!==n.tag&&a("289"),r=n.stateNode),r||a("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===jo&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&a("284"),n._owner||a("290",e)}return e}function Wo(e,t){"textarea"!==e.type&&a("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function zo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Br(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=qr(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Fo(e,t,n),r.return=e,r):((r=$r(n.type,n.key,n.props,null,e.mode,r)).ref=Fo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Hr(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=qr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ve:return(n=$r(t.type,t.key,t.props,null,e.mode,n)).ref=Fo(e,null,t),n.return=e,n;case Ye:return(t=Vr(t,e.mode,n)).return=e,t}if(Uo(t)||at(t))return(t=Hr(t,e.mode,n,null)).return=e,t;Wo(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ve:return n.key===o?n.type===Ke?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case Ye:return n.key===o?c(e,t,n,r):null}if(Uo(n)||at(n))return null!==o?null:f(e,t,n,r,null);Wo(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ve:return e=e.get(null===r.key?n:r.key)||null,r.type===Ke?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case Ye:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Uo(r)||at(r))return f(t,e=e.get(n)||null,r,o,null);Wo(t,r)}return null}function v(o,a,u,s){for(var l=null,c=null,f=a,v=a=0,y=null;null!==f&&v<u.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var m=p(o,f,u[v],s);if(null===m){null===f&&(f=y);break}e&&f&&null===m.alternate&&t(o,f),a=i(m,a,v),null===c?l=m:c.sibling=m,c=m,f=y}if(v===u.length)return n(o,f),l;if(null===f){for(;v<u.length;v++)(f=d(o,u[v],s))&&(a=i(f,a,v),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(o,f);v<u.length;v++)(y=h(f,o,v,u[v],s))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),a=i(y,a,v),null===c?l=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),l}function y(o,u,s,l){var c=at(s);"function"!=typeof c&&a("150"),null==(s=c.call(s))&&a("151");for(var f=c=null,v=u,y=u=0,m=null,g=s.next();null!==v&&!g.done;y++,g=s.next()){v.index>y?(m=v,v=null):m=v.sibling;var b=p(o,v,g.value,l);if(null===b){v||(v=m);break}e&&v&&null===b.alternate&&t(o,v),u=i(b,u,y),null===f?c=b:f.sibling=b,f=b,v=m}if(g.done)return n(o,v),c;if(null===v){for(;!g.done;y++,g=s.next())null!==(g=d(o,g.value,l))&&(u=i(g,u,y),null===f?c=g:f.sibling=g,f=g);return c}for(v=r(o,v);!g.done;y++,g=s.next())null!==(g=h(v,o,y,g.value,l))&&(e&&null!==g.alternate&&v.delete(null===g.key?y:g.key),u=i(g,u,y),null===f?c=g:f.sibling=g,f=g);return e&&v.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){var l="object"==typeof i&&null!==i&&i.type===Ke&&null===i.key;l&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case Ve:e:{for(c=i.key,l=r;null!==l;){if(l.key===c){if(7===l.tag?i.type===Ke:l.elementType===i.type){n(e,l.sibling),(r=o(l,i.type===Ke?i.props.children:i.props)).ref=Fo(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===Ke?((r=Hr(i.props.children,e.mode,s,i.key)).return=e,e=r):((s=$r(i.type,i.key,i.props,null,e.mode,s)).ref=Fo(e,r,i),s.return=e,e=s)}return u(e);case Ye:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vr(i,e.mode,s)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=qr(i,e.mode,s)).return=e,e=r),u(e);if(Uo(i))return v(e,r,i,s);if(at(i))return y(e,r,i,s);if(c&&Wo(e,i),void 0===i&&!l)switch(e.tag){case 1:case 0:a("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var Bo=zo(!0),$o=zo(!1),Ho=null,Go=null,qo=!1;function Vo(e,t){var n=Wr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Yo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ko(e){if(qo){var t=Go;if(t){var n=t;if(!Yo(e,t)){if(!(t=br(n))||!Yo(e,t))return e.effectTag|=2,qo=!1,void(Ho=e);Vo(Ho,n)}Ho=e,Go=_r(t)}else e.effectTag|=2,qo=!1,Ho=e}}function Xo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;Ho=e}function Jo(e){if(e!==Ho)return!1;if(!qo)return Xo(e),qo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=Go;t;)Vo(e,t),t=br(t);return Xo(e),Go=Ho?br(e.stateNode):null,!0}function Qo(){Go=Ho=null,qo=!1}var Zo=He.ReactCurrentOwner;function ei(e,t,n,r){t.child=null===e?$o(t,null,n,r):Bo(t,e.child,n,r)}function ti(e,t,n,r,o){n=n.render;var i=t.ref;return go(t),r=n(r,i),t.effectTag|=1,ei(e,t,r,o),t.child}function ni(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||zr(a)||void 0!==a.defaultProps||null!==n.compare?((e=$r(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ri(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:en)(o,r)&&e.ref===t.ref)?ci(e,t,i):(t.effectTag|=1,(e=Br(a,r)).ref=t.ref,e.return=t,t.child=e)}function ri(e,t,n,r,o,i){return null!==e&&o<i&&en(e.memoizedProps,r)&&e.ref===t.ref?ci(e,t,i):ii(e,t,n,r,i)}function oi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ii(e,t,n,r,o){var i=Rr(n)?Cr:Sr.current;return i=Pr(t,i),go(t),n=n(r,i),t.effectTag|=1,ei(e,t,n,o),t.child}function ai(e,t,n,r,o){if(Rr(n)){var i=!0;Nr(t)}else i=!1;if(go(t),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),No(t,n,r),Lo(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var s=a.context,l=n.contextType;"object"==typeof l&&null!==l?l=Ro.currentDispatcher.readContext(l):l=Pr(t,l=Rr(n)?Cr:Sr.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&Do(t,a,r,l),Qr=!1;var d=t.memoizedState;s=a.state=d;var p=t.updateQueue;null!==p&&(uo(t,p,r,a,o),s=t.memoizedState),u!==r||d!==s||Tr.current||Qr?("function"==typeof c&&(Ao(t,n,c,r),s=t.memoizedState),(u=Qr||Io(t,n,u,r,d,s,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),a.props=r,a.state=s,a.context=l,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,u=t.memoizedProps,a.props=t.type===t.elementType?u:Po(t.type,u),s=a.context,"object"==typeof(l=n.contextType)&&null!==l?l=Ro.currentDispatcher.readContext(l):l=Pr(t,l=Rr(n)?Cr:Sr.current),(f="function"==typeof(c=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||s!==l)&&Do(t,a,r,l),Qr=!1,s=t.memoizedState,d=a.state=s,null!==(p=t.updateQueue)&&(uo(t,p,r,a,o),d=t.memoizedState),u!==r||s!==d||Tr.current||Qr?("function"==typeof c&&(Ao(t,n,c,r),d=t.memoizedState),(c=Qr||Io(t,n,u,r,s,d,l))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,l)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return ui(e,t,n,r,i,o)}function ui(e,t,n,r,o,i){oi(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return o&&Dr(t,n,!1),ci(e,t,i);r=t.stateNode,Zo.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Bo(t,e.child,null,i),t.child=Bo(t,null,u,i)):ei(e,t,u,i),t.memoizedState=r.state,o&&Dr(t,n,!0),t.child}function si(e){var t=e.stateNode;t.pendingContext?Mr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mr(0,t.context,!1),Oo(e,t.containerInfo)}function li(e,t,n){var r=t.mode,o=t.pendingProps,i=t.memoizedState;if(0==(64&t.effectTag)){i=null;var a=!1}else i={timedOutAt:null!==i?i.timedOutAt:0},a=!0,t.effectTag&=-65;return null===e?a?(a=o.fallback,o=Hr(null,r,0,null),0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),r=Hr(a,r,n,null),o.sibling=r,(n=o).return=r.return=t):n=r=$o(t,null,o.children,n):null!==e.memoizedState?(e=(r=e.child).sibling,a?(n=o.fallback,o=Br(r,r.pendingProps),0==(1&t.mode)&&((a=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(o.child=a)),r=o.sibling=Br(e,n,e.expirationTime),n=o,o.childExpirationTime=0,n.return=r.return=t):n=r=Bo(t,r.child,o.children,n)):(e=e.child,a?(a=o.fallback,(o=Hr(null,r,0,null)).child=e,0==(1&t.mode)&&(o.child=null!==t.memoizedState?t.child.child:t.child),(r=o.sibling=Hr(a,r,n,null)).effectTag|=2,n=o,o.childExpirationTime=0,n.return=r.return=t):r=n=Bo(t,e,o.children,n)),t.memoizedState=i,t.child=n,r}function ci(e,t,n){if(null!==e&&(t.firstContextDependency=e.firstContextDependency),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&a("153"),null!==t.child){for(n=Br(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Br(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function fi(e,t,n){var r=t.expirationTime;if(null!==e&&e.memoizedProps===t.pendingProps&&!Tr.current&&r<n){switch(t.tag){case 3:si(t),Qo();break;case 5:To(t);break;case 1:Rr(t.type)&&Nr(t);break;case 4:Oo(t,t.stateNode.containerInfo);break;case 10:yo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?li(e,t,n):null!==(t=ci(e,t,n))?t.sibling:null}return ci(e,t,n)}switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var o=Pr(t,Sr.current);if(go(t),o=r(e,o),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,Rr(r)){var i=!0;Nr(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null;var u=r.getDerivedStateFromProps;"function"==typeof u&&Ao(t,r,u,e),o.updater=Mo,t.stateNode=o,o._reactInternalFiber=t,Lo(t,r,e,n),t=ui(null,t,r,!0,i,n)}else t.tag=0,ei(null,t,o,n),t=t.child;return t;case 16:switch(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),i=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:throw e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._result=t,t}}(o),t.type=e,o=t.tag=function(e){if("function"==typeof e)return zr(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),i=Po(e,i),u=void 0,o){case 0:u=ii(null,t,e,i,n);break;case 1:u=ai(null,t,e,i,n);break;case 11:u=ti(null,t,e,i,n);break;case 14:u=ni(null,t,e,Po(e.type,i),r,n);break;default:a("283",e)}return u;case 0:return r=t.type,o=t.pendingProps,ii(e,t,r,o=t.elementType===r?o:Po(r,o),n);case 1:return r=t.type,o=t.pendingProps,ai(e,t,r,o=t.elementType===r?o:Po(r,o),n);case 3:return si(t),null===(r=t.updateQueue)&&a("282"),o=null!==(o=t.memoizedState)?o.element:null,uo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(Qo(),t=ci(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(Go=_r(t.stateNode.containerInfo),Ho=t,o=qo=!0),o?(t.effectTag|=2,t.child=$o(t,null,r,n)):(ei(e,t,r,n),Qo()),t=t.child),t;case 5:return To(t),null===e&&Ko(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,yr(r,o)?u=null:null!==i&&yr(r,i)&&(t.effectTag|=16),oi(e,t),1!==n&&1&t.mode&&o.hidden?(t.expirationTime=1,t=null):(ei(e,t,u,n),t=t.child),t;case 6:return null===e&&Ko(t),null;case 13:return li(e,t,n);case 4:return Oo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bo(t,null,r,n):ei(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ti(e,t,r,o=t.elementType===r?o:Po(r,o),n);case 7:return ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,u=t.memoizedProps,yo(t,i=o.value),null!==u){var s=u.value;if(0===(i=s===i&&(0!==s||1/s==1/i)||s!=s&&i!=i?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823))){if(u.children===o.children&&!Tr.current){t=ci(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){if(null!==(s=u.firstContextDependency))do{if(s.context===r&&0!=(s.observedBits&i)){if(1===u.tag){var l=to(n);l.tag=2,ro(u,l)}u.expirationTime<n&&(u.expirationTime=n),null!==(l=u.alternate)&&l.expirationTime<n&&(l.expirationTime=n);for(var c=u.return;null!==c;){if(l=c.alternate,c.childExpirationTime<n)c.childExpirationTime=n,null!==l&&l.childExpirationTime<n&&(l.childExpirationTime=n);else{if(!(null!==l&&l.childExpirationTime<n))break;l.childExpirationTime=n}c=c.return}}l=u.child,s=s.next}while(null!==s);else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}}ei(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,go(t),r=r(o=bo(o,i.unstable_observedBits)),t.effectTag|=1,ei(e,t,r,n),t.child;case 14:return ni(e,t,o=t.type,i=Po(o.type,t.pendingProps),r,n);case 15:return ri(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Po(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Rr(r)?(e=!0,Nr(t)):e=!1,go(t),No(t,r,o),Lo(t,r,o,n),ui(null,t,r,!0,e,n);default:a("156")}}function di(e){e.effectTag|=4}var pi=void 0,hi=void 0,vi=void 0,yi=void 0;function mi(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=st(n)),null!==n&&ut(n.type),t=t.value,null!==e&&1===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function gi(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Vi(e,t)}else t.current=null}function bi(e){switch("function"==typeof Ur&&Ur(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(null!==r){var o=e;try{r()}catch(e){Vi(o,e)}}n=n.next}while(n!==t)}break;case 1:if(gi(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Vi(e,t)}break;case 5:gi(e);break;case 4:xi(e)}}function _i(e){return 5===e.tag||3===e.tag||4===e.tag}function wi(e){e:{for(var t=e.return;null!==t;){if(_i(t)){var n=t;break e}t=t.return}a("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:a("161")}16&n.effectTag&&(rr(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||_i(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)if(n)if(r){var i=t,u=o.stateNode,s=n;8===i.nodeType?i.parentNode.insertBefore(u,s):i.insertBefore(u,s)}else t.insertBefore(o.stateNode,n);else r?(u=t,s=o.stateNode,8===u.nodeType?(i=u.parentNode).insertBefore(s,u):(i=u).appendChild(s),null!==(u=u._reactRootContainer)&&void 0!==u||null!==i.onclick||(i.onclick=dr)):t.appendChild(o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function xi(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&a("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var i=t,u=i;;)if(bi(u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===i)break;for(;null===u.sibling;){if(null===u.return||u.return===i)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}o?(i=r,u=t.stateNode,8===i.nodeType?i.parentNode.removeChild(u):i.removeChild(u)):r.removeChild(t.stateNode)}else if(4===t.tag?(r=t.stateNode.containerInfo,o=!0):bi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function ki(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[I]=r,"input"===e&&"radio"===r.type&&null!=r.name&&wt(n,r),cr(e,o),t=cr(e,r),o=0;o<i.length;o+=2){var u=i[o],s=i[o+1];"style"===u?ur(n,s):"dangerouslySetInnerHTML"===u?nr(n,s):"children"===u?rr(n,s):mt(n,u,s,t)}switch(e){case"input":xt(n,r);break;case"textarea":Xn(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Vn(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Vn(n,!!r.multiple,r.defaultValue,!0):Vn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:null===t.stateNode&&a("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(e=t,null===(n=t.memoizedState)?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=xa())),null!==e)e:for(t=n=e;;){if(5===t.tag)e=t.stateNode,r?e.style.display="none":(e=t.stateNode,i=void 0!==(i=t.memoizedProps.style)&&null!==i&&i.hasOwnProperty("display")?i.display:null,e.style.display=ar("display",i));else if(6===t.tag)t.stateNode.nodeValue=r?"":t.memoizedProps;else{if(13===t.tag&&null!==t.memoizedState){(e=t.child.sibling).return=t,t=e;continue}if(null!==t.child){t.child.return=t,t=t.child;continue}}if(t===n)break e;for(;null===t.sibling;){if(null===t.return||t.return===n)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}break;case 17:break;default:a("163")}}function Ei(e,t,n){(n=to(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Aa(r),mi(e,t)},n}function Oi(e,t,n){(n=to(n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zi?zi=new Set([this]):zi.add(this));var n=t.value,o=t.stack;mi(e,t),this.componentDidCatch(n,{componentStack:null!==o?o:""})}),n}function Si(e){switch(e.tag){case 1:Rr(e.type)&&jr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return So(),Ar(),0!=(64&(t=e.effectTag))&&a("285"),e.effectTag=-2049&t|64,e;case 5:return Co(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 4:return So(),null;case 10:return mo(e),null;default:return null}}pi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},hi=function(){},vi=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u=t.stateNode;switch(Eo(wo.current),e=null,n){case"input":a=bt(u,a),r=bt(u,r),e=[];break;case"option":a=qn(u,a),r=qn(u,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=Yn(u,a),r=Yn(u,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(u.onclick=dr)}lr(n,r),u=n=void 0;var s=null;for(n in a)if(!r.hasOwnProperty(n)&&a.hasOwnProperty(n)&&null!=a[n])if("style"===n){var l=a[n];for(u in l)l.hasOwnProperty(u)&&(s||(s={}),s[u]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(b.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var c=r[n];if(l=null!=a?a[n]:void 0,r.hasOwnProperty(n)&&c!==l&&(null!=c||null!=l))if("style"===n)if(l){for(u in l)!l.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(s||(s={}),s[u]="");for(u in c)c.hasOwnProperty(u)&&l[u]!==c[u]&&(s||(s={}),s[u]=c[u])}else s||(e||(e=[]),e.push(n,s)),s=c;else"dangerouslySetInnerHTML"===n?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(e=e||[]).push(n,""+c)):"children"===n?l===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(n,""+c):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(b.hasOwnProperty(n)?(null!=c&&fr(i,n),e||l===c||(e=[])):(e=e||[]).push(n,c))}s&&(e=e||[]).push("style",s),i=e,(t.updateQueue=i)&&di(t)}},yi=function(e,t,n,r){n!==r&&di(t)};var Ti={readContext:bo},Ci=He.ReactCurrentOwner,Pi=1073741822,Ri=0,ji=!1,Ai=null,Mi=null,Ii=0,Ni=-1,Di=!1,Li=null,Ui=!1,Fi=null,Wi=null,zi=null;function Bi(){if(null!==Ai)for(var e=Ai.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!==n&&void 0!==n&&jr();break;case 3:So(),Ar();break;case 5:Co(t);break;case 4:So();break;case 10:mo(t)}e=e.return}Mi=null,Ii=0,Ni=-1,Di=!1,Ai=null}function $i(){null!==Wi&&(i.unstable_cancelCallback(Fi),Wi())}function Hi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(1024&e.effectTag)){Ai=e;e:{var i=t,u=Ii,s=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Rr(t.type)&&jr();break;case 3:So(),Ar(),(s=t.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==i&&null!==i.child||(Jo(t),t.effectTag&=-3),hi(t);break;case 5:Co(t);var l=Eo(ko.current);if(u=t.type,null!==i&&null!=t.stateNode)vi(i,t,u,s,l),i.ref!==t.ref&&(t.effectTag|=128);else if(s){var c=Eo(wo.current);if(Jo(t)){i=(s=t).stateNode;var f=s.type,d=s.memoizedProps,p=l;switch(i[M]=s,i[I]=d,u=void 0,l=f){case"iframe":case"object":On("load",i);break;case"video":case"audio":for(f=0;f<te.length;f++)On(te[f],i);break;case"source":On("error",i);break;case"img":case"image":case"link":On("error",i),On("load",i);break;case"form":On("reset",i),On("submit",i);break;case"details":On("toggle",i);break;case"input":_t(i,d),On("invalid",i),fr(p,"onChange");break;case"select":i._wrapperState={wasMultiple:!!d.multiple},On("invalid",i),fr(p,"onChange");break;case"textarea":Kn(i,d),On("invalid",i),fr(p,"onChange")}for(u in lr(l,d),f=null,d)d.hasOwnProperty(u)&&(c=d[u],"children"===u?"string"==typeof c?i.textContent!==c&&(f=["children",c]):"number"==typeof c&&i.textContent!==""+c&&(f=["children",""+c]):b.hasOwnProperty(u)&&null!=c&&fr(p,u));switch(l){case"input":Be(i),kt(i,d,!0);break;case"textarea":Be(i),Jn(i);break;case"select":case"option":break;default:"function"==typeof d.onClick&&(i.onclick=dr)}u=f,s.updateQueue=u,(s=null!==u)&&di(t)}else{d=t,i=u,p=s,f=9===l.nodeType?l:l.ownerDocument,c===Qn.html&&(c=Zn(i)),c===Qn.html?"script"===i?((i=f.createElement("div")).innerHTML="<script><\/script>",f=i.removeChild(i.firstChild)):"string"==typeof p.is?f=f.createElement(i,{is:p.is}):(f=f.createElement(i),"select"===i&&p.multiple&&(f.multiple=!0)):f=f.createElementNS(c,i),(i=f)[M]=d,i[I]=s,pi(i,t,!1,!1),p=i;var h=l,v=cr(f=u,d=s);switch(f){case"iframe":case"object":On("load",p),l=d;break;case"video":case"audio":for(l=0;l<te.length;l++)On(te[l],p);l=d;break;case"source":On("error",p),l=d;break;case"img":case"image":case"link":On("error",p),On("load",p),l=d;break;case"form":On("reset",p),On("submit",p),l=d;break;case"details":On("toggle",p),l=d;break;case"input":_t(p,d),l=bt(p,d),On("invalid",p),fr(h,"onChange");break;case"option":l=qn(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},l=o({},d,{value:void 0}),On("invalid",p),fr(h,"onChange");break;case"textarea":Kn(p,d),l=Yn(p,d),On("invalid",p),fr(h,"onChange");break;default:l=d}lr(f,l),c=void 0;var y=f,m=p,g=l;for(c in g)if(g.hasOwnProperty(c)){var _=g[c];"style"===c?ur(m,_):"dangerouslySetInnerHTML"===c?null!=(_=_?_.__html:void 0)&&nr(m,_):"children"===c?"string"==typeof _?("textarea"!==y||""!==_)&&rr(m,_):"number"==typeof _&&rr(m,""+_):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(b.hasOwnProperty(c)?null!=_&&fr(h,c):null!=_&&mt(m,c,_,v))}switch(f){case"input":Be(p),kt(p,d,!1);break;case"textarea":Be(p),Jn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+gt(d.value));break;case"select":(l=p).multiple=!!d.multiple,null!=(p=d.value)?Vn(l,!!d.multiple,p,!1):null!=d.defaultValue&&Vn(l,!!d.multiple,d.defaultValue,!0);break;default:"function"==typeof l.onClick&&(p.onclick=dr)}(s=vr(u,s))&&di(t),t.stateNode=i}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&a("166");break;case 6:i&&null!=t.stateNode?yi(i,t,i.memoizedProps,s):("string"!=typeof s&&(null===t.stateNode&&a("166")),i=Eo(ko.current),Eo(wo.current),Jo(t)?(u=(s=t).stateNode,i=s.memoizedProps,u[M]=s,(s=u.nodeValue!==i)&&di(t)):(u=t,(s=(9===i.nodeType?i:i.ownerDocument).createTextNode(s))[M]=t,u.stateNode=s));break;case 11:break;case 13:if(s=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=u,Ai=t;break e}s=null!==s,u=null!==i&&null!==i.memoizedState,null!==i&&!s&&u&&(null!==(i=i.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=i,i.nextEffect=l):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),(s!==u||0==(1&t.effectTag)&&s)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:So(),hi(t);break;case 10:mo(t);break;case 9:case 14:break;case 17:Rr(t.type)&&jr();break;default:a("156")}Ai=null}if(t=e,1===Ii||1!==t.childExpirationTime){for(s=0,u=t.child;null!==u;)i=u.expirationTime,l=u.childExpirationTime,i>s&&(s=i),l>s&&(s=l),u=u.sibling;t.childExpirationTime=s}if(null!==Ai)return Ai;null!==n&&0==(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Si(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Gi(e){var t=fi(e.alternate,e,Ii);return e.memoizedProps=e.pendingProps,null===t&&(t=Hi(e)),Ci.current=null,t}function qi(e,t){ji&&a("243"),$i(),ji=!0,Ci.currentDispatcher=Ti;var n=e.nextExpirationTimeToWorkOn;n===Ii&&e===Mi&&null!==Ai||(Bi(),Ii=n,Ai=Br((Mi=e).current,null),e.pendingCommitExpirationTime=0);for(var r=!1;;){try{if(t)for(;null!==Ai&&!Sa();)Ai=Gi(Ai);else for(;null!==Ai;)Ai=Gi(Ai)}catch(t){if(vo=ho=po=null,null===Ai)r=!0,Aa(t);else{null===Ai&&a("271");var o=Ai,i=o.return;if(null!==i){e:{var u=e,s=i,l=o,c=t;if(i=Ii,l.effectTag|=1024,l.firstEffect=l.lastEffect=null,null!==c&&"object"==typeof c&&"function"==typeof c.then){var f=c;c=s;var d=-1,p=-1;do{if(13===c.tag){var h=c.alternate;if(null!==h&&null!==(h=h.memoizedState)){p=10*(1073741822-h.timedOutAt);break}"number"==typeof(h=c.pendingProps.maxDuration)&&(0>=h?d=0:(-1===d||h<d)&&(d=h))}c=c.return}while(null!==c);c=s;do{if((h=13===c.tag)&&(h=void 0!==c.memoizedProps.fallback&&null===c.memoizedState),h){if(s=Ki.bind(null,u,c,l,0==(1&c.mode)?1073741823:i),f.then(s,s),0==(1&c.mode)){c.effectTag|=64,l.effectTag&=-1957,1===l.tag&&null===l.alternate&&(l.tag=17),l.expirationTime=i;break e}-1===d?u=1073741823:(-1===p&&(p=10*(1073741822-Xr(u,i))-5e3),u=p+d),0<=u&&Ni<u&&(Ni=u),c.effectTag|=2048,c.expirationTime=i;break e}c=c.return}while(null!==c);c=Error((ut(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+st(l))}Di=!0,c=co(c,l),u=s;do{switch(u.tag){case 3:l=c,u.effectTag|=2048,u.expirationTime=i,oo(u,i=Ei(u,l,i));break e;case 1:if(l=c,s=u.type,f=u.stateNode,0==(64&u.effectTag)&&("function"==typeof s.getDerivedStateFromError||null!==f&&"function"==typeof f.componentDidCatch&&(null===zi||!zi.has(f)))){u.effectTag|=2048,u.expirationTime=i,oo(u,i=Oi(u,l,i));break e}}u=u.return}while(null!==u)}Ai=Hi(o);continue}r=!0,Aa(t)}}break}if(ji=!1,vo=ho=po=Ci.currentDispatcher=null,r)Mi=null,e.finishedWork=null;else if(null!==Ai)e.finishedWork=null;else{if(null===(r=e.current.alternate)&&a("281"),Mi=null,Di){if(o=e.latestPendingTime,i=e.latestSuspendedTime,u=e.latestPingedTime,0!==o&&o<n||0!==i&&i<n||0!==u&&u<n)return Kr(e,n),void wa(e,r,n,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,n=e.nextExpirationTimeToWorkOn=n,t=e.expirationTime=1073741823,void wa(e,r,n,t,-1)}t&&-1!==Ni?(Kr(e,n),(t=10*(1073741822-Xr(e,n)))<Ni&&(Ni=t),t=10*(1073741822-xa()),t=Ni-t,wa(e,r,n,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=n,e.finishedWork=r)}}function Vi(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zi||!zi.has(r)))return ro(n,e=Oi(n,e=co(t,e),1073741823)),void Ji(n,1073741823);break;case 3:return ro(n,e=Ei(n,e=co(t,e),1073741823)),void Ji(n,1073741823)}n=n.return}3===e.tag&&(ro(e,n=Ei(e,n=co(t,e),1073741823)),Ji(e,1073741823))}function Yi(e,t){return 0!==Ri?e=Ri:ji?e=Ui?1073741823:Ii:1&t.mode?(e=fa?1073741822-10*(1+((1073741822-e+15)/10|0)):1073741822-25*(1+((1073741822-e+500)/25|0)),null!==Mi&&e===Ii&&--e):e=1073741823,fa&&(0===aa||e<aa)&&(aa=e),e}function Ki(e,t,n,r){var o=e.earliestSuspendedTime,i=e.latestSuspendedTime;if(0!==o&&r<=o&&r>=i){i=o=r,e.didError=!1;var a=e.latestPingedTime;(0===a||a>i)&&(e.latestPingedTime=i),Jr(i,e)}else Yr(e,o=Yi(o=xa(),t));0!=(1&t.mode)&&e===Mi&&Ii===r&&(Mi=null),Xi(t,o),0==(1&t.mode)&&(Xi(n,o),1===n.tag&&null!==n.stateNode&&((t=to(o)).tag=2,ro(n,t))),0!==(n=e.expirationTime)&&ka(e,n)}function Xi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return o}function Ji(e,t){null!==(e=Xi(e,t))&&(!ji&&0!==Ii&&t>Ii&&Bi(),Yr(e,t),ji&&!Ui&&Mi===e||ka(e,e.expirationTime),ma>ya&&(ma=0,a("185")))}function Qi(e,t,n,r,o){var i=Ri;Ri=1073741823;try{return e(t,n,r,o)}finally{Ri=i}}var Zi=null,ea=null,ta=0,na=void 0,ra=!1,oa=null,ia=0,aa=0,ua=!1,sa=null,la=!1,ca=!1,fa=!1,da=null,pa=i.unstable_now(),ha=1073741822-(pa/10|0),va=ha,ya=50,ma=0,ga=null;function ba(){ha=1073741822-((i.unstable_now()-pa)/10|0)}function _a(e,t){if(0!==ta){if(t<ta)return;null!==na&&i.unstable_cancelCallback(na)}ta=t,e=i.unstable_now()-pa,na=i.unstable_scheduleCallback(Ta,{timeout:10*(1073741822-t)-e})}function wa(e,t,n,r,o){e.expirationTime=r,0!==o||Sa()?0<o&&(e.timeoutHandle=mr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,ba(),va=ha,Pa(e,n)}.bind(null,e,t,n),o)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function xa(){return ra?va:(Ea(),0!==ia&&1!==ia||(ba(),va=ha),va)}function ka(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ea?(Zi=ea=e,e.nextScheduledRoot=e):(ea=ea.nextScheduledRoot=e).nextScheduledRoot=Zi):t>e.expirationTime&&(e.expirationTime=t),ra||(la?ca&&(oa=e,ia=1073741823,Ra(e,1073741823,!1)):1073741823===t?Ca(1073741823,!1):_a(e,t))}function Ea(){var e=0,t=null;if(null!==ea)for(var n=ea,r=Zi;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===ea)&&a("244"),r===r.nextScheduledRoot){Zi=ea=r.nextScheduledRoot=null;break}if(r===Zi)Zi=o=r.nextScheduledRoot,ea.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ea){(ea=n).nextScheduledRoot=Zi,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(o>e&&(e=o,t=r),r===ea)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}oa=t,ia=e}var Oa=!1;function Sa(){return!!Oa||!!i.unstable_shouldYield()&&(Oa=!0)}function Ta(){try{if(!Sa()&&null!==Zi){ba();var e=Zi;do{var t=e.expirationTime;0!==t&&ha<=t&&(e.nextExpirationTimeToWorkOn=ha),e=e.nextScheduledRoot}while(e!==Zi)}Ca(0,!0)}finally{Oa=!1}}function Ca(e,t){if(Ea(),t)for(ba(),va=ha;null!==oa&&0!==ia&&e<=ia&&!(Oa&&ha>ia);)Ra(oa,ia,ha>ia),Ea(),ba(),va=ha;else for(;null!==oa&&0!==ia&&e<=ia;)Ra(oa,ia,!1),Ea();if(t&&(ta=0,na=null),0!==ia&&_a(oa,ia),ma=0,ga=null,null!==da)for(e=da,da=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ua||(ua=!0,sa=e)}}if(ua)throw e=sa,sa=null,ua=!1,e}function Pa(e,t){ra&&a("253"),oa=e,ia=t,Ra(e,t,!1),Ca(1073741823,!1)}function Ra(e,t,n){if(ra&&a("245"),ra=!0,n){var r=e.finishedWork;null!==r?ja(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,gr(r)),qi(e,n),null!==(r=e.finishedWork)&&(Sa()?e.finishedWork=r:ja(e,r,t)))}else null!==(r=e.finishedWork)?ja(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,gr(r)),qi(e,n),null!==(r=e.finishedWork)&&ja(e,r,t));ra=!1}function ja(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===da?da=[r]:da.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ga?ma++:(ga=e,ma=0),Ui=ji=!0,e.current===t&&a("177"),0===(n=e.pendingCommitExpirationTime)&&a("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=o>r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o>r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Yr(e,r):r<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Yr(e,r)):r>o&&Yr(e,r)),Jr(0,e),Ci.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,pr=En,Ln(o=Dn())){if("selectionStart"in o)var i={start:o.selectionStart,end:o.selectionEnd};else e:{var u=(i=(i=o.ownerDocument)&&i.defaultView||window).getSelection&&i.getSelection();if(u&&0!==u.rangeCount){i=u.anchorNode;var s=u.anchorOffset,l=u.focusNode;u=u.focusOffset;try{i.nodeType,l.nodeType}catch(e){i=null;break e}var c=0,f=-1,d=-1,p=0,h=0,v=o,y=null;t:for(;;){for(var m;v!==i||0!==s&&3!==v.nodeType||(f=c+s),v!==l||0!==u&&3!==v.nodeType||(d=c+u),3===v.nodeType&&(c+=v.nodeValue.length),null!==(m=v.firstChild);)y=v,v=m;for(;;){if(v===o)break t;if(y===i&&++p===s&&(f=c),y===l&&++h===u&&(d=c),null!==(m=v.nextSibling))break;y=(v=y).parentNode}v=m}i=-1===f||-1===d?null:{start:f,end:d}}else i=null}i=i||{start:0,end:0}}else i=null;for(hr={focusedElem:o,selectionRange:i},En=!1,Li=r;null!==Li;){o=!1,i=void 0;try{for(;null!==Li;){if(256&Li.effectTag)e:{var g=Li.alternate;switch((s=Li).tag){case 0:case 11:case 15:break e;case 1:if(256&s.effectTag&&null!==g){var b=g.memoizedProps,_=g.memoizedState,w=s.stateNode,x=w.getSnapshotBeforeUpdate(s.elementType===s.type?b:Po(s.type,b),_);w.__reactInternalSnapshotBeforeUpdate=x}break e;case 3:case 5:case 6:case 4:case 17:break e;default:a("163")}}Li=Li.nextEffect}}catch(e){o=!0,i=e}o&&(null===Li&&a("178"),Vi(Li,i),null!==Li&&(Li=Li.nextEffect))}for(Li=r;null!==Li;){g=!1,b=void 0;try{for(;null!==Li;){var k=Li.effectTag;if(16&k&&rr(Li.stateNode,""),128&k){var E=Li.alternate;if(null!==E){var O=E.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&k){case 2:wi(Li),Li.effectTag&=-3;break;case 6:wi(Li),Li.effectTag&=-3,ki(Li.alternate,Li);break;case 4:ki(Li.alternate,Li);break;case 8:xi(_=Li),_.return=null,_.child=null,_.alternate&&(_.alternate.child=null,_.alternate.return=null)}Li=Li.nextEffect}}catch(e){g=!0,b=e}g&&(null===Li&&a("178"),Vi(Li,b),null!==Li&&(Li=Li.nextEffect))}if(O=hr,E=Dn(),k=O.focusedElem,b=O.selectionRange,E!==k&&k&&k.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(k.ownerDocument.documentElement,k)){null!==b&&Ln(k)&&(E=b.start,void 0===(O=b.end)&&(O=E),"selectionStart"in k?(k.selectionStart=E,k.selectionEnd=Math.min(O,k.value.length)):(O=(E=k.ownerDocument||document)&&E.defaultView||window).getSelection&&(O=O.getSelection(),_=k.textContent.length,g=Math.min(b.start,_),b=void 0===b.end?g:Math.min(b.end,_),!O.extend&&g>b&&(_=b,b=g,g=_),_=Nn(k,g),w=Nn(k,b),_&&w&&(1!==O.rangeCount||O.anchorNode!==_.node||O.anchorOffset!==_.offset||O.focusNode!==w.node||O.focusOffset!==w.offset)&&((E=E.createRange()).setStart(_.node,_.offset),O.removeAllRanges(),g>b?(O.addRange(E),O.extend(w.node,w.offset)):(E.setEnd(w.node,w.offset),O.addRange(E))))),E=[];for(O=k;O=O.parentNode;)1===O.nodeType&&E.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof k.focus&&k.focus(),k=0;k<E.length;k++)(O=E[k]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(hr=null,En=!!pr,pr=null,e.current=t,Li=r;null!==Li;){r=!1,k=void 0;try{for(E=n;null!==Li;){var S=Li.effectTag;if(36&S){var T=Li.alternate;switch(g=E,(O=Li).tag){case 0:case 11:case 15:break;case 1:var C=O.stateNode;if(4&O.effectTag)if(null===T)C.componentDidMount();else{var P=O.elementType===O.type?T.memoizedProps:Po(O.type,T.memoizedProps);C.componentDidUpdate(P,T.memoizedState,C.__reactInternalSnapshotBeforeUpdate)}var R=O.updateQueue;null!==R&&so(0,R,C);break;case 3:var j=O.updateQueue;if(null!==j){if(b=null,null!==O.child)switch(O.child.tag){case 5:b=O.child.stateNode;break;case 1:b=O.child.stateNode}so(0,j,b)}break;case 5:var A=O.stateNode;null===T&&4&O.effectTag&&vr(O.type,O.memoizedProps)&&A.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:a("163")}}if(128&S){var M=Li.ref;if(null!==M){var I=Li.stateNode;switch(Li.tag){case 5:var N=I;break;default:N=I}"function"==typeof M?M(N):M.current=N}}Li=Li.nextEffect}}catch(e){r=!0,k=e}r&&(null===Li&&a("178"),Vi(Li,k),null!==Li&&(Li=Li.nextEffect))}ji=Ui=!1,"function"==typeof Lr&&Lr(t.stateNode),S=t.expirationTime,0===(t=(t=t.childExpirationTime)>S?t:S)&&(zi=null),e.expirationTime=t,e.finishedWork=null}function Aa(e){null===oa&&a("246"),oa.expirationTime=0,ua||(ua=!0,sa=e)}function Ma(e,t){var n=la;la=!0;try{return e(t)}finally{(la=n)||ra||Ca(1073741823,!1)}}function Ia(e,t){if(la&&!ca){ca=!0;try{return e(t)}finally{ca=!1}}return e(t)}function Na(e,t,n){if(fa)return e(t,n);la||ra||0===aa||(Ca(aa,!1),aa=0);var r=fa,o=la;la=fa=!0;try{return e(t,n)}finally{fa=r,(la=o)||ra||Ca(1073741823,!1)}}function Da(e,t,n,r,o){var i=t.current;e:if(n){n=n._reactInternalFiber;t:{2===tn(n)&&1===n.tag||a("170");var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(Rr(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);a("171"),u=void 0}if(1===n.tag){var s=n.type;if(Rr(s)){n=Ir(n,s,u);break e}}n=u}else n=Or;return null===t.context?t.context=n:t.pendingContext=n,t=o,(o=to(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),$i(),ro(i,o),Ji(i,r),r}function La(e,t,n,r){var o=t.current;return Da(e,t,n,o=Yi(xa(),o),r)}function Ua(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Fa(e){var t=1073741822-25*(1+((1073741822-xa()+500)/25|0));t>=Pi&&(t=Pi-1),this._expirationTime=Pi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Wa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function za(e,t,n){e={current:t=Wr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ba(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $a(e,t,n,r,o){Ba(n)||a("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var u=o;o=function(){var e=Ua(i._internalRoot);u.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new za(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=Ua(i._internalRoot);s.call(e)}}Ia(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return Ua(i._internalRoot)}function Ha(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ba(t)||a("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ye,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Se=function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=U(r);o||a("90"),$e(r),xt(r,o)}}}break;case"textarea":Xn(e,n);break;case"select":null!=(t=n.value)&&Vn(e,!!n.multiple,t,!1)}},Fa.prototype.render=function(e){this._defer||a("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Wa;return Da(e,t,null,n,r._onCommit),r},Fa.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Fa.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||a("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&a("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Pa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Fa.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Wa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Wa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&a("191",n),n()}}},za.prototype.render=function(e,t){var n=this._internalRoot,r=new Wa;return null!==(t=void 0===t?null:t)&&r.then(t),La(e,n,null,r._onCommit),r},za.prototype.unmount=function(e){var t=this._internalRoot,n=new Wa;return null!==(e=void 0===e?null:e)&&n.then(e),La(null,t,null,n._onCommit),n},za.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Wa;return null!==(n=void 0===n?null:n)&&o.then(n),La(t,r,e,o._onCommit),o},za.prototype.createBatch=function(){var e=new Fa(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Ae=Ma,Me=Na,Ie=function(){ra||0===aa||(Ca(aa,!1),aa=0)};var Ga={createPortal:Ha,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?a("188"):a("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return $a(null,e,t,!0,n)},render:function(e,t,n){return $a(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&a("38"),$a(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ba(e)||a("40"),!!e._reactRootContainer&&(Ia(function(){$a(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Ha.apply(void 0,arguments)},unstable_batchedUpdates:Ma,unstable_interactiveUpdates:Na,flushSync:function(e,t){ra&&a("187");var n=la;la=!0;try{return Qi(e,t)}finally{la=n,Ca(1073741823,!1)}},unstable_flushControlled:function(e){var t=la;la=!0;try{Qi(e)}finally{(la=t)||ra||Ca(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[D,L,U,P.injectEventPluginsByName,g,H,function(e){S(e,$)},Re,je,Cn,j]},unstable_createRoot:function(e,t){return Ba(e)||a("299","unstable_createRoot"),new za(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Lr=Fr(function(e){return t.onCommitFiberRoot(n,e)}),Ur=Fr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:N,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});var qa={default:Ga},Va=qa&&Ga||qa;e.exports=Va.default||Va},function(e,t,n){"use strict";e.exports=n(237)},function(e,t,n){"use strict";
/** @license React v16.6.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=null,o=!1,i=3,a=-1,u=-1,s=!1,l=!1;function c(){if(!s){var e=r.expirationTime;l?m():l=!0,y(p,e)}}function f(){var e=r,t=r.next;if(r===t)r=null;else{var n=r.previous;r=n.next=t,t.previous=n}e.next=e.previous=null,n=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=i,a=u;i=e,u=t;try{var s=n()}finally{i=o,u=a}if("function"==typeof s)if(s={callback:s,priorityLevel:e,expirationTime:t,next:null,previous:null},null===r)r=s.next=s.previous=s;else{n=null,e=r;do{if(e.expirationTime>=t){n=e;break}e=e.next}while(e!==r);null===n?n=r:n===r&&(r=s,c()),(t=n.previous).next=n.previous=s,s.next=n,s.previous=t}}function d(){if(-1===a&&null!==r&&1===r.priorityLevel){s=!0;try{do{f()}while(null!==r&&1===r.priorityLevel)}finally{s=!1,null!==r?c():l=!1}}}function p(e){s=!0;var n=o;o=e;try{if(e)for(;null!==r;){var i=t.unstable_now();if(!(r.expirationTime<=i))break;do{f()}while(null!==r&&r.expirationTime<=i)}else if(null!==r)do{f()}while(null!==r&&!g())}finally{s=!1,o=n,null!==r?c():l=!1,d()}}var h,v,y,m,g,b=Date,_="function"==typeof setTimeout?setTimeout:void 0,w="function"==typeof clearTimeout?clearTimeout:void 0,x="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,k="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function E(e){h=x(function(t){w(v),e(t)}),v=_(function(){k(h),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var O=performance;t.unstable_now=function(){return O.now()}}else t.unstable_now=function(){return b.now()};if("undefined"!=typeof window&&window._schedMock){var S=window._schedMock;y=S[0],m=S[1],g=S[2]}else if("undefined"==typeof window||"function"!=typeof window.addEventListener){var T=null,C=-1,P=function(e,t){if(null!==T){var n=T;T=null;try{C=t,n(e)}finally{C=-1}}};y=function(e,t){-1!==C?setTimeout(y,0,e,t):(T=e,setTimeout(P,t,!0,t),setTimeout(P,1073741823,!1,1073741823))},m=function(){T=null},g=function(){return!1},t.unstable_now=function(){return-1===C?0:C}}else{"undefined"!=typeof console&&("function"!=typeof x&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof k&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var R=null,j=!1,A=-1,M=!1,I=!1,N=0,D=33,L=33;g=function(){return N<=t.unstable_now()};var U="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===U){j=!1,e=R;var n=A;R=null,A=-1;var r=t.unstable_now(),o=!1;if(0>=N-r){if(!(-1!==n&&n<=r))return M||(M=!0,E(F)),R=e,void(A=n);o=!0}if(null!==e){I=!0;try{e(o)}finally{I=!1}}}},!1);var F=function(e){if(null!==R){E(F);var t=e-N+L;t<L&&D<L?(8>t&&(t=8),L=t<D?D:t):D=t,N=e+L,j||(j=!0,window.postMessage(U,"*"))}else M=!1};y=function(e,t){R=e,A=t,I||0>t?window.postMessage(U,"*"):M||(M=!0,E(F))},m=function(){R=null,j=!1,A=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=i,o=a;i=e,a=t.unstable_now();try{return n()}finally{i=r,a=o,d()}},t.unstable_scheduleCallback=function(e,n){var o=-1!==a?a:t.unstable_now();if("object"==typeof n&&null!==n&&"number"==typeof n.timeout)n=o+n.timeout;else switch(i){case 1:n=o+-1;break;case 2:n=o+250;break;case 5:n=o+1073741823;break;case 4:n=o+1e4;break;default:n=o+5e3}if(e={callback:e,priorityLevel:i,expirationTime:n,next:null,previous:null},null===r)r=e.next=e.previous=e,c();else{o=null;var u=r;do{if(u.expirationTime>n){o=u;break}u=u.next}while(u!==r);null===o?o=r:o===r&&(r=e,c()),(n=o.previous).next=o.previous=e,e.next=o,e.previous=n}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)r=null;else{e===r&&(r=t);var n=e.previous;n.next=t,t.previous=n}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=i;return function(){var r=i,o=a;i=n,a=t.unstable_now();try{return e.apply(this,arguments)}finally{i=r,a=o,d()}}},t.unstable_getCurrentPriorityLevel=function(){return i},t.unstable_shouldYield=function(){return!o&&(null!==r&&r.expirationTime<u||g())}},function(e,t,n){"use strict";var r=n(239);function o(){}e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.6.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,o=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,s=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,c=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,p=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116;function y(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case f:case a:case s:case u:return e;default:switch(e=e&&e.$$typeof){case c:case d:case l:return e;default:return t}}case i:return t}}}function m(e){return y(e)===f}t.typeOf=y,t.AsyncMode=f,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=o,t.ForwardRef=d,t.Fragment=a,t.Profiler=s,t.Portal=i,t.StrictMode=u,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===s||e===u||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===h||e.$$typeof===l||e.$$typeof===c||e.$$typeof===d)},t.isAsyncMode=function(e){return m(e)},t.isConcurrentMode=m,t.isContextConsumer=function(e){return y(e)===c},t.isContextProvider=function(e){return y(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return y(e)===d},t.isFragment=function(e){return y(e)===a},t.isProfiler=function(e){return y(e)===s},t.isPortal=function(e){return y(e)===i},t.isStrictMode=function(e){return y(e)===u}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(78)),a=c(n(242)),u=c(n(244)),s=c(n(245)),l=c(n(246));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){return o({},b("actions"),b("createSelectors")(e),{ConnectedRouter:b("createConnectedRouter")(e),connectRouter:b("createConnectRouter")(e),routerMiddleware:b("routerMiddleware")})};function d(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=b("createAll");var p=null;function h(){if(null===p){var e=d();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),p=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return p}function v(){var e=d();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function y(){var e=h(),t=v(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=d();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var m="__INTENTIONAL_UNDEFINED__",g={};function b(e){var t=y();if(void 0===t[e])return function(e){switch(e){case"actions":return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).filter(function(e){return"__get__"!==e&&"__set__"!==e&&"__reset__"!==e&&"__with__"!==e&&"__GetDependency__"!==e&&"__Rewire__"!==e&&"__ResetDependency__"!==e&&"__RewireAPI__"!==e}).reduce(function(t,n){return t[n]=e[n],t},{})}(i);case"createSelectors":return l.default;case"createConnectedRouter":return a.default;case"createConnectRouter":return u.default;case"routerMiddleware":return s.default;case"createAll":return f}return}(e);var n=t[e];return n===m?void 0:n}function _(e,t){var n=y();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?m:t,function(){w(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function w(e){var t=y();delete t[e],0==Object.keys(t).length&&delete v()[h]}function x(e){var t=y(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(g,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",b),e("__GetDependency__",b),e("__Rewire__",_),e("__set__",_),e("__reset__",w),e("__ResetDependency__",w),e("__with__",x)}();var k=void 0===f?"undefined":r(f);function E(e,t){Object.defineProperty(f,e,{value:t,enumerable:!1,configurable:!0})}"object"!==k&&"function"!==k||!Object.isExtensible(f)||(E("__get__",b),E("__GetDependency__",b),E("__Rewire__",_),E("__set__",_),E("__reset__",w),E("__ResetDependency__",w),E("__with__",x),E("__RewireAPI__",g)),t.__get__=b,t.__GetDependency__=b,t.__Rewire__=_,t.__set__=_,t.__ResetDependency__=w,t.__RewireAPI__=g}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=f(i),u=f(n(1)),s=n(20),l=n(41),c=n(78);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){var t=e.getIn,n=e.toJS,r=function(e){function r(e,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r);var i=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(r.__proto__||Object.getPrototypeOf(r)).call(this,e));i.inTimeTravelling=!1,i.unsubscribe=o.store.subscribe(function(){var r=n(t(o.store.getState(),["router","location"])),a=r.pathname,u=r.search,s=r.hash,l=e.history.location,c=l.pathname,f=l.search,d=l.hash;c===a&&f===u&&d===s||(i.inTimeTravelling=!0,e.history.push({pathname:a,search:u,hash:s}))});var a=function(t,n){i.inTimeTravelling?i.inTimeTravelling=!1:e.onLocationChanged(t,n)};return i.unlisten=e.history.listen(a),a(e.history.location,e.history.action),i}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(r,_("Component")),o(r,[{key:"componentWillUnmount",value:function(){this.unlisten(),this.unsubscribe()}},{key:"render",value:function(){var e=this.props,t=e.history,n=e.children;return _("React").createElement(_("Router"),{history:t},n)}}]),r}();r.contextTypes={store:_("PropTypes").shape({getState:_("PropTypes").func.isRequired,subscribe:_("PropTypes").func.isRequired}).isRequired},r.propTypes={history:_("PropTypes").shape({action:_("PropTypes").string.isRequired,listen:_("PropTypes").func.isRequired,location:_("PropTypes").object.isRequired,push:_("PropTypes").func.isRequired}).isRequired,location:_("PropTypes").oneOfType([_("PropTypes").object,_("PropTypes").string]).isRequired,action:_("PropTypes").string.isRequired,basename:_("PropTypes").string,children:_("PropTypes").oneOfType([_("PropTypes").func,_("PropTypes").node]),onLocationChanged:_("PropTypes").func.isRequired};return _("connect")(function(e){return{action:t(e,["router","action"]),location:t(e,["router","location"])}},function(e){return{onLocationChanged:function(t,n){return e(_("onLocationChanged")(t,n))}}})(r)};function p(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=_("createConnectedRouter");var h=null;function v(){if(null===h){var e=p();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),h=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return h}function y(){var e=p();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function m(){var e=v(),t=y(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=p();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var g="__INTENTIONAL_UNDEFINED__",b={};function _(e){var t=m();if(void 0===t[e])return function(e){switch(e){case"Component":return i.Component;case"PropTypes":return u.default;case"onLocationChanged":return c.onLocationChanged;case"connect":return s.connect;case"createConnectedRouter":return d;case"React":return a.default;case"Router":return l.Router}return}(e);var n=t[e];return n===g?void 0:n}function w(e,t){var n=m();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?g:t,function(){x(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function x(e){var t=m();delete t[e],0==Object.keys(t).length&&delete y()[v]}function k(e){var t=m(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(b,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",_),e("__GetDependency__",_),e("__Rewire__",w),e("__set__",w),e("__reset__",x),e("__ResetDependency__",x),e("__with__",k)}();var E=void 0===d?"undefined":r(d);function O(e,t){Object.defineProperty(d,e,{value:t,enumerable:!1,configurable:!0})}"object"!==E&&"function"!==E||!Object.isExtensible(d)||(O("__get__",_),O("__GetDependency__",_),O("__Rewire__",w),O("__set__",w),O("__reset__",x),O("__ResetDependency__",x),O("__with__",k),O("__RewireAPI__",b)),t.__get__=_,t.__GetDependency__=_,t.__Rewire__=w,t.__set__=w,t.__ResetDependency__=x,t.__RewireAPI__=b}).call(this,n(22))},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(78),i=function(e){var t=e.fromJS,n=e.merge;return function(e){var r=t({location:e.location,action:e.action});return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=t.type,i=t.payload;return o===p("LOCATION_CHANGE")?n(e,i):e}}};function a(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=p("createConnectRouter");var u=null;function s(){if(null===u){var e=a();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),u=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return u}function l(){var e=a();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function c(){var e=s(),t=l(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=a();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var f="__INTENTIONAL_UNDEFINED__",d={};function p(e){var t=c();if(void 0===t[e])return function(e){switch(e){case"LOCATION_CHANGE":return o.LOCATION_CHANGE;case"createConnectRouter":return i}return}(e);var n=t[e];return n===f?void 0:n}function h(e,t){var n=c();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?f:t,function(){v(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function v(e){var t=c();delete t[e],0==Object.keys(t).length&&delete l()[s]}function y(e){var t=c(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(d,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",p),e("__GetDependency__",p),e("__Rewire__",h),e("__set__",h),e("__reset__",v),e("__ResetDependency__",v),e("__with__",y)}();var m=void 0===i?"undefined":r(i);function g(e,t){Object.defineProperty(i,e,{value:t,enumerable:!1,configurable:!0})}"object"!==m&&"function"!==m||!Object.isExtensible(i)||(g("__get__",p),g("__GetDependency__",p),g("__Rewire__",h),g("__set__",h),g("__reset__",v),g("__ResetDependency__",v),g("__with__",y),g("__RewireAPI__",d)),t.__get__=p,t.__GetDependency__=p,t.__Rewire__=h,t.__set__=h,t.__ResetDependency__=v,t.__RewireAPI__=d}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(78);var i=function(e){return function(t){return function(t){return function(n){if(n.type!==p("CALL_HISTORY_METHOD"))return t(n);var r=n.payload,o=r.method,i=r.args;e[o].apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(i))}}}};function a(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=p("routerMiddleware");var u=null;function s(){if(null===u){var e=a();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),u=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return u}function l(){var e=a();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function c(){var e=s(),t=l(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=a();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var f="__INTENTIONAL_UNDEFINED__",d={};function p(e){var t=c();if(void 0===t[e])return function(e){switch(e){case"CALL_HISTORY_METHOD":return o.CALL_HISTORY_METHOD;case"routerMiddleware":return i}return}(e);var n=t[e];return n===f?void 0:n}function h(e,t){var n=c();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?f:t,function(){v(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function v(e){var t=c();delete t[e],0==Object.keys(t).length&&delete l()[s]}function y(e){var t=c(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(d,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",p),e("__GetDependency__",p),e("__Rewire__",h),e("__set__",h),e("__reset__",v),e("__ResetDependency__",v),e("__with__",y)}();var m=void 0===i?"undefined":r(i);function g(e,t){Object.defineProperty(i,e,{value:t,enumerable:!1,configurable:!0})}"object"!==m&&"function"!==m||!Object.isExtensible(i)||(g("__get__",p),g("__GetDependency__",p),g("__Rewire__",h),g("__set__",h),g("__reset__",v),g("__ResetDependency__",v),g("__with__",y),g("__RewireAPI__",d)),t.__get__=p,t.__GetDependency__=p,t.__Rewire__=h,t.__set__=h,t.__ResetDependency__=v,t.__RewireAPI__=d}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=n(41),i=function(e){var t=e.getIn,n=e.toJS,r=function(e){return n(t(e,["router","location"]))};return{getLocation:r,getAction:function(e){return n(t(e,["router","action"]))},createMatchSelector:function(e){var t=null,n=null;return function(o){var i=(r(o)||{}).pathname;if(i===t)return n;t=i;var a=p("matchPath")(i,e);return a&&n&&a.url===n.url||(n=a),n}}}};function a(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=p("createSelectors");var u=null;function s(){if(null===u){var e=a();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),u=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return u}function l(){var e=a();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function c(){var e=s(),t=l(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=a();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var f="__INTENTIONAL_UNDEFINED__",d={};function p(e){var t=c();if(void 0===t[e])return function(e){switch(e){case"matchPath":return o.matchPath;case"createSelectors":return i}return}(e);var n=t[e];return n===f?void 0:n}function h(e,t){var n=c();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?f:t,function(){v(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function v(e){var t=c();delete t[e],0==Object.keys(t).length&&delete l()[s]}function y(e){var t=c(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(d,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",p),e("__GetDependency__",p),e("__Rewire__",h),e("__set__",h),e("__reset__",v),e("__ResetDependency__",v),e("__with__",y)}();var m=void 0===i?"undefined":r(i);function g(e,t){Object.defineProperty(i,e,{value:t,enumerable:!1,configurable:!0})}"object"!==m&&"function"!==m||!Object.isExtensible(i)||(g("__get__",p),g("__GetDependency__",p),g("__Rewire__",h),g("__set__",h),g("__reset__",v),g("__ResetDependency__",v),g("__with__",y),g("__RewireAPI__",d)),t.__get__=p,t.__GetDependency__=p,t.__Rewire__=h,t.__set__=h,t.__ResetDependency__=v,t.__RewireAPI__=d}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.__RewireAPI__=t.__ResetDependency__=t.__set__=t.__Rewire__=t.__GetDependency__=t.__get__=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(e){return e&&e.__esModule?e:{default:e}}(n(248));var a={fromJS:function(e){return e},getIn:h("getIn"),merge:function(e,t){return o({},e,t)},toJS:function(e){return e}};function u(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=h("structure");var s=null;function l(){if(null===s){var e=u();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),s=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return s}function c(){var e=u();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function f(){var e=l(),t=c(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=u();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var d="__INTENTIONAL_UNDEFINED__",p={};function h(e){var t=f();if(void 0===t[e])return function(e){switch(e){case"getIn":return i.default;case"structure":return a}return}(e);var n=t[e];return n===d?void 0:n}function v(e,t){var n=f();if("object"!==(void 0===e?"undefined":r(e)))return n[e]=void 0===t?d:t,function(){y(e)};Object.keys(e).forEach(function(t){n[t]=e[t]})}function y(e){var t=f();delete t[e],0==Object.keys(t).length&&delete c()[l]}function m(e){var t=f(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(p,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",h),e("__GetDependency__",h),e("__Rewire__",v),e("__set__",v),e("__reset__",y),e("__ResetDependency__",y),e("__with__",m)}();var g=void 0===a?"undefined":r(a);function b(e,t){Object.defineProperty(a,e,{value:t,enumerable:!1,configurable:!0})}"object"!==g&&"function"!==g||!Object.isExtensible(a)||(b("__get__",h),b("__GetDependency__",h),b("__Rewire__",v),b("__set__",v),b("__reset__",y),b("__ResetDependency__",y),b("__with__",m),b("__RewireAPI__",p)),t.__get__=h,t.__GetDependency__=h,t.__Rewire__=v,t.__set__=v,t.__ResetDependency__=y,t.__RewireAPI__=p}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(e,t){if(!e)return e;var n=t.length;if(n){for(var r=e,o=0;o<n&&r;++o)r=r[t[o]];return r}};function o(){try{if(e)return e}catch(e){try{if(window)return window}catch(e){return this}}}t.default=f("getIn");var i=null;function a(){if(null===i){var e=o();e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__||(e.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__=0),i=__$$GLOBAL_REWIRE_NEXT_MODULE_ID__++}return i}function u(){var e=o();return e.__$$GLOBAL_REWIRE_REGISTRY__||(e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)),__$$GLOBAL_REWIRE_REGISTRY__}function s(){var e=a(),t=u(),n=t[e];return n||(t[e]=Object.create(null),n=t[e]),n}!function(){var e=o();e.__rewire_reset_all__||(e.__rewire_reset_all__=function(){e.__$$GLOBAL_REWIRE_REGISTRY__=Object.create(null)})}();var l="__INTENTIONAL_UNDEFINED__",c={};function f(e){var t=s();if(void 0===t[e])return function(e){switch(e){case"getIn":return r}return}(e);var n=t[e];return n===l?void 0:n}function d(e,t){var r=s();if("object"!==(void 0===e?"undefined":n(e)))return r[e]=void 0===t?l:t,function(){p(e)};Object.keys(e).forEach(function(t){r[t]=e[t]})}function p(e){var t=s();delete t[e],0==Object.keys(t).length&&delete u()[a]}function h(e){var t=s(),n=Object.keys(e),r={};function o(){n.forEach(function(e){t[e]=r[e]})}return function(i){n.forEach(function(n){r[n]=t[n],t[n]=e[n]});var a=i();return a&&"function"==typeof a.then?a.then(o).catch(o):o(),a}}!function(){function e(e,t){Object.defineProperty(c,e,{value:t,enumerable:!1,configurable:!0})}e("__get__",f),e("__GetDependency__",f),e("__Rewire__",d),e("__set__",d),e("__reset__",p),e("__ResetDependency__",p),e("__with__",h)}();var v=void 0===r?"undefined":n(r);function y(e,t){Object.defineProperty(r,e,{value:t,enumerable:!1,configurable:!0})}"object"!==v&&"function"!==v||!Object.isExtensible(r)||(y("__get__",f),y("__GetDependency__",f),y("__Rewire__",d),y("__set__",d),y("__reset__",p),y("__ResetDependency__",p),y("__with__",h),y("__RewireAPI__",c)),t.__get__=f,t.__GetDependency__=f,t.__Rewire__=d,t.__set__=d,t.__ResetDependency__=p,t.__RewireAPI__=c}).call(this,n(22))},function(e,t,n){e.exports={default:n(250),__esModule:!0}},function(e,t,n){n(79),n(68),e.exports=n(259)},function(e,t,n){"use strict";var r=n(252),o=n(253),i=n(49),a=n(50);e.exports=n(163)(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):o(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(e,t){e.exports=function(){}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(115),o=n(67),i=n(83),a={};n(44)(a,n(26)("iterator"),function(){return this}),e.exports=function(e,t,n){e.prototype=r(a,{next:o(1,n)}),i(e,t+" Iterator")}},function(e,t,n){var r=n(34),o=n(32),i=n(81);e.exports=n(38)?Object.defineProperties:function(e,t){o(e);for(var n,a=i(t),u=a.length,s=0;u>s;)r.f(e,n=a[s++],t[n]);return e}},function(e,t,n){var r=n(50),o=n(116),i=n(257);e.exports=function(e){return function(t,n,a){var u,s=r(t),l=o(s.length),c=i(a,l);if(e&&n!=n){for(;l>c;)if((u=s[c++])!=u)return!0}else for(;l>c;c++)if((e||c in s)&&s[c]===n)return e||c||0;return!e&&-1}}},function(e,t,n){var r=n(117),o=Math.max,i=Math.min;e.exports=function(e,t){return(e=r(e))<0?o(e+t,0):i(e,t)}},function(e,t,n){var r=n(117),o=n(112);e.exports=function(e){return function(t,n){var i,a,u=String(o(t)),s=r(n),l=u.length;return s<0||s>=l?e?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===l||(a=u.charCodeAt(s+1))<56320||a>57343?e?u.charAt(s):i:e?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}}},function(e,t,n){var r=n(121),o=n(26)("iterator"),i=n(49);e.exports=n(19).isIterable=function(e){var t=Object(e);return void 0!==t[o]||"@@iterator"in t||i.hasOwnProperty(r(t))}},function(e,t,n){n(79),n(68),e.exports=n(261)},function(e,t,n){var r=n(32),o=n(122);e.exports=n(19).getIterator=function(e){var t=o(e);if("function"!=typeof t)throw TypeError(e+" is not iterable!");return r(t.call(e))}},function(e,t,n){e.exports={default:n(263),__esModule:!0}},function(e,t,n){n(68),n(79),e.exports=n(123).f("iterator")},function(e,t,n){e.exports={default:n(265),__esModule:!0}},function(e,t,n){n(266),n(172),n(271),n(272),e.exports=n(19).Symbol},function(e,t,n){"use strict";var r=n(25),o=n(45),i=n(38),a=n(29),u=n(165),s=n(267).KEY,l=n(52),c=n(119),f=n(83),d=n(82),p=n(26),h=n(123),v=n(124),y=n(268),m=n(269),g=n(32),b=n(37),_=n(50),w=n(114),x=n(67),k=n(115),E=n(270),O=n(171),S=n(34),T=n(81),C=O.f,P=S.f,R=E.f,j=r.Symbol,A=r.JSON,M=A&&A.stringify,I=p("_hidden"),N=p("toPrimitive"),D={}.propertyIsEnumerable,L=c("symbol-registry"),U=c("symbols"),F=c("op-symbols"),W=Object.prototype,z="function"==typeof j,B=r.QObject,$=!B||!B.prototype||!B.prototype.findChild,H=i&&l(function(){return 7!=k(P({},"a",{get:function(){return P(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=C(W,t);r&&delete W[t],P(e,t,n),r&&e!==W&&P(W,t,r)}:P,G=function(e){var t=U[e]=k(j.prototype);return t._k=e,t},q=z&&"symbol"==typeof j.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof j},V=function(e,t,n){return e===W&&V(F,t,n),g(e),t=w(t,!0),g(n),o(U,t)?(n.enumerable?(o(e,I)&&e[I][t]&&(e[I][t]=!1),n=k(n,{enumerable:x(0,!1)})):(o(e,I)||P(e,I,x(1,{})),e[I][t]=!0),H(e,t,n)):P(e,t,n)},Y=function(e,t){g(e);for(var n,r=y(t=_(t)),o=0,i=r.length;i>o;)V(e,n=r[o++],t[n]);return e},K=function(e){var t=D.call(this,e=w(e,!0));return!(this===W&&o(U,e)&&!o(F,e))&&(!(t||!o(this,e)||!o(U,e)||o(this,I)&&this[I][e])||t)},X=function(e,t){if(e=_(e),t=w(t,!0),e!==W||!o(U,t)||o(F,t)){var n=C(e,t);return!n||!o(U,t)||o(e,I)&&e[I][t]||(n.enumerable=!0),n}},J=function(e){for(var t,n=R(_(e)),r=[],i=0;n.length>i;)o(U,t=n[i++])||t==I||t==s||r.push(t);return r},Q=function(e){for(var t,n=e===W,r=R(n?F:_(e)),i=[],a=0;r.length>a;)!o(U,t=r[a++])||n&&!o(W,t)||i.push(U[t]);return i};z||(u((j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(n){this===W&&t.call(F,n),o(this,I)&&o(this[I],e)&&(this[I][e]=!1),H(this,e,x(1,n))};return i&&$&&H(W,e,{configurable:!0,set:t}),G(e)}).prototype,"toString",function(){return this._k}),O.f=X,S.f=V,n(170).f=E.f=J,n(86).f=K,n(125).f=Q,i&&!n(66)&&u(W,"propertyIsEnumerable",K,!0),h.f=function(e){return G(p(e))}),a(a.G+a.W+a.F*!z,{Symbol:j});for(var Z="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ee=0;Z.length>ee;)p(Z[ee++]);for(var te=T(p.store),ne=0;te.length>ne;)v(te[ne++]);a(a.S+a.F*!z,"Symbol",{for:function(e){return o(L,e+="")?L[e]:L[e]=j(e)},keyFor:function(e){if(!q(e))throw TypeError(e+" is not a symbol!");for(var t in L)if(L[t]===e)return t},useSetter:function(){$=!0},useSimple:function(){$=!1}}),a(a.S+a.F*!z,"Object",{create:function(e,t){return void 0===t?k(e):Y(k(e),t)},defineProperty:V,defineProperties:Y,getOwnPropertyDescriptor:X,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),A&&a(a.S+a.F*(!z||l(function(){var e=j();return"[null]"!=M([e])||"{}"!=M({a:e})||"{}"!=M(Object(e))})),"JSON",{stringify:function(e){for(var t,n,r=[e],o=1;arguments.length>o;)r.push(arguments[o++]);if(n=t=r[1],(b(t)||void 0!==e)&&!q(e))return m(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!q(t))return t}),r[1]=t,M.apply(A,r)}}),j.prototype[N]||n(44)(j.prototype,N,j.prototype.valueOf),f(j,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){var r=n(82)("meta"),o=n(37),i=n(45),a=n(34).f,u=0,s=Object.isExtensible||function(){return!0},l=!n(52)(function(){return s(Object.preventExtensions({}))}),c=function(e){a(e,r,{value:{i:"O"+ ++u,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!s(e))return"F";if(!t)return"E";c(e)}return e[r].i},getWeak:function(e,t){if(!i(e,r)){if(!s(e))return!0;if(!t)return!1;c(e)}return e[r].w},onFreeze:function(e){return l&&f.NEED&&s(e)&&!i(e,r)&&c(e),e}}},function(e,t,n){var r=n(81),o=n(125),i=n(86);e.exports=function(e){var t=r(e),n=o.f;if(n)for(var a,u=n(e),s=i.f,l=0;u.length>l;)s.call(e,a=u[l++])&&t.push(a);return t}},function(e,t,n){var r=n(65);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(50),o=n(170).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==i.call(e)?function(e){try{return o(e)}catch(e){return a.slice()}}(e):o(r(e))}},function(e,t,n){n(124)("asyncIterator")},function(e,t,n){n(124)("observable")},function(e,t){var n="[object Object]";var r=Function.prototype,o=Object.prototype,i=r.toString,a=o.hasOwnProperty,u=i.call(Object),s=o.toString,l=function(e,t){return function(n){return e(t(n))}}(Object.getPrototypeOf,Object);e.exports=function(e){if(!function(e){return!!e&&"object"==typeof e}(e)||s.call(e)!=n||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e))return!1;var t=l(e);if(null===t)return!0;var r=a.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&i.call(r)==u}},function(e,t,n){n(275),e.exports=n(19).Object.getPrototypeOf},function(e,t,n){var r=n(84),o=n(168);n(276)("getPrototypeOf",function(){return function(e){return o(r(e))}})},function(e,t,n){var r=n(29),o=n(19),i=n(52);e.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)}},function(e,t,n){e.exports={default:n(278),__esModule:!0}},function(e,t,n){n(279),e.exports=n(19).Object.setPrototypeOf},function(e,t,n){var r=n(29);r(r.S,"Object",{setPrototypeOf:n(280).set})},function(e,t,n){var r=n(37),o=n(32),i=function(e,t){if(o(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(51)(Function.call,n(171).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return i(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:i}},function(e,t,n){e.exports={default:n(282),__esModule:!0}},function(e,t,n){n(283);var r=n(19).Object;e.exports=function(e,t){return r.create(e,t)}},function(e,t,n){var r=n(29);r(r.S,"Object",{create:n(115)})},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(285));t.default=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return(0,r.default)(e)}},function(e,t,n){e.exports={default:n(286),__esModule:!0}},function(e,t,n){n(68),n(287),e.exports=n(19).Array.from},function(e,t,n){"use strict";var r=n(51),o=n(29),i=n(84),a=n(174),u=n(175),s=n(116),l=n(288),c=n(122);o(o.S+o.F*!n(176)(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,f,d=i(e),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,y=void 0!==v,m=0,g=c(d);if(y&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==g||p==Array&&u(g))for(n=new p(t=s(d.length));t>m;m++)l(n,m,y?v(d[m],m):d[m]);else for(f=g.call(d),n=new p;!(o=f.next()).done;m++)l(n,m,y?a(f,v,[o.value,m],!0):o.value);return n.length=m,n}})},function(e,t,n){"use strict";var r=n(34),o=n(67);e.exports=function(e,t,n){t in e?r.f(e,t,o(0,n)):e[t]=n}},function(e,t,n){e.exports={default:n(290),__esModule:!0}},function(e,t,n){n(291),e.exports=n(19).Object.assign},function(e,t,n){var r=n(29);r(r.S+r.F,"Object",{assign:n(292)})},function(e,t,n){"use strict";var r=n(81),o=n(125),i=n(86),a=n(84),u=n(162),s=Object.assign;e.exports=!s||n(52)(function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach(function(e){t[e]=e}),7!=s({},e)[n]||Object.keys(s({},t)).join("")!=r})?function(e,t){for(var n=a(e),s=arguments.length,l=1,c=o.f,f=i.f;s>l;)for(var d,p=u(arguments[l++]),h=c?r(p).concat(c(p)):r(p),v=h.length,y=0;v>y;)f.call(p,d=h[y++])&&(n[d]=p[d]);return n}:s},function(e,t,n){var r=function(){return this}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,i=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,e.exports=n(294),o)r.regeneratorRuntime=i;else try{delete r.regeneratorRuntime}catch(e){r.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",l="object"==typeof e,c=t.regeneratorRuntime;if(c)l&&(e.exports=c);else{(c=t.regeneratorRuntime=l?e.exports:{}).wrap=_;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={},y={};y[a]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(j([])));g&&g!==r&&o.call(g,a)&&(y=g);var b=E.prototype=x.prototype=Object.create(y);k.prototype=b.constructor=E,E.constructor=k,E[s]=k.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===k||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,E):(e.__proto__=E,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(b),e},c.awrap=function(e){return{__await:e}},O(S.prototype),S.prototype[u]=function(){return this},c.AsyncIterator=S,c.async=function(e,t,n,r){var o=new S(_(e,t,n,r));return c.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},O(b),b[s]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=j,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(e,t,n,r){var o=t&&t.prototype instanceof x?t:x,i=Object.create(o.prototype),a=new R(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=T(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=w(e,t,n);if("normal"===s.type){if(r=n.done?h:d,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=h,n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function w(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function x(){}function k(){}function E(){}function O(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function S(e){var t;this._invoke=function(n,r){function i(){return new Promise(function(t,i){!function t(n,r,i,a){var u=w(e[n],e,r);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(e){t("next",e,i,a)},function(e){t("throw",e,i,a)}):Promise.resolve(l).then(function(e){s.value=e,i(s)},a)}a(u.arg)}(n,r,t,i)})}return t=t?t.then(i,i):i()}}function T(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,T(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,v):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:A}}function A(){return{value:n,done:!0}}}(function(){return this}()||Function("return this")())},function(e,t,n){n(172),n(68),n(79),n(296),n(304),n(305),e.exports=n(19).Promise},function(e,t,n){"use strict";var r,o,i,a,u=n(66),s=n(25),l=n(51),c=n(121),f=n(29),d=n(37),p=n(80),h=n(297),v=n(298),y=n(177),m=n(178).set,g=n(300)(),b=n(128),_=n(179),w=n(301),x=n(180),k=s.TypeError,E=s.process,O=E&&E.versions,S=O&&O.v8||"",T=s.Promise,C="process"==c(E),P=function(){},R=o=b.f,j=!!function(){try{var e=T.resolve(1),t=(e.constructor={})[n(26)("species")]=function(e){e(P,P)};return(C||"function"==typeof PromiseRejectionEvent)&&e.then(P)instanceof t&&0!==S.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),A=function(e){var t;return!(!d(e)||"function"!=typeof(t=e.then))&&t},M=function(e,t){if(!e._n){e._n=!0;var n=e._c;g(function(){for(var r=e._v,o=1==e._s,i=0,a=function(t){var n,i,a,u=o?t.ok:t.fail,s=t.resolve,l=t.reject,c=t.domain;try{u?(o||(2==e._h&&D(e),e._h=1),!0===u?n=r:(c&&c.enter(),n=u(r),c&&(c.exit(),a=!0)),n===t.promise?l(k("Promise-chain cycle")):(i=A(n))?i.call(n,s,l):s(n)):l(r)}catch(e){c&&!a&&c.exit(),l(e)}};n.length>i;)a(n[i++]);e._c=[],e._n=!1,t&&!e._h&&I(e)})}},I=function(e){m.call(s,function(){var t,n,r,o=e._v,i=N(e);if(i&&(t=_(function(){C?E.emit("unhandledRejection",o,e):(n=s.onunhandledrejection)?n({promise:e,reason:o}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",o)}),e._h=C||N(e)?2:1),e._a=void 0,i&&t.e)throw t.v})},N=function(e){return 1!==e._h&&0===(e._a||e._c).length},D=function(e){m.call(s,function(){var t;C?E.emit("rejectionHandled",e):(t=s.onrejectionhandled)&&t({promise:e,reason:e._v})})},L=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),M(t,!0))},U=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw k("Promise can't be resolved itself");(t=A(e))?g(function(){var r={_w:n,_d:!1};try{t.call(e,l(U,r,1),l(L,r,1))}catch(e){L.call(r,e)}}):(n._v=e,n._s=1,M(n,!1))}catch(e){L.call({_w:n,_d:!1},e)}}};j||(T=function(e){h(this,T,"Promise","_h"),p(e),r.call(this);try{e(l(U,this,1),l(L,this,1))}catch(e){L.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(302)(T.prototype,{then:function(e,t){var n=R(y(this,T));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=C?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&M(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r;this.promise=e,this.resolve=l(U,e,1),this.reject=l(L,e,1)},b.f=R=function(e){return e===T||e===a?new i(e):o(e)}),f(f.G+f.W+f.F*!j,{Promise:T}),n(83)(T,"Promise"),n(303)("Promise"),a=n(19).Promise,f(f.S+f.F*!j,"Promise",{reject:function(e){var t=R(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(u||!j),"Promise",{resolve:function(e){return x(u&&this===a?T:this,e)}}),f(f.S+f.F*!(j&&n(176)(function(e){T.all(e).catch(P)})),"Promise",{all:function(e){var t=this,n=R(t),r=n.resolve,o=n.reject,i=_(function(){var n=[],i=0,a=1;v(e,!1,function(e){var u=i++,s=!1;n.push(void 0),a++,t.resolve(e).then(function(e){s||(s=!0,n[u]=e,--a||r(n))},o)}),--a||r(n)});return i.e&&o(i.v),n.promise},race:function(e){var t=this,n=R(t),r=n.reject,o=_(function(){v(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o.e&&r(o.v),n.promise}})},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(51),o=n(174),i=n(175),a=n(32),u=n(116),s=n(122),l={},c={};(t=e.exports=function(e,t,n,f,d){var p,h,v,y,m=d?function(){return e}:s(e),g=r(n,f,t?2:1),b=0;if("function"!=typeof m)throw TypeError(e+" is not iterable!");if(i(m)){for(p=u(e.length);p>b;b++)if((y=t?g(a(h=e[b])[0],h[1]):g(e[b]))===l||y===c)return y}else for(v=m.call(e);!(h=v.next()).done;)if((y=o(v,g,h.value,t))===l||y===c)return y}).BREAK=l,t.RETURN=c},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(25),o=n(178).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,s="process"==n(65)(a);e.exports=function(){var e,t,n,l=function(){var r,o;for(s&&(r=a.domain)&&r.exit();e;){o=e.fn,e=e.next;try{o()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(s)n=function(){a.nextTick(l)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var c=u.resolve(void 0);n=function(){c.then(l)}}else n=function(){o.call(r,l)};else{var f=!0,d=document.createTextNode("");new i(l).observe(d,{characterData:!0}),n=function(){d.data=f=!f}}return function(r){var o={fn:r,next:void 0};t&&(t.next=o),e||(e=o,n()),t=o}}},function(e,t,n){var r=n(25).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){var r=n(44);e.exports=function(e,t,n){for(var o in t)n&&e[o]?e[o]=t[o]:r(e,o,t[o]);return e}},function(e,t,n){"use strict";var r=n(25),o=n(19),i=n(34),a=n(38),u=n(26)("species");e.exports=function(e){var t="function"==typeof o[e]?o[e]:r[e];a&&t&&!t[u]&&i.f(t,u,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var r=n(29),o=n(19),i=n(25),a=n(177),u=n(180);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,o.Promise||i.Promise),n="function"==typeof e;return this.then(n?function(n){return u(t,e()).then(function(){return n})}:e,n?function(n){return u(t,e()).then(function(){throw n})}:e)}})},function(e,t,n){"use strict";var r=n(29),o=n(128),i=n(179);r(r.S,"Promise",{try:function(e){var t=o.f(this),n=i(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.apiMiddleware=void 0;var r=f(n(88)),o=f(n(87)),i=f(n(111)),a=f(n(89)),u=f(n(110)),s=n(161),l=n(126),c=n(173);function f(e){return e&&e.__esModule?e:{default:e}}t.apiMiddleware=function(e){var t=this,n=e.getState;return function(e){return function(f){return(0,s.isRSAA)(f)?(0,a.default)(r.default.mark(function a(){var d,p,h,v,y,m,g,b,_,w,x,k,E,O,S,T,C,P,R,j,A;return r.default.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!(d=(0,s.validateRSAA)(f)).length){t.next=5;break}return(p=f[u.default]).types&&Array.isArray(p.types)&&((h=p.types[0])&&h.type&&(h=h.type),e({type:h,payload:new l.InvalidRSAA(d),error:!0})),t.abrupt("return");case 5:if(v=f[u.default],y=v.endpoint,m=v.body,g=v.headers,b=v.options,_=void 0===b?{}:b,w=v.fetch,x=void 0===w?fetch:w,k=v.method,E=v.credentials,O=v.bailout,S=v.types,T=(0,c.normalizeTypeDescriptors)(S),C=(0,i.default)(T,3),P=C[0],R=C[1],j=C[2],t.prev=9,!("boolean"==typeof O&&O||"function"==typeof O&&O(n()))){t.next=12;break}return t.abrupt("return");case 12:t.next=21;break;case 14:return t.prev=14,t.t0=t.catch(9),t.t1=e,t.next=19,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError("[RSAA].bailout function failed"),error:!0}),[f,n()]);case 19:return t.t2=t.sent,t.abrupt("return",(0,t.t1)(t.t2));case 21:if("function"!=typeof y){t.next=33;break}t.prev=22,y=y(n()),t.next=33;break;case 26:return t.prev=26,t.t3=t.catch(22),t.t4=e,t.next=31,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError("[RSAA].endpoint function failed"),error:!0}),[f,n()]);case 31:return t.t5=t.sent,t.abrupt("return",(0,t.t4)(t.t5));case 33:if("function"!=typeof m){t.next=45;break}t.prev=34,m=m(n()),t.next=45;break;case 38:return t.prev=38,t.t6=t.catch(34),t.t7=e,t.next=43,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError("[RSAA].body function failed"),error:!0}),[f,n()]);case 43:return t.t8=t.sent,t.abrupt("return",(0,t.t7)(t.t8));case 45:if("function"!=typeof g){t.next=57;break}t.prev=46,g=g(n()),t.next=57;break;case 50:return t.prev=50,t.t9=t.catch(46),t.t10=e,t.next=55,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError("[RSAA].headers function failed"),error:!0}),[f,n()]);case 55:return t.t11=t.sent,t.abrupt("return",(0,t.t10)(t.t11));case 57:if("function"!=typeof _){t.next=69;break}t.prev=58,_=_(n()),t.next=69;break;case 62:return t.prev=62,t.t12=t.catch(58),t.t13=e,t.next=67,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError("[RSAA].options function failed"),error:!0}),[f,n()]);case 67:return t.t14=t.sent,t.abrupt("return",(0,t.t13)(t.t14));case 69:if("function"!=typeof P.payload&&"function"!=typeof P.meta){t.next=77;break}return t.t15=e,t.next=73,(0,c.actionWith)(P,[f,n()]);case 73:t.t16=t.sent,(0,t.t15)(t.t16),t.next=78;break;case 77:e(P);case 78:return t.prev=78,t.next=81,x(y,(0,o.default)({},_,{method:k,body:m||void 0,credentials:E,headers:g||{}}));case 81:A=t.sent,t.next=91;break;case 84:return t.prev=84,t.t17=t.catch(78),t.t18=e,t.next=89,(0,c.actionWith)((0,o.default)({},P,{payload:new l.RequestError(t.t17.message),error:!0}),[f,n()]);case 89:return t.t19=t.sent,t.abrupt("return",(0,t.t18)(t.t19));case 91:if(!A.ok){t.next=99;break}return t.t20=e,t.next=95,(0,c.actionWith)(R,[f,n(),A]);case 95:return t.t21=t.sent,t.abrupt("return",(0,t.t20)(t.t21));case 99:return t.t22=e,t.next=102,(0,c.actionWith)((0,o.default)({},j,{error:!0}),[f,n(),A]);case 102:return t.t23=t.sent,t.abrupt("return",(0,t.t22)(t.t23));case 104:case"end":return t.stop()}},a,t,[[9,14],[22,26],[34,38],[46,50],[58,62],[78,84]])}))():e(f)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=p(n(69)),o=p(n(53)),i=p(n(72)),a=p(n(70)),u=p(n(71)),s=n(0),l=p(s),c=n(41),f=p(n(1)),d=p(n(181));function p(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){(0,o.default)(this,t);var n=(0,a.default)(this,(t.__proto__||(0,r.default)(t)).call(this,e));return n.auth=e.auth||new d.default(e),n}return(0,u.default)(t,e),(0,i.default)(t,[{key:"getChildContext",value:function(){return{auth:this.auth}}},{key:"render",value:function(){return l.default.createElement("div",{className:this.props.className},this.props.children)}}]),t}(s.Component);h.childContextTypes={auth:f.default.object.isRequired},t.default=(0,c.withRouter)(h)},function(e,t,n){e.exports={default:n(309),__esModule:!0}},function(e,t,n){n(310);var r=n(19).Object;e.exports=function(e,t,n){return r.defineProperty(e,t,n)}},function(e,t,n){var r=n(29);r(r.S+r.F*!n(38),"Object",{defineProperty:n(34).f})},function(e,t,n){e.exports={default:n(312),__esModule:!0}},function(e,t,n){var r=n(19),o=r.JSON||(r.JSON={stringify:JSON.stringify});e.exports=function(e){return o.stringify.apply(o,arguments)}},function(e,t,n){"use strict";
/*!
 * Copyright (c) 2018-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var r=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,Error),t}(),o=e.exports,i="You can copy it from the Okta Developer Console in the details for the Application you created. Follow these instructions to find it: https://bit.ly/finding-okta-app-credentials";o.assertIssuer=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n="You can copy your domain from the Okta Developer Console. Follow these instructions to find it: https://bit.ly/finding-okta-domain";if(t.disableHttpsCheck){console.warn("Warning: HTTPS check is disabled. This allows for insecure configurations and is NOT recommended for production use.")}if(!e)throw new r("Your Okta URL is missing. "+n);if(!t.disableHttpsCheck&&!e.match(/^https:\/\//g))throw new r("Your Okta URL must start with https. Current value: "+e+". "+n);if(e.match(/{yourOktaDomain}/g))throw new r("Replace {yourOktaDomain} with your Okta domain. "+n);if(e.match(/-admin.(okta|oktapreview|okta-emea).com/g))throw new r("Your Okta domain should not contain -admin. Current value: "+e+". "+n);if(e.match(/(.com.com)|(:\/\/.*){2,}/g))throw new r("It looks like there's a typo in your Okta domain. Current value: "+e+". "+n)},o.assertClientId=function(e){if(!e)throw new r("Your client ID is missing. "+i);if(e.match(/{clientId}/g))throw new r("Replace {clientId} with the client ID of your Application. "+i)},o.assertClientSecret=function(e){if(!e)throw new r("Your client secret is missing. "+i);if(e.match(/{clientSecret}/g))throw new r("Replace {clientSecret} with the client secret of your Application. "+i)},o.assertRedirectUri=function(e){if(!e)throw new r("Your redirect URI is missing.");if(e.match(/{redirectUri}/g))throw new r("Replace {redirectUri} with the redirect URI of your Application.")}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
e.exports=n(315)},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(316);e.exports=n(319)(r)},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var r=n(317);e.exports=function(e,t,n){var o=r({url:t,method:e,headers:n.headers,data:JSON.stringify(n.data),withCredentials:!0}).then(function(){return o.request});return o}},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_FACTORY__,__WEBPACK_AMD_DEFINE_RESULT__;
/*!
  * Reqwest! A general purpose XHR connection manager
  * license MIT (c) Dustin Diaz 2015
  * https://github.com/ded/reqwest
  */!function(e,t,n){module.exports?module.exports=n():void 0===(__WEBPACK_AMD_DEFINE_RESULT__="function"==typeof(__WEBPACK_AMD_DEFINE_FACTORY__=n)?__WEBPACK_AMD_DEFINE_FACTORY__.call(exports,__webpack_require__,exports,module):__WEBPACK_AMD_DEFINE_FACTORY__)||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)}(0,0,function(){var context=this,XHR2;if("window"in context)var doc=document,byTag="getElementsByTagName",head=doc[byTag]("head")[0];else try{XHR2=__webpack_require__(318)}catch(e){throw new Error("Peer dependency `xhr2` required! Please npm install xhr2")}var httpsRe=/^http/,protocolRe=/(^\w+):\/\//,twoHundo=/^(20\d|1223)$/,readyState="readyState",contentType="Content-Type",requestedWith="X-Requested-With",uniqid=0,callbackPrefix="reqwest_"+ +new Date,lastValue,xmlHttpRequest="XMLHttpRequest",xDomainRequest="XDomainRequest",noop=function(){},isArray="function"==typeof Array.isArray?Array.isArray:function(e){return e instanceof Array},defaultHeaders={contentType:"application/x-www-form-urlencoded",requestedWith:xmlHttpRequest,accept:{"*":"text/javascript, text/html, application/xml, text/xml, */*",xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript",js:"application/javascript, text/javascript"}},xhr=function(e){if(!0===e.crossOrigin){var t=context[xmlHttpRequest]?new XMLHttpRequest:null;if(t&&"withCredentials"in t)return t;if(context[xDomainRequest])return new XDomainRequest;throw new Error("Browser does not support cross-origin requests")}return context[xmlHttpRequest]?new XMLHttpRequest:XHR2?new XHR2:new ActiveXObject("Microsoft.XMLHTTP")},globalSetupOptions={dataFilter:function(e){return e}};function succeed(e){var t=protocolRe.exec(e.url);return t=t&&t[1]||context.location.protocol,httpsRe.test(t)?twoHundo.test(e.request.status):!!e.request.response}function handleReadyState(e,t,n){return function(){return e._aborted?n(e.request):e._timedOut?n(e.request,"Request is aborted: timeout"):void(e.request&&4==e.request[readyState]&&(e.request.onreadystatechange=noop,succeed(e)?t(e.request):n(e.request)))}}function setHeaders(e,t){var n,r=t.headers||{};r.Accept=r.Accept||defaultHeaders.accept[t.type]||defaultHeaders.accept["*"];var o="undefined"!=typeof FormData&&t.data instanceof FormData;for(n in t.crossOrigin||r[requestedWith]||(r[requestedWith]=defaultHeaders.requestedWith),r[contentType]||o||(r[contentType]=t.contentType||defaultHeaders.contentType),r)r.hasOwnProperty(n)&&"setRequestHeader"in e&&e.setRequestHeader(n,r[n])}function setCredentials(e,t){void 0!==t.withCredentials&&void 0!==e.withCredentials&&(e.withCredentials=!!t.withCredentials)}function generalCallback(e){lastValue=e}function urlappend(e,t){return e+(/\?/.test(e)?"&":"?")+t}function handleJsonp(e,t,n,r){var o=uniqid++,i=e.jsonpCallback||"callback",a=e.jsonpCallbackName||reqwest.getcallbackPrefix(o),u=new RegExp("((^|\\?|&)"+i+")=([^&]+)"),s=r.match(u),l=doc.createElement("script"),c=0,f=-1!==navigator.userAgent.indexOf("MSIE 10.0");return s?"?"===s[3]?r=r.replace(u,"$1="+a):a=s[3]:r=urlappend(r,i+"="+a),context[a]=generalCallback,l.type="text/javascript",l.src=r,l.async=!0,void 0===l.onreadystatechange||f||(l.htmlFor=l.id="_reqwest_"+o),l.onload=l.onreadystatechange=function(){if(l[readyState]&&"complete"!==l[readyState]&&"loaded"!==l[readyState]||c)return!1;l.onload=l.onreadystatechange=null,l.onclick&&l.onclick(),t(lastValue),lastValue=void 0,head.removeChild(l),c=1},head.appendChild(l),{abort:function(){l.onload=l.onreadystatechange=null,n({},"Request is aborted: timeout",{}),lastValue=void 0,head.removeChild(l),c=1}}}function getRequest(e,t){var n,r=this.o,o=(r.method||"GET").toUpperCase(),i="string"==typeof r?r:r.url,a=!1!==r.processData&&r.data&&"string"!=typeof r.data?reqwest.toQueryString(r.data):r.data||null,u=!1;return"jsonp"!=r.type&&"GET"!=o||!a||(i=urlappend(i,a),a=null),"jsonp"==r.type?handleJsonp(r,e,t,i):((n=r.xhr&&r.xhr(r)||xhr(r)).open(o,i,!1!==r.async),setHeaders(n,r),setCredentials(n,r),context[xDomainRequest]&&n instanceof context[xDomainRequest]?(n.onload=e,n.onerror=t,n.onprogress=function(){},u=!0):n.onreadystatechange=handleReadyState(this,e,t),r.before&&r.before(n),u?setTimeout(function(){n.send(a)},200):n.send(a),n)}function Reqwest(e,t){this.o=e,this.fn=t,init.apply(this,arguments)}function setType(e){if(null!==e)return e.match("json")?"json":e.match("javascript")?"js":e.match("text")?"html":e.match("xml")?"xml":void 0}function init(o,fn){this.url="string"==typeof o?o:o.url,this.timeout=null,this._fulfilled=!1,this._successHandler=function(){},this._fulfillmentHandlers=[],this._errorHandlers=[],this._completeHandlers=[],this._erred=!1,this._responseArgs={};var self=this;function complete(e){for(o.timeout&&clearTimeout(self.timeout),self.timeout=null;self._completeHandlers.length>0;)self._completeHandlers.shift()(e)}function success(resp){var type=o.type||resp&&setType(resp.getResponseHeader("Content-Type"));resp="jsonp"!==type?self.request:resp;var filteredResponse=globalSetupOptions.dataFilter(resp.responseText,type),r=filteredResponse;try{resp.responseText=r}catch(e){}if(r)switch(type){case"json":try{resp=context.JSON?context.JSON.parse(r):eval("("+r+")")}catch(e){return error(resp,"Could not parse JSON in response",e)}break;case"js":resp=eval(r);break;case"html":resp=r;break;case"xml":resp=resp.responseXML&&resp.responseXML.parseError&&resp.responseXML.parseError.errorCode&&resp.responseXML.parseError.reason?null:resp.responseXML}for(self._responseArgs.resp=resp,self._fulfilled=!0,fn(resp),self._successHandler(resp);self._fulfillmentHandlers.length>0;)resp=self._fulfillmentHandlers.shift()(resp);complete(resp)}function timedOut(){self._timedOut=!0,self.request.abort()}function error(e,t,n){for(e=self.request,self._responseArgs.resp=e,self._responseArgs.msg=t,self._responseArgs.t=n,self._erred=!0;self._errorHandlers.length>0;)self._errorHandlers.shift()(e,t,n);complete(e)}fn=fn||function(){},o.timeout&&(this.timeout=setTimeout(function(){timedOut()},o.timeout)),o.success&&(this._successHandler=function(){o.success.apply(o,arguments)}),o.error&&this._errorHandlers.push(function(){o.error.apply(o,arguments)}),o.complete&&this._completeHandlers.push(function(){o.complete.apply(o,arguments)}),this.request=getRequest.call(this,success,error)}function reqwest(e,t){return new Reqwest(e,t)}function normalize(e){return e?e.replace(/\r?\n/g,"\r\n"):""}function serial(e,t){var n,r,o,i,a=e.name,u=e.tagName.toLowerCase(),s=function(e){e&&!e.disabled&&t(a,normalize(e.attributes.value&&e.attributes.value.specified?e.value:e.text))};if(!e.disabled&&a)switch(u){case"input":/reset|button|image|file/i.test(e.type)||(n=/checkbox/i.test(e.type),r=/radio/i.test(e.type),o=e.value,(!n&&!r||e.checked)&&t(a,normalize(n&&""===o?"on":o)));break;case"textarea":t(a,normalize(e.value));break;case"select":if("select-one"===e.type.toLowerCase())s(e.selectedIndex>=0?e.options[e.selectedIndex]:null);else for(i=0;e.length&&i<e.length;i++)e.options[i].selected&&s(e.options[i])}}function eachFormElement(){var e,t,n=this,r=function(e,t){var r,o,i;for(r=0;r<t.length;r++)for(i=e[byTag](t[r]),o=0;o<i.length;o++)serial(i[o],n)};for(t=0;t<arguments.length;t++)e=arguments[t],/input|select|textarea/i.test(e.tagName)&&serial(e,n),r(e,["input","select","textarea"])}function serializeQueryString(){return reqwest.toQueryString(reqwest.serializeArray.apply(null,arguments))}function serializeHash(){var e={};return eachFormElement.apply(function(t,n){t in e?(e[t]&&!isArray(e[t])&&(e[t]=[e[t]]),e[t].push(n)):e[t]=n},arguments),e}function buildParams(e,t,n,r){var o,i,a,u=/\[\]$/;if(isArray(t))for(i=0;t&&i<t.length;i++)a=t[i],n||u.test(e)?r(e,a):buildParams(e+"["+("object"==typeof a?i:"")+"]",a,n,r);else if(t&&"[object Object]"===t.toString())for(o in t)buildParams(e+"["+o+"]",t[o],n,r);else r(e,t)}return Reqwest.prototype={abort:function(){this._aborted=!0,this.request.abort()},retry:function(){init.call(this,this.o,this.fn)},then:function(e,t){return e=e||function(){},t=t||function(){},this._fulfilled?this._responseArgs.resp=e(this._responseArgs.resp):this._erred?t(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):(this._fulfillmentHandlers.push(e),this._errorHandlers.push(t)),this},always:function(e){return this._fulfilled||this._erred?e(this._responseArgs.resp):this._completeHandlers.push(e),this},fail:function(e){return this._erred?e(this._responseArgs.resp,this._responseArgs.msg,this._responseArgs.t):this._errorHandlers.push(e),this},catch:function(e){return this.fail(e)}},reqwest.serializeArray=function(){var e=[];return eachFormElement.apply(function(t,n){e.push({name:t,value:n})},arguments),e},reqwest.serialize=function(){if(0===arguments.length)return"";var e,t=Array.prototype.slice.call(arguments,0);return(e=t.pop())&&e.nodeType&&t.push(e)&&(e=null),e&&(e=e.type),("map"==e?serializeHash:"array"==e?reqwest.serializeArray:serializeQueryString).apply(null,t)},reqwest.toQueryString=function(e,t){var n,r,o=t||!1,i=[],a=encodeURIComponent,u=function(e,t){t="function"==typeof t?t():null==t?"":t,i[i.length]=a(e)+"="+a(t)};if(isArray(e))for(r=0;e&&r<e.length;r++)u(e[r].name,e[r].value);else for(n in e)e.hasOwnProperty(n)&&buildParams(n,e[n],o,u);return i.join("&").replace(/%20/g,"+")},reqwest.getcallbackPrefix=function(){return callbackPrefix},reqwest.compat=function(e,t){return e&&(e.type&&(e.method=e.type)&&delete e.type,e.dataType&&(e.type=e.dataType),e.jsonpCallback&&(e.jsonpCallbackName=e.jsonpCallback)&&delete e.jsonpCallback,e.jsonp&&(e.jsonpCallback=e.jsonp)),new Reqwest(e,t)},reqwest.ajaxSetup=function(e){for(var t in e=e||{})globalSetupOptions[t]=e[t]},reqwest})},function(e,t){},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
n(320);var r=n(73),o=n(182),i=n(39),a=n(326),u=n(328),s=n(90),l=n(329),c=n(54),f=n(55),d=n(332),p=n(74);function h(e){var t=this;if(!e)throw new c("No arguments passed to constructor. Required usage: new OktaAuth(args)");var n=e.url;if(!n){var r=new RegExp("^http?s?://.+");if(!e.issuer||!r.test(e.issuer))throw new c('No url passed to constructor. Required usage: new OktaAuth({url: "https://sample.okta.com"})');n=e.issuer.split("/oauth2/")[0]}if(-1!==n.indexOf("-admin."))throw new c('URL passed to constructor contains "-admin" in subdomain. Required usage: new OktaAuth({url: "https://dev-12345.okta.com})');this.options={url:i.removeTrailingSlash(n),clientId:e.clientId,issuer:i.removeTrailingSlash(e.issuer),authorizeUrl:i.removeTrailingSlash(e.authorizeUrl),userinfoUrl:i.removeTrailingSlash(e.userinfoUrl),redirectUri:e.redirectUri,ajaxRequest:e.ajaxRequest,transformErrorXHR:e.transformErrorXHR,headers:e.headers},this.userAgent="okta-auth-js-"+f.SDK_VERSION,e.maxClockSkew||0===e.maxClockSkew?this.options.maxClockSkew=e.maxClockSkew:this.options.maxClockSkew=f.DEFAULT_MAX_CLOCK_SKEW,this.options.ignoreSignature=!!e.ignoreSignature,t.session={close:i.bind(u.closeSession,null,t),exists:i.bind(u.sessionExists,null,t),get:i.bind(u.getSession,null,t),refresh:i.bind(u.refreshSession,null,t),setCookieAndRedirect:i.bind(u.setCookieAndRedirect,null,t)},t.tx={status:i.bind(a.transactionStatus,null,t),resume:i.bind(a.resumeTransaction,null,t),exists:i.bind(a.transactionExists,null,t)},t.tx.exists._getCookie=function(e){return s.getCookie(e)},t.idToken={authorize:{_getLocationHref:function(){return window.location.href}}},t.token={getWithoutPrompt:i.bind(l.getWithoutPrompt,null,t),getWithPopup:i.bind(l.getWithPopup,null,t),getWithRedirect:i.bind(l.getWithRedirect,null,t),parseFromUrl:i.bind(l.parseFromUrl,null,t),decode:l.decodeToken,renew:i.bind(l.renewToken,null,t),getUserInfo:i.bind(l.getUserInfo,null,t),verify:i.bind(l.verifyToken,null,t)},t.token.getWithRedirect._setLocation=function(e){window.location=e},t.token.parseFromUrl._getHistory=function(){return window.history},t.token.parseFromUrl._getLocation=function(){return window.location},t.token.parseFromUrl._getDocument=function(){return window.document},t.fingerprint._getUserAgent=function(){return navigator.userAgent};var o=/windows phone|iemobile|wpdesktop/i;t.features.isFingerprintSupported=function(){var e=t.fingerprint._getUserAgent();return e&&!o.test(e)},t.tokenManager=new d(t,e.tokenManager)}var v=h.prototype;v.features={},v.features.isPopupPostMessageSupported=function(){var e=document.documentMode&&document.documentMode<10;return!(!window.postMessage||e)},v.features.isTokenVerifySupported=function(){return"undefined"!=typeof crypto&&crypto.subtle&&"undefined"!=typeof Uint8Array},v.signIn=function(e){var t=this;function n(n){return delete e.sendFingerprint,a.postToTransaction(t,"/api/v1/authn",e,n)}return(e=i.clone(e||{})).sendFingerprint?t.fingerprint().then(function(e){return n({headers:{"X-Device-Fingerprint":e}})}):n()},v.signOut=function(){return this.session.close()},v.forgotPassword=function(e){return a.postToTransaction(this,"/api/v1/authn/recovery/password",e)},v.unlockAccount=function(e){return a.postToTransaction(this,"/api/v1/authn/recovery/unlock",e)},v.verifyRecoveryToken=function(e){return a.postToTransaction(this,"/api/v1/authn/recovery/token",e)},v.webfinger=function(e){var t="/.well-known/webfinger"+i.toQueryParams(e);return p.get(this,t,{headers:{Accept:"application/jrd+json"}})},v.fingerprint=function(e){e=e||{};var t=this;if(!t.features.isFingerprintSupported())return r.reject(new c("Fingerprinting is not supported on this device"));var n=r.defer(),i=document.createElement("iframe");function a(e){if(e&&e.data&&e.origin===t.options.url){try{var r=JSON.parse(e.data)}catch(e){return n.reject(new c("Unable to parse iframe response"))}if(r)return"FingerprintAvailable"===r.type?n.resolve(r.fingerprint):void("FingerprintServiceReady"===r.type&&e.source.postMessage(JSON.stringify({type:"GetFingerprint"}),e.origin))}}i.style.display="none",o.addListener(window,"message",a),i.src=t.options.url+"/auth/services/devicefingerprint",document.body.appendChild(i);var u=setTimeout(function(){n.reject(new c("Fingerprinting timed out"))},e.timeout||15e3);return n.promise.fin(function(){clearTimeout(u),o.removeListener(window,"message",a),document.body.contains(i)&&i.parentElement.removeChild(i)})},e.exports=function(e){function t(n){if(!(this instanceof t))return new t(n);n&&!n.ajaxRequest&&(n.ajaxRequest=e),i.bind(h,this)(n)}return t.prototype=h.prototype,t.prototype.constructor=t,t}},function(e,t,n){
/*!
 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
n(321),Array.prototype.indexOf||(Array.prototype.indexOf=function(e,t){var n;if(null==this)throw new TypeError('"this" is null or not defined');var r=Object(this),o=r.length>>>0;if(0===o)return-1;var i=+t||0;if(Math.abs(i)===1/0&&(i=0),i>=o)return-1;for(n=Math.max(i>=0?i:o-Math.abs(i),0);n<o;){if(n in r&&r[n]===e)return n;n++}return-1}),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)})},function(e,t,n){!function(){var e=t,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function r(e){this.message=e}r.prototype=new Error,r.prototype.name="InvalidCharacterError",e.btoa||(e.btoa=function(e){for(var t,o,i=String(e),a=0,u=n,s="";i.charAt(0|a)||(u="=",a%1);s+=u.charAt(63&t>>8-a%1*8)){if((o=i.charCodeAt(a+=.75))>255)throw new r("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");t=t<<8|o}return s}),e.atob||(e.atob=function(e){var t=String(e).replace(/=+$/,"");if(t.length%4==1)throw new r("'atob' failed: The string to be decoded is not correctly encoded.");for(var o,i,a=0,u=0,s="";i=t.charAt(u++);~i&&(o=a%4?64*o+i:i,a++%4)?s+=String.fromCharCode(255&o>>(-2*a&6)):0)i=n.indexOf(i);return s})}()},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(323),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(22))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o=1,i={},a=!1,u=e.document,s=Object.getPrototypeOf&&Object.getPrototypeOf(e);s=s&&s.setTimeout?s:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){c(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&c(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),r=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){c(e.data)},r=function(t){e.port2.postMessage(t)}}():u&&"onreadystatechange"in u.createElement("script")?function(){var e=u.documentElement;r=function(t){var n=u.createElement("script");n.onreadystatechange=function(){c(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():r=function(e){setTimeout(c,0,e)},s.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var a={callback:e,args:t};return i[o]=a,r(o),o++},s.clearImmediate=l}function l(e){delete i[e]}function c(e){if(a)setTimeout(c,0,e);else{var t=i[e];if(t){a=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{l(e),a=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(22),n(129))},function(e,t,n){var r,o;
/*!
 * JavaScript Cookie v2.2.0
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */!function(i){if(void 0===(o="function"==typeof(r=i)?r.call(t,n,t,e):r)||(e.exports=o),!0,e.exports=i(),!!0){var a=window.Cookies,u=window.Cookies=i();u.noConflict=function(){return window.Cookies=a,u}}}(function(){function e(){for(var e=0,t={};e<arguments.length;e++){var n=arguments[e];for(var r in n)t[r]=n[r]}return t}return function t(n){function r(t,o,i){var a;if("undefined"!=typeof document){if(arguments.length>1){if("number"==typeof(i=e({path:"/"},r.defaults,i)).expires){var u=new Date;u.setMilliseconds(u.getMilliseconds()+864e5*i.expires),i.expires=u}i.expires=i.expires?i.expires.toUTCString():"";try{a=JSON.stringify(o),/^[\{\[]/.test(a)&&(o=a)}catch(e){}o=n.write?n.write(o,t):encodeURIComponent(String(o)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=(t=(t=encodeURIComponent(String(t))).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent)).replace(/[\(\)]/g,escape);var s="";for(var l in i)i[l]&&(s+="; "+l,!0!==i[l]&&(s+="="+i[l]));return document.cookie=t+"="+o+s}t||(a={});for(var c=document.cookie?document.cookie.split("; "):[],f=/(%[0-9A-Z]{2})+/g,d=0;d<c.length;d++){var p=c[d].split("="),h=p.slice(1).join("=");this.json||'"'!==h.charAt(0)||(h=h.slice(1,-1));try{var v=p[0].replace(f,decodeURIComponent);if(h=n.read?n.read(h,v):n(h,v)||h.replace(f,decodeURIComponent),this.json)try{h=JSON.parse(h)}catch(e){}if(t===v){a=h;break}t||(a[v]=h)}catch(e){}}return a}}return r.set=r,r.get=function(e){return r.call(r,e)},r.getJSON=function(){return r.apply({json:!0},[].slice.call(arguments))},r.defaults={},r.remove=function(t,n){r(t,"",e(n,{expires:-1}))},r.withConverter=t,r}(function(){})})},function(e,t){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
function n(e,t){this.name="AuthApiError",this.message=e.errorSummary,this.errorSummary=e.errorSummary,this.errorCode=e.errorCode,this.errorLink=e.errorLink,this.errorId=e.errorId,this.errorCauses=e.errorCauses,t&&(this.xhr=t)}n.prototype=new Error,e.exports=n},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(74),o=n(39),i=n(73),a=n(54),u=n(327),s=n(55);function l(e,t){var n={};return o.extend(n,t),!n.stateToken&&e.stateToken&&(n.stateToken=e.stateToken),n}function c(e,t,n,o){return r.post(e,t,n,o).then(function(t){return new h(e,t)})}function f(e,t,n){return function(c){var f,d,p;o.isNumber(c)?f=c:o.isObject(c)&&(f=c.delay,d=c.rememberDevice,p=c.autoPush),f||0===f||(f=s.DEFAULT_POLLING_DELAY);var v=o.getLink(t,"next","poll");function y(){var n={};if("function"==typeof p)try{n.autoPush=!!p()}catch(e){return i.reject(new a("AutoPush resulted in an error."))}else void 0!==p&&null!==p&&(n.autoPush=!!p);if("function"==typeof d)try{n.rememberDevice=!!d()}catch(e){return i.reject(new a("RememberDevice resulted in an error."))}else void 0!==d&&null!==d&&(n.rememberDevice=!!d);var u=v.href+o.toQueryParams(n);return r.post(e,u,function(e){return l(e)}(t),{saveAuthnState:!1})}n.isPolling=!0;var m=0,g=function(){return n.isPolling?y().then(function(t){if(m=0,t.factorResult&&"WAITING"===t.factorResult){if(!n.isPolling)throw new u;return i.delay(f).then(g)}return n.isPolling=!1,new h(e,t)}).fail(function(e){if(e.xhr&&(0===e.xhr.status||429===e.xhr.status)&&m<=4){var t=1e3*Math.pow(2,m);return m++,i.delay(t).then(g)}throw e}):i.reject(new u)};return g().fail(function(e){throw n.isPolling=!1,e})}}function d(e,t,n,u,s){if(Array.isArray(u))return function(r,i){if(!r)throw new a("Must provide a link name");var l=o.find(u,{name:r});if(!l)throw new a("No link found for that name");return d(e,t,n,l,s)(i)};if(u.hints&&u.hints.allow&&1===u.hints.allow.length)switch(u.hints.allow[0]){case"GET":return function(){return r.get(e,u.href)};case"POST":return function(r){s&&s.isPolling&&(s.isPolling=!1);var f=l(t,r);"MFA_ENROLL"===t.status&&o.extend(f,{factorType:n.factorType,provider:n.provider});var d={},p=f.autoPush;if(void 0!==p){if("function"==typeof p)try{d.autoPush=!!p()}catch(e){return i.reject(new a("AutoPush resulted in an error."))}else null!==p&&(d.autoPush=!!p);f=o.omit(f,"autoPush")}var h=f.rememberDevice;if(void 0!==h){if("function"==typeof h)try{d.rememberDevice=!!h()}catch(e){return i.reject(new a("RememberDevice resulted in an error."))}else null!==h&&(d.rememberDevice=!!h);f=o.omit(f,"rememberDevice")}else f.profile&&void 0!==f.profile.updatePhone&&(f.profile.updatePhone&&(d.updatePhone=!0),f.profile=o.omit(f.profile,"updatePhone"));var v=u.href+o.toQueryParams(d);return c(e,v,f)}}}function p(e,t,n,r){if(n=n||t,n=o.clone(n),Array.isArray(n)){for(var i=[],a=0,u=n.length;a<u;a++)i.push(p(e,t,n[a],r));return i}var s=n._embedded||{};for(var l in s)s.hasOwnProperty(l)&&(o.isObject(s[l])||Array.isArray(s[l]))&&(s[l]=p(e,t,s[l],r));var c=function(e,t,n,r){var o={};for(var i in n._links)if(n._links.hasOwnProperty(i)){var a=n._links[i];if("next"===i&&(i=a.name),a.type)o[i]=a;else switch(i){case"poll":o.poll=f(e,t,r);break;default:var u=d(e,t,n,a,r);u&&(o[i]=u)}}return o}(e,t,n,r);return o.extend(s,c),n=o.omit(n,"_embedded","_links"),o.extend(n,s),n}function h(e,t){t&&(this.data=t,o.extend(this,p(e,t,t,{})),delete this.stateToken,"RECOVERY_CHALLENGE"!==t.status||t._links||(this.cancel=function(){return new i(new h(e))}))}e.exports={transactionStatus:function(e,t){return t=l(e,t),r.post(e,e.options.url+"/api/v1/authn",t)},resumeTransaction:function(e,t){if(!t||!t.stateToken){var n=e.tx.exists._getCookie(s.STATE_TOKEN_COOKIE_NAME);if(!n)return i.reject(new a("No transaction to resume"));t={stateToken:n}}return e.tx.status(t).then(function(t){return new h(e,t)})},transactionExists:function(e){return!!e.tx.exists._getCookie(s.STATE_TOKEN_COOKIE_NAME)},postToTransaction:c}},function(e,t){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
function n(){this.name="AuthPollStopError",this.message="The poll was stopped by the sdk"}n.prototype=new Error,e.exports=n},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(39),o=n(74);e.exports={sessionExists:function(e){return e.session.get().then(function(e){return"ACTIVE"===e.status}).fail(function(){return!1})},getSession:function(e){return o.get(e,"/api/v1/sessions/me").then(function(t){var n=r.omit(t,"_links");return n.refresh=function(){return o.post(e,r.getLink(t,"refresh").href)},n.user=function(){return o.get(e,r.getLink(t,"user").href)},n}).fail(function(){return{status:"INACTIVE"}})},closeSession:function(e){return o.httpRequest(e,{url:e.options.url+"/api/v1/sessions/me",method:"DELETE"})},refreshSession:function(e){return o.post(e,"/api/v1/sessions/me/lifecycle/refresh")},setCookieAndRedirect:function(e,t,n){n=n||window.location.href,window.location=e.options.url+"/login/sessionCookieRedirect"+r.toQueryParams({checkAccountSetupComplete:!0,token:t,redirectUrl:n})}}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(74),o=n(39),i=n(182),a=n(73),u=n(330),s=n(54),l=n(331),c=n(55),f=n(90);function d(e){var t,n=e.split(".");try{t={header:JSON.parse(o.base64UrlToString(n[0])),payload:JSON.parse(o.base64UrlToString(n[1])),signature:n[2]}}catch(e){throw new s("Malformed token")}return t}function p(e,t,n){return(new a).then(function(){if(!t||!t.idToken)throw new s("Only idTokens may be verified");var r=d(t.idToken),a={clientId:e.options.clientId,issuer:e.options.issuer||e.options.url,ignoreSignature:e.options.ignoreSignature};return o.extend(a,n),i.validateClaims(e,r.payload,a),1!=a.ignoreSignature&&e.features.isTokenVerifySupported()?i.getKey(e,t.issuer,r.header.kid).then(function(e){return u.verifyToken(t.idToken,e)}).then(function(e){if(!e)throw new s("The token signature is not valid");return t}):t})}function h(e,t,n){var r=a.defer();function u(t){!t.data||t.origin!==e.options.url||t.data&&o.isString(n)&&t.data.state!==n||r.resolve(t.data)}return i.addListener(window,"message",u),r.promise.timeout(t||12e4,new s("OAuth flow timed out")).fin(function(){i.removeListener(window,"message",u)})}function v(e,t,n,r){r=r||{};var i=t.responseType,u=o.clone(t.scopes),c=t.clientId||e.options.clientId;return(new a).then(function(){if(n.error||n.error_description)throw new l(n.error,n.error_description);if(n.state!==t.state)throw new s("OAuth flow response state doesn't match request state");var o={};if(n.access_token&&(o.token={accessToken:n.access_token,expiresAt:Number(n.expires_in)+Math.floor(Date.now()/1e3),tokenType:n.token_type,scopes:u,authorizeUrl:r.authorizeUrl,userinfoUrl:r.userinfoUrl}),n.code&&(o.code={authorizationCode:n.code}),n.id_token){var i=e.token.decode(n.id_token),a={idToken:n.id_token,claims:i.payload,expiresAt:i.payload.exp,scopes:u,authorizeUrl:r.authorizeUrl,issuer:r.issuer,clientId:c},f={clientId:c,issuer:r.issuer,nonce:t.nonce,ignoreSignature:t.ignoreSignature};return p(e,a,f).then(function(){return o.id_token=a,o})}return o}).then(function(e){if(!Array.isArray(i))return e[i];if(!e.token&&!e.id_token)throw new s("Unable to parse OAuth flow response");return i.map(function(t){return e[t]})})}function y(e,t){t=o.clone(t)||{};var n={clientId:e.options.clientId,redirectUri:e.options.redirectUri||window.location.href,responseType:"id_token",responseMode:"okta_post_message",state:o.genRandomString(64),nonce:o.genRandomString(64),scopes:["openid","email"],ignoreSignature:e.options.ignoreSignature};return o.extend(n,t),n}function m(e){var t=function(e){if(!e.clientId)throw new s("A clientId must be specified in the OktaAuth constructor to get a token");if(o.isString(e.responseType)&&-1!==e.responseType.indexOf(" "))throw new s("Multiple OAuth responseTypes must be defined as an array");var t=o.removeNils({client_id:e.clientId,redirect_uri:e.redirectUri,response_type:e.responseType,response_mode:e.responseMode,state:e.state,nonce:e.nonce,prompt:e.prompt,display:e.display,sessionToken:e.sessionToken,idp:e.idp,max_age:e.maxAge});if(Array.isArray(t.response_type)&&(t.response_type=t.response_type.join(" ")),-1!==e.responseType.indexOf("id_token")&&-1===e.scopes.indexOf("openid"))throw new s("openid scope must be specified in the scopes argument when requesting an id_token");return t.scope=e.scopes.join(" "),t}(e);return o.toQueryParams(t)}function g(e,t,n){t=t||{},n=n||{};var r,u,l=y(e,t);t.sessionToken?o.extend(l,{prompt:"none",responseMode:"okta_post_message",display:null}):t.idp&&o.extend(l,{display:"popup"});try{r=(u=i.getOAuthUrls(e,l,n)).authorizeUrl+m(l)}catch(e){return a.reject(e)}function c(e){return/^(https?\:\/\/)?([^:\/?#]*(?:\:[0-9]+)?)/.exec(e)[0]}switch(l.sessionToken||null===l.display?"IFRAME":"popup"===l.display?"POPUP":"IMPLICIT"){case"IFRAME":var f=h(e,n.timeout,l.state),d=i.loadFrame(r);return f.then(function(t){return v(e,l,t,u)}).fin(function(){document.body.contains(d)&&d.parentElement.removeChild(d)});case"POPUP":var p;if("okta_post_message"===l.responseMode){if(!e.features.isPopupPostMessageSupported())return a.reject(new s("This browser doesn't have full postMessage support"));p=h(e,n.timeout,l.state)}var g={popupTitle:n.popupTitle},b=i.loadPopup(r,g);if("fragment"===l.responseMode){var _=c(e.idToken.authorize._getLocationHref()),w=c(l.redirectUri);if(_!==w)return a.reject(new s("Using fragment, the redirectUri origin ("+w+") must match the origin of this page ("+_+")"));p=function(e,t,n){var r=a.defer();return function e(){try{t&&t.location&&t.location.hash?r.resolve(i.hashToObject(t.location.hash)):t&&!t.closed&&setTimeout(e,500)}catch(t){setTimeout(e,500)}}(),r.promise.timeout(n||12e4,new s("OAuth flow timed out"))}(0,b,n.timeout)}var x=a.defer();var k=setInterval(function(){!function(e){e.closed&&x.reject(new s("Unable to parse OAuth flow response"))}(b)},500);return p.then(function(e){x.resolve(e)}).fail(function(e){x.reject(e)}),x.promise.then(function(t){return v(e,l,t,u)}).fin(function(){b.closed||(clearInterval(k),b.close())});default:return a.reject(new s("The full page redirect flow is not supported"))}}e.exports={getToken:g,getWithoutPrompt:function(e,t,n){var r=o.clone(t)||{};return o.extend(r,{prompt:"none",responseMode:"okta_post_message",display:null}),g(e,r,n)},getWithPopup:function(e,t,n){var r=o.clone(t)||{};return o.extend(r,{display:"popup"}),g(e,r,n)},getWithRedirect:function(e,t,n){var r=y(e,t=o.clone(t)||{});if(!t.responseMode){var a=r.responseType;-1!==a.indexOf("code")&&(o.isString(a)||Array.isArray(a)&&1===a.length)?o.extend(r,{responseMode:"query"}):o.extend(r,{responseMode:"fragment"})}var u=i.getOAuthUrls(e,r,n),s=u.authorizeUrl+m(r);f.setCookie(c.REDIRECT_OAUTH_PARAMS_COOKIE_NAME,JSON.stringify({responseType:r.responseType,state:r.state,nonce:r.nonce,scopes:r.scopes,clientId:r.clientId,urls:u})),f.setCookie(c.REDIRECT_NONCE_COOKIE_NAME,r.nonce),f.setCookie(c.REDIRECT_STATE_COOKIE_NAME,r.state),e.token.getWithRedirect._setLocation(s)},parseFromUrl:function(e,t){var n=e.token.parseFromUrl._getLocation().hash;if(t&&(n=t.substring(t.indexOf("#"))),!n)return a.reject(new s("Unable to parse a token from the url"));var r=f.getCookie(c.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);if(!r)return a.reject(new s("Unable to retrieve OAuth redirect params cookie"));try{var o=JSON.parse(r),u=o.urls;delete o.urls,f.deleteCookie(c.REDIRECT_OAUTH_PARAMS_COOKIE_NAME)}catch(e){return a.reject(new s("Unable to parse the "+c.REDIRECT_OAUTH_PARAMS_COOKIE_NAME+" cookie: "+e.message))}return a.resolve(i.hashToObject(n)).then(function(n){return t||function(e){var t=e.token.parseFromUrl._getHistory(),n=e.token.parseFromUrl._getDocument(),r=e.token.parseFromUrl._getLocation();t&&t.replaceState?t.replaceState(null,n.title,r.pathname+r.search):r.hash=""}(e),v(e,o,n,u)})},decodeToken:d,renewToken:function(e,t){return i.isToken(t)?(n=t.accessToken?"token":"id_token",e.token.getWithoutPrompt({responseType:n,scopes:t.scopes},{authorizeUrl:t.authorizeUrl,userinfoUrl:t.userinfoUrl,issuer:t.issuer})):a.reject(new s("Renew must be passed a token with an array of scopes and an accessToken or idToken"));var n},getUserInfo:function(e,t){return t&&(i.isToken(t)||t.accessToken||t.userinfoUrl)?r.httpRequest(e,{url:t.userinfoUrl,method:"GET",accessToken:t.accessToken}).fail(function(e){if(e.xhr&&(401===e.xhr.status||403===e.xhr.status)){var t=e.xhr.getResponseHeader("WWW-Authenticate");if(t){var n=t.match(/error="(.*?)"/)||[],r=t.match(/error_description="(.*?)"/)||[],o=n[1],i=r[1];o&&i&&(e=new l(o,i))}}throw e}):a.reject(new s("getUserInfo requires an access token object"))},verifyToken:p}},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var r=n(39);e.exports={verifyToken:function(e,t){var n={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}};return delete(t=r.clone(t)).use,crypto.subtle.importKey("jwk",t,n,!0,["verify"]).then(function(t){var o=e.split("."),i=r.stringToBuffer(o[0]+"."+o[1]),a=r.base64UrlDecode(o[2]),u=r.stringToBuffer(a);return crypto.subtle.verify(n,t,u,i)})}}},function(e,t){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
function n(e,t){this.name="OAuthError",this.message=t,this.errorCode=e,this.errorSummary=t}n.prototype=new Error,e.exports=n},function(e,t,n){
/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
var r=n(39),o=n(54),i=n(130),a=n(73),u=n(333),s=n(55),l=n(183);function c(e,t){e.emitter.emit("error",t)}function f(e,t){clearTimeout(e.expireTimeouts[t]),delete e.expireTimeouts[t],delete e.renewPromise[t]}function d(e,t,n,r){var o=1e3*e.options.maxClockSkew,i=1e3*r.expiresAt-(Date.now()-o);f(t,n);var a=setTimeout(function(){!function(e,t,n){e.emitter.emit("expired",t,n)}(t,n,r)},i);t.expireTimeouts[n]=a}function p(e,t,n,i,a){var u=n.getStorage();if(!r.isObject(a)||!a.scopes||!a.expiresAt&&0!==a.expiresAt||!a.idToken&&!a.accessToken)throw new o("Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties");u[i]=a,n.setStorage(u),d(e,t,i,a)}function h(e,t){return e.getStorage()[t]}function v(e,t,n,r){return a.Promise(function(o){var i=h(n,r),a=1e3*e.options.maxClockSkew;return!i||1e3*i.expiresAt-a>Date.now()?o(i):o(t.autoRenew?m(e,t,n,r):y(t,n,r))})}function y(e,t,n){f(e,n);var r=t.getStorage();delete r[n],t.setStorage(r)}function m(e,t,n,r){try{var i=h(n,r);if(!i)throw new o("The tokenManager has no token for the key: "+r)}catch(e){return a.reject(e)}return f(t,r),t.renewPromise[r]||(t.renewPromise[r]=e.token.renew(i).then(function(o){if(h(n,r))return p(e,t,n,r,o),t.emitter.emit("renewed",r,o,i),delete t.renewPromise[r],o}).fail(function(e){throw"OAuthError"===e.name&&(y(t,n,r),c(t,e)),e})),t.renewPromise[r]}function g(e,t){!function(e){var t=e.expireTimeouts;for(var n in t)t.hasOwnProperty(n)&&f(e,n)}(e),t.clearStorage()}e.exports=function(e,t){var n;switch((t=t||{}).storage=t.storage||"localStorage",t.autoRenew||!1===t.autoRenew||(t.autoRenew=!0),"localStorage"!==t.storage||i.browserHasLocalStorage()||(r.warn("This browser doesn't support localStorage. Switching to sessionStorage."),t.storage="sessionStorage"),"sessionStorage"!==t.storage||i.browserHasSessionStorage()||(r.warn("This browser doesn't support sessionStorage. Switching to cookie-based storage."),t.storage="cookie"),t.storage){case"localStorage":n=l(localStorage,s.TOKEN_STORAGE_NAME);break;case"sessionStorage":n=l(sessionStorage,s.TOKEN_STORAGE_NAME);break;case"cookie":n=l(i.getCookieStorage(),s.TOKEN_STORAGE_NAME);break;default:throw new o("Unrecognized storage option")}var a={emitter:new u,autoRenew:t.autoRenew,expireTimeouts:{},renewPromise:{}};this.add=r.bind(p,this,e,a,n),this.get=r.bind(v,this,e,a,n),this.remove=r.bind(y,this,a,n),this.clear=r.bind(g,this,a,n),this.renew=r.bind(m,this,e,a,n),this.on=r.bind(a.emitter.on,a.emitter),this.off=r.bind(a.emitter.off,a.emitter),function(e,t,n){try{var r=n.getStorage()}catch(e){return void c(t,e)}for(var o in r)r.hasOwnProperty(o)&&d(e,t,o,r[o])}(e,a,n)}},function(e,t){function n(){}n.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function o(){r.off(e,o),t.apply(n,arguments)}return o._=t,this.on(e,o,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,o=n.length;r<o;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],o=[];if(r&&t)for(var i=0,a=r.length;i<a;i++)r[i].fn!==t&&r[i].fn._!==t&&o.push(r[i]);return o.length?n[e]=o:delete n[e],this}},e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={name:"@okta/okta-react",version:"1.1.4"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=d(n(69)),o=d(n(53)),i=d(n(72)),a=d(n(70)),u=d(n(71)),s=n(0),l=d(s),c=n(41),f=d(n(131));function d(e){return e&&e.__esModule?e:{default:e}}t.default=(0,f.default)(function(e){function t(e){(0,o.default)(this,t);var n=(0,a.default)(this,(t.__proto__||(0,r.default)(t)).call(this,e));return n.state={authenticated:null,error:null},n}return(0,u.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.props.auth.handleAuthentication().then(function(){return e.setState({authenticated:!0})}).catch(function(t){return e.setState({authenticated:!1,error:t.toString()})})}},{key:"render",value:function(){if(null===this.state.authenticated)return null;var e=JSON.parse(localStorage.getItem("secureRouterReferrerPath")||'{ "pathname": "/" }');return localStorage.removeItem("secureRouterReferrerPath"),this.state.authenticated?l.default.createElement(c.Redirect,{to:e}):l.default.createElement("p",null,this.state.error)}}]),t}(s.Component))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(69)),o=c(n(53)),i=c(n(72)),a=c(n(70)),u=c(n(71)),s=n(0),l=c(n(1));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(t.__proto__||(0,r.default)(t)).apply(this,arguments))}return(0,u.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){return this.props.render({auth:this.context.auth})}}]),t}(s.Component);f.contextTypes={auth:l.default.object.isRequired},t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=h(n(88)),o=h(n(89)),i=h(n(69)),a=h(n(53)),u=h(n(72)),s=h(n(70)),l=h(n(71)),c=n(0),f=h(c),d=n(41),p=h(n(131));function h(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,a.default)(this,t),(0,s.default)(this,(t.__proto__||(0,i.default)(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,u.default)(t,[{key:"checkAuthentication",value:function(){!1===this.props.authenticated&&this.props.login()}},{key:"componentWillMount",value:function(){this.checkAuthentication()}},{key:"componentDidUpdate",value:function(){this.checkAuthentication()}},{key:"render",value:function(){if(!this.props.authenticated)return null;var e=this.props.component;return this.props.render?this.props.render(this.props.renderProps):f.default.createElement(e,this.props.renderProps)}}]),t}(c.Component),y=function(e){function t(e){(0,a.default)(this,t);var n=(0,s.default)(this,(t.__proto__||(0,i.default)(t)).call(this,e));return n.state={authenticated:null},n.checkAuthentication=n.checkAuthentication.bind(n),n.createRenderWrapper=n.createRenderWrapper.bind(n),n.checkAuthentication(),n}return(0,l.default)(t,e),(0,u.default)(t,[{key:"checkAuthentication",value:function(){var e=(0,o.default)(r.default.mark(function e(){var t;return r.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.props.auth.isAuthenticated();case 2:(t=e.sent)!==this.state.authenticated&&this.setState({authenticated:t});case 4:case"end":return e.stop()}},e,this)}));return function(){return e.apply(this,arguments)}}()},{key:"componentDidUpdate",value:function(){this.checkAuthentication()}},{key:"createRenderWrapper",value:function(e){return f.default.createElement(v,{authenticated:this.state.authenticated,login:this.props.auth.login,component:this.props.component,render:this.props.render,renderProps:e})}},{key:"render",value:function(){return f.default.createElement(d.Route,{path:this.props.path,exact:this.props.exact,strict:this.props.strict,sensitive:this.props.sensitive,render:this.createRenderWrapper})}}]),t}(c.Component);t.default=(0,p.default)(y)},function(e,t,n){var r=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=r.regeneratorRuntime&&Object.getOwnPropertyNames(r).indexOf("regeneratorRuntime")>=0,i=o&&r.regeneratorRuntime;if(r.regeneratorRuntime=void 0,e.exports=n(339),o)r.regeneratorRuntime=i;else try{delete r.regeneratorRuntime}catch(e){r.regeneratorRuntime=void 0}},function(e,t){!function(t){"use strict";var n,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",l="object"==typeof e,c=t.regeneratorRuntime;if(c)l&&(e.exports=c);else{(c=t.regeneratorRuntime=l?e.exports:{}).wrap=_;var f="suspendedStart",d="suspendedYield",p="executing",h="completed",v={},y={};y[a]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(j([])));g&&g!==r&&o.call(g,a)&&(y=g);var b=E.prototype=x.prototype=Object.create(y);k.prototype=b.constructor=E,E.constructor=k,E[s]=k.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===k||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,E):(e.__proto__=E,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(b),e},c.awrap=function(e){return{__await:e}},O(S.prototype),S.prototype[u]=function(){return this},c.AsyncIterator=S,c.async=function(e,t,n,r){var o=new S(_(e,t,n,r));return c.isGeneratorFunction(t)?o:o.next().then(function(e){return e.done?e.value:o.next()})},O(b),b[s]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=j,R.prototype={constructor:R,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=n)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,o){return u.type="throw",u.arg=e,t.next=r,o&&(t.method="next",t.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),P(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;P(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=n),v}}}function _(e,t,n,r){var o=t&&t.prototype instanceof x?t:x,i=Object.create(o.prototype),a=new R(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return A()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var u=T(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=w(e,t,n);if("normal"===s.type){if(r=n.done?h:d,s.arg===v)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=h,n.method="throw",n.arg=s.arg)}}}(e,n,a),i}function w(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function x(){}function k(){}function E(){}function O(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function S(e){var t;this._invoke=function(n,r){function i(){return new Promise(function(t,i){!function t(n,r,i,a){var u=w(e[n],e,r);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&o.call(l,"__await")?Promise.resolve(l.__await).then(function(e){t("next",e,i,a)},function(e){t("throw",e,i,a)}):Promise.resolve(l).then(function(e){s.value=e,i(s)},function(e){return t("throw",e,i,a)})}a(u.arg)}(n,r,t,i)})}return t=t?t.then(i,i):i()}}function T(e,t){var r=e.iterator[t.method];if(r===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=n,T(e,t),"throw"===t.method))return v;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=w(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,v;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=n),t.delegate=null,v):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function j(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=n,t.done=!0,t};return i.next=i}}return{next:A}}function A(){return{value:n,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=r(n(138)),d=function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText}}};function p(e){var t,n=e.children,r=e.classes,l=e.className,d=e.color,p=e.position,h=(0,a.default)(e,["children","classes","className","color","position"]),v=(0,s.default)(r.root,r["position".concat((0,c.capitalize)(p))],(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(d))],"inherit"!==d),(0,i.default)(t,"mui-fixed","fixed"===p),t),l);return u.default.createElement(f.default,(0,o.default)({square:!0,component:"header",elevation:4,className:v},h),n)}t.styles=d,p.propTypes={},p.defaultProps={color:"primary",position:"fixed"};var h=(0,l.default)(d,{name:"MuiAppBar"})(p);t.default=h},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){var n=null;for(var o in t){var i=t[o],a=void 0===i?"undefined":r(i);if("function"===a)n||(n={}),n[o]=i;else if("object"===a&&null!==i&&!Array.isArray(i)){var u=e(i);u&&(n||(n={}),n[o]=u)}}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(56));var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.sheets=[],this.refs=[],this.keys=[]}return r(e,[{key:"get",value:function(e){var t=this.keys.indexOf(e);return this.sheets[t]}},{key:"add",value:function(e,t){var n=this.sheets,r=this.refs,o=this.keys,i=n.indexOf(t);return-1!==i?i:(n.push(t),r.push(0),o.push(e),n.length-1)}},{key:"manage",value:function(e){var t=this.keys.indexOf(e),n=this.sheets[t];return 0===this.refs[t]&&n.attach(),this.refs[t]++,this.keys[t]||this.keys.splice(t,0,e),n}},{key:"unmanage",value:function(e){var t=this.keys.indexOf(e);-1!==t?this.refs[t]>0&&(this.refs[t]--,0===this.refs[t]&&this.sheets[t].detach()):(0,o.default)(!1,"SheetsManager: can't find sheet to unmanage")}},{key:"size",get:function(){return this.keys.length}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t){if(null==t)return t;var n=void 0===t?"undefined":r(t);if("string"===n||"number"===n||"function"===n)return t;if(i(t))return t.map(e);if((0,o.default)(t))return t;var a={};for(var u in t){var s=t[u];"object"!==(void 0===s?"undefined":r(s))?a[u]=s:a[u]=e(s)}return a};var o=function(e){return e&&e.__esModule?e:{default:e}}(n(190));var i=Array.isArray},function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(219);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.default=a}.call(this,n(22),n(159)(e))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});e.CSS;t.default=function(e){return e}}).call(this,n(22))},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n="2f1acc6c3a606b082e5eef5e54414ffb";null==e[n]&&(e[n]=0),t.default=e[n]++}).call(this,n(22))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=g(n(94)),u=g(n(193)),s=g(n(353)),l=g(n(354)),c=g(n(360)),f=g(n(361)),d=g(n(133)),p=g(n(57)),h=g(n(192)),v=g(n(93)),y=g(n(362)),m=g(n(363));function g(e){return e&&e.__esModule?e:{default:e}}var b=l.default.concat([c.default,f.default]),_=0,w=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.id=_++,this.version="9.8.7",this.plugins=new s.default,this.options={createGenerateClassName:h.default,Renderer:a.default?y.default:m.default,plugins:[]},this.generateClassName=(0,h.default)(),this.use.apply(this,b),this.setup(t)}return i(e,[{key:"setup",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.createGenerateClassName&&(this.options.createGenerateClassName=e.createGenerateClassName,this.generateClassName=e.createGenerateClassName()),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),(e.virtual||e.Renderer)&&(this.options.Renderer=e.Renderer||(e.virtual?m.default:y.default)),e.plugins&&this.use.apply(this,e.plugins),this}},{key:"createStyleSheet",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.index;"number"!=typeof n&&(n=0===d.default.index?0:d.default.index+1);var r=new u.default(e,o({},t,{jss:this,generateClassName:t.generateClassName||this.generateClassName,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r}},{key:"removeStyleSheet",value:function(e){return e.detach(),d.default.remove(e),this}},{key:"createRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};"object"===(void 0===e?"undefined":r(e))&&(n=t,t=e,e=void 0);var o=n;o.jss=this,o.Renderer=this.options.Renderer,o.generateClassName||(o.generateClassName=this.generateClassName),o.classes||(o.classes={});var i=(0,v.default)(e,t,o);return!o.selector&&i instanceof p.default&&(i.selector="."+o.generateClassName(i)),this.plugins.onProcessRule(i),i}},{key:"use",value:function(){for(var e=this,t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach(function(t){-1===e.options.plugins.indexOf(t)&&(e.options.plugins.push(t),e.plugins.use(t))}),this}}]),e}();t.default=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(56));var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.hooks={onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}}return r(e,[{key:"onCreateRule",value:function(e,t,n){for(var r=0;r<this.hooks.onCreateRule.length;r++){var o=this.hooks.onCreateRule[r](e,t,n);if(o)return o}return null}},{key:"onProcessRule",value:function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.hooks.onProcessRule.length;n++)this.hooks.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}}},{key:"onProcessStyle",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onProcessStyle.length;o++)r=this.hooks.onProcessStyle[o](r,t,n),t.style=r}},{key:"onProcessSheet",value:function(e){for(var t=0;t<this.hooks.onProcessSheet.length;t++)this.hooks.onProcessSheet[t](e)}},{key:"onUpdate",value:function(e,t,n){for(var r=0;r<this.hooks.onUpdate.length;r++)this.hooks.onUpdate[r](e,t,n)}},{key:"onChangeValue",value:function(e,t,n){for(var r=e,o=0;o<this.hooks.onChangeValue.length;o++)r=this.hooks.onChangeValue[o](r,t,n);return r}},{key:"use",value:function(e){for(var t in e)this.hooks[t]?this.hooks[t].push(e[t]):(0,o.default)(!1,'[JSS] Unknown hook "%s".',t)}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=s(n(355)),o=s(n(356)),i=s(n(357)),a=s(n(358)),u=s(n(359));function s(e){return e&&e.__esModule?e:{default:e}}var l={"@charset":r.default,"@import":r.default,"@namespace":r.default,"@keyframes":o.default,"@media":i.default,"@supports":i.default,"@font-face":a.default,"@viewport":u.default,"@-ms-viewport":u.default},c=Object.keys(l).map(function(e){var t=new RegExp("^"+e),n=l[e];return{onCreateRule:function(e,r,o){return t.test(e)?new n(e,r,o):null}}});t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="simple",this.isProcessed=!1,this.key=t,this.value=n,this.options=r}return r(e,[{key:"toString",value:function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){return e&&e.__esModule?e:{default:e}}(n(75));var a=function(){function e(t,n,o){for(var a in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="keyframes",this.isProcessed=!1,this.key=t,this.options=o,this.rules=new i.default(r({},o,{parent:this})),n)this.rules.add(a,n[a],r({},this.options,{parent:this,selector:a}));this.rules.process()}return o(e,[{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t&&(t+="\n"),this.key+" {\n"+t+"}"}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=function(e){return e&&e.__esModule?e:{default:e}}(n(75));var a=function(){function e(t,n,o){for(var a in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="conditional",this.isProcessed=!1,this.key=t,this.options=o,this.rules=new i.default(r({},o,{parent:this})),n)this.rules.add(a,n[a]);this.rules.process()}return o(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"toString",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{indent:1},t=this.rules.toString(e);return t?this.key+" {\n"+t+"\n}":""}}]),e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(132));var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="font-face",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return r(e,[{key:"toString",value:function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=(0,o.default)(this.key,this.style[n]),this.style[n+1]&&(t+="\n");return t}return(0,o.default)(this.key,this.style,e)}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=function(e){return e&&e.__esModule?e:{default:e}}(n(132));var i=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.type="viewport",this.isProcessed=!1,this.key=t,this.style=n,this.options=r}return r(e,[{key:"toString",value:function(e){return(0,o.default)(this.key,this.style,e)}}]),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(57)),o=a(n(93)),i=a(n(190));function a(e){return e&&e.__esModule?e:{default:e}}t.default={onCreateRule:function(e,t,n){if(!(0,i.default)(t))return null;var r=t,a=(0,o.default)(e,{},n);return r.subscribe(function(e){for(var t in e)a.prop(t,e[t])}),a},onProcessRule:function(e){if(e instanceof r.default){var t=e,n=t.style,o=function(e){var r=n[e];if(!(0,i.default)(r))return"continue";delete n[e],r.subscribe({next:function(n){t.prop(e,n)}})};for(var a in n)o(a)}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n(75)),o=a(n(57)),i=a(n(93));function a(e){return e&&e.__esModule?e:{default:e}}var u=Date.now(),s="fnValues"+u,l="fnStyle"+ ++u;t.default={onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=(0,i.default)(e,{},n);return r[l]=t,r},onProcessStyle:function(e,t){var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return(t=t)[s]=n,e},onUpdate:function(e,t){if(t.rules instanceof r.default)t.rules.update(e);else if(t instanceof o.default){if((t=t)[s])for(var n in t[s])t.prop(n,t[s][n](e));var i=(t=t)[l];if(i){var a=i(e);for(var u in a)t.prop(u,a[u])}}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(56)),i=s(n(133)),a=s(n(57)),u=s(n(92));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=void 0;return function(){return t||(t=e()),t}};function c(e,t){try{return e.style.getPropertyValue(t)}catch(e){return""}}function f(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=(0,u.default)(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.style.setProperty(t,r)}catch(e){return!1}return!0}function d(e,t){try{e.style.removeProperty(t)}catch(e){(0,o.default)(!1,'[JSS] DOMException "%s" was thrown. Tried to remove property "%s".',e.message,t)}}var p=1,h=7,v=function(){var e=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return e.substr(t,e.indexOf("{")-1)};return function(t){if(t.type===p)return t.selectorText;if(t.type===h){var n=t.name;if(n)return"@keyframes "+n;var r=t.cssText;return"@"+e(r,r.indexOf("keyframes"))}return e(t.cssText)}}();function y(e,t){return e.selectorText=t,e.selectorText===t}var m=l(function(){return document.head||document.getElementsByTagName("head")[0]}),g=function(){var e=void 0,t=!1;return function(n){var r={};e||(e=document.createElement("style"));for(var o=0;o<n.length;o++){var i=n[o];if(i instanceof a.default){var u=i.selector;if(u&&-1!==u.indexOf("\\")){t||(m().appendChild(e),t=!0),e.textContent=u+" {}";var s=e.sheet;if(s){var l=s.cssRules;l&&(r[l[0].selectorText]=i.key)}}}}return t&&(m().removeChild(e),t=!1),r}}();function b(e){var t=i.default.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n)return n.renderer.element;if(n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))return n.renderer.element.nextElementSibling}var r=e.insertionPoint;if(r&&"string"==typeof r){var a=function(e){for(var t=m(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(a)return a.nextSibling;(0,o.default)("jss"===r,'[JSS] Insertion point "%s" not found.',r)}return null}var _=l(function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null}),w=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.getPropertyValue=c,this.setProperty=f,this.removeProperty=d,this.setSelector=y,this.getKey=v,this.getUnescapedKeysMap=g,this.hasInsertedRules=!1,t&&i.default.add(t),this.sheet=t;var n=this.sheet?this.sheet.options:{},r=n.media,o=n.meta,a=n.element;this.element=a||document.createElement("style"),this.element.setAttribute("data-jss",""),r&&this.element.setAttribute("media",r),o&&this.element.setAttribute("data-meta",o);var u=_();u&&this.element.setAttribute("nonce",u)}return r(e,[{key:"attach",value:function(){!this.element.parentNode&&this.sheet&&(this.hasInsertedRules&&(this.deploy(),this.hasInsertedRules=!1),function(e,t){var n=t.insertionPoint,r=b(t);if(r){var i=r.parentNode;i&&i.insertBefore(e,r)}else if(n&&"number"==typeof n.nodeType){var a=n,u=a.parentNode;u?u.insertBefore(e,a.nextSibling):(0,o.default)(!1,"[JSS] Insertion point is not in the DOM.")}else m().insertBefore(e,r)}(this.element,this.sheet.options))}},{key:"detach",value:function(){this.element.parentNode.removeChild(this.element)}},{key:"deploy",value:function(){this.sheet&&(this.element.textContent="\n"+this.sheet.toString()+"\n")}},{key:"insertRule",value:function(e,t){var n=this.element.sheet,r=n.cssRules,i=e.toString();if(t||(t=r.length),!i)return!1;try{n.insertRule(i,t)}catch(t){return(0,o.default)(!1,"[JSS] Can not insert an unsupported rule \n\r%s",e),!1}return this.hasInsertedRules=!0,r[t]}},{key:"deleteRule",value:function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),!0)}},{key:"indexOf",value:function(e){for(var t=this.element.sheet.cssRules,n=0;n<t.length;n++)if(e===t[n])return n;return-1}},{key:"replaceRule",value:function(e,t){var n=this.indexOf(e),r=this.insertRule(t,n);return this.element.sheet.deleteRule(n),r}},{key:"getRules",value:function(){return this.element.sheet.cssRules}}]),e}();t.default=w},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,[{key:"setProperty",value:function(){return!0}},{key:"getPropertyValue",value:function(){return""}},{key:"removeProperty",value:function(){}},{key:"setSelector",value:function(){return!0}},{key:"getKey",value:function(){return""}},{key:"attach",value:function(){}},{key:"detach",value:function(){}},{key:"deploy",value:function(){}},{key:"insertRule",value:function(){return!1}},{key:"deleteRule",value:function(){return!0}},{key:"replaceRule",value:function(){return!1}},{key:"getRules",value:function(){}},{key:"indexOf",value:function(){return-1}}]),e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={jss:"64a55d578f856d258dc345b094a2a2b3",sheetsRegistry:"d4bd0baacbc52bbd48bbb9eb24344ecd",sheetOptions:"6fc570d6bd61383819d0f9e7407c452d"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(){return{onCreateRule:function(e,t,n){if(e===u)return new l(e,t,n);if("@"===e[0]&&e.substr(0,s.length)===s)return new c(e,t,n);var r=n.parent;r&&("global"!==r.type&&"global"!==r.options.parent.type||(n.global=!0));n.global&&(n.selector=e);return null},onProcessRule:function(e){if("style"!==e.type)return;(function(e){var t=e.options,n=e.style,o=n[u];if(!o)return;for(var i in o)t.sheet.addRule(i,o[i],r({},t,{selector:d(i,e.selector)}));delete n[u]})(e),function(e){var t=e.options,n=e.style;for(var o in n)if(o.substr(0,u.length)===u){var i=d(o.substr(u.length),e.selector);t.sheet.addRule(i,n[o],r({},t,{selector:i})),delete n[o]}}(e)}}};var i=n(188);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var u="@global",s="@global ",l=function(){function e(t,n,o){for(var u in a(this,e),this.type="global",this.key=t,this.options=o,this.rules=new i.RuleList(r({},o,{parent:this})),n)this.rules.add(u,n[u],{selector:u});this.rules.process()}return o(e,[{key:"getRule",value:function(e){return this.rules.get(e)}},{key:"addRule",value:function(e,t,n){var r=this.rules.add(e,t,n);return this.options.jss.plugins.onProcessRule(r),r}},{key:"indexOf",value:function(e){return this.rules.indexOf(e)}},{key:"toString",value:function(){return this.rules.toString()}}]),e}(),c=function(){function e(t,n,o){a(this,e),this.name=t,this.options=o;var i=t.substr(s.length);this.rule=o.jss.createRule(i,n,r({},o,{parent:this,selector:i}))}return o(e,[{key:"toString",value:function(e){return this.rule.toString(e)}}]),e}(),f=/\s*,\s*/g;function d(e,t){for(var n=e.split(f),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.default=function(){function e(e){return function(t,n){var r=e.getRule(n);return r?r.selector:((0,o.default)(!1,"[JSS] Could not find the referenced rule %s in %s.",n,e.options.meta||e),n)}}var t=function(e){return-1!==e.indexOf("&")};function n(e,n){for(var r=n.split(i),o=e.split(i),u="",s=0;s<r.length;s++)for(var l=r[s],c=0;c<o.length;c++){var f=o[c];u&&(u+=", "),u+=t(f)?f.replace(a,l):l+" "+f}return u}function s(e,t,n){if(n)return r({},n,{index:n.index+1});var o=e.options.nestingLevel;return o=void 0===o?1:o+1,r({},e.options,{nestingLevel:o,index:t.indexOf(e)+1})}return{onProcessStyle:function(o,i){if("style"!==i.type)return o;var a=i.options.parent,l=void 0,c=void 0;for(var f in o){var d=t(f),p="@"===f[0];if(d||p){if(l=s(i,a,l),d){var h=n(f,i.selector);c||(c=e(a)),h=h.replace(u,c),a.addRule(h,o[f],r({},l,{selector:h}))}else p&&a.addRule(f,null,l).addRule(i.key,o[f],{selector:i.selector});delete o[f]}}return o}}};var o=function(e){return e&&e.__esModule?e:{default:e}}(n(367));var i=/\s*,\s*/g,a=/&/g,u=/\$([\w-]+)/g},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=o(e[t]);return e}return o(e)},onChangeValue:function(e,t,n){var o=(0,r.default)(t);return t===o?e:(n.prop(o,e),null)}}};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(369));function o(e){var t={};for(var n in e)t[(0,r.default)(n)]=e[n];return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(o):t.fallbacks=o(e.fallbacks)),t}},function(e,t,n){"use strict";var r=/[A-Z]/g,o=/^ms-/,i={};e.exports=function(e){return e in i?i[e]:i[e]=e.replace(r,"-$&").toLowerCase().replace(o,"-ms-")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}t.default=function(){var e=o(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{});return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r in t)t[r]=a(r,t[r],e);return t},onChangeValue:function(t,n){return a(n,t,e)}}};var i=o(function(e){return e&&e.__esModule?e:{default:e}}(n(371)).default);function a(e,t,n){if(!t)return t;var o=t,u=void 0===t?"undefined":r(t);switch("object"===u&&Array.isArray(t)&&(u="array"),u){case"object":if("fallbacks"===e){for(var s in t)t[s]=a(s,t[s],n);break}for(var l in t)t[l]=a(e+"-"+l,t[l],n);break;case"array":for(var c=0;c<t.length;c++)t[c]=a(e,t[c],n);break;case"number":0!==t&&(o=t+(n[e]||i[e]||""))}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={"animation-delay":"ms","animation-duration":"ms","background-position":"px","background-position-x":"px","background-position-y":"px","background-size":"px",border:"px","border-bottom":"px","border-bottom-left-radius":"px","border-bottom-right-radius":"px","border-bottom-width":"px","border-left":"px","border-left-width":"px","border-radius":"px","border-right":"px","border-right-width":"px","border-spacing":"px","border-top":"px","border-top-left-radius":"px","border-top-right-radius":"px","border-top-width":"px","border-width":"px","border-after-width":"px","border-before-width":"px","border-end-width":"px","border-horizontal-spacing":"px","border-start-width":"px","border-vertical-spacing":"px",bottom:"px","box-shadow":"px","column-gap":"px","column-rule":"px","column-rule-width":"px","column-width":"px","flex-basis":"px","font-size":"px","font-size-delta":"px",height:"px",left:"px","letter-spacing":"px","logical-height":"px","logical-width":"px",margin:"px","margin-after":"px","margin-before":"px","margin-bottom":"px","margin-left":"px","margin-right":"px","margin-top":"px","max-height":"px","max-width":"px","margin-end":"px","margin-start":"px","mask-position-x":"px","mask-position-y":"px","mask-size":"px","max-logical-height":"px","max-logical-width":"px","min-height":"px","min-width":"px","min-logical-height":"px","min-logical-width":"px",motion:"px","motion-offset":"px",outline:"px","outline-offset":"px","outline-width":"px",padding:"px","padding-bottom":"px","padding-left":"px","padding-right":"px","padding-top":"px","padding-after":"px","padding-before":"px","padding-end":"px","padding-start":"px","perspective-origin-x":"%","perspective-origin-y":"%",perspective:"px",right:"px","shape-margin":"px",size:"px","text-indent":"px","text-stroke":"px","text-stroke-width":"px",top:"px","transform-origin":"%","transform-origin-x":"%","transform-origin-y":"%","transform-origin-z":"%","transition-delay":"ms","transition-duration":"ms","vertical-align":"px",width:"px","word-spacing":"px","box-shadow-x":"px","box-shadow-y":"px","box-shadow-blur":"px","box-shadow-spread":"px","font-line-height":"px","text-shadow-x":"px","text-shadow-y":"px","text-shadow-blur":"px"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{onProcessRule:function(e){"keyframes"===e.type&&(e.key="@"+r.prefix.css+e.key.substr(1))},onProcessStyle:function(e,t){if("style"!==t.type)return e;for(var n in e){var o=e[n],i=!1,a=r.supportedProperty(n);a&&a!==n&&(i=!0);var u=!1,s=r.supportedValue(a,o);s&&s!==o&&(u=!0),(i||u)&&(i&&delete e[n],e[a||n]=s||o)}return e},onChangeValue:function(e,t){return r.supportedValue(t,e)}}};var r=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(373))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportedValue=t.supportedProperty=t.prefix=void 0;var r=a(n(134)),o=a(n(374)),i=a(n(376));function a(e){return e&&e.__esModule?e:{default:e}}t.default={prefix:r.default,supportedProperty:o.default,supportedValue:i.default},
/**
    * CSS Vendor prefix detection and property feature testing.
    *
    * @copyright Oleg Slobodskoi 2015
    * @website https://github.com/jsstyles/css-vendor
    * @license MIT
    */
t.prefix=r.default,t.supportedProperty=o.default,t.supportedValue=i.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!u)return e;if(null!=s[e])return s[e];(0,i.default)(e)in u.style?s[e]=e:o.default.js+(0,i.default)("-"+e)in u.style?s[e]=o.default.css+e:s[e]=!1;return s[e]};var r=a(n(94)),o=a(n(134)),i=a(n(375));function a(e){return e&&e.__esModule?e:{default:e}}var u=void 0,s={};if(r.default){u=document.createElement("p");var l=window.getComputedStyle(document.documentElement,"");for(var c in l)isNaN(c)||(s[l[c]]=l[c])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(r,o)};var r=/[-\s]+(.)?/g;function o(e,t){return t?t.toUpperCase():""}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!u)return t;if("string"!=typeof t||!isNaN(parseInt(t,10)))return t;var n=e+t;if(null!=a[n])return a[n];try{u.style[e]=t}catch(e){return a[n]=!1,!1}""!==u.style[e]?a[n]=t:("-ms-flex"===(t=o.default.css+t)&&(t="-ms-flexbox"),u.style[e]=t,""!==u.style[e]&&(a[n]=t));a[n]||(a[n]=!1);return u.style[e]="",a[n]};var r=i(n(94)),o=i(n(134));function i(e){return e&&e.__esModule?e:{default:e}}var a={},u=void 0;r.default&&(u=document.createElement("p"))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e,t){return e.length-t.length}return{onProcessStyle:function(t,n){if("style"!==n.type)return t;var r={},o=Object.keys(t).sort(e);for(var i in o)r[o[i]]=t[o[i]];return r}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};t.default=r},function(e,t,n){"use strict";
/*!
 * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */var r=n(380);function o(e){return!0===r(e)&&"[object Object]"===Object.prototype.toString.call(e)}e.exports=function(e){var t,n;return!1!==o(e)&&("function"==typeof(t=e.constructor)&&(!1!==o(n=t.prototype)&&!1!==n.hasOwnProperty("isPrototypeOf")))}},function(e,t,n){"use strict";
/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */e.exports=function(e){return null!=e&&"object"==typeof e&&!1===Array.isArray(e)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r;return(0,i.default)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.default)({paddingLeft:2*t.unit,paddingRight:2*t.unit},n,(0,o.default)({},e.up("sm"),(0,i.default)({paddingLeft:3*t.unit,paddingRight:3*t.unit},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,o.default)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,o.default)(r,e.up("sm"),{minHeight:64}),r)},n)};var o=r(n(4)),i=r(n(3))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.primary,n=void 0===t?{light:u.default[300],main:u.default[500],dark:u.default[700]}:t,r=e.secondary,y=void 0===r?{light:s.default.A200,main:s.default.A400,dark:s.default.A700}:r,m=e.error,g=void 0===m?{light:c.default[300],main:c.default[500],dark:c.default[700]}:m,b=e.type,_=void 0===b?"light":b,w=e.contrastThreshold,x=void 0===w?3:w,k=e.tonalOffset,E=void 0===k?.2:k,O=(0,i.default)(e,["primary","secondary","error","type","contrastThreshold","tonalOffset"]);function S(e){var t=(0,d.getContrastRatio)(e,h.text.primary)>=x?h.text.primary:p.text.primary;return t}function T(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;return!e.main&&e[t]&&(e.main=e[t]),v(e,"light",n,E),v(e,"dark",r,E),e.contrastText||(e.contrastText=S(e.main)),e}T(n),T(y,"A400","A200","A700"),T(g);var C={dark:h,light:p};return(0,a.default)((0,o.default)({common:f.default,type:_,primary:n,secondary:y,error:g,grey:l.default,contrastThreshold:x,getContrastText:S,augmentColor:T,tonalOffset:E},C[_]),O,{clone:!1})},t.dark=t.light=void 0;var o=r(n(3)),i=r(n(5)),a=(r(n(13)),r(n(95))),u=r(n(383)),s=r(n(384)),l=r(n(385)),c=r(n(386)),f=r(n(387)),d=n(136),p={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.default.white,default:l.default[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.08)",hoverOpacity:.08,selected:"rgba(0, 0, 0, 0.14)",disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)"}};t.light=p;var h={text:{primary:f.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:l.default[800],default:"#303030"},action:{active:f.default.white,hover:"rgba(255, 255, 255, 0.1)",hoverOpacity:.1,selected:"rgba(255, 255, 255, 0.2)",disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)"}};function v(e,t,n,r){e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,d.lighten)(e.main,r):"dark"===t&&(e.dark=(0,d.darken)(e.main,1.5*r)))}t.dark=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={black:"#000",white:"#fff"};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n="function"==typeof t?t(e):t,r=n.fontFamily,f=void 0===r?c:r,d=n.fontSize,p=void 0===d?14:d,h=n.fontWeightLight,v=void 0===h?300:h,y=n.fontWeightRegular,m=void 0===y?400:y,g=n.fontWeightMedium,b=void 0===g?500:g,_=n.htmlFontSize,w=void 0===_?16:_,x=n.useNextVariants,k=void 0===x?Boolean(u.ponyfillGlobal.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__):x,E=(n.suppressWarning,n.allVariants),O=(0,i.default)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","htmlFontSize","useNextVariants","suppressWarning","allVariants"]);var S=p/14,T=function(e){return"".concat(e/w*S,"rem")},C=function(t,n,r,i,a){return(0,o.default)({color:e.text.primary,fontFamily:f,fontWeight:t,fontSize:T(n),lineHeight:r},f===c?{letterSpacing:"".concat(s(i/n),"em")}:{},a,E)},P={h1:C(v,96,1,-1.5),h2:C(v,60,1,-.5),h3:C(m,48,1.04,0),h4:C(m,34,1.17,.25),h5:C(m,24,1.33,0),h6:C(b,20,1.6,.15),subtitle1:C(m,16,1.75,.15),subtitle2:C(b,14,1.57,.1),body1Next:C(m,16,1.5,.15),body2Next:C(m,14,1.5,.15),buttonNext:C(b,14,1.5,.4,l),captionNext:C(m,12,1.66,.4),overline:C(m,12,2.66,1,l)},R={display4:(0,o.default)({fontSize:T(112),fontWeight:v,fontFamily:f,letterSpacing:"-.04em",lineHeight:"".concat(s(128/112),"em"),marginLeft:"-.04em",color:e.text.secondary},E),display3:(0,o.default)({fontSize:T(56),fontWeight:m,fontFamily:f,letterSpacing:"-.02em",lineHeight:"".concat(s(73/56),"em"),marginLeft:"-.02em",color:e.text.secondary},E),display2:(0,o.default)({fontSize:T(45),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(51/45),"em"),marginLeft:"-.02em",color:e.text.secondary},E),display1:(0,o.default)({fontSize:T(34),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(41/34),"em"),color:e.text.secondary},E),headline:(0,o.default)({fontSize:T(24),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(32.5/24),"em"),color:e.text.primary},E),title:(0,o.default)({fontSize:T(21),fontWeight:b,fontFamily:f,lineHeight:"".concat(s(24.5/21),"em"),color:e.text.primary},E),subheading:(0,o.default)({fontSize:T(16),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(1.5),"em"),color:e.text.primary},E),body2:(0,o.default)({fontSize:T(14),fontWeight:b,fontFamily:f,lineHeight:"".concat(s(24/14),"em"),color:e.text.primary},E),body1:(0,o.default)({fontSize:T(14),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(20.5/14),"em"),color:e.text.primary},E),caption:(0,o.default)({fontSize:T(12),fontWeight:m,fontFamily:f,lineHeight:"".concat(s(1.375),"em"),color:e.text.secondary},E),button:(0,o.default)({fontSize:T(14),textTransform:"uppercase",fontWeight:b,fontFamily:f,color:e.text.primary},E)};return(0,a.default)((0,o.default)({pxToRem:T,round:s,fontFamily:f,fontSize:p,fontWeightLight:v,fontWeightRegular:m,fontWeightMedium:b},R,P,k?{body1:P.body1Next,body2:P.body2Next,button:P.buttonNext,caption:P.captionNext}:{},{useNextVariants:k}),O,{clone:!1})};var o=r(n(3)),i=r(n(5)),a=r(n(95)),u=(r(n(13)),n(35));function s(e){return Math.round(1e5*e)/1e5}var l={textTransform:"uppercase"},c='"Roboto", "Helvetica", "Arial", sans-serif'},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=.2,o=.14,i=.12;function a(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0, 0, 0, ").concat(r,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0, 0, 0, ").concat(o,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0, 0, 0, ").concat(i,")")].join(",")}var u=["none",a(0,1,3,0,0,1,1,0,0,2,1,-1),a(0,1,5,0,0,2,2,0,0,3,1,-2),a(0,1,8,0,0,3,4,0,0,3,3,-2),a(0,2,4,-1,0,4,5,0,0,1,10,0),a(0,3,5,-1,0,5,8,0,0,1,14,0),a(0,3,5,-1,0,6,10,0,0,1,18,0),a(0,4,5,-2,0,7,10,1,0,2,16,1),a(0,5,5,-3,0,8,10,1,0,3,14,2),a(0,5,6,-3,0,9,12,1,0,3,16,2),a(0,6,6,-3,0,10,14,1,0,4,18,3),a(0,6,7,-4,0,11,15,1,0,4,20,3),a(0,7,8,-4,0,12,17,2,0,5,22,4),a(0,7,8,-4,0,13,19,2,0,5,24,4),a(0,7,9,-4,0,14,21,2,0,5,26,4),a(0,8,9,-5,0,15,22,2,0,6,28,5),a(0,8,10,-5,0,16,24,2,0,6,30,5),a(0,8,11,-5,0,17,26,2,0,6,32,5),a(0,9,11,-5,0,18,28,2,0,7,34,6),a(0,9,12,-6,0,19,29,2,0,7,36,6),a(0,10,13,-6,0,20,31,3,0,8,38,7),a(0,10,13,-6,0,21,33,3,0,8,40,7),a(0,10,14,-6,0,22,35,3,0,8,42,7),a(0,11,14,-7,0,23,36,3,0,9,44,8),a(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={borderRadius:4};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={unit:8};t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={mobileStepper:1e3,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=(r(n(91)),r(n(13)),r(n(95)));function a(e,t){return t}var u=function(e){var t="function"==typeof e;return{create:function(n,r){var u=t?e(n):e;if(!r||!n.overrides||!n.overrides[r])return u;var s=n.overrides[r],l=(0,o.default)({},u);return Object.keys(s).forEach(function(e){l[e]=(0,i.default)(l[e],s[e],{arrayMerge:a})}),l},options:{},themingEnabled:t}};t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){var t=e.theme,n=e.name,r=e.props;if(!t.props||!n||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),i=r(n(5)),a=r(n(3)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=(r(n(13)),r(n(12))),c=function(e){var t={};return e.shadows.forEach(function(e,n){t["elevation".concat(n)]={boxShadow:e}}),(0,a.default)({root:{backgroundColor:e.palette.background.paper},rounded:{borderRadius:e.shape.borderRadius}},t)};function f(e){var t=e.classes,n=e.className,r=e.component,l=e.square,c=e.elevation,f=(0,i.default)(e,["classes","className","component","square","elevation"]),d=(0,s.default)(t.root,t["elevation".concat(c)],(0,o.default)({},t.rounded,!l),n);return u.default.createElement(r,(0,a.default)({className:d},f))}t.styles=c,f.propTypes={},f.defaultProps={component:"div",elevation:2,square:!1};var d=(0,l.default)(c,{name:"MuiPaper"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:e.mixins.gutters(),regular:e.mixins.toolbar,dense:{minHeight:48}}};function f(e){var t=e.children,n=e.classes,r=e.className,l=e.disableGutters,c=e.variant,f=(0,a.default)(e,["children","classes","className","disableGutters","variant"]),d=(0,s.default)(n.root,n[c],(0,i.default)({},n.gutters,!l),r);return u.default.createElement("div",(0,o.default)({className:d},f),t)}t.styles=c,f.propTypes={},f.defaultProps={disableGutters:!1,variant:"regular"};var d=(0,l.default)(c,{name:"MuiToolbar"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=function(e){return{root:{userSelect:"none",fontSize:24,width:"1em",height:"1em",overflow:"hidden",flexShrink:0},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:20},fontSizeLarge:{fontSize:36}}};function d(e){var t,n=e.children,r=e.classes,l=e.className,f=e.color,d=e.component,p=e.fontSize,h=(0,a.default)(e,["children","classes","className","color","component","fontSize"]);return u.default.createElement(d,(0,o.default)({className:(0,s.default)("material-icons",r.root,(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(f))],"inherit"!==f),(0,i.default)(t,r["fontSize".concat((0,c.capitalize)(p))],"default"!==p),t),l),"aria-hidden":"true"},h),n)}t.styles=f,d.propTypes={},d.defaultProps={color:"inherit",component:"span",fontSize:"default"},d.muiName="Icon";var p=(0,l.default)(f,{name:"MuiIcon"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),i=r(n(5)),a=r(n(3)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(136),f=r(n(198)),d=(r(n(139)),n(28)),p=function(e){return{root:(0,a.default)({},e.typography.button,{boxSizing:"border-box",minWidth:64,minHeight:36,padding:"8px 16px",borderRadius:e.shape.borderRadius,color:e.palette.text.primary,transition:e.transitions.create(["background-color","box-shadow","border"],{duration:e.transitions.duration.short}),"&:hover":{textDecoration:"none",backgroundColor:(0,c.fade)(e.palette.text.primary,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"},"&$disabled":{backgroundColor:"transparent"}},"&$disabled":{color:e.palette.action.disabled}}),label:{width:"100%",display:"inherit",alignItems:"inherit",justifyContent:"inherit"},text:{},textPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},textSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},flat:{},flatPrimary:{},flatSecondary:{},outlined:{border:"1px solid ".concat("light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)")},outlinedPrimary:{color:e.palette.primary.main,border:"1px solid ".concat((0,c.fade)(e.palette.primary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.primary.main),backgroundColor:(0,c.fade)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},outlinedSecondary:{color:e.palette.secondary.main,border:"1px solid ".concat((0,c.fade)(e.palette.secondary.main,.5)),"&:hover":{border:"1px solid ".concat(e.palette.secondary.main),backgroundColor:(0,c.fade)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{border:"1px solid ".concat(e.palette.action.disabled)}},contained:{color:e.palette.getContrastText(e.palette.grey[300]),backgroundColor:e.palette.grey[300],boxShadow:e.shadows[2],"&$focusVisible":{boxShadow:e.shadows[6]},"&:active":{boxShadow:e.shadows[8]},"&$disabled":{color:e.palette.action.disabled,boxShadow:e.shadows[0],backgroundColor:e.palette.action.disabledBackground},"&:hover":{backgroundColor:e.palette.grey.A100,"@media (hover: none)":{backgroundColor:e.palette.grey[300]},"&$disabled":{backgroundColor:e.palette.action.disabledBackground}}},containedPrimary:{color:e.palette.primary.contrastText,backgroundColor:e.palette.primary.main,"&:hover":{backgroundColor:e.palette.primary.dark,"@media (hover: none)":{backgroundColor:e.palette.primary.main}}},containedSecondary:{color:e.palette.secondary.contrastText,backgroundColor:e.palette.secondary.main,"&:hover":{backgroundColor:e.palette.secondary.dark,"@media (hover: none)":{backgroundColor:e.palette.secondary.main}}},raised:{},raisedPrimary:{},raisedSecondary:{},fab:{borderRadius:"50%",padding:0,minWidth:0,width:56,height:56,boxShadow:e.shadows[6],"&:active":{boxShadow:e.shadows[12]}},extendedFab:{borderRadius:24,padding:"0 16px",width:"auto",minWidth:48,height:48},focusVisible:{},disabled:{},colorInherit:{color:"inherit"},mini:{width:40,height:40},sizeSmall:{padding:"7px 8px",minWidth:64,minHeight:32,fontSize:e.typography.pxToRem(13)},sizeLarge:{padding:"8px 24px",minWidth:112,minHeight:40,fontSize:e.typography.pxToRem(15)},fullWidth:{width:"100%"}}};function h(e){var t,n=e.children,r=e.classes,l=e.className,c=e.color,p=e.disabled,h=e.disableFocusRipple,v=e.focusVisibleClassName,y=e.fullWidth,m=e.mini,g=e.size,b=e.variant,_=(0,i.default)(e,["children","classes","className","color","disabled","disableFocusRipple","focusVisibleClassName","fullWidth","mini","size","variant"]),w="fab"===b||"extendedFab"===b,x="contained"===b||"raised"===b,k="text"===b||"flat"===b,E=(0,s.default)(r.root,(t={},(0,o.default)(t,r.fab,w),(0,o.default)(t,r.mini,w&&m),(0,o.default)(t,r.extendedFab,"extendedFab"===b),(0,o.default)(t,r.text,k),(0,o.default)(t,r.textPrimary,k&&"primary"===c),(0,o.default)(t,r.textSecondary,k&&"secondary"===c),(0,o.default)(t,r.flat,"text"===b||"flat"===b),(0,o.default)(t,r.flatPrimary,("text"===b||"flat"===b)&&"primary"===c),(0,o.default)(t,r.flatSecondary,("text"===b||"flat"===b)&&"secondary"===c),(0,o.default)(t,r.contained,x||w),(0,o.default)(t,r.containedPrimary,(x||w)&&"primary"===c),(0,o.default)(t,r.containedSecondary,(x||w)&&"secondary"===c),(0,o.default)(t,r.raised,x||w),(0,o.default)(t,r.raisedPrimary,(x||w)&&"primary"===c),(0,o.default)(t,r.raisedSecondary,(x||w)&&"secondary"===c),(0,o.default)(t,r.outlined,"outlined"===b),(0,o.default)(t,r.outlinedPrimary,"outlined"===b&&"primary"===c),(0,o.default)(t,r.outlinedSecondary,"outlined"===b&&"secondary"===c),(0,o.default)(t,r["size".concat((0,d.capitalize)(g))],"medium"!==g),(0,o.default)(t,r.disabled,p),(0,o.default)(t,r.fullWidth,y),(0,o.default)(t,r.colorInherit,"inherit"===c),t),l);return u.default.createElement(f.default,(0,a.default)({className:E,disabled:p,focusRipple:!h,focusVisibleClassName:(0,s.default)(r.focusVisible,v)},_),u.default.createElement("span",{className:r.label},n))}t.styles=p,h.propTypes={},h.defaultProps={color:"default",component:"button",disabled:!1,disableFocusRipple:!1,fullWidth:!1,mini:!1,size:"medium",type:"button",variant:"text"};var v=(0,l.default)(p,{name:"MuiButton"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(18)),p=r(n(0)),h=(r(n(1)),r(n(23))),v=r(n(11)),y=r(n(76)),m=r(n(97)),g=r(n(12)),b=r(n(400)),_=n(402),w=r(n(403)),x=r(n(408)),k={root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:"none",border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"}},disabled:{},focusVisible:{}};t.styles=k;var E=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,l.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={},n.keyDown=!1,n.focusVisibleCheckTime=50,n.focusVisibleMaxCheckTimes=5,n.handleMouseDown=(0,x.default)((0,d.default)((0,d.default)(n)),"MouseDown","start",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.handleMouseUp=(0,x.default)((0,d.default)((0,d.default)(n)),"MouseUp","stop"),n.handleMouseLeave=(0,x.default)((0,d.default)((0,d.default)(n)),"MouseLeave","stop",function(e){n.state.focusVisible&&e.preventDefault()}),n.handleTouchStart=(0,x.default)((0,d.default)((0,d.default)(n)),"TouchStart","start"),n.handleTouchEnd=(0,x.default)((0,d.default)((0,d.default)(n)),"TouchEnd","stop"),n.handleTouchMove=(0,x.default)((0,d.default)((0,d.default)(n)),"TouchMove","stop"),n.handleBlur=(0,x.default)((0,d.default)((0,d.default)(n)),"Blur","stop",function(){clearTimeout(n.focusVisibleTimeout),n.state.focusVisible&&n.setState({focusVisible:!1})}),n.onRippleRef=function(e){n.ripple=e},n.onFocusVisibleHandler=function(e){n.keyDown=!1,n.setState({focusVisible:!0}),n.props.onFocusVisible&&n.props.onFocusVisible(e)},n.handleKeyDown=function(e){var t=n.props,r=t.component,o=t.focusRipple,i=t.onKeyDown,a=t.onClick,u=(0,y.default)(e);o&&!n.keyDown&&n.state.focusVisible&&n.ripple&&"space"===u&&(n.keyDown=!0,e.persist(),n.ripple.stop(e,function(){n.ripple.start(e)})),i&&i(e),e.target!==e.currentTarget||!r||"button"===r||"space"!==u&&"enter"!==u||"A"===n.button.tagName&&n.button.href||(e.preventDefault(),a&&a(e))},n.handleKeyUp=function(e){n.props.focusRipple&&"space"===(0,y.default)(e)&&n.ripple&&n.state.focusVisible&&(n.keyDown=!1,e.persist(),n.ripple.stop(e,function(){n.ripple.pulsate(e)})),n.props.onKeyUp&&n.props.onKeyUp(e)},n.handleFocus=function(e){n.props.disabled||(n.button||(n.button=e.currentTarget),e.persist(),(0,_.detectFocusVisible)((0,d.default)((0,d.default)(n)),n.button,function(){n.onFocusVisibleHandler(e)}),n.props.onFocus&&n.props.onFocus(e))},n}return(0,f.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.button=h.default.findDOMNode(this),(0,_.listenForFocusKeys)((0,m.default)(this.button)),this.props.action&&this.props.action({focusVisible:function(){e.setState({focusVisible:!0}),e.button.focus()}})}},{key:"componentDidUpdate",value:function(e,t){this.props.focusRipple&&!this.props.disableRipple&&!t.focusVisible&&this.state.focusVisible&&this.ripple.pulsate()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.focusVisibleTimeout)}},{key:"render",value:function(){var e,t=this.props,n=(t.action,t.buttonRef),r=t.centerRipple,u=t.children,s=t.classes,l=t.className,c=t.component,f=t.disabled,d=t.disableRipple,h=(t.disableTouchRipple,t.focusRipple,t.focusVisibleClassName),y=(t.onBlur,t.onFocus,t.onFocusVisible,t.onKeyDown,t.onKeyUp,t.onMouseDown,t.onMouseLeave,t.onMouseUp,t.onTouchEnd,t.onTouchMove,t.onTouchStart,t.tabIndex),m=t.TouchRippleProps,g=t.type,_=(0,a.default)(t,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","type"]),x=(0,v.default)(s.root,(e={},(0,i.default)(e,s.disabled,f),(0,i.default)(e,s.focusVisible,this.state.focusVisible),(0,i.default)(e,h,this.state.focusVisible),e),l),k=c;"button"===k&&_.href&&(k="a");var E={};return"button"===k?(E.type=g||"button",E.disabled=f):E.role="button",p.default.createElement(k,(0,o.default)({className:x,onBlur:this.handleBlur,onFocus:this.handleFocus,onKeyDown:this.handleKeyDown,onKeyUp:this.handleKeyUp,onMouseDown:this.handleMouseDown,onMouseLeave:this.handleMouseLeave,onMouseUp:this.handleMouseUp,onTouchEnd:this.handleTouchEnd,onTouchMove:this.handleTouchMove,onTouchStart:this.handleTouchStart,ref:n,tabIndex:f?"-1":y},E,_),u,d||f?null:p.default.createElement(b.default,null,p.default.createElement(w.default,(0,o.default)({innerRef:this.onRippleRef,center:r},m))))}}],[{key:"getDerivedStateFromProps",value:function(e,t){return void 0===t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:!t.prevState&&e.disabled&&t.focusVisible?{focusVisible:!1,lastDisabled:e.disabled}:{lastDisabled:e.disabled}}}]),t}(p.default.Component);E.propTypes={},E.defaultProps={centerRipple:!1,component:"button",disableRipple:!1,disableTouchRipple:!1,focusRipple:!1,tabIndex:"0",type:"button"};var O=(0,g.default)(k,{name:"MuiButtonBase"})(E);t.default=O},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(401))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(6)),i=r(n(7)),a=r(n(8)),u=r(n(9)),s=r(n(10)),l=r(n(0)),c=(r(n(1)),n(35),function(e){function t(){var e,n;(0,o.default)(this,t);for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];return(n=(0,a.default)(this,(e=(0,u.default)(t)).call.apply(e,[this].concat(i)))).mounted=!1,n.state={mounted:!1},n}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.mounted=!0,this.props.defer?requestAnimationFrame(function(){requestAnimationFrame(function(){e.mounted&&e.setState({mounted:!0})})}):this.setState({mounted:!0})}},{key:"componentWillUnmount",value:function(){this.mounted=!1}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.fallback;return this.state.mounted?t:n}}]),t}(l.default.Component));c.propTypes={},c.propTypes={},c.defaultProps={defer:!1,fallback:null};var f=c;t.default=f},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.detectFocusVisible=function e(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.focusVisibleTimeout=setTimeout(function(){var u=(0,i.default)(n),s=function(e){var t=e.activeElement;for(;t&&t.shadowRoot&&t.shadowRoot.activeElement;)t=t.shadowRoot.activeElement;return t}(u);a.focusKeyPressed&&(s===n||n.contains(s))?r():o<t.focusVisibleMaxCheckTimes&&e(t,n,r,o+1)},t.focusVisibleCheckTime)},t.listenForFocusKeys=function(e){e.addEventListener("keyup",s)};var o=r(n(76)),i=(r(n(13)),r(n(40))),a={focusKeyPressed:!1,keyUpEventTimeout:-1};var u=["tab","enter","space","esc","up","down","left","right"];var s=function(e){(function(e){return u.indexOf((0,o.default)(e))>-1})(e)&&(a.focusKeyPressed=!0,clearTimeout(a.keyUpEventTimeout),a.keyUpEventTimeout=setTimeout(function(){a.focusKeyPressed=!1},1e3))}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=t.DELAY_RIPPLE=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(103)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(18)),p=r(n(0)),h=(r(n(1)),r(n(23))),v=r(n(404)),y=r(n(11)),m=r(n(12)),g=r(n(406)),b=550,_=80;t.DELAY_RIPPLE=_;var w=function(e){return{root:{display:"block",position:"absolute",overflow:"hidden",borderRadius:"inherit",width:"100%",height:"100%",left:0,top:0,pointerEvents:"none",zIndex:0},ripple:{width:50,height:50,left:0,top:0,opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"mui-ripple-enter ".concat(b,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"mui-ripple-exit ".concat(b,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"mui-ripple-pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes mui-ripple-enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes mui-ripple-exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes mui-ripple-pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}};t.styles=w;var x=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,l.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={nextKey:0,ripples:[]},n.pulsate=function(){n.start({},{pulsate:!0})},n.start=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2?arguments[2]:void 0,o=t.pulsate,i=void 0!==o&&o,a=t.center,u=void 0===a?n.props.center||t.pulsate:a,s=t.fakeElement,l=void 0!==s&&s;if("mousedown"===e.type&&n.ignoringMouseDown)n.ignoringMouseDown=!1;else{"touchstart"===e.type&&(n.ignoringMouseDown=!0);var c,f,p,v=l?null:h.default.findDOMNode((0,d.default)((0,d.default)(n))),y=v?v.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(u||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(y.width/2),f=Math.round(y.height/2);else{var m=e.clientX?e.clientX:e.touches[0].clientX,g=e.clientY?e.clientY:e.touches[0].clientY;c=Math.round(m-y.left),f=Math.round(g-y.top)}if(u)(p=Math.sqrt((2*Math.pow(y.width,2)+Math.pow(y.height,2))/3))%2==0&&(p+=1);else{var b=2*Math.max(Math.abs((v?v.clientWidth:0)-c),c)+2,w=2*Math.max(Math.abs((v?v.clientHeight:0)-f),f)+2;p=Math.sqrt(Math.pow(b,2)+Math.pow(w,2))}e.touches?(n.startTimerCommit=function(){n.startCommit({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:r})},n.startTimer=setTimeout(function(){n.startTimerCommit&&(n.startTimerCommit(),n.startTimerCommit=null)},_)):n.startCommit({pulsate:i,rippleX:c,rippleY:f,rippleSize:p,cb:r})}},n.startCommit=function(e){var t=e.pulsate,r=e.rippleX,o=e.rippleY,i=e.rippleSize,u=e.cb;n.setState(function(e){return{nextKey:e.nextKey+1,ripples:(0,a.default)(e.ripples).concat([p.default.createElement(g.default,{key:e.nextKey,classes:n.props.classes,timeout:{exit:b,enter:b},pulsate:t,rippleX:r,rippleY:o,rippleSize:i})])}},u)},n.stop=function(e,t){clearTimeout(n.startTimer);var r=n.state.ripples;if("touchend"===e.type&&n.startTimerCommit)return e.persist(),n.startTimerCommit(),n.startTimerCommit=null,void(n.startTimer=setTimeout(function(){n.stop(e,t)},0));n.startTimerCommit=null,r&&r.length&&n.setState({ripples:r.slice(1)},t)},n}return(0,f.default)(t,e),(0,s.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.startTimer)}},{key:"render",value:function(){var e=this.props,t=(e.center,e.classes),n=e.className,r=(0,i.default)(e,["center","classes","className"]);return p.default.createElement(v.default,(0,o.default)({component:"span",enter:!0,exit:!0,className:(0,y.default)(t.root,n)},r),this.state.ripples)}}]),t}(p.default.PureComponent);x.propTypes={},x.defaultProps={center:!1};var k=(0,m.default)(w,{flip:!1,name:"MuiTouchRipple"})(x);t.default=k},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(1)),o=u(n(0)),i=n(199),a=n(405);function u(e){return e&&e.__esModule?e:{default:e}}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var c=Object.values||function(e){return Object.keys(e).map(function(t){return e[t]})},f=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(l(l(r)));return r.state={handleExited:o,firstRender:!0},r}!function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}(t,e);var n=t.prototype;return n.getChildContext=function(){return{transitionGroup:{isMounting:!this.appeared}}},n.componentDidMount=function(){this.appeared=!0},t.getDerivedStateFromProps=function(e,t){var n=t.children,r=t.handleExited;return{children:t.firstRender?(0,a.getInitialChildMapping)(e,r):(0,a.getNextChildMapping)(e,n,r),firstRender:!1}},n.handleExited=function(e,t){var n=(0,a.getChildMapping)(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.setState(function(t){var n=s({},t.children);return delete n[e.key],{children:n}}))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,r=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["component","childFactory"]),i=c(this.state.children).map(n);return delete r.appear,delete r.enter,delete r.exit,null===t?i:o.default.createElement(t,r,i)},t}(o.default.Component);f.childContextTypes={transitionGroup:r.default.object.isRequired},f.propTypes={},f.defaultProps={component:"div",childFactory:function(e){return e}};var d=(0,i.polyfill)(f);t.default=d,e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.getChildMapping=o,t.mergeChildMappings=i,t.getInitialChildMapping=function(e,t){return o(e.children,function(n){return(0,r.cloneElement)(n,{onExited:t.bind(null,n),in:!0,appear:a(n,"appear",e),enter:a(n,"enter",e),exit:a(n,"exit",e)})})},t.getNextChildMapping=function(e,t,n){var u=o(e.children),s=i(t,u);return Object.keys(s).forEach(function(o){var i=s[o];if((0,r.isValidElement)(i)){var l=o in t,c=o in u,f=t[o],d=(0,r.isValidElement)(f)&&!f.props.in;!c||l&&!d?c||!l||d?c&&l&&(0,r.isValidElement)(f)&&(s[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:f.props.in,exit:a(i,"exit",e),enter:a(i,"enter",e)})):s[o]=(0,r.cloneElement)(i,{in:!1}):s[o]=(0,r.cloneElement)(i,{onExited:n.bind(null,i),in:!0,exit:a(i,"exit",e),enter:a(i,"enter",e)})}}),s};var r=n(0);function o(e,t){var n=Object.create(null);return e&&r.Children.map(e,function(e){return e}).forEach(function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)}),n}function i(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var u={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var l=o[s][r];u[o[s][r]]=n(l)}u[s]=n(s)}for(r=0;r<i.length;r++)u[i[r]]=n(i[r]);return u}function a(e,t,n){return null!=n[t]?n[t]:e.props[t]}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(0)),p=(r(n(1)),r(n(11))),h=r(n(98)),v=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,l.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).state={visible:!1,leaving:!1},n.handleEnter=function(){n.setState({visible:!0})},n.handleExit=function(){n.setState({leaving:!0})},n}return(0,f.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){var e,t,n=this.props,r=n.classes,u=n.className,s=n.pulsate,l=n.rippleX,c=n.rippleY,f=n.rippleSize,v=(0,a.default)(n,["classes","className","pulsate","rippleX","rippleY","rippleSize"]),y=this.state,m=y.visible,g=y.leaving,b=(0,p.default)(r.ripple,(e={},(0,i.default)(e,r.rippleVisible,m),(0,i.default)(e,r.ripplePulsate,s),e),u),_={width:f,height:f,top:-f/2+c,left:-f/2+l},w=(0,p.default)(r.child,(t={},(0,i.default)(t,r.childLeaving,g),(0,i.default)(t,r.childPulsate,s),t));return d.default.createElement(h.default,(0,o.default)({onEnter:this.handleEnter,onExit:this.handleExit},v),d.default.createElement("span",{className:b,style:_},d.default.createElement("span",{className:w})))}}]),t}(d.default.Component);v.propTypes={},v.defaultProps={pulsate:!1};var y=v;t.default=y},function(e,t,n){"use strict";t.__esModule=!0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}},t.classNamesShape=t.timeoutsShape=void 0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(1));var o=r.default.oneOfType([r.default.number,r.default.shape({enter:r.default.number,exit:r.default.number}).isRequired]);t.timeoutsShape=o;var i=r.default.oneOfType([r.default.string,r.default.shape({enter:r.default.string,exit:r.default.string,active:r.default.string}),r.default.shape({enter:r.default.string,enterDone:r.default.string,enterActive:r.default.string,exit:r.default.string,exitDone:r.default.string,exitActive:r.default.string})]);t.classNamesShape=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e,t,n,r){return function(o){r&&r.call(e,o);var i=!1;return o.defaultPrevented&&(i=!0),e.props.disableTouchRipple&&"Blur"!==t&&(i=!0),!i&&e.ripple&&e.ripple[n](o),"function"==typeof e.props["on".concat(t)]&&e.props["on".concat(t)](o),!0}};"undefined"==typeof window&&(r=function(){return function(){}});var o=r;t.default=o},function(e,t,n){"use strict";var r=n(410),o=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.MuiThemeProviderOld=void 0;var i=o(n(3)),a=o(n(4)),u=o(n(6)),s=o(n(7)),l=o(n(8)),c=o(n(9)),f=o(n(10)),d=o(n(0)),p=o(n(1)),h=(o(n(13)),o(n(411))),v=n(35),y=r(n(137)),m=function(e){function t(e,n){var r;return(0,u.default)(this,t),(r=(0,l.default)(this,(0,c.default)(t).call(this))).broadcast=(0,h.default)(),r.outerTheme=y.default.initial(n),r.broadcast.setState(r.mergeOuterLocalTheme(e.theme)),r}return(0,f.default)(t,e),(0,s.default)(t,[{key:"getChildContext",value:function(){var e,t=this.props,n=t.disableStylesGeneration,r=t.sheetsCache,o=t.sheetsManager,i=this.context.muiThemeProviderOptions||{};return void 0!==n&&(i.disableStylesGeneration=n),void 0!==r&&(i.sheetsCache=r),void 0!==o&&(i.sheetsManager=o),e={},(0,a.default)(e,y.CHANNEL,this.broadcast),(0,a.default)(e,"muiThemeProviderOptions",i),e}},{key:"componentDidMount",value:function(){var e=this;this.unsubscribeId=y.default.subscribe(this.context,function(t){e.outerTheme=t,e.broadcast.setState(e.mergeOuterLocalTheme(e.props.theme))})}},{key:"componentDidUpdate",value:function(e){this.props.theme!==e.theme&&this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme))}},{key:"componentWillUnmount",value:function(){null!==this.unsubscribeId&&y.default.unsubscribe(this.context,this.unsubscribeId)}},{key:"mergeOuterLocalTheme",value:function(e){return"function"==typeof e?e(this.outerTheme):this.outerTheme?(0,i.default)({},this.outerTheme,e):e}},{key:"render",value:function(){return this.props.children}}]),t}(d.default.Component);t.MuiThemeProviderOld=m,m.propTypes={},m.propTypes={},m.childContextTypes=(0,i.default)({},y.default.contextTypes,{muiThemeProviderOptions:p.default.object}),m.contextTypes=(0,i.default)({},y.default.contextTypes,{muiThemeProviderOptions:p.default.object}),v.ponyfillGlobal.__MUI_STYLES__||(v.ponyfillGlobal.__MUI_STYLES__={}),v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider||(v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider=m);var g=v.ponyfillGlobal.__MUI_STYLES__.MuiThemeProvider;t.default=g},function(e,t){e.exports=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}},function(e,t,n){"use strict";n.r(t),t.default=function(e){var t={},n=1,r=e;return{getState:function(){return r},setState:function(e){r=e;for(var n=Object.keys(t),o=0,i=n.length;o<i;o++)t[n[o]]&&t[n[o]](e)},subscribe:function(e){if("function"!=typeof e)throw new Error("listener must be a function.");var r=n;return t[r]=e,n+=1,r},unsubscribe:function(e){t[e]=void 0}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.isHorizontal=w,t.getAnchor=x,t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(0)),p=(r(n(1)),r(n(11))),h=r(n(200)),v=r(n(12)),y=r(n(433)),m=r(n(138)),g=n(28),b=n(96),_={left:"right",right:"left",top:"down",bottom:"up"};function w(e){return-1!==["left","right"].indexOf(e.anchor)}function x(e){return"rtl"===e.theme.direction&&w(e)?_[e.anchor]:e.anchor}var k=function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:"none"},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}};t.styles=k;var E=function(e){function t(){var e,n;(0,u.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,l.default)(this,(e=(0,c.default)(t)).call.apply(e,[this].concat(o)))).mounted=!1,n}return(0,f.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0}},{key:"render",value:function(){var e=this.props,t=(e.anchor,e.BackdropProps),n=e.children,r=e.classes,u=e.className,s=e.elevation,l=e.ModalProps,c=(l=void 0===l?{}:l).BackdropProps,f=(0,a.default)(l,["BackdropProps"]),v=e.onClose,b=e.open,w=e.PaperProps,k=e.SlideProps,E=(e.theme,e.transitionDuration),O=e.variant,S=(0,a.default)(e,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","theme","transitionDuration","variant"]),T=x(this.props),C=d.default.createElement(m.default,(0,o.default)({elevation:"temporary"===O?s:0,square:!0,className:(0,p.default)(r.paper,r["paperAnchor".concat((0,g.capitalize)(T))],(0,i.default)({},r["paperAnchorDocked".concat((0,g.capitalize)(T))],"temporary"!==O))},w),n);if("permanent"===O)return d.default.createElement("div",(0,o.default)({className:(0,p.default)(r.root,r.docked,u)},S),C);var P=d.default.createElement(y.default,(0,o.default)({in:b,direction:_[T],timeout:E,appear:this.mounted},k),C);return"persistent"===O?d.default.createElement("div",(0,o.default)({className:(0,p.default)(r.root,r.docked,u)},S),P):d.default.createElement(h.default,(0,o.default)({BackdropProps:(0,o.default)({},t,c,{transitionDuration:E}),className:(0,p.default)(r.root,r.modal,u),open:b,onClose:v},S,f),P)}}]),t}(d.default.Component);E.propTypes={},E.defaultProps={anchor:"left",elevation:16,open:!1,transitionDuration:{enter:b.duration.enteringScreen,exit:b.duration.leavingScreen},variant:"temporary"};var O=(0,v.default)(k,{name:"MuiDrawer",flip:!1,withTheme:!0})(E);t.default=O},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(7)),l=r(n(8)),c=r(n(9)),f=r(n(10)),d=r(n(18)),p=r(n(0)),h=r(n(23)),v=(r(n(1)),r(n(11))),y=(r(n(13)),r(n(76))),m=r(n(40)),g=r(n(415)),b=r(n(417)),_=n(28),w=r(n(12)),x=r(n(201)),k=r(n(429)),E=n(205);function O(e){return!!e.children&&e.children.props.hasOwnProperty("in")}var S=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}};t.styles=S;var T=function(e){function t(e){var n;return(0,u.default)(this,t),(n=(0,l.default)(this,(0,c.default)(t).call(this))).mounted=!1,n.handleOpen=function(){var e=(0,m.default)(n.mountNode),t=function(e,t){return e="function"==typeof e?e():e,h.default.findDOMNode(e)||t}(n.props.container,e.body);n.props.manager.add((0,d.default)((0,d.default)(n)),t),e.addEventListener("keydown",n.handleDocumentKeyDown),e.addEventListener("focus",n.enforceFocus,!0),n.dialogRef&&n.handleOpened()},n.handleRendered=function(){n.props.onRendered&&n.props.onRendered(),n.props.open?n.handleOpened():(0,E.ariaHidden)(n.modalRef,!0)},n.handleOpened=function(){n.autoFocus(),n.modalRef.scrollTop=0},n.handleClose=function(){n.props.manager.remove((0,d.default)((0,d.default)(n)));var e=(0,m.default)(n.mountNode);e.removeEventListener("keydown",n.handleDocumentKeyDown),e.removeEventListener("focus",n.enforceFocus,!0),n.restoreLastFocus()},n.handleExited=function(){n.setState({exited:!0})},n.handleBackdropClick=function(e){e.target===e.currentTarget&&(n.props.onBackdropClick&&n.props.onBackdropClick(e),!n.props.disableBackdropClick&&n.props.onClose&&n.props.onClose(e,"backdropClick"))},n.handleDocumentKeyDown=function(e){"esc"===(0,y.default)(e)&&n.isTopModal()&&!e.defaultPrevented&&(n.props.onEscapeKeyDown&&n.props.onEscapeKeyDown(e),!n.props.disableEscapeKeyDown&&n.props.onClose&&n.props.onClose(e,"escapeKeyDown"))},n.enforceFocus=function(){if(n.isTopModal()&&!n.props.disableEnforceFocus&&n.mounted&&n.dialogRef){var e=(0,m.default)(n.mountNode).activeElement;n.dialogRef.contains(e)||n.dialogRef.focus()}},n.handlePortalRef=function(e){n.mountNode=e?e.getMountNode():e},n.handleModalRef=function(e){n.modalRef=e},n.onRootRef=function(e){n.dialogRef=e},n.state={exited:!e.open},n}return(0,f.default)(t,e),(0,s.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.props.open&&this.handleOpen()}},{key:"componentDidUpdate",value:function(e){e.open&&!this.props.open?this.handleClose():!e.open&&this.props.open&&(this.lastFocus=(0,m.default)(this.mountNode).activeElement,this.handleOpen())}},{key:"componentWillUnmount",value:function(){this.mounted=!1,(this.props.open||O(this.props)&&!this.state.exited)&&this.handleClose()}},{key:"autoFocus",value:function(){if(!this.props.disableAutoFocus&&this.dialogRef){var e=(0,m.default)(this.mountNode).activeElement;this.dialogRef.contains(e)||(this.dialogRef.hasAttribute("tabIndex")||this.dialogRef.setAttribute("tabIndex",-1),this.lastFocus=e,this.dialogRef.focus())}}},{key:"restoreLastFocus",value:function(){!this.props.disableRestoreFocus&&this.lastFocus&&(this.lastFocus.focus&&this.lastFocus.focus(),this.lastFocus=null)}},{key:"isTopModal",value:function(){return this.props.manager.isTopModal(this)}},{key:"render",value:function(){var e=this.props,t=e.BackdropComponent,n=e.BackdropProps,r=e.children,u=e.classes,s=e.className,l=e.container,c=(e.disableAutoFocus,e.disableBackdropClick,e.disableEnforceFocus,e.disableEscapeKeyDown,e.disablePortal),f=(e.disableRestoreFocus,e.hideBackdrop),d=e.keepMounted,h=(e.manager,e.onBackdropClick,e.onClose,e.onEscapeKeyDown,e.onRendered,e.open),y=(0,a.default)(e,["BackdropComponent","BackdropProps","children","classes","className","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),m=this.state.exited,w=O(this.props);if(!d&&!h&&(!w||m))return null;var x={};return w&&(x.onExited=(0,_.createChainedFunction)(this.handleExited,r.props.onExited)),void 0===r.props.role&&(x.role=r.props.role||"document"),void 0===r.props.tabIndex&&(x.tabIndex=r.props.tabIndex||"-1"),p.default.createElement(b.default,{ref:this.handlePortalRef,container:l,disablePortal:c,onRendered:this.handleRendered},p.default.createElement("div",(0,o.default)({ref:this.handleModalRef,className:(0,v.default)(u.root,s,(0,i.default)({},u.hidden,m))},y),f?null:p.default.createElement(t,(0,o.default)({open:h,onClick:this.handleBackdropClick},n)),p.default.createElement(g.default,{rootRef:this.onRootRef},p.default.cloneElement(r,x))))}}],[{key:"getDerivedStateFromProps",value:function(e){return e.open?{exited:!1}:O(e)?null:{exited:!0}}}]),t}(p.default.Component);T.propTypes={},T.defaultProps={BackdropComponent:k.default,disableAutoFocus:!1,disableBackdropClick:!1,disableEnforceFocus:!1,disableEscapeKeyDown:!1,disablePortal:!1,disableRestoreFocus:!1,hideBackdrop:!1,keepMounted:!1,manager:new x.default};var C=(0,w.default)(S,{flip:!1,name:"MuiModal"})(T);t.default=C},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(416))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(6)),i=r(n(7)),a=r(n(8)),u=r(n(9)),s=r(n(10)),l=r(n(0)),c=r(n(23)),f=(r(n(1)),n(35),n(58)),d=function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(0,u.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.ref=c.default.findDOMNode(this),(0,f.setRef)(this.props.rootRef,this.ref)}},{key:"componentDidUpdate",value:function(e){var t=c.default.findDOMNode(this);e.rootRef===this.props.rootRef&&this.ref===t||(e.rootRef!==this.props.rootRef&&(0,f.setRef)(e.rootRef,null),this.ref=t,(0,f.setRef)(this.props.rootRef,this.ref))}},{key:"componentWillUnmount",value:function(){this.ref=null,(0,f.setRef)(this.props.rootRef,null)}},{key:"render",value:function(){return this.props.children}}]),t}(l.default.Component);d.propTypes={},d.propTypes={};var p=d;t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(418))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(6)),i=r(n(7)),a=r(n(8)),u=r(n(9)),s=r(n(10)),l=r(n(0)),c=r(n(23)),f=(r(n(1)),r(n(40)));n(35);var d=function(e){function t(){var e,n;(0,o.default)(this,t);for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];return(n=(0,a.default)(this,(e=(0,u.default)(t)).call.apply(e,[this].concat(i)))).getMountNode=function(){return n.mountNode},n}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){this.setMountNode(this.props.container),this.props.disablePortal||this.forceUpdate(this.props.onRendered)}},{key:"componentDidUpdate",value:function(e){e.container===this.props.container&&e.disablePortal===this.props.disablePortal||(this.setMountNode(this.props.container),this.props.disablePortal||this.forceUpdate(this.props.onRendered))}},{key:"componentWillUnmount",value:function(){this.mountNode=null}},{key:"setMountNode",value:function(e){this.props.disablePortal?this.mountNode=c.default.findDOMNode(this).parentElement:this.mountNode=function(e,t){return e="function"==typeof e?e():e,c.default.findDOMNode(e)||t}(e,function(e){return(0,f.default)(c.default.findDOMNode(e))}(this).body)}},{key:"render",value:function(){var e=this.props,t=e.children;return e.disablePortal?t:this.mountNode?c.default.createPortal(t,this.mountNode):null}}]),t}(l.default.Component);d.propTypes={},d.defaultProps={disablePortal:!1},d.propTypes={};var p=d;t.default=p},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=function(e,t,n){var r="",c="",f=t;if("string"==typeof t){if(void 0===n)return e.style[(0,o.default)(t)]||(0,a.default)(e).getPropertyValue((0,i.default)(t));(f={})[t]=n}Object.keys(f).forEach(function(t){var n=f[t];n||0===n?(0,l.default)(t)?c+=t+"("+n+") ":r+=(0,i.default)(t)+": "+n+";":(0,u.default)(e,(0,i.default)(t))}),c&&(r+=s.transform+": "+c+";");e.style.cssText+=";"+r};var o=r(n(202)),i=r(n(421)),a=r(n(423)),u=r(n(424)),s=n(425),l=r(n(426));e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,function(e,t){return t.toUpperCase()})};var r=/-(.)/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=function(e){return(0,o.default)(e).replace(i,"-ms-")};var o=r(n(422)),i=/^ms-/;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e.replace(r,"-$1").toLowerCase()};var r=/([A-Z])/g;e.exports=t.default},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=function(e){if(!e)throw new TypeError("No Element passed to `getComputedStyle()`");var t=e.ownerDocument;return"defaultView"in t?t.defaultView.opener?e.ownerDocument.defaultView.getComputedStyle(e,null):window.getComputedStyle(e,null):{getPropertyValue:function(t){var n=e.style;"float"==(t=(0,o.default)(t))&&(t="styleFloat");var r=e.currentStyle[t]||null;if(null==r&&n&&n[t]&&(r=n[t]),a.test(r)&&!i.test(t)){var u=n.left,s=e.runtimeStyle,l=s&&s.left;l&&(s.left=e.currentStyle.left),n.left="fontSize"===t?"1em":r,r=n.pixelLeft+"px",n.left=u,l&&(s.left=l)}return r}}};var o=r(n(202)),i=/^(top|right|bottom|left)$/,a=/^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;e.exports=t.default},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){return"removeProperty"in e.style?e.style.removeProperty(t):e.style.removeAttribute(t)},e.exports=t.default},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=t.animationEnd=t.animationDelay=t.animationTiming=t.animationDuration=t.animationName=t.transitionEnd=t.transitionDuration=t.transitionDelay=t.transitionTiming=t.transitionProperty=t.transform=void 0;var o,i,a,u,s,l,c,f,d,p,h,v=r(n(203)),y="transform";if(t.transform=y,t.animationEnd=a,t.transitionEnd=i,t.transitionDelay=c,t.transitionTiming=l,t.transitionDuration=s,t.transitionProperty=u,t.animationDelay=h,t.animationTiming=p,t.animationDuration=d,t.animationName=f,v.default){var m=function(){for(var e,t,n=document.createElement("div").style,r={O:function(e){return"o"+e.toLowerCase()},Moz:function(e){return e.toLowerCase()},Webkit:function(e){return"webkit"+e},ms:function(e){return"MS"+e}},o=Object.keys(r),i="",a=0;a<o.length;a++){var u=o[a];if(u+"TransitionProperty"in n){i="-"+u.toLowerCase(),e=r[u]("TransitionEnd"),t=r[u]("AnimationEnd");break}}!e&&"transitionProperty"in n&&(e="transitionend");!t&&"animationName"in n&&(t="animationend");return n=null,{animationEnd:t,transitionEnd:e,prefix:i}}();o=m.prefix,t.transitionEnd=i=m.transitionEnd,t.animationEnd=a=m.animationEnd,t.transform=y=o+"-"+y,t.transitionProperty=u=o+"-transition-property",t.transitionDuration=s=o+"-transition-duration",t.transitionDelay=c=o+"-transition-delay",t.transitionTiming=l=o+"-transition-timing-function",t.animationName=f=o+"-animation-name",t.animationDuration=d=o+"-animation-duration",t.animationTiming=p=o+"-animation-delay",t.animationDelay=h=o+"-animation-timing-function"}var g={transform:y,end:i,property:u,timing:l,delay:c,duration:s};t.default=g},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return!(!e||!r.test(e))};var r=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;e.exports=t.default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.isBody=u,t.default=function(e){var t=(0,i.default)(e),n=(0,a.default)(t);if(!(0,o.default)(t)&&!u(e))return e.scrollHeight>e.clientHeight;var r=n.getComputedStyle(t.body),s=parseInt(r.getPropertyValue("margin-left"),10),l=parseInt(r.getPropertyValue("margin-right"),10);return s+t.body.clientWidth+l<n.innerWidth};var o=r(n(428)),i=r(n(40)),a=r(n(97));function u(e){return e&&"body"===e.tagName.toLowerCase()}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)},e.exports=t.default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(430))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=r(n(431)),f={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent",touchAction:"none"},invisible:{backgroundColor:"transparent"}};function d(e){var t=e.classes,n=e.className,r=e.invisible,l=e.open,f=e.transitionDuration,d=(0,a.default)(e,["classes","className","invisible","open","transitionDuration"]);return u.default.createElement(c.default,(0,o.default)({in:l,timeout:f},d),u.default.createElement("div",{className:(0,s.default)(t.root,(0,i.default)({},t.invisible,r),n),"aria-hidden":"true"}))}t.styles=f,d.propTypes={},d.defaultProps={invisible:!1};var p=(0,l.default)(f,{name:"MuiBackdrop"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(432))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(98))),p=n(96),h=r(n(99)),v=n(140),y={entering:{opacity:1},entered:{opacity:1}},m=function(e){function t(){var e,n;(0,a.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o)))).handleEnter=function(e){var t=n.props.theme;(0,v.reflow)(e);var r=(0,v.getTransitionProps)(n.props,{mode:"enter"});e.style.webkitTransition=t.transitions.create("opacity",r),e.style.transition=t.transitions.create("opacity",r),n.props.onEnter&&n.props.onEnter(e)},n.handleExit=function(e){var t=n.props.theme,r=(0,v.getTransitionProps)(n.props,{mode:"exit"});e.style.webkitTransition=t.transitions.create("opacity",r),e.style.transition=t.transitions.create("opacity",r),n.props.onExit&&n.props.onExit(e)},n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(e.onEnter,e.onExit,e.style),r=(e.theme,(0,i.default)(e,["children","onEnter","onExit","style","theme"])),a=(0,o.default)({},n,f.default.isValidElement(t)?t.props.style:{});return f.default.createElement(d.default,(0,o.default)({appear:!0,onEnter:this.handleEnter,onExit:this.handleExit},r),function(e,n){return f.default.cloneElement(t,(0,o.default)({style:(0,o.default)({opacity:0,willChange:"opacity"},y[e],a)},n))})}}]),t}(f.default.Component);m.propTypes={},m.defaultProps={timeout:{enter:p.duration.enteringScreen,exit:p.duration.leavingScreen}};var g=(0,h.default)()(m);t.default=g},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(434))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.setTranslateValue=w,t.default=void 0;var o=r(n(5)),i=r(n(3)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(23))),p=r(n(141)),h=r(n(142)),v=r(n(98)),y=r(n(97)),m=r(n(99)),g=n(96),b=n(140),_=24;function w(e,t){var n=function(e,t){var n,r=e.direction,o=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var i=(0,y.default)(t).getComputedStyle(t);n=i.getPropertyValue("-webkit-transform")||i.getPropertyValue("transform")}var a=0,u=0;if(n&&"none"!==n&&"string"==typeof n){var s=n.split("(")[1].split(")")[0].split(",");a=parseInt(s[4],10),u=parseInt(s[5],10)}return"left"===r?"translateX(100vw) translateX(-".concat(o.left-a,"px)"):"right"===r?"translateX(-".concat(o.left+o.width+_-a,"px)"):"up"===r?"translateY(100vh) translateY(-".concat(o.top-u,"px)"):"translateY(-".concat(o.top+o.height+_-u,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var x=function(e){function t(){var e;return(0,a.default)(this,t),(e=(0,s.default)(this,(0,l.default)(t).call(this))).mounted=!1,e.handleEnter=function(t){w(e.props,t),(0,b.reflow)(t),e.props.onEnter&&e.props.onEnter(t)},e.handleEntering=function(t){var n=e.props.theme,r=(0,b.getTransitionProps)(e.props,{mode:"enter"});t.style.webkitTransition=n.transitions.create("-webkit-transform",(0,i.default)({},r,{easing:n.transitions.easing.easeOut})),t.style.transition=n.transitions.create("transform",(0,i.default)({},r,{easing:n.transitions.easing.easeOut})),t.style.webkitTransform="translate(0, 0)",t.style.transform="translate(0, 0)",e.props.onEntering&&e.props.onEntering(t)},e.handleExit=function(t){var n=e.props.theme,r=(0,b.getTransitionProps)(e.props,{mode:"exit"});t.style.webkitTransition=n.transitions.create("-webkit-transform",(0,i.default)({},r,{easing:n.transitions.easing.sharp})),t.style.transition=n.transitions.create("transform",(0,i.default)({},r,{easing:n.transitions.easing.sharp})),w(e.props,t),e.props.onExit&&e.props.onExit(t)},e.handleExited=function(t){t.style.webkitTransition="",t.style.transition="",e.props.onExited&&e.props.onExited(t)},"undefined"!=typeof window&&(e.handleResize=(0,h.default)(function(){e.props.in||"down"===e.props.direction||"right"===e.props.direction||e.transitionRef&&w(e.props,e.transitionRef)},166)),e}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.mounted=!0,this.props.in||this.updatePosition()}},{key:"componentDidUpdate",value:function(e){e.direction===this.props.direction||this.props.in||this.updatePosition()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"updatePosition",value:function(){this.transitionRef&&(this.transitionRef.style.visibility="inherit",w(this.props,this.transitionRef))}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=(t.onEnter,t.onEntering,t.onExit,t.onExited,t.style),a=(t.theme,(0,o.default)(t,["children","onEnter","onEntering","onExit","onExited","style","theme"])),u={};return this.props.in||this.mounted||(u.visibility="hidden"),u=(0,i.default)({},u,r,f.default.isValidElement(n)?n.props.style:{}),f.default.createElement(p.default,{target:"window",onResize:this.handleResize},f.default.createElement(v.default,(0,i.default)({onEnter:this.handleEnter,onEntering:this.handleEntering,onExit:this.handleExit,onExited:this.handleExited,appear:!0,style:u,ref:function(t){e.transitionRef=d.default.findDOMNode(t)}},a),n))}}]),t}(f.default.Component);x.propTypes={},x.defaultProps={direction:"down",timeout:{enter:g.duration.enteringScreen,exit:g.duration.leavingScreen}};var k=(0,m.default)()(x);t.default=k},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t,n){var r=n(206),o=n(438);e.exports=function(e,t){return!t||"object"!==r(t)&&"function"!=typeof t?o(e):t}},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t){function n(t){return e.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},n(t)}e.exports=n},function(e,t,n){var r=n(441);e.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}},function(e,t){function n(t,r){return e.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},n(t,r)}e.exports=n},function(e,t,n){var r=n(443);e.exports=function(e,t){if(null==e)return{};var n,o,i=r(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=r(n(143)),f={root:{listStyle:"none",margin:0,padding:0,position:"relative"},padding:{paddingTop:8,paddingBottom:8},dense:{paddingTop:4,paddingBottom:4},subheader:{paddingTop:0}};function d(e){var t,n=e.children,r=e.classes,l=e.className,f=e.component,d=e.dense,p=e.disablePadding,h=e.subheader,v=(0,a.default)(e,["children","classes","className","component","dense","disablePadding","subheader"]);return u.default.createElement(f,(0,o.default)({className:(0,s.default)(r.root,(t={},(0,i.default)(t,r.dense,d&&!p),(0,i.default)(t,r.padding,!p),(0,i.default)(t,r.subheader,h),t),l)},v),u.default.createElement(c.default.Provider,{value:{dense:d}},h,n))}t.styles=f,d.propTypes={},d.defaultProps={component:"ul",dense:!1,disablePadding:!1};var p=(0,l.default)(f,{name:"MuiList"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=function(e){return{root:{boxSizing:"border-box",lineHeight:"48px",listStyle:"none",color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(14)},colorPrimary:{color:e.palette.primary.main},colorInherit:{color:"inherit"},gutters:e.mixins.gutters(),inset:{paddingLeft:72},sticky:{position:"sticky",top:0,zIndex:1,backgroundColor:"inherit"}}};function d(e){var t,n=e.classes,r=e.className,l=e.color,f=e.component,d=e.disableGutters,p=e.disableSticky,h=e.inset,v=(0,a.default)(e,["classes","className","color","component","disableGutters","disableSticky","inset"]);return u.default.createElement(f,(0,o.default)({className:(0,s.default)(n.root,(t={},(0,i.default)(t,n["color".concat((0,c.capitalize)(l))],"default"!==l),(0,i.default)(t,n.inset,h),(0,i.default)(t,n.sticky,!p),(0,i.default)(t,n.gutters,!d),t),r)},v))}t.styles=f,d.propTypes={},d.defaultProps={color:"default",component:"li",disableGutters:!1,disableSticky:!1,inset:!1},d.muiName="ListSubheader";var p=(0,l.default)(f,{name:"MuiListSubheader"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=r(n(198)),f=n(58),d=r(n(448)),p=function(e){return{root:{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",width:"100%",boxSizing:"border-box",textAlign:"left",paddingTop:11,paddingBottom:11,"&$selected, &$selected:hover":{backgroundColor:e.palette.action.selected}},container:{position:"relative"},focusVisible:{backgroundColor:e.palette.action.hover},default:{},dense:{paddingTop:8,paddingBottom:8},disabled:{opacity:.5},divider:{borderBottom:"1px solid ".concat(e.palette.divider),backgroundClip:"padding-box"},gutters:e.mixins.gutters(),button:{transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{textDecoration:"none",backgroundColor:e.palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}}},secondaryAction:{paddingRight:32},selected:{}}};function h(e){var t=e.button,n=e.children,r=e.classes,l=e.className,p=e.component,h=e.ContainerComponent,v=e.ContainerProps,y=(v=void 0===v?{}:v).className,m=(0,a.default)(v,["className"]),g=e.dense,b=e.disabled,_=e.disableGutters,w=e.divider,x=e.focusVisibleClassName,k=e.selected,E=(0,a.default)(e,["button","children","classes","className","component","ContainerComponent","ContainerProps","dense","disabled","disableGutters","divider","focusVisibleClassName","selected"]);return u.default.createElement(d.default,{dense:g},function(e){var a,d=e.dense,v=u.default.Children.toArray(n),g=v.some(function(e){return(0,f.isMuiElement)(e,["ListItemAvatar"])}),O=v.length&&(0,f.isMuiElement)(v[v.length-1],["ListItemSecondaryAction"]),S=(0,s.default)(r.root,r.default,(a={},(0,i.default)(a,r.dense,d||g),(0,i.default)(a,r.gutters,!_),(0,i.default)(a,r.divider,w),(0,i.default)(a,r.disabled,b),(0,i.default)(a,r.button,t),(0,i.default)(a,r.secondaryAction,O),(0,i.default)(a,r.selected,k),a),l),T=(0,o.default)({className:S,disabled:b},E),C=p||"li";return t&&(T.component=p||"div",T.focusVisibleClassName=(0,s.default)(r.focusVisible,x),C=c.default),O?(C=T.component||p?C:"div","li"===h&&("li"===C?C="div":"li"===T.component&&(T.component="div")),u.default.createElement(h,(0,o.default)({className:(0,s.default)(r.container,y)},m),u.default.createElement(C,T,v),v.pop())):u.default.createElement(C,T,v)})}t.styles=p,h.propTypes={},h.defaultProps={button:!1,ContainerComponent:"li",dense:!1,disabled:!1,disableGutters:!1,divider:!1,selected:!1};var v=(0,l.default)(p,{name:"MuiListItem"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(0)),i=(r(n(1)),r(n(143)));function a(e){var t=e.children,n=e.dense;return o.default.createElement(i.default.Consumer,null,function(e){var r={dense:n||e.dense||!1};return o.default.createElement(i.default.Provider,{value:r},t(r))})}a.propTypes={};var u=a;t.default=u},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(12)),l=function(e){return{root:{marginRight:16,color:e.palette.action.active,flexShrink:0,display:"inline-flex"}}};function c(e){var t=e.children,n=e.classes,r=e.className,s=(0,i.default)(e,["children","classes","className"]);return a.default.createElement("div",(0,o.default)({className:(0,u.default)(n.root,r)},s),t)}t.styles=l,c.propTypes={};var f=(0,s.default)(l,{name:"MuiListItemIcon"})(c);t.default=f},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=r(n(61)),f=r(n(143)),d=function(e){return{root:{flex:"1 1 auto",minWidth:0,padding:"0 16px","&:first-child":{paddingLeft:0}},inset:{"&:first-child":{paddingLeft:56}},dense:{fontSize:e.typography.pxToRem(13)},primary:{"&$textDense":{fontSize:"inherit"}},secondary:{"&$textDense":{fontSize:"inherit"}},textDense:{}}};function p(e){var t=e.children,n=e.classes,r=e.className,l=e.disableTypography,d=e.inset,p=e.primary,h=e.primaryTypographyProps,v=e.secondary,y=e.secondaryTypographyProps,m=(0,a.default)(e,["children","classes","className","disableTypography","inset","primary","primaryTypographyProps","secondary","secondaryTypographyProps"]);return u.default.createElement(f.default.Consumer,null,function(e){var a,f=e.dense,g=null!=p?p:t;null==g||g.type===c.default||l||(g=u.default.createElement(c.default,(0,o.default)({variant:"subheading",internalDeprecatedVariant:!0,className:(0,s.default)(n.primary,(0,i.default)({},n.textDense,f)),component:"span"},h),g));var b=v;return null==b||b.type===c.default||l||(b=u.default.createElement(c.default,(0,o.default)({className:(0,s.default)(n.secondary,(0,i.default)({},n.textDense,f)),color:"textSecondary"},y),b)),u.default.createElement("div",(0,o.default)({className:(0,s.default)(n.root,(a={},(0,i.default)(a,n.dense,f),(0,i.default)(a,n.inset,d),a),r)},m),g,b)})}t.styles=d,p.propTypes={},p.defaultProps={disableTypography:!1,inset:!1};var h=(0,l.default)(d,{name:"MuiListItemText"})(p);t.default=h},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=(r(n(139)),function(e){return{root:{display:"block",margin:0},display4:e.typography.display4,display3:e.typography.display3,display2:e.typography.display2,display1:e.typography.display1,headline:e.typography.headline,title:e.typography.title,subheading:e.typography.subheading,body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main}}});t.styles=f;var d={display4:"h1",display3:"h2",display2:"h3",display1:"h4",headline:"h5",title:"h6",subheading:"subtitle1"};var p={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p",display4:"h1",display3:"h1",display2:"h1",display1:"h1",headline:"h1",title:"h2",subheading:"h3"};function h(e){var t,n=e.align,r=e.classes,l=e.className,f=e.color,h=e.component,v=e.gutterBottom,y=e.headlineMapping,m=(e.internalDeprecatedVariant,e.noWrap),g=e.paragraph,b=e.theme,_=e.variant,w=(0,a.default)(e,["align","classes","className","color","component","gutterBottom","headlineMapping","internalDeprecatedVariant","noWrap","paragraph","theme","variant"]),x=function(e,t){var n=e.typography,r=t;return r||(r=n.useNextVariants?"body2":"body1"),n.useNextVariants&&(r=d[r]||r),r}(b,_),k=(0,s.default)(r.root,(t={},(0,i.default)(t,r[x],"inherit"!==x),(0,i.default)(t,r["color".concat((0,c.capitalize)(f))],"default"!==f),(0,i.default)(t,r.noWrap,m),(0,i.default)(t,r.gutterBottom,v),(0,i.default)(t,r.paragraph,g),(0,i.default)(t,r["align".concat((0,c.capitalize)(n))],"inherit"!==n),t),l),E=h||(g?"p":y[x]||p[x])||"span";return u.default.createElement(E,(0,o.default)({className:k},w))}h.propTypes={},h.defaultProps={align:"inherit",color:"default",gutterBottom:!1,headlineMapping:p,noWrap:!1,paragraph:!1};var v=(0,l.default)(f,{name:"MuiTypography",withTheme:!0})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),i=r(n(5)),a=r(n(3)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(196),f=(r(n(453)),[0,8,16,24,32,40]),d=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12];var p=function(e){return(0,a.default)({container:{boxSizing:"border-box",display:"flex",flexWrap:"wrap",width:"100%"},item:{boxSizing:"border-box",margin:"0"},zeroMinWidth:{minWidth:0},"direction-xs-column":{flexDirection:"column"},"direction-xs-column-reverse":{flexDirection:"column-reverse"},"direction-xs-row-reverse":{flexDirection:"row-reverse"},"wrap-xs-nowrap":{flexWrap:"nowrap"},"wrap-xs-wrap-reverse":{flexWrap:"wrap-reverse"},"align-items-xs-center":{alignItems:"center"},"align-items-xs-flex-start":{alignItems:"flex-start"},"align-items-xs-flex-end":{alignItems:"flex-end"},"align-items-xs-baseline":{alignItems:"baseline"},"align-content-xs-center":{alignContent:"center"},"align-content-xs-flex-start":{alignContent:"flex-start"},"align-content-xs-flex-end":{alignContent:"flex-end"},"align-content-xs-space-between":{alignContent:"space-between"},"align-content-xs-space-around":{alignContent:"space-around"},"justify-xs-center":{justifyContent:"center"},"justify-xs-flex-end":{justifyContent:"flex-end"},"justify-xs-space-between":{justifyContent:"space-between"},"justify-xs-space-around":{justifyContent:"space-around"},"justify-xs-space-evenly":{justifyContent:"space-evenly"}},function(e,t){var n={};return f.forEach(function(e,r){0!==r&&(n["spacing-".concat(t,"-").concat(e)]={margin:-e/2,width:"calc(100% + ".concat(e,"px)"),"& > $item":{padding:e/2}})}),n}(0,"xs"),c.keys.reduce(function(t,n){return function(e,t,n){var r={};d.forEach(function(e){var t="grid-".concat(n,"-").concat(e);if(!0!==e)if("auto"!==e){var o="".concat(Math.round(e/12*1e8)/1e6,"%");r[t]={flexBasis:o,flexGrow:0,maxWidth:o}}else r[t]={flexBasis:"auto",flexGrow:0,maxWidth:"none"};else r[t]={flexBasis:0,flexGrow:1,maxWidth:"100%"}}),"xs"===n?(0,a.default)(e,r):e[t.breakpoints.up(n)]=r}(t,e,n),t},{}))};function h(e){var t,n=e.alignContent,r=e.alignItems,l=e.classes,c=e.className,f=e.component,d=e.container,p=e.direction,v=e.item,y=e.justify,m=e.lg,g=e.md,b=e.sm,_=e.spacing,w=e.wrap,x=e.xl,k=e.xs,E=e.zeroMinWidth,O=(0,i.default)(e,["alignContent","alignItems","classes","className","component","container","direction","item","justify","lg","md","sm","spacing","wrap","xl","xs","zeroMinWidth"]),S=(0,s.default)((t={},(0,o.default)(t,l.container,d),(0,o.default)(t,l.item,v),(0,o.default)(t,l.zeroMinWidth,E),(0,o.default)(t,l["spacing-xs-".concat(String(_))],d&&0!==_),(0,o.default)(t,l["direction-xs-".concat(String(p))],p!==h.defaultProps.direction),(0,o.default)(t,l["wrap-xs-".concat(String(w))],w!==h.defaultProps.wrap),(0,o.default)(t,l["align-items-xs-".concat(String(r))],r!==h.defaultProps.alignItems),(0,o.default)(t,l["align-content-xs-".concat(String(n))],n!==h.defaultProps.alignContent),(0,o.default)(t,l["justify-xs-".concat(String(y))],y!==h.defaultProps.justify),(0,o.default)(t,l["grid-xs-".concat(String(k))],!1!==k),(0,o.default)(t,l["grid-sm-".concat(String(b))],!1!==b),(0,o.default)(t,l["grid-md-".concat(String(g))],!1!==g),(0,o.default)(t,l["grid-lg-".concat(String(m))],!1!==m),(0,o.default)(t,l["grid-xl-".concat(String(x))],!1!==x),t),c);return u.default.createElement(f,(0,a.default)({className:S},O))}t.styles=p,h.propTypes={},h.defaultProps={alignContent:"stretch",alignItems:"stretch",component:"div",container:!1,direction:"row",item:!1,justify:"flex-start",lg:!1,md:!1,sm:!1,spacing:0,wrap:"wrap",xl:!1,xs:!1,zeroMinWidth:!1};var v=(0,l.default)(p,{name:"MuiGrid"})(h);t.default=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){return function(){return null}};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=(r(n(139)),44);function d(e){return e=function(e,t,n){return(Math.min(Math.max(t,e),n)-t)/(n-t)}(e,0,1),e=(e-=1)*e*e+1}var p=function(e){return{root:{display:"inline-block",lineHeight:1},static:{transition:e.transitions.create("transform")},indeterminate:{animation:"mui-progress-circular-rotate 1.4s linear infinite"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},svg:{},circle:{stroke:"currentColor"},circleStatic:{transition:e.transitions.create("stroke-dashoffset")},circleIndeterminate:{animation:"mui-progress-circular-dash 1.4s ease-in-out infinite",strokeDasharray:"80px, 200px",strokeDashoffset:"0px"},"@keyframes mui-progress-circular-rotate":{"100%":{transform:"rotate(360deg)"}},"@keyframes mui-progress-circular-dash":{"0%":{strokeDasharray:"1px, 200px",strokeDashoffset:"0px"},"50%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-15px"},"100%":{strokeDasharray:"100px, 200px",strokeDashoffset:"-120px"}},circleDisableShrink:{animation:"none"}}};function h(e){var t,n,r=e.classes,l=e.className,p=e.color,h=e.disableShrink,v=e.size,y=e.style,m=e.thickness,g=e.value,b=e.variant,_=(0,a.default)(e,["classes","className","color","disableShrink","size","style","thickness","value","variant"]),w={},x={},k={};if("determinate"===b||"static"===b){var E=2*Math.PI*((f-m)/2);w.strokeDasharray=E.toFixed(3),k["aria-valuenow"]=Math.round(g),"static"===b?(w.strokeDashoffset="".concat(((100-g)/100*E).toFixed(3),"px"),x.transform="rotate(-90deg)"):(w.strokeDashoffset="".concat((function(e){return e*e}((100-g)/100)*E).toFixed(3),"px"),x.transform="rotate(".concat((270*d(g/70)).toFixed(3),"deg)"))}return u.default.createElement("div",(0,o.default)({className:(0,s.default)(r.root,(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(p))],"inherit"!==p),(0,i.default)(t,r.indeterminate,"indeterminate"===b),(0,i.default)(t,r.static,"static"===b),t),l),style:(0,o.default)({width:v,height:v},x,y),role:"progressbar"},k,_),u.default.createElement("svg",{className:r.svg,viewBox:"".concat(f/2," ").concat(f/2," ").concat(f," ").concat(f)},u.default.createElement("circle",{className:(0,s.default)(r.circle,(n={},(0,i.default)(n,r.circleIndeterminate,"indeterminate"===b),(0,i.default)(n,r.circleStatic,"static"===b),(0,i.default)(n,r.circleDisableShrink,h),n)),style:w,cx:f,cy:f,r:(f-m)/2,fill:"none",strokeWidth:m})))}t.styles=p,h.propTypes={},h.defaultProps={color:"primary",disableShrink:!1,size:40,thickness:3.6,value:0,variant:"indeterminate"};var v=(0,l.default)(p,{name:"MuiCircularProgress",flip:!1})(h);t.default=v},function(e,t,n){var r=n(144);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},i=n(457)(r,o);r.locals&&(e.exports=r.locals),e.hot.accept(144,function(){var t=n(144);if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");i(t)}),e.hot.dispose(function(){i()})},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),a=null,u=0,s=[],l=n(458);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(y(o.parts[a],t))}else{var u=[];for(a=0;a<o.parts.length;a++)u.push(y(o.parts[a],t));r[o.id]={id:o.id,refs:1,parts:u}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],u={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(u):n.push(r[a]={id:a,parts:[u]})}return n}function d(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),s.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=s.indexOf(e);t>=0&&s.splice(t,1)}function h(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),d(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function y(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var s=u++;n=a||(a=h(t)),r=g.bind(null,n,s,!1),o=g.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),u=e.href;e.href=URL.createObjectURL(a),u&&URL.revokeObjectURL(u)}.bind(null,n,t),o=function(){p(n),n.href&&URL.revokeObjectURL(n.href)}):(n=h(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){p(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return c(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var a=n[i];(u=r[a.id]).refs--,o.push(u)}e&&c(f(e,t),t);for(i=0;i<o.length;i++){var u;if(0===(u=o[i]).refs){for(var s=0;s<u.parts.length;s++)u.parts[s]();delete r[u.id]}}}};var m=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function g(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=m(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(12)),l=r(n(207)),c=function(e){return{root:{display:"table",fontFamily:e.typography.fontFamily,width:"100%",borderCollapse:"collapse",borderSpacing:0}}};function f(e){var t=e.classes,n=e.className,r=e.component,s=e.padding,c=(0,i.default)(e,["classes","className","component","padding"]);return a.default.createElement(l.default.Provider,{value:{padding:s}},a.default.createElement(r,(0,o.default)({className:(0,u.default)(t.root,n)},c)))}t.styles=c,f.propTypes={},f.defaultProps={component:"table",padding:"default"};var d=(0,s.default)(c,{name:"MuiTable"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(12)),l=r(n(100)),c={root:{display:"table-header-group"}};function f(e){var t=e.classes,n=e.className,r=e.component,s=(0,i.default)(e,["classes","className","component"]);return a.default.createElement(l.default.Provider,{value:{variant:"head"}},a.default.createElement(r,(0,o.default)({className:(0,u.default)(t.root,n)},s)))}t.styles=c,f.propTypes={},f.defaultProps={component:"thead"};var d=(0,s.default)(c,{name:"MuiTableHead"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=r(n(100)),f=function(e){return{root:{color:"inherit",display:"table-row",height:48,verticalAlign:"middle",outline:"none","&$selected":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.04)":"rgba(255, 255, 255, 0.08)"},"&$hover:hover":{backgroundColor:"light"===e.palette.type?"rgba(0, 0, 0, 0.07)":"rgba(255, 255, 255, 0.14)"}},selected:{},hover:{},head:{height:56},footer:{height:56}}};function d(e){var t=e.classes,n=e.className,r=e.component,l=e.hover,f=e.selected,d=(0,a.default)(e,["classes","className","component","hover","selected"]);return u.default.createElement(c.default.Consumer,null,function(e){var a,c=(0,s.default)(t.root,(a={},(0,i.default)(a,t.head,e&&"head"===e.variant),(0,i.default)(a,t.footer,e&&"footer"===e.variant),(0,i.default)(a,t.hover,l),(0,i.default)(a,t.selected,f),a),n);return u.default.createElement(r,(0,o.default)({className:c},d))})}t.styles=f,d.propTypes={},d.defaultProps={component:"tr",hover:!1,selected:!1};var p=(0,l.default)(f,{name:"MuiTableRow"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=n(136),d=r(n(207)),p=r(n(100)),h=function(e){return{root:{display:"table-cell",verticalAlign:"inherit",borderBottom:"1px solid\n    ".concat("light"===e.palette.type?(0,f.lighten)((0,f.fade)(e.palette.divider,1),.88):(0,f.darken)((0,f.fade)(e.palette.divider,1),.68)),textAlign:"left",padding:"4px 56px 4px 24px","&:last-child":{paddingRight:24}},head:{color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12),fontWeight:e.typography.fontWeightMedium},body:{color:e.palette.text.primary,fontSize:e.typography.pxToRem(13),fontWeight:e.typography.fontWeightRegular},footer:{borderBottom:0,color:e.palette.text.secondary,fontSize:e.typography.pxToRem(12)},numeric:{textAlign:"right",flexDirection:"row-reverse"},paddingDense:{paddingRight:24},paddingCheckbox:{padding:"0 12px","&:last-child":{paddingRight:12}},paddingNone:{padding:0,"&:last-child":{padding:0}}}};function v(e){var t=e.children,n=e.classes,r=e.className,l=e.component,f=e.sortDirection,h=e.numeric,v=e.padding,y=e.scope,m=e.variant,g=(0,a.default)(e,["children","classes","className","component","sortDirection","numeric","padding","scope","variant"]);return u.default.createElement(d.default.Consumer,null,function(e){return u.default.createElement(p.default.Consumer,null,function(a){var d,p;p=l||(a&&"head"===a.variant?"th":"td");var b=y;!b&&a&&"head"===a.variant&&(b="col");var _=v||(e&&e.padding?e.padding:"default"),w=(0,s.default)(n.root,(d={},(0,i.default)(d,n.head,m?"head"===m:a&&"head"===a.variant),(0,i.default)(d,n.body,m?"body"===m:a&&"body"===a.variant),(0,i.default)(d,n.footer,m?"footer"===m:a&&"footer"===a.variant),(0,i.default)(d,n.numeric,h),(0,i.default)(d,n["padding".concat((0,c.capitalize)(_))],"default"!==_),d),r),x=null;return f&&(x="asc"===f?"ascending":"descending"),u.default.createElement(p,(0,o.default)({className:w,"aria-sort":x,scope:b},g),t)})})}t.styles=h,v.propTypes={},v.defaultProps={numeric:!1};var y=(0,l.default)(h,{name:"MuiTableCell"})(v);t.default=y},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(12)),l=r(n(100)),c={root:{display:"table-row-group"}};function f(e){var t=e.classes,n=e.className,r=e.component,s=(0,i.default)(e,["classes","className","component"]);return a.default.createElement(l.default.Provider,{value:{variant:"body"}},a.default.createElement(r,(0,o.default)({className:(0,u.default)(t.root,n)},s)))}t.styles=c,f.propTypes={},f.defaultProps={component:"tbody"};var d=(0,s.default)(c,{name:"MuiTableBody"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=r(n(23)),p=(r(n(13)),r(n(1)),r(n(145))),h=r(n(467)),v=r(n(469)),y=r(n(472)),m=r(n(476)),g=r(n(478)),b=r(n(480)),_={standard:p.default,filled:h.default,outlined:v.default},w=function(e){function t(e){var n;return(0,a.default)(this,t),(n=(0,s.default)(this,(0,l.default)(t).call(this,e))).labelRef=f.default.createRef(),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){"outlined"===this.props.variant&&(this.labelNode=d.default.findDOMNode(this.labelRef.current),this.forceUpdate())}},{key:"render",value:function(){var e=this.props,t=e.autoComplete,n=e.autoFocus,r=e.children,a=e.className,u=e.defaultValue,s=e.error,l=e.FormHelperTextProps,c=e.fullWidth,d=e.helperText,p=e.id,h=e.InputLabelProps,v=e.inputProps,w=e.InputProps,x=e.inputRef,k=e.label,E=e.multiline,O=e.name,S=e.onBlur,T=e.onChange,C=e.onFocus,P=e.placeholder,R=e.required,j=e.rows,A=e.rowsMax,M=e.select,I=e.SelectProps,N=e.type,D=e.value,L=e.variant,U=(0,i.default)(e,["autoComplete","autoFocus","children","className","defaultValue","error","FormHelperTextProps","fullWidth","helperText","id","InputLabelProps","inputProps","InputProps","inputRef","label","multiline","name","onBlur","onChange","onFocus","placeholder","required","rows","rowsMax","select","SelectProps","type","value","variant"]),F={};"outlined"===L&&(h&&void 0!==h.shrink&&(F.notched=h.shrink),F.labelWidth=this.labelNode&&this.labelNode.offsetWidth||0);var W=d&&p?"".concat(p,"-helper-text"):void 0,z=_[L],B=f.default.createElement(z,(0,o.default)({autoComplete:t,autoFocus:n,defaultValue:u,fullWidth:c,multiline:E,name:O,rows:j,rowsMax:A,type:N,value:D,id:p,inputRef:x,onBlur:S,onChange:T,onFocus:C,placeholder:P,inputProps:v},F,w));return f.default.createElement(m.default,(0,o.default)({"aria-describedby":W,className:a,error:s,fullWidth:c,required:R,variant:L},U),k&&f.default.createElement(y.default,(0,o.default)({htmlFor:p,ref:this.labelRef},h),k),M?f.default.createElement(b.default,(0,o.default)({value:D,input:B},I),r):B,d&&f.default.createElement(g.default,(0,o.default)({id:W},l),d))}}]),t}(f.default.Component);w.propTypes={},w.defaultProps={required:!1,select:!1,variant:"standard"};var x=w;t.default=x},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),i=r(n(3)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(146)),c=r(n(12)),f=function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)";return{root:{position:"relative"},formControl:{"label + &":{marginTop:16}},focused:{},disabled:{},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):not($focused):not($error):before":{borderBottom:"2px solid ".concat(e.palette.text.primary),"@media (hover: none)":{borderBottom:"1px solid ".concat(n)}},"&$disabled:before":{borderBottom:"1px dotted ".concat(n)}},error:{},multiline:{},fullWidth:{},input:{},inputMarginDense:{},inputMultiline:{},inputType:{},inputTypeSearch:{}}};function d(e){var t=e.disableUnderline,n=e.classes,r=(0,a.default)(e,["disableUnderline","classes"]);return u.default.createElement(l.default,(0,i.default)({classes:(0,i.default)({},n,{root:(0,s.default)(n.root,(0,o.default)({},n.underline,!t)),underline:null})},r))}t.styles=f,d.propTypes={},l.default.defaultProps={fullWidth:!1,inputComponent:"input",multiline:!1,type:"text"},d.muiName="Input";var p=(0,c.default)(f,{name:"MuiInput"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(11))),p=r(n(142)),h=r(n(141)),v=r(n(12)),y=n(58),m=19,g={root:{position:"relative",width:"100%"},textarea:{width:"100%",height:"100%",resize:"none",font:"inherit",padding:0,cursor:"inherit",boxSizing:"border-box",lineHeight:"inherit",border:"none",outline:"none",background:"transparent"},shadow:{overflow:"hidden",visibility:"hidden",position:"absolute",height:"auto",whiteSpace:"pre-wrap"}};t.styles=g;var b=function(e){function t(e){var n;return(0,a.default)(this,t),(n=(0,s.default)(this,(0,l.default)(t).call(this))).handleRefInput=function(e){n.inputRef=e,(0,y.setRef)(n.props.textareaRef,e)},n.handleRefSinglelineShadow=function(e){n.singlelineShadowRef=e},n.handleRefShadow=function(e){n.shadowRef=e},n.handleChange=function(e){n.value=e.target.value,n.isControlled||(n.shadowRef.value=n.value,n.syncHeightWithShadow()),n.props.onChange&&n.props.onChange(e)},n.isControlled=null!=e.value,n.value=e.value||e.defaultValue||"",n.state={height:Number(e.rows)*m},"undefined"!=typeof window&&(n.handleResize=(0,p.default)(function(){n.syncHeightWithShadow()},166)),n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.syncHeightWithShadow()}},{key:"componentDidUpdate",value:function(){this.syncHeightWithShadow()}},{key:"componentWillUnmount",value:function(){this.handleResize.clear()}},{key:"syncHeightWithShadow",value:function(){var e=this.props;if(this.shadowRef){this.isControlled&&(this.shadowRef.value=null==e.value?"":String(e.value));var t=this.singlelineShadowRef.scrollHeight,n=this.shadowRef.scrollHeight;void 0!==n&&(Number(e.rowsMax)>=Number(e.rows)&&(n=Math.min(Number(e.rowsMax)*t,n)),n=Math.max(n,t),Math.abs(this.state.height-n)>1&&this.setState({height:n}))}}},{key:"render",value:function(){var e=this.props,t=e.classes,n=e.className,r=e.defaultValue,a=(e.onChange,e.rows),u=(e.rowsMax,e.textareaRef,e.value),s=e.style,l=(0,i.default)(e,["classes","className","defaultValue","onChange","rows","rowsMax","textareaRef","value","style"]);return f.default.createElement("div",{className:t.root},f.default.createElement(h.default,{target:"window",onResize:this.handleResize}),f.default.createElement("textarea",{"aria-hidden":"true",className:(0,d.default)(t.textarea,t.shadow),readOnly:!0,ref:this.handleRefSinglelineShadow,rows:"1",tabIndex:-1,value:""}),f.default.createElement("textarea",{"aria-hidden":"true",className:(0,d.default)(t.textarea,t.shadow),defaultValue:r,readOnly:!0,ref:this.handleRefShadow,rows:a,tabIndex:-1,value:u}),f.default.createElement("textarea",(0,o.default)({rows:a,className:(0,d.default)(t.textarea,n),defaultValue:r,value:u,onChange:this.handleChange,ref:this.handleRefInput,style:(0,o.default)({height:this.state.height},s)},l)))}}]),t}(f.default.Component);b.propTypes={},b.defaultProps={rows:1};var _=(0,v.default)(g,{name:"MuiPrivateTextarea"})(b);t.default=_},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(468))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(146)),l=r(n(12)),c=function(e){var t="light"===e.palette.type,n=t?"rgba(0, 0, 0, 0.42)":"rgba(255, 255, 255, 0.7)",r=t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)";return{root:{position:"relative",backgroundColor:r,borderTopLeftRadius:e.shape.borderRadius,borderTopRightRadius:e.shape.borderRadius,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),"&:hover":{backgroundColor:t?"rgba(0, 0, 0, 0.13)":"rgba(255, 255, 255, 0.13)","@media (hover: none)":{backgroundColor:r}},"&$focused":{backgroundColor:t?"rgba(0, 0, 0, 0.09)":"rgba(255, 255, 255, 0.09)"},"&$disabled":{backgroundColor:t?"rgba(0, 0, 0, 0.12)":"rgba(255, 255, 255, 0.12)"}},underline:{"&:after":{borderBottom:"2px solid ".concat(e.palette.primary[t?"dark":"light"]),left:0,bottom:0,content:'""',position:"absolute",right:0,transform:"scaleX(0)",transition:e.transitions.create("transform",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut}),pointerEvents:"none"},"&$focused:after":{transform:"scaleX(1)"},"&$error:after":{borderBottomColor:e.palette.error.main,transform:"scaleX(1)"},"&:before":{borderBottom:"1px solid ".concat(n),left:0,bottom:0,content:'"\\00a0"',position:"absolute",right:0,transition:e.transitions.create("border-bottom-color",{duration:e.transitions.duration.shorter}),pointerEvents:"none"},"&:hover:not($disabled):not($focused):not($error):before":{borderBottom:"1px solid ".concat(e.palette.text.primary)},"&$disabled:before":{borderBottom:"1px dotted ".concat(n)}},focused:{},disabled:{},adornedStart:{paddingLeft:12},adornedEnd:{paddingRight:12},error:{},multiline:{padding:"27px 12px 10px",boxSizing:"border-box"},input:{padding:"27px 12px 10px"},inputMarginDense:{paddingTop:24,paddingBottom:6},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}};function f(e){var t=e.classes,n=(0,i.default)(e,["classes"]);return a.default.createElement(s.default,(0,o.default)({classes:(0,o.default)({},t,{root:(0,u.default)(t.root,t.underline,{}),underline:null})},n))}t.styles=c,f.propTypes={},s.default.defaultProps={fullWidth:!1,inputComponent:"input",multiline:!1,type:"text"},f.muiName="Input";var d=(0,l.default)(c,{name:"MuiFilledInput"})(f);t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(470))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=(r(n(1)),r(n(11))),s=r(n(146)),l=r(n(471)),c=r(n(12)),f=function(e){var t="light"===e.palette.type?"rgba(0, 0, 0, 0.23)":"rgba(255, 255, 255, 0.23)";return{root:{position:"relative","& $notchedOutline":{borderColor:t},"&:hover:not($disabled):not($focused):not($error) $notchedOutline":{borderColor:e.palette.text.primary,"@media (hover: none)":{borderColor:t}},"&$focused $notchedOutline":{borderColor:e.palette.primary.main,borderWidth:2},"&$error $notchedOutline":{borderColor:e.palette.error.main},"&$disabled $notchedOutline":{borderColor:e.palette.action.disabled}},focused:{},disabled:{},adornedStart:{paddingLeft:14},adornedEnd:{paddingRight:14},error:{},multiline:{padding:"18.5px 14px",boxSizing:"border-box"},notchedOutline:{},input:{padding:"18.5px 14px"},inputMarginDense:{paddingTop:15,paddingBottom:15},inputMultiline:{padding:0},inputAdornedStart:{paddingLeft:0},inputAdornedEnd:{paddingRight:0}}};function d(e){var t=e.classes,n=e.labelWidth,r=e.notched,c=(0,i.default)(e,["classes","labelWidth","notched"]);return a.default.createElement(s.default,(0,o.default)({renderPrefix:function(e){return a.default.createElement(l.default,{className:t.notchedOutline,labelWidth:n,notched:void 0!==r?r:Boolean(e.startAdornment||e.filled||e.focused)})},classes:(0,o.default)({},t,{root:(0,u.default)(t.root,t.underline,{}),notchedOutline:null})},c))}t.styles=f,d.propTypes={},s.default.defaultProps={fullWidth:!1,inputComponent:"input",multiline:!1,type:"text"},d.muiName="Input";var p=(0,c.default)(f,{name:"MuiOutlinedInput"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(4)),i=r(n(3)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=n(36),c=n(28),f=function(e){var t="rtl"===e.direction?"right":"left";return{root:{position:"absolute",bottom:0,right:0,top:-5,left:0,margin:0,padding:0,pointerEvents:"none",borderRadius:e.shape.borderRadius,borderStyle:"solid",borderWidth:1,transition:e.transitions.create(["padding-".concat(t),"border-color","border-width"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},legend:{textAlign:"left",padding:0,lineHeight:"10px",transition:e.transitions.create("width",{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})}}};function d(e){e.children;var t=e.classes,n=e.className,r=e.labelWidth,l=e.notched,f=e.style,d=e.theme,p=(0,a.default)(e,["children","classes","className","labelWidth","notched","style","theme"]),h="rtl"===d.direction?"right":"left",v=r>0?.75*r+8:0;return u.default.createElement("fieldset",(0,i.default)({"aria-hidden":!0,style:(0,i.default)((0,o.default)({},"padding".concat((0,c.capitalize)(h)),8+(l?0:v/2)),f),className:(0,s.default)(t.root,n)},p),u.default.createElement("legend",{className:t.legend,style:{width:l?v:.01}},u.default.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})))}t.styles=f,d.propTypes={};var p=(0,l.withStyles)(f,{name:"MuiPrivateNotchedOutline",withTheme:!0})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(473))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=r(n(1)),l=r(n(11)),c=r(n(12)),f=r(n(474)),d=n(59),p=function(e){return{root:{transformOrigin:"top left"},focused:{},disabled:{},error:{},required:{},formControl:{position:"absolute",left:0,top:0,transform:"translate(0, 24px) scale(1)"},marginDense:{transform:"translate(0, 21px) scale(1)"},shrink:{transform:"translate(0, 1.5px) scale(0.75)",transformOrigin:"top left"},animated:{transition:e.transitions.create(["color","transform"],{duration:e.transitions.duration.shorter,easing:e.transitions.easing.easeOut})},filled:{zIndex:1,pointerEvents:"none",transform:"translate(12px, 22px) scale(1)","&$marginDense":{transform:"translate(12px, 19px) scale(1)"},"&$shrink":{transform:"translate(12px, 10px) scale(0.75)","&$marginDense":{transform:"translate(12px, 7px) scale(0.75)"}}},outlined:{zIndex:1,pointerEvents:"none",transform:"translate(14px, 22px) scale(1)","&$marginDense":{transform:"translate(14px, 17.5px) scale(1)"},"&$shrink":{transform:"translate(14px, -6px) scale(0.75)"}}}};function h(e,t){var n,r=e.children,s=e.classes,c=e.className,p=e.disableAnimation,h=e.FormLabelClasses,v=(e.margin,e.shrink),y=(e.variant,(0,a.default)(e,["children","classes","className","disableAnimation","FormLabelClasses","margin","shrink","variant"])),m=t.muiFormControl,g=v;void 0===g&&m&&(g=m.filled||m.focused||m.adornedStart);var b=(0,d.formControlState)({props:e,context:t,states:["margin","variant"]}),_=(0,l.default)(s.root,(n={},(0,i.default)(n,s.formControl,m),(0,i.default)(n,s.animated,!p),(0,i.default)(n,s.shrink,g),(0,i.default)(n,s.marginDense,"dense"===b.margin),(0,i.default)(n,s.filled,"filled"===b.variant),(0,i.default)(n,s.outlined,"outlined"===b.variant),n),c);return u.default.createElement(f.default,(0,o.default)({"data-shrink":g,className:_,classes:(0,o.default)({focused:s.focused,disabled:s.disabled,error:s.error,required:s.required},h)},y),r)}t.styles=p,h.propTypes={},h.defaultProps={disableAnimation:!1},h.contextTypes={muiFormControl:s.default.object};var v=(0,c.default)(p,{name:"MuiInputLabel"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(475))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=r(n(1)),l=r(n(11)),c=r(n(12)),f=n(59),d=function(e){return{root:{fontFamily:e.typography.fontFamily,color:e.palette.text.secondary,fontSize:e.typography.pxToRem(16),lineHeight:1,padding:0,"&$focused":{color:e.palette.primary["light"===e.palette.type?"dark":"light"]},"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}},focused:{},disabled:{},error:{},filled:{},required:{},asterisk:{"&$error":{color:e.palette.error.main}}}};function p(e,t){var n,r=e.children,s=e.classes,c=e.className,d=e.component,p=(e.disabled,e.error,e.filled,e.focused,e.required,(0,a.default)(e,["children","classes","className","component","disabled","error","filled","focused","required"])),h=(0,f.formControlState)({props:e,context:t,states:["required","focused","disabled","error","filled"]});return u.default.createElement(d,(0,o.default)({className:(0,l.default)(s.root,(n={},(0,i.default)(n,s.disabled,h.disabled),(0,i.default)(n,s.error,h.error),(0,i.default)(n,s.filled,h.filled),(0,i.default)(n,s.focused,h.focused),(0,i.default)(n,s.required,h.required),n),c)},p),r,h.required&&u.default.createElement("span",{className:(0,l.default)(s.asterisk,(0,i.default)({},s.error,h.error))}," *"))}t.styles=d,p.propTypes={},p.defaultProps={component:"label"},p.contextTypes={muiFormControl:s.default.object};var h=(0,c.default)(d,{name:"MuiFormLabel"})(p);t.default=h},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(477))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(6)),s=r(n(8)),l=r(n(9)),c=r(n(7)),f=r(n(10)),d=r(n(0)),p=r(n(1)),h=r(n(11)),v=n(147),y=r(n(12)),m=n(28),g=n(58),b={root:{display:"inline-flex",flexDirection:"column",position:"relative",minWidth:0,padding:0,margin:0,border:0,verticalAlign:"top"},marginNormal:{marginTop:16,marginBottom:8},marginDense:{marginTop:8,marginBottom:4},fullWidth:{width:"100%"}};t.styles=b;var _=function(e){function t(e){var n;(0,u.default)(this,t),(n=(0,s.default)(this,(0,l.default)(t).call(this))).handleFocus=function(){n.setState(function(e){return e.focused?null:{focused:!0}})},n.handleBlur=function(){n.setState(function(e){return e.focused?{focused:!1}:null})},n.handleDirty=function(){n.state.filled||n.setState({filled:!0})},n.handleClean=function(){n.state.filled&&n.setState({filled:!1})},n.state={adornedStart:!1,filled:!1,focused:!1};var r=e.children;return r&&d.default.Children.forEach(r,function(e){if((0,g.isMuiElement)(e,["Input","Select"])){(0,v.isFilled)(e.props,!0)&&(n.state.filled=!0);var t=(0,g.isMuiElement)(e,["Select"])?e.props.input:e;t&&(0,v.isAdornedStart)(t.props)&&(n.state.adornedStart=!0)}}),n}return(0,f.default)(t,e),(0,c.default)(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return e.disabled&&t.focused?{focused:!1}:null}}]),(0,c.default)(t,[{key:"getChildContext",value:function(){var e=this.props,t=e.disabled,n=e.error,r=e.required,o=e.margin,i=e.variant,a=this.state;return{muiFormControl:{adornedStart:a.adornedStart,disabled:t,error:n,filled:a.filled,focused:a.focused,margin:o,onBlur:this.handleBlur,onEmpty:this.handleClean,onFilled:this.handleDirty,onFocus:this.handleFocus,required:r,variant:i}}}},{key:"render",value:function(){var e,t=this.props,n=t.classes,r=t.className,u=t.component,s=(t.disabled,t.error,t.fullWidth),l=t.margin,c=(t.required,t.variant,(0,a.default)(t,["classes","className","component","disabled","error","fullWidth","margin","required","variant"]));return d.default.createElement(u,(0,o.default)({className:(0,h.default)(n.root,(e={},(0,i.default)(e,n["margin".concat((0,m.capitalize)(l))],"none"!==l),(0,i.default)(e,n.fullWidth,s),e),r)},c))}}]),t}(d.default.Component);_.propTypes={},_.defaultProps={component:"div",disabled:!1,error:!1,fullWidth:!1,margin:"none",required:!1,variant:"standard"},_.childContextTypes={muiFormControl:p.default.object};var w=(0,y.default)(b,{name:"MuiFormControl"})(_);t.default=w},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(479))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=r(n(1)),l=r(n(11)),c=r(n(12)),f=n(59),d=function(e){return{root:{color:e.palette.text.secondary,fontFamily:e.typography.fontFamily,fontSize:e.typography.pxToRem(12),textAlign:"left",marginTop:8,lineHeight:"1em",minHeight:"1em",margin:0,"&$disabled":{color:e.palette.text.disabled},"&$error":{color:e.palette.error.main}},error:{},disabled:{},marginDense:{marginTop:4},contained:{margin:"8px 12px 0"},focused:{},filled:{},required:{}}};function p(e,t){var n,r=e.classes,s=e.className,c=e.component,d=(e.disabled,e.error,e.filled,e.focused,e.margin,e.required,e.variant,(0,a.default)(e,["classes","className","component","disabled","error","filled","focused","margin","required","variant"])),p=(0,f.formControlState)({props:e,context:t,states:["variant","margin","disabled","error","filled","focused","required"]});return u.default.createElement(c,(0,o.default)({className:(0,l.default)(r.root,(n={},(0,i.default)(n,r.contained,"filled"===p.variant||"outlined"===p.variant),(0,i.default)(n,r.marginDense,"dense"===p.margin),(0,i.default)(n,r.disabled,p.disabled),(0,i.default)(n,r.error,p.error),(0,i.default)(n,r.filled,p.filled),(0,i.default)(n,r.focused,p.focused),(0,i.default)(n,r.required,p.required),n),s)},d))}t.styles=d,p.propTypes={},p.defaultProps={component:"p"},p.contextTypes={muiFormControl:s.default.object};var h=(0,c.default)(d,{name:"MuiFormHelperText"})(p);t.default=h},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(481))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=r(n(1)),s=r(n(482)),l=r(n(12)),c=r(n(195)),f=r(n(208)),d=r(n(145)),p=n(59),h=n(499),v=r(n(211)),y=h.styles;function m(e,t){var n=e.autoWidth,r=e.children,u=e.classes,l=e.displayEmpty,f=e.IconComponent,d=e.input,h=e.inputProps,y=e.MenuProps,g=e.multiple,b=e.native,_=e.onClose,w=e.onOpen,x=e.open,k=e.renderValue,E=e.SelectDisplayProps,O=(e.variant,(0,i.default)(e,["autoWidth","children","classes","displayEmpty","IconComponent","input","inputProps","MenuProps","multiple","native","onClose","onOpen","open","renderValue","SelectDisplayProps","variant"])),S=b?v.default:s.default,T=(0,p.formControlState)({props:e,context:t,states:["variant"]});return a.default.cloneElement(d,(0,o.default)({inputComponent:S,inputProps:(0,o.default)({children:r,IconComponent:f,variant:T.variant,type:void 0},b?{}:{autoWidth:n,displayEmpty:l,MenuProps:y,multiple:g,onClose:_,onOpen:w,open:x,renderValue:k,SelectDisplayProps:E},h,{classes:h?(0,c.default)({baseClasses:u,newClasses:h.classes,Component:m}):u},d?d.props.inputProps:{})},O))}t.styles=y,m.propTypes={},m.defaultProps={autoWidth:!1,displayEmpty:!1,IconComponent:f.default,input:a.default.createElement(d.default,null),multiple:!1,native:!1},m.contextTypes={muiFormControl:u.default.object},m.muiName="Select";var g=(0,l.default)(h.styles,{name:"MuiSelect"})(m);t.default=g},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(103)),s=r(n(6)),l=r(n(7)),c=r(n(8)),f=r(n(9)),d=r(n(10)),p=r(n(91)),h=r(n(0)),v=(r(n(1)),r(n(11))),y=r(n(76)),m=(r(n(13)),r(n(483))),g=n(147),b=n(58);function _(e,t){return"object"===(0,p.default)(t)&&null!==t?e===t:String(e)===String(t)}var w=function(e){function t(e){var n;return(0,s.default)(this,t),(n=(0,c.default)(this,(0,f.default)(t).call(this))).ignoreNextBlur=!1,n.update=function(e){var t=e.event,r=e.open;n.isOpenControlled?r?n.props.onOpen(t):n.props.onClose(t):n.setState({menuMinWidth:n.props.autoWidth?null:n.displayRef.clientWidth,open:r})},n.handleClick=function(e){n.ignoreNextBlur=!0,n.update({open:!0,event:e})},n.handleClose=function(e){n.update({open:!1,event:e})},n.handleItemClick=function(e){return function(t){n.props.multiple||n.update({open:!1,event:t});var r=n.props,o=r.onChange,i=r.name;if(o){var a;if(n.props.multiple){var s=(a=Array.isArray(n.props.value)?(0,u.default)(n.props.value):[]).indexOf(e.props.value);-1===s?a.push(e.props.value):a.splice(s,1)}else a=e.props.value;t.persist(),t.target={value:a,name:i},o(t,e)}}},n.handleBlur=function(e){if(!0===n.ignoreNextBlur)return e.stopPropagation(),void(n.ignoreNextBlur=!1);if(n.props.onBlur){var t=n.props,r=t.value,o=t.name;e.persist(),e.target={value:r,name:o},n.props.onBlur(e)}},n.handleKeyDown=function(e){n.props.readOnly||-1!==["space","up","down"].indexOf((0,y.default)(e))&&(e.preventDefault(),n.ignoreNextBlur=!0,n.update({open:!0,event:e}))},n.handleDisplayRef=function(e){n.displayRef=e},n.handleInputRef=function(e){var t=n.props.inputRef;if(t){var r={node:e,value:n.props.value,focus:function(){n.displayRef.focus()}};(0,b.setRef)(t,r)}},n.isOpenControlled=void 0!==e.open,n.state={menuMinWidth:null,open:!1},n}return(0,d.default)(t,e),(0,l.default)(t,[{key:"componentDidMount",value:function(){this.isOpenControlled&&this.props.open&&(this.displayRef.focus(),this.forceUpdate()),this.props.autoFocus&&this.displayRef.focus()}},{key:"render",value:function(){var e,t,n=this,r=this.props,u=r.autoWidth,s=r.children,l=r.classes,c=r.className,f=r.disabled,d=r.displayEmpty,p=r.IconComponent,y=(r.inputRef,r.MenuProps),b=void 0===y?{}:y,w=r.multiple,x=r.name,k=(r.onBlur,r.onChange,r.onClose,r.onFocus),E=(r.onOpen,r.open),O=r.readOnly,S=r.renderValue,T=(r.required,r.SelectDisplayProps),C=r.tabIndex,P=r.type,R=void 0===P?"hidden":P,j=r.value,A=r.variant,M=(0,a.default)(r,["autoWidth","children","classes","className","disabled","displayEmpty","IconComponent","inputRef","MenuProps","multiple","name","onBlur","onChange","onClose","onFocus","onOpen","open","readOnly","renderValue","required","SelectDisplayProps","tabIndex","type","value","variant"]),I=this.isOpenControlled&&this.displayRef?E:this.state.open;delete M["aria-invalid"];var N="",D=[],L=!1;((0,g.isFilled)(this.props)||d)&&(S?t=S(j):L=!0);var U=h.default.Children.map(s,function(e){if(!h.default.isValidElement(e))return null;var t;if(w){if(!Array.isArray(j))throw new Error("Material-UI: the `value` property must be an array when using the `Select` component with `multiple`.");(t=j.some(function(t){return _(t,e.props.value)}))&&L&&D.push(e.props.children)}else(t=_(j,e.props.value))&&L&&(N=e.props.children);return h.default.cloneElement(e,{onClick:n.handleItemClick(e),role:"option",selected:t,value:void 0,"data-value":e.props.value})});L&&(t=w?D.join(", "):N);var F,W=this.state.menuMinWidth;return!u&&this.isOpenControlled&&this.displayRef&&(W=this.displayRef.clientWidth),F=void 0!==C?C:f?null:0,h.default.createElement("div",{className:l.root},h.default.createElement("div",(0,o.default)({className:(0,v.default)(l.select,l.selectMenu,(e={},(0,i.default)(e,l.disabled,f),(0,i.default)(e,l.filled,"filled"===A),(0,i.default)(e,l.outlined,"outlined"===A),e),c),ref:this.handleDisplayRef,"aria-pressed":I?"true":"false",tabIndex:F,role:"button","aria-owns":I?"menu-".concat(x||""):void 0,"aria-haspopup":"true",onKeyDown:this.handleKeyDown,onBlur:this.handleBlur,onClick:f||O?null:this.handleClick,onFocus:k},T),t||h.default.createElement("span",{dangerouslySetInnerHTML:{__html:"&#8203;"}})),h.default.createElement("input",(0,o.default)({value:Array.isArray(j)?j.join(","):j,name:x,ref:this.handleInputRef,type:R},M)),h.default.createElement(p,{className:l.icon}),h.default.createElement(m.default,(0,o.default)({id:"menu-".concat(x||""),anchorEl:this.displayRef,open:I,onClose:this.handleClose},b,{MenuListProps:(0,o.default)({role:"listbox"},b.MenuListProps),PaperProps:(0,o.default)({},b.PaperProps,{style:(0,o.default)({minWidth:W},null!=b.PaperProps?b.PaperProps.style:null)})}),U))}}]),t}(h.default.Component);w.propTypes={};var x=w;t.default=x},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(23))),p=r(n(204)),h=r(n(12)),v=r(n(484)),y=r(n(488)),m={vertical:"top",horizontal:"right"},g={vertical:"top",horizontal:"left"},b={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}};t.styles=b;var _=function(e){function t(){var e,n;(0,a.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o)))).getContentAnchorEl=function(){return n.menuListRef&&n.menuListRef.selectedItemRef?d.default.findDOMNode(n.menuListRef.selectedItemRef):d.default.findDOMNode(n.menuListRef).firstChild},n.focus=function(){if(n.menuListRef&&n.menuListRef.selectedItemRef)d.default.findDOMNode(n.menuListRef.selectedItemRef).focus();else{var e=d.default.findDOMNode(n.menuListRef);e&&e.firstChild&&e.firstChild.focus()}},n.handleEntering=function(e){var t=n.props,r=t.disableAutoFocusItem,o=t.theme,i=d.default.findDOMNode(n.menuListRef);if(!0!==r&&n.focus(),i&&e.clientHeight<i.clientHeight&&!i.style.width){var a="".concat((0,p.default)(),"px");i.style["rtl"===o.direction?"paddingLeft":"paddingRight"]=a,i.style.width="calc(100% + ".concat(a,")")}n.props.onEntering&&n.props.onEntering(e)},n.handleListKeyDown=function(e,t){"tab"===t&&(e.preventDefault(),n.props.onClose&&n.props.onClose(e))},n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.open&&!0!==this.props.disableAutoFocusItem&&this.focus()}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.classes,a=(t.disableAutoFocusItem,t.MenuListProps),u=(t.onEntering,t.PaperProps),s=void 0===u?{}:u,l=t.PopoverClasses,c=t.theme,d=(0,i.default)(t,["children","classes","disableAutoFocusItem","MenuListProps","onEntering","PaperProps","PopoverClasses","theme"]);return f.default.createElement(v.default,(0,o.default)({getContentAnchorEl:this.getContentAnchorEl,classes:l,onEntering:this.handleEntering,anchorOrigin:"rtl"===c.direction?m:g,transformOrigin:"rtl"===c.direction?m:g,PaperProps:(0,o.default)({},s,{classes:(0,o.default)({},s.classes,{root:r.paper})})},d),f.default.createElement(y.default,(0,o.default)({onKeyDown:this.handleListKeyDown},a,{ref:function(t){e.menuListRef=t}}),n))}}]),t}(f.default.Component);_.propTypes={},_.defaultProps={disableAutoFocusItem:!1,transitionDuration:"auto"};var w=(0,h.default)(b,{name:"MuiMenu",withTheme:!0})(_);t.default=w},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(485))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(23))),p=(r(n(13)),r(n(142))),h=r(n(141)),v=r(n(40)),y=r(n(97)),m=r(n(12)),g=r(n(200)),b=r(n(486)),_=r(n(138));function w(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function x(e,t){var n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function k(e){return[e.horizontal,e.vertical].map(function(e){return"number"==typeof e?"".concat(e,"px"):e}).join(" ")}function E(e){return"function"==typeof e?e():e}var O={paper:{position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:"none"}};t.styles=O;var S=function(e){function t(){var e;return(0,a.default)(this,t),(e=(0,s.default)(this,(0,l.default)(t).call(this))).handleGetOffsetTop=w,e.handleGetOffsetLeft=x,e.componentWillUnmount=function(){e.handleResize.clear()},e.setPositioningStyles=function(t){var n=e.getPositioningStyle(t);null!==n.top&&(t.style.top=n.top),null!==n.left&&(t.style.left=n.left),t.style.transformOrigin=n.transformOrigin},e.getPositioningStyle=function(t){var n=e.props,r=n.anchorEl,o=n.anchorReference,i=n.marginThreshold,a=e.getContentAnchorOffset(t),u={width:t.offsetWidth,height:t.offsetHeight},s=e.getTransformOrigin(u,a);if("none"===o)return{top:null,left:null,transformOrigin:k(s)};var l=e.getAnchorOffset(a),c=l.top-s.vertical,f=l.left-s.horizontal,d=c+u.height,p=f+u.width,h=(0,y.default)(E(r)),v=h.innerHeight-i,m=h.innerWidth-i;if(c<i){var g=c-i;c-=g,s.vertical+=g}else if(d>v){var b=d-v;c-=b,s.vertical+=b}if(f<i){var _=f-i;f-=_,s.horizontal+=_}else if(p>m){var w=p-m;f-=w,s.horizontal+=w}return{top:"".concat(c,"px"),left:"".concat(f,"px"),transformOrigin:k(s)}},e.handleEntering=function(t){e.props.onEntering&&e.props.onEntering(t),e.setPositioningStyles(t)},"undefined"!=typeof window&&(e.handleResize=(0,p.default)(function(){e.setPositioningStyles(e.paperRef)},166)),e}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.props.action&&this.props.action({updatePosition:this.handleResize})}},{key:"getAnchorOffset",value:function(e){var t=this.props,n=t.anchorEl,r=t.anchorOrigin,o=t.anchorReference,i=t.anchorPosition;if("anchorPosition"===o)return i;var a=(E(n)||(0,v.default)(this.paperRef).body).getBoundingClientRect(),u=0===e?r.vertical:"center";return{top:a.top+this.handleGetOffsetTop(a,u),left:a.left+this.handleGetOffsetLeft(a,r.horizontal)}}},{key:"getContentAnchorOffset",value:function(e){var t=this.props,n=t.getContentAnchorEl,r=t.anchorReference,o=0;if(n&&"anchorEl"===r){var i=n(e);if(i&&e.contains(i)){var a=function(e,t){for(var n=t,r=0;n&&n!==e;)r+=(n=n.parentNode).scrollTop;return r}(e,i);o=i.offsetTop+i.clientHeight/2-a||0}}return o}},{key:"getTransformOrigin",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=this.props.transformOrigin;return{vertical:this.handleGetOffsetTop(e,n.vertical)+t,horizontal:this.handleGetOffsetLeft(e,n.horizontal)}}},{key:"render",value:function(){var e=this,t=this.props,n=(t.action,t.anchorEl),r=(t.anchorOrigin,t.anchorPosition,t.anchorReference,t.children),a=t.classes,u=t.container,s=t.elevation,l=(t.getContentAnchorEl,t.marginThreshold,t.ModalClasses),c=t.onEnter,p=t.onEntered,y=(t.onEntering,t.onExit),m=t.onExited,b=t.onExiting,w=t.open,x=t.PaperProps,k=t.role,O=(t.transformOrigin,t.TransitionComponent),S=t.transitionDuration,T=t.TransitionProps,C=(0,i.default)(t,["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","classes","container","elevation","getContentAnchorEl","marginThreshold","ModalClasses","onEnter","onEntered","onEntering","onExit","onExited","onExiting","open","PaperProps","role","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"]),P=S;"auto"!==S||O.muiSupportAuto||(P=void 0);var R=u||(n?(0,v.default)(E(n)).body:void 0);return f.default.createElement(g.default,(0,o.default)({classes:l,container:R,open:w,BackdropProps:{invisible:!0}},C),f.default.createElement(O,(0,o.default)({appear:!0,in:w,onEnter:c,onEntered:p,onEntering:this.handleEntering,onExit:y,onExited:m,onExiting:b,role:k,timeout:P},T),f.default.createElement(_.default,(0,o.default)({className:a.paper,elevation:s,ref:function(t){e.paperRef=d.default.findDOMNode(t)}},x),f.default.createElement(h.default,{target:"window",onResize:this.handleResize}),r)))}}]),t}(f.default.Component);S.propTypes={},S.defaultProps={anchorReference:"anchorEl",anchorOrigin:{vertical:"top",horizontal:"left"},elevation:8,marginThreshold:16,transformOrigin:{vertical:"top",horizontal:"left"},TransitionComponent:b.default,transitionDuration:"auto"};var T=(0,m.default)(O,{name:"MuiPopover"})(S);t.default=T},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(487))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(98))),p=r(n(99)),h=n(140);function v(e){return"scale(".concat(e,", ").concat(Math.pow(e,2),")")}var y={entering:{opacity:1,transform:v(1)},entered:{opacity:1,transform:"".concat(v(1)," translateZ(0)")}},m=function(e){function t(){var e,n;(0,a.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o)))).handleEnter=function(e){var t=n.props,r=t.theme,o=t.timeout;(0,h.reflow)(e);var i=(0,h.getTransitionProps)(n.props,{mode:"enter"}),a=i.duration,u=i.delay,s=0;"auto"===o?(s=r.transitions.getAutoHeightDuration(e.clientHeight),n.autoTimeout=s):s=a,e.style.transition=[r.transitions.create("opacity",{duration:s,delay:u}),r.transitions.create("transform",{duration:.666*s,delay:u})].join(","),n.props.onEnter&&n.props.onEnter(e)},n.handleExit=function(e){var t=n.props,r=t.theme,o=t.timeout,i=0,a=(0,h.getTransitionProps)(n.props,{mode:"exit"}),u=a.duration,s=a.delay;"auto"===o?(i=r.transitions.getAutoHeightDuration(e.clientHeight),n.autoTimeout=i):i=u,e.style.transition=[r.transitions.create("opacity",{duration:i,delay:s}),r.transitions.create("transform",{duration:.666*i,delay:s||.333*i})].join(","),e.style.opacity="0",e.style.transform=v(.75),n.props.onExit&&n.props.onExit(e)},n.addEndListener=function(e,t){"auto"===n.props.timeout&&(n.timer=setTimeout(t,n.autoTimeout||0))},n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentWillUnmount",value:function(){clearTimeout(this.timer)}},{key:"render",value:function(){var e=this.props,t=e.children,n=(e.onEnter,e.onExit,e.style),r=(e.theme,e.timeout),a=(0,i.default)(e,["children","onEnter","onExit","style","theme","timeout"]),u=(0,o.default)({},n,f.default.isValidElement(t)?t.props.style:{});return f.default.createElement(d.default,(0,o.default)({appear:!0,onEnter:this.handleEnter,onExit:this.handleExit,addEndListener:this.addEndListener,timeout:"auto"===r?null:r},a),function(e,n){return f.default.cloneElement(t,(0,o.default)({style:(0,o.default)({opacity:0,transform:v(.75)},y[e],u)},n))})}}]),t}(f.default.Component);m.propTypes={},m.defaultProps={timeout:"auto"},m.muiSupportAuto=!0;var g=(0,p.default)()(m);t.default=g},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(489))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(6)),u=r(n(7)),s=r(n(8)),l=r(n(9)),c=r(n(10)),f=r(n(0)),d=(r(n(1)),r(n(23))),p=r(n(76)),h=(r(n(13)),r(n(40))),v=r(n(151)),y=function(e){function t(){var e,n;(0,a.default)(this,t);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return(n=(0,s.default)(this,(e=(0,l.default)(t)).call.apply(e,[this].concat(o)))).state={currentTabIndex:null},n.handleBlur=function(e){n.blurTimer=setTimeout(function(){if(n.listRef){var e=n.listRef,t=(0,h.default)(e).activeElement;e.contains(t)||n.resetTabIndex()}},30),n.props.onBlur&&n.props.onBlur(e)},n.handleKeyDown=function(e){var t=n.listRef,r=(0,p.default)(e),o=(0,h.default)(t).activeElement;"up"!==r&&"down"!==r||o&&(!o||t.contains(o))?"down"===r?(e.preventDefault(),o.nextElementSibling&&o.nextElementSibling.focus()):"up"===r&&(e.preventDefault(),o.previousElementSibling&&o.previousElementSibling.focus()):n.selectedItemRef?n.selectedItemRef.focus():t.firstChild.focus(),n.props.onKeyDown&&n.props.onKeyDown(e,r)},n.handleItemFocus=function(e){var t=n.listRef;if(t)for(var r=0;r<t.children.length;r+=1)if(t.children[r]===e.currentTarget){n.setTabIndex(r);break}},n}return(0,c.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.resetTabIndex()}},{key:"componentWillUnmount",value:function(){clearTimeout(this.blurTimer)}},{key:"setTabIndex",value:function(e){this.setState({currentTabIndex:e})}},{key:"focus",value:function(){var e=this.state.currentTabIndex,t=this.listRef;t&&t.children&&t.firstChild&&(e&&e>=0?t.children[e].focus():t.firstChild.focus())}},{key:"resetTabIndex",value:function(){for(var e=this.listRef,t=(0,h.default)(e).activeElement,n=[],r=0;r<e.children.length;r+=1)n.push(e.children[r]);var o=n.indexOf(t);return-1!==o?this.setTabIndex(o):this.selectedItemRef?this.setTabIndex(n.indexOf(this.selectedItemRef)):this.setTabIndex(0)}},{key:"render",value:function(){var e=this,t=this.props,n=t.children,r=t.className,a=(t.onBlur,t.onKeyDown,(0,i.default)(t,["children","className","onBlur","onKeyDown"]));return f.default.createElement(v.default,(0,o.default)({role:"menu",ref:function(t){e.listRef=d.default.findDOMNode(t)},className:r,onKeyDown:this.handleKeyDown,onBlur:this.handleBlur},a),f.default.Children.map(n,function(t,n){return f.default.isValidElement(t)?f.default.cloneElement(t,{tabIndex:n===e.state.currentTabIndex?0:-1,ref:t.props.selected?function(t){e.selectedItemRef=d.default.findDOMNode(t)}:void 0,onFocus:e.handleItemFocus}):null}))}}]),t}(f.default.Component);y.propTypes={};var m=y;t.default=m},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=void 0;var o=r(n(491)),i=r(n(495)),a=(r(n(209)),r(n(210)),function(e){return(0,o.default)(function(e,t){return!(0,i.default)(e,t)})(e)});t.default=a},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=void 0;var o=r(n(492)),i=n(0),a=(r(n(209)),r(n(210)),function(e){return function(t){var n=(0,i.createFactory)(t);return function(t){function r(){return t.apply(this,arguments)||this}(0,o.default)(r,t);var i=r.prototype;return i.shouldComponentUpdate=function(t){return e(this.props,t)},i.render=function(){return n(this.props)},r}(i.Component)}});t.default=a},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e,t){return function(n){return n[e]=t,n}};t.default=r},function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0};t.default=r},function(e,t,n){"use strict";var r=n(2);t.__esModule=!0,t.default=void 0;var o=r(n(496)).default;t.default=o},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return o.default}});var o=r(n(498))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(4)),a=r(n(5)),u=r(n(0)),s=(r(n(1)),r(n(11))),l=r(n(12)),c=n(28),f=function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:24,transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:20},fontSizeLarge:{fontSize:35}}};function d(e){var t,n=e.children,r=e.classes,l=e.className,f=e.color,d=e.component,p=e.fontSize,h=e.nativeColor,v=e.titleAccess,y=e.viewBox,m=(0,a.default)(e,["children","classes","className","color","component","fontSize","nativeColor","titleAccess","viewBox"]);return u.default.createElement(d,(0,o.default)({className:(0,s.default)(r.root,(t={},(0,i.default)(t,r["color".concat((0,c.capitalize)(f))],"inherit"!==f),(0,i.default)(t,r["fontSize".concat((0,c.capitalize)(p))],"default"!==p),t),l),focusable:"false",viewBox:y,color:h,"aria-hidden":v?"false":"true",role:v?"img":"presentation"},m),n,v?u.default.createElement("title",null,v):null)}t.styles=f,d.propTypes={},d.defaultProps={color:"inherit",component:"svg",fontSize:"default",viewBox:"0 0 24 24"},d.muiName="SvgIcon";var p=(0,l.default)(f,{name:"MuiSvgIcon"})(d);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.styles=void 0;var o=r(n(3)),i=r(n(5)),a=r(n(0)),u=r(n(1)),s=r(n(211)),l=r(n(12)),c=n(59),f=r(n(208)),d=r(n(145)),p=function(e){return{root:{position:"relative",width:"100%"},select:{"-moz-appearance":"none","-webkit-appearance":"none",userSelect:"none",paddingRight:32,borderRadius:0,height:"1.1875em",width:"calc(100% - 32px)",minWidth:16,cursor:"pointer","&:focus":{background:"light"===e.palette.type?"rgba(0, 0, 0, 0.05)":"rgba(255, 255, 255, 0.05)",borderRadius:0},"&::-ms-expand":{display:"none"},"&$disabled":{cursor:"default"}},filled:{width:"calc(100% - 44px)"},outlined:{width:"calc(100% - 46px)",borderRadius:e.shape.borderRadius},selectMenu:{width:"auto",height:"auto",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden",minHeight:"1.1875em"},disabled:{},icon:{position:"absolute",right:0,top:"calc(50% - 12px)",color:e.palette.action.active,"pointer-events":"none"}}};function h(e,t){var n=e.children,r=e.classes,u=e.IconComponent,l=e.input,f=e.inputProps,d=(e.variant,(0,i.default)(e,["children","classes","IconComponent","input","inputProps","variant"])),p=(0,c.formControlState)({props:e,context:t,states:["variant"]});return a.default.cloneElement(l,(0,o.default)({inputComponent:s.default,inputProps:(0,o.default)({children:n,classes:r,IconComponent:u,variant:p.variant,type:void 0},f,l?l.props.inputProps:{})},d))}t.styles=p,h.propTypes={},h.defaultProps={IconComponent:f.default,input:a.default.createElement(d.default,null)},h.contextTypes={muiFormControl:u.default.object},h.muiName="Select";var v=(0,l.default)(p,{name:"MuiNativeSelect"})(h);t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n(6)),i=r(n(7)),a=r(n(8)),u=r(n(9)),s=r(n(10)),l=r(n(0)),c=(r(n(1)),n(36)),f=(n(35),function(e){function t(){return(0,o.default)(this,t),(0,a.default)(this,(0,u.default)(t).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"render",value:function(){return this.props.children}}]),t}(l.default.Component));f.propTypes={},f.propTypes={},f.defaultProps={children:null};var d=(0,c.withStyles)(function(e){return{"@global":{html:{WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box"},"*, *::before, *::after":{boxSizing:"inherit"},body:{margin:0,backgroundColor:e.palette.background.default,"@media print":{backgroundColor:e.palette.common.white}}}}},{name:"MuiCssBaseline"})(f);t.default=d}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXJuaW5nL3dhcm5pbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdGFnZ2VkVGVtcGxhdGVMaXRlcmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC93cmFwTWFwVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21lcmdlUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9lcy9yZWR1eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1yZWFjdC9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9HcmlkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvY29uZmlnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9va3RhLWF1dGgtanMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyRG9jdW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9nZW5lcmF0ZVBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYXBpLW1pZGRsZXdhcmUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnL2FwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVDZWxsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvZXJyb3JzL0F1dGhTZGtFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL1N0eWxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHMvcmVhY3RIZWxwZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvSW5wdXRCYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UeXBvZ3JhcGh5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ub29sYmFyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xL3EuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvaHR0cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9SdWxlTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMva2V5Y29kZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy9saXN0L3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlL2FwcC9kaXJlY3RvcnkvdXNlcnMvdXNlci9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS9hcHAvZGlyZWN0b3J5L3VzZXJzL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlL2FwcC9kaXJlY3RvcnkvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvYXBwL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9tZW51LmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS9jb250ZXh0L3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlL2F1dGgvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvcm9vdFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvbGliL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy90b0Nzc1ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2NyZWF0ZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy93aXRoVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlL1RhYmxlbHZsMkNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9hcGkvZGlyZWN0b3J5LmpzIiwid2VicGFjazovLy8uL3NyYy9zdGF0ZS9hdXRoL2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hcGktbWlkZGxld2FyZS9saWIvUlNBQS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hcGktbWlkZGxld2FyZS9saWIvZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9zdG9yYWdlVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1yZWFjdC9kaXN0L3dpdGhBdXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL3RvQ3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3NoZWV0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9saWIvcHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlTXVpVGhlbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvdGhlbWVMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUGFwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3V0aWxzL2NoYWluUHJvcFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS90cmFuc2l0aW9ucy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvZGlzdC9yZWFjdC1ldmVudC1saXN0ZW5lci5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlYm91bmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0L0xpc3RDb250ZXh0LmpzIiwid2VicGFjazovLy8uL3NyYy91aS9zdHlsZXMvYmFzZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0lucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0lucHV0QmFzZS91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvY29udGV4dC9zZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xheW91dC9OYXZpZ2F0b3IuanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xheW91dC9TaWRlTWVudS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xheW91dC9QYWdlSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvbGF5b3V0L0JvZHkuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9sYXlvdXQvTGF5b3V0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvY29tbW9uL0xvYWRlci5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL2xheW91dC9BdXRoZW50aWNhdGlvbi5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL3VpL3N0eWxlcy90aGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvY29tbW9uL0Vycm9yLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy9saXN0L3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL2RpcmVjdG9yeS91c2VyL1VzZXJMaXN0LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL2RpcmVjdG9yeS91c2VyL1VzZXJGb3JtLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL2RpcmVjdG9yeS91c2VyL05ld1VzZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9sYXlvdXQvbWFpbi9Db250ZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvY29udGV4dC9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL3NyYy91aS9sYXlvdXQvbWFpbi9Gb290ZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9jb21tb24vY29udHJvbHMvQnV0dG9uLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy91c2VyL3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvYXBwL2RpcmVjdG9yeS91c2VyL0VkaXRVc2VyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvbGF5b3V0L3JvdXRlcy9EaXJlY3RvcnlSb3V0ZXMuanN4Iiwid2VicGFjazovLy8uL3NyYy91aS9sYXlvdXQvQXBwLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy9saXN0L2FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlL2FwcC9kaXJlY3RvcnkvdXNlcnMvdXNlci9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXRlL2NvbmZpZ3VyZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3R5bGlzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWVtb2l6ZS1vbmUvZGlzdC9tZW1vaXplLW9uZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlUm93L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UZXh0RmllbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC1hcGktbWlkZGxld2FyZS9saWIvdmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgtYXBpLW1pZGRsZXdhcmUvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtcmVhY3QvZGlzdC9BdXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9va3RhLWF1dGgtanMvbGliL29hdXRoVXRpbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9zdG9yYWdlQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZXhhY3RQcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvdXRpbHMvZ2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9wb255ZmlsbEdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9TaGVldHNSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9pc09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvbGlua1J1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU3R5bGVTaGVldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2RhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy91dGlsL2NhbWVsaXplU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaW5ET00uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTW9kYWwvbWFuYWdlQXJpYUhpZGRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZS9UYWJsZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2ludGVybmFsL3N2Zy1pY29ucy9BcnJvd0Ryb3BEb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2Uvc2V0RGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS93cmFwRGlzcGxheU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWR1eC10aHVuay9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3RhdGUvbWlkZGxld2FyZS9odHRwQXV0aEluamVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsaXMtcnVsZS1zaGVldC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRHJhd2VyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0U3ViaGVhZGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1JY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0SXRlbVRleHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NpcmN1bGFyUHJvZ3Jlc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVIZWFkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUJvZHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Nzc0Jhc2VsaW5lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2lzLXByb3AtdmFsaWQvZGlzdC9pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanN4Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvbGliL2NyZWF0ZUFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9saWIvQ29ubmVjdGVkUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvbGliL3JlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvbGliL21pZGRsZXdhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXIvbGliL3NlbGVjdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29ubmVjdGVkLXJlYWN0LXJvdXRlci9saWIvc3RydWN0dXJlL3BsYWluL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb25uZWN0ZWQtcmVhY3Qtcm91dGVyL2xpYi9zdHJ1Y3R1cmUvcGxhaW4vZ2V0SW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9pcy1pdGVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2lzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmlzLWl0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNwbGFpbm9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUtbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4LWFwaS1taWRkbGV3YXJlL2xpYi9taWRkbGV3YXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9va3RhLXJlYWN0L2Rpc3QvU2VjdXJpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9jb25maWd1cmF0aW9uLXZhbGlkYXRpb24vZGlzdC9saWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9yZXF3ZXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9va3RhLWF1dGgtanMvcmVxd2VzdC9yZXF3ZXN0UmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVxd2VzdC9yZXF3ZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9Ab2t0YS9va3RhLWF1dGgtanMvbGliL2NsaWVudEJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvdmVuZG9yL3BvbHlmaWxscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQmFzZTY0L2Jhc2U2NC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanMtY29va2llL3NyYy9qcy5jb29raWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvZXJyb3JzL0F1dGhBcGlFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi90eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9lcnJvcnMvQXV0aFBvbGxTdG9wRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvc2Vzc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi90b2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1hdXRoLWpzL2xpYi9jcnlwdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvZXJyb3JzL09BdXRoRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtYXV0aC1qcy9saWIvVG9rZW5NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWVtaXR0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtcmVhY3QvZGlzdC9wYWNrYWdlSW5mby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG9rdGEvb2t0YS1yZWFjdC9kaXN0L0ltcGxpY2l0Q2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtcmVhY3QvZGlzdC9TZWN1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bva3RhL29rdGEtcmVhY3QvZGlzdC9TZWN1cmVSb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyL0FwcEJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2dldER5bmFtaWNTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvU2hlZXRzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9jbG9uZVN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3Mvbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3V0aWxzL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi91dGlscy9tb2R1bGVJZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9Kc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvUGx1Z2luc1JlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3BsdWdpbnMvcnVsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvU2ltcGxlUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9LZXlmcmFtZXNSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3J1bGVzL0NvbmRpdGlvbmFsUnVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzL2xpYi9ydWxlcy9Gb250RmFjZVJ1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcnVsZXMvVmlld3BvcnRSdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3BsdWdpbnMvb2JzZXJ2YWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcGx1Z2lucy9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy9saWIvcmVuZGVyZXJzL0RvbVJlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MvbGliL3JlbmRlcmVycy9WaXJ0dWFsUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9yZWFjdEpzc0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pzcy1nbG9iYWwvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtbmVzdGVkL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLW5lc3RlZC9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtY2FtZWwtY2FzZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h5cGhlbmF0ZS1zdHlsZS1uYW1lL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtZGVmYXVsdC11bml0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLWRlZmF1bHQtdW5pdC9saWIvZGVmYXVsdFVuaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3MtdmVuZG9yLXByZWZpeGVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL3N1cHBvcnRlZC1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLXZlbmRvci9saWIvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvbGliL3N1cHBvcnRlZC12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanNzLXByb3BzLXNvcnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvbXVsdGlLZXlTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcGxhaW4tb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc29iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZU1peGlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVBhbGV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9pbmRpZ28uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9waW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9jb2xvcnMvZ3JleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL3JlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9zcGFjaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvekluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvZ2V0U3R5bGVzQ3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzL2dldFRoZW1lUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BhcGVyL1BhcGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ljb24vSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uL0J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9CdXR0b25CYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Ob1Nzci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTm9Tc3IvTm9Tc3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvZm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9CdXR0b25CYXNlL1RvdWNoUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbkJhc2UvUmlwcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQnV0dG9uQmFzZS9jcmVhdGVSaXBwbGVIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMvTXVpVGhlbWVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icmNhc3QvZGlzdC9icmNhc3QuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Sb290UmVmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Sb290UmVmL1Jvb3RSZWYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BvcnRhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvUG9ydGFsL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvc3R5bGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvY2FtZWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlU3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL3V0aWwvaHlwaGVuYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9nZXRDb21wdXRlZFN0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9zdHlsZS9yZW1vdmVTdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvdHJhbnNpdGlvbi9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy90cmFuc2l0aW9uL2lzVHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Nb2RhbC9pc092ZXJmbG93aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20taGVscGVycy9xdWVyeS9pc1dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvQmFja2Ryb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9GYWRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9GYWRlL0ZhZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NsaWRlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TbGlkZS9TbGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZXZlbnQtbGlzdGVuZXIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWV2ZW50LWxpc3RlbmVyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1ldmVudC1saXN0ZW5lci9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXIvTGlzdFN1YmhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW0vTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtL01lcmdlTGlzdENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtSWNvbi9MaXN0SXRlbUljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtVGV4dC9MaXN0SXRlbVRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHkvVHlwb2dyYXBoeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3JpZC9HcmlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS91dGlscy9yZXF1aXJlUHJvcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0NpcmN1bGFyUHJvZ3Jlc3MvQ2lyY3VsYXJQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdWkvc3R5bGVzL2Jhc2UuY3NzP2JhODkiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9UYWJsZS9UYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVIZWFkL1RhYmxlSGVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvVGFibGVSb3cvVGFibGVSb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQ2VsbC9UYWJsZUNlbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlQm9keS9UYWJsZUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1RleHRGaWVsZC9UZXh0RmllbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0lucHV0L0lucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dEJhc2UvVGV4dGFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0ZpbGxlZElucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9GaWxsZWRJbnB1dC9GaWxsZWRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvT3V0bGluZWRJbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvT3V0bGluZWRJbnB1dC9PdXRsaW5lZElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9PdXRsaW5lZElucHV0L05vdGNoZWRPdXRsaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dExhYmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9JbnB1dExhYmVsL0lucHV0TGFiZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1MYWJlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUxhYmVsL0Zvcm1MYWJlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUNvbnRyb2wvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Zvcm1Db250cm9sL0Zvcm1Db250cm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9Gb3JtSGVscGVyVGV4dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvRm9ybUhlbHBlclRleHQvRm9ybUhlbHBlclRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1NlbGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU2VsZWN0L1NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvU2VsZWN0L1NlbGVjdElucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9NZW51L01lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BvcG92ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL1BvcG92ZXIvUG9wb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3Jvdy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvR3Jvdy9Hcm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9NZW51TGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvTWVudUxpc3QvTWVudUxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWNvbXBvc2Uvc2hvdWxkVXBkYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9zZXRTdGF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9nZXREaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL0Nzc0Jhc2VsaW5lL0Nzc0Jhc2VsaW5lLmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90Q3VycmVudE1vZHVsZURhdGEiLCJob3RDdXJyZW50UGFyZW50cyIsImhvdEN1cnJlbnRQYXJlbnRzVGVtcCIsImhvdENyZWF0ZVJlcXVpcmUiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZm4iLCJyZXF1ZXN0IiwiaG90IiwiYWN0aXZlIiwicGFyZW50cyIsImluZGV4T2YiLCJwdXNoIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIk9iamVjdEZhY3RvcnkiLCJuYW1lIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsInZhbHVlIiwiZGVmaW5lUHJvcGVydHkiLCJlIiwiaG90U3RhdHVzIiwiaG90U2V0U3RhdHVzIiwidGhlbiIsImZpbmlzaENodW5rTG9hZGluZyIsImVyciIsImhvdFdhaXRpbmdGaWxlc01hcCIsImhvdEVuc3VyZVVwZGF0ZUNodW5rIiwidCIsIm1vZGUiLCJob3RTdGF0dXNIYW5kbGVycyIsIm5ld1N0YXR1cyIsImkiLCJsZW5ndGgiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZU5ld0hhc2giLCJ0b01vZHVsZUlkIiwiaWQiLCJob3RDaGVjayIsImFwcGx5IiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGF0YSIsImRpc3Bvc2VIYW5kbGVycyIsIl9kaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsInNwbGljZSIsIm1vZHVsZXMiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImV4cG9ydHMiLCJsIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJjaGVjayIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiaG90Q3JlYXRlTW9kdWxlIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJvYmoiLCJkZWZhdWx0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJ0aGlzIiwid3JpdGFibGUiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiaGFzT3duIiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJhcmciLCJhcmdUeXBlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwic2hlZXRzTWFuYWdlciIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfZXh0ZW5kczMiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJfdXRpbHMiLCJfanNzIiwiX3JlYWN0SnNzQ29udGV4dCIsIl9qc3NQcmVzZXQiLCJfbWVyZ2VDbGFzc2VzIiwiX211bHRpS2V5U3RvcmUiLCJfY3JlYXRlTXVpVGhlbWUiLCJfdGhlbWVMaXN0ZW5lciIsIl9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSIsIl9nZXRTdHlsZXNDcmVhdG9yIiwiX2dldFRoZW1lUHJvcHMiLCJqc3MiLCJnZW5lcmF0ZUNsYXNzTmFtZSIsImluZGV4Q291bnRlciIsIk1hcCIsImRlZmF1bHRUaGVtZSIsIm5vb3BUaGVtZSIsImdldERlZmF1bHRUaGVtZSIsInR5cG9ncmFwaHkiLCJzdXBwcmVzc1dhcm5pbmciLCJwb255ZmlsbEdsb2JhbCIsIl9fTVVJX0RFRkFVTFRfVEhFTUVfXyIsIl9fTVVJX1NUWUxFU19fIiwid2l0aFN0eWxlcyIsInN0eWxlc09yQ3JlYXRvciIsIkNvbXBvbmVudCIsIl9leHRlbmRzMiIsIl9vcHRpb25zJHdpdGhUaGVtZSIsIndpdGhUaGVtZSIsIl9vcHRpb25zJGZsaXAiLCJmbGlwIiwic3R5bGVTaGVldE9wdGlvbnMiLCJzdHlsZXNDcmVhdG9yIiwibGlzdGVuVG9UaGVtZSIsInRoZW1pbmdFbmFibGVkIiwiaW5kZXgiLCJXaXRoU3R5bGVzIiwiX1JlYWN0JENvbXBvbmVudCIsImNvbnRleHQiLCJfdGhpcyIsInVuc3Vic2NyaWJlSWQiLCJtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucyIsInNoZWV0c0NhY2hlIiwiZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24iLCJzdHlsZXNDcmVhdG9yU2F2ZWQiLCJzaGVldE9wdGlvbnMiLCJ0aGVtZSIsImluaXRpYWwiLCJhdHRhY2giLCJjYWNoZUNsYXNzZXMiLCJsYXN0UHJvcCIsImxhc3RKU1MiLCJfdGhpczIiLCJzdWJzY3JpYmUiLCJvbGRUaGVtZSIsInNldFN0YXRlIiwiZGV0YWNoIiwidW5zdWJzY3JpYmUiLCJnZW5lcmF0ZSIsInNoZWV0TWFuYWdlciIsInNoZWV0IiwiYmFzZUNsYXNzZXMiLCJuZXdDbGFzc2VzIiwicmVmcyIsImNyZWF0ZVNoZWV0Iiwic2hlZXRzUmVnaXN0cnkiLCJhZGQiLCJzdHlsZXMiLCJtZXRhIiwiY3JlYXRlU3R5bGVTaGVldCIsImNsYXNzTmFtZVByZWZpeCIsImRpcmVjdGlvbiIsImxpbmsiLCJkaXNwbGF5TmFtZSIsImRlbGV0ZSIsInJlbW92ZVN0eWxlU2hlZXQiLCJyZW1vdmUiLCJfdGhpcyRwcm9wcyIsImlubmVyUmVmIiwib3RoZXIiLCJtb3JlIiwiZ2V0Q2xhc3NlcyIsInJlZiIsInByb3BUeXBlcyIsImNvbnRleHRUeXBlcyIsIl9kZWZhdWx0Iiwid2FybmluZyIsInN0cmluZ3MiLCJyYXciLCJmcmVlemUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvY2VzcyIsIl9fd2VicGFja19leHBvcnRzX18iLCJjc3MiLCJzdHlsaXNfc3R5bGlzX21pbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic3R5bGlzX3N0eWxpc19taW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0Iiwic3R5bGlzX3J1bGVfc2hlZXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInN0eWxpc19ydWxlX3NoZWV0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJfZW1vdGlvbl91bml0bGVzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfaXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm1lbW9pemVfb25lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfZW1vdGlvbl9pc19wcm9wX3ZhbGlkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJpbnRlcmxlYXZlIiwiaW50ZXJwb2xhdGlvbnMiLCJsZW4iLCJpdGVyYXRvciIsImNsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQ2xhc3MiLCJpbmhlcml0cyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiaXNQbGFpbk9iamVjdCIsIngiLCJFTVBUWV9BUlJBWSIsIkVNUFRZX09CSkVDVCIsImlzRnVuY3Rpb24iLCJ0ZXN0IiwiZ2V0Q29tcG9uZW50TmFtZSIsImlzU3R5bGVkQ29tcG9uZW50Iiwic3R5bGVkQ29tcG9uZW50SWQiLCJTQ19BVFRSIiwiZW52IiwiSVNfQlJPV1NFUiIsIkRJU0FCTEVfU1BFRURZIiwiU0NfRElTQUJMRV9TUEVFRFkiLCJTdHlsZWRDb21wb25lbnRzRXJyb3IiLCJfRXJyb3IiLCJjb2RlIiwiX2xlbiIsIl9rZXkiLCJTQ19DT01QT05FTlRfSUQiLCJleHRyYWN0Q29tcHMiLCJtYXliZUNTUyIsImV4aXN0aW5nQ29tcG9uZW50cyIsInJlcGxhY2UiLCJtYXRjaCIsImNvbXBvbmVudElkIiwibWF0Y2hJbmRleCIsIl9yZWYiLCJuZXh0Q29tcCIsImNzc0Zyb21ET00iLCJDT01NRU5UX1JFR0VYIiwic3R5bGlzU3BsaXR0ZXIiLCJnbG9iYWwiLCJjYXNjYWRlIiwia2V5ZnJhbWUiLCJwcmVmaXgiLCJjb21wcmVzcyIsInNlbWljb2xvbiIsInN0eWxpcyIsInBhcnNpbmdSdWxlcyIsInJldHVyblJ1bGVzUGx1Z2luIiwicGFyc2VkUnVsZXMiLCJwYXJzZVJ1bGVzUGx1Z2luIiwicnVsZSIsIl9jb21wb25lbnRJZCIsIl9zZWxlY3RvciIsIl9zZWxlY3RvclJlZ2V4cCIsInNlbGZSZWZlcmVuY2VSZXBsYWNlciIsIm9mZnNldCIsInN0cmluZyIsInVzZSIsIl8iLCJzZWxlY3RvcnMiLCJsYXN0SW5kZXhPZiIsInNwbGl0QnlSdWxlcyIsInN0cmluZ2lmeVJ1bGVzIiwicnVsZXMiLCJzZWxlY3RvciIsImZsYXRDU1MiLCJjc3NTdHIiLCJSZWdFeHAiLCJnZXROb25jZSIsIm5jIiwiYWRkTmFtZUZvcklkIiwibmFtZXMiLCJyZXNldElkTmFtZXMiLCJoYXNOYW1lRm9ySWQiLCJzdHJpbmdpZnlOYW1lcyIsInN0ciIsInRyaW0iLCJzaGVldEZvclRhZyIsInRhZyIsInNpemUiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsInNhZmVJbnNlcnRSdWxlIiwiY3NzUnVsZSIsIm1heEluZGV4IiwiY3NzUnVsZXMiLCJpbnNlcnRSdWxlIiwibWFrZVRleHRNYXJrZXIiLCJhZGRVcFVudGlsSW5kZXgiLCJzaXplcyIsInRvdGFsVXBUb0luZGV4Iiwid3JhcEFzSHRtbFRhZyIsImFkZGl0aW9uYWxBdHRycyIsIm5vbmNlIiwiU0NfVkVSU0lPTl9BVFRSIiwiZmlsdGVyIiwiQm9vbGVhbiIsIndyYXBBc0VsZW1lbnQiLCJfcHJvcHMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImdldElkc0Zyb21NYXJrZXJzRmFjdG9yeSIsIm1hcmtlcnMiLCJtYWtlVGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm1ha2VTZXJ2ZXJUYWciLCJuYW1lc0FyZyIsIm1hcmtlcnNBcmciLCJpbnNlcnRNYXJrZXIiLCJwcmV2IiwiY3NzRm9ySWQiLCJjbG9uZSIsIm5hbWVzQ2xvbmUiLCJjbG9uZU5hbWVzIiwibWFya2Vyc0Nsb25lIiwiZ2V0SWRzIiwiaW5zZXJ0UnVsZXMiLCJyZW1vdmVSdWxlcyIsIm1hcmtlciIsInNlYWxlZCIsInN0eWxlVGFnIiwidG9FbGVtZW50IiwidG9IVE1MIiwibWFrZVRhZyIsInRhZ0VsIiwiZm9yY2VTZXJ2ZXIiLCJpbnNlcnRCZWZvcmUiLCJnZXRJbXBvcnRSdWxlVGFnIiwiZWwiLCJzZXRBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwibmV4dFNpYmxpbmciLCJtYWtlU3R5bGVUYWciLCJleHRyYWN0SW1wb3J0IiwidXNlZEltcG9ydFJ1bGVUYWciLCJpbXBvcnRSdWxlcyIsImNzc1J1bGVzU2l6ZSIsIm1heUhhdmVJbXBvcnQiLCJzZXBhcmF0b3IiLCJhcHBlbmREYXRhIiwibmV3TWFya2VyIiwicmVwbGFjZUNoaWxkIiwibWFrZUJyb3dzZXJUYWciLCJlbmQiLCJjc3NUZXh0IiwiaW5zZXJ0SW5kZXgiLCJpbmplY3RlZFJ1bGVzIiwicmVtb3ZhbEluZGV4IiwibG93ZXJCb3VuZCIsImRlbGV0ZVJ1bGUiLCJkZWxldGVSdWxlcyIsIm1ha2VTcGVlZHlUYWciLCJTUExJVF9SRUdFWCIsIk1BWF9TSVpFIiwic2hlZXRSdW5uaW5nSWQiLCJtYXN0ZXIiLCJTdHlsZVNoZWV0IiwiaW1wb3J0UnVsZVRhZyIsImZpcnN0VGFnIiwidGFncyIsInRhZ01hcCIsInJlaHlkcmF0ZWROYW1lcyIsImlnbm9yZVJlaHlkcmF0ZWROYW1lcyIsImNhcGFjaXR5IiwiY2xvbmVzIiwicmVoeWRyYXRlIiwiZWxzIiwiZXh0cmFjdGVkIiwiaXNTdHJlYW1lZCIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVzU2l6ZSIsImdldEF0dHJpYnV0ZSIsImVsTmFtZXMiLCJzcGxpdCIsImVsTmFtZXNTaXplIiwidGV4dENvbnRlbnQiLCJleHRyYWN0ZWRTaXplIiwiX2V4dHJhY3RlZCRpIiwiX2kiLCJyZW1vdmVDaGlsZCIsIk1hdGgiLCJtYXgiLCJfaiIsInJlc2V0IiwiaWRzIiwibmV3VGFnIiwic2VhbEFsbFRhZ3MiLCJsYXN0RWwiLCJnZXRUYWdGb3JJZCIsImhhc0lkIiwiZGVmZXJyZWRJbmplY3QiLCJpbmplY3QiLCJ0b1JlYWN0RWxlbWVudHMiLCJLZXlmcmFtZXMiLCJzdHlsZVNoZWV0IiwidG9TdHJpbmciLCJTdHJpbmciLCJnZXROYW1lIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImlzRmFsc2lzaCIsImNodW5rIiwib2JqVG9Dc3MiLCJwcmV2S2V5IiwidG9Mb3dlckNhc2UiLCJoeXBoZW5hdGVTdHlsZU5hbWUiLCJhZGRVbml0SWZOZWVkZWQiLCJmbGF0dGVuIiwiZXhlY3V0aW9uQ29udGV4dCIsInJ1bGVTZXQiLCJzaG91bGRUaHJvdyIsIm11cm11cmhhc2giLCJjaGFyQ29kZUF0IiwiY2hhcnNMZW5ndGgiLCJnZXRBbHBoYWJldGljQ2hhciIsImZyb21DaGFyQ29kZSIsImdlbmVyYXRlQWxwaGFiZXRpY05hbWUiLCJmbG9vciIsImlzU3RhdGljUnVsZXMiLCJhdHRycyIsInNvbWUiLCJoYXNGdW5jdGlvbk9iamVjdEtleSIsIl9UWVBFX1NUQVRJQ1MiLCJpc0hNUkVuYWJsZWQiLCJoYXNoZXIiLCJDb21wb25lbnRTdHlsZSIsImlzU3RhdGljIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJsYXN0Q2xhc3NOYW1lIiwiZ2VuZXJhdGVOYW1lIiwiZGV0ZXJtaW5lVGhlbWUiLCJmYWxsYmFja1RoZW1lIiwiZGVmYXVsdFByb3BzIiwiaXNEZWZhdWx0VGhlbWUiLCJlc2NhcGVSZWdleCIsImRhc2hlc0F0RW5kcyIsImVzY2FwZSIsImlzVGFnIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiVFlQRV9TVEFUSUNTIiwiJCR0eXBlb2YiLCJyZW5kZXIiLCJkZWZpbmVQcm9wZXJ0eSQxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9PYmplY3QkZ2V0T3duUHJvcGVydCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImFycmF5UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImlzRGVyaXZlZFJlYWN0Q29tcG9uZW50IiwiaXNSZWFjdENvbXBvbmVudCIsIm9uY2UiLCJjYWxsZWQiLCJUaGVtZUNvbnRleHQiLCJUaGVtZUNvbnN1bWVyIiwiQ29uc3VtZXIiLCJTdHlsZVNoZWV0Q29udGV4dCIsIl9Db21wb25lbnQiLCJUaGVtZVByb3ZpZGVyIiwiZ2V0Q29udGV4dCIsInJlbmRlcklubmVyIiwib3V0ZXJUaGVtZSIsIlByb3ZpZGVyIiwiQ2hpbGRyZW4iLCJvbmx5IiwiZ2V0VGhlbWUiLCJTZXJ2ZXJTdHlsZVNoZWV0IiwibWFzdGVyU2hlZXQiLCJzZWFsIiwiY29sbGVjdFN0eWxlcyIsIlN0eWxlU2hlZXRNYW5hZ2VyIiwiZ2V0U3R5bGVUYWdzIiwiZ2V0U3R5bGVFbGVtZW50IiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwicmVhZGFibGVTdHJlYW0iLCJTdHlsZVNoZWV0Q29uc3VtZXIiLCJpZGVudGlmaWVycyIsIlNldCIsIlN0eWxlZENvbXBvbmVudCIsInJlbmRlck91dGVyIiwiZm9yd2FyZGVkQ2xhc3MiLCJjb21wb25lbnRTdHlsZSIsIl9wcm9wcyRmb3J3YXJkZWRDbGFzcyIsImdlbmVyYXRlZENsYXNzTmFtZSIsImVsZW1lbnRUb0JlQ3JlYXRlZCIsImFzIiwiaXNUYXJnZXRUYWciLCJwcm9wc0ZvckVsZW1lbnQiLCJjb21wdXRlZFByb3BzIiwic3R5bGUiLCJjbGFzc05hbWUiLCJidWlsZEV4ZWN1dGlvbkNvbnRleHQiLCJhdHRyRGVmIiwicmVzb2x2ZWRBdHRyRGVmIiwiYXR0ckRlZldhc0ZuIiwiYXR0ciIsIl9wcm9wcyRmb3J3YXJkZWRDbGFzczIiLCJ3YXJuVG9vTWFueUNsYXNzZXMiLCJjcmVhdGVTdHlsZWRDb21wb25lbnQiLCJpc1RhcmdldFN0eWxlZENvbXAiLCJpc0NsYXNzIiwiX29wdGlvbnMkZGlzcGxheU5hbWUiLCJnZW5lcmF0ZURpc3BsYXlOYW1lIiwiX29wdGlvbnMkY29tcG9uZW50SWQiLCJfQ29tcG9uZW50U3R5bGUiLCJfZGlzcGxheU5hbWUiLCJwYXJlbnRDb21wb25lbnRJZCIsIm5yIiwiZ2VuZXJhdGVJZCIsIl9vcHRpb25zJFBhcmVudENvbXBvbiIsIlBhcmVudENvbXBvbmVudCIsIl9vcHRpb25zJGF0dHJzIiwiZmluYWxBdHRycyIsIldyYXBwZWRTdHlsZWRDb21wb25lbnQiLCJmb3J3YXJkUmVmIiwiZm9yd2FyZGVkUmVmIiwid2l0aENvbXBvbmVudCIsInByZXZpb3VzQ29tcG9uZW50SWQiLCJvcHRpb25zVG9Db3B5IiwibmV3Q29tcG9uZW50SWQiLCJzdHlsZWQiLCJjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImNvbXBvbmVudENvbnN0cnVjdG9yIiwidGVtcGxhdGVGdW5jdGlvbiIsIndpdGhDb25maWciLCJjb25maWciLCJkb21FbGVtZW50IiwiR2xvYmFsU3R5bGUiLCJjcmVhdGVTdHlsZXMiLCJyZW1vdmVTdHlsZXMiLCJyZW5kZXJTdHlsZXMiLCJzY0NHU0hNUkNhY2hlIiwiY29uZGl0aW9uIiwiZm9ybWF0IiwiZiIsImFyZ3MiLCJhcmdJbmRleCIsImZyYW1lc1RvUG9wIiwib3duS2V5cyIsInN5bSIsImNvcmUiLCJ2ZXJzaW9uIiwiX19lIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJzY3JpcHRpb25TaGFwZSIsInByb3BfdHlwZXNfZGVmYXVsdCIsInNoYXBlIiwidHJ5U3Vic2NyaWJlIiwiZnVuYyIsImlzUmVxdWlyZWQiLCJ0cnlVbnN1YnNjcmliZSIsIm5vdGlmeU5lc3RlZFN1YnMiLCJpc1N1YnNjcmliZWQiLCJzdG9yZVNoYXBlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsImNyZWF0ZVByb3ZpZGVyIiwic3RvcmVLZXkiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJzdWJzY3JpcHRpb25LZXkiLCJfcHJvdG8iLCJzdG9yZSIsImdldENoaWxkQ29udGV4dCIsInJlYWN0IiwiZWxlbWVudCIsImNvbXBvbmVudHNfUHJvdmlkZXIiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VLZXlzIiwiQ0xFQVJFRCIsIm51bGxMaXN0ZW5lcnMiLCJub3RpZnkiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJvblN0YXRlQ2hhbmdlIiwibGlzdGVuZXJzIiwiYWRkTmVzdGVkU3ViIiwibGlzdGVuZXIiLCJjdXJyZW50IiwibmV4dCIsImNsZWFyIiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiaG90UmVsb2FkaW5nVmVyc2lvbiIsImR1bW15U3RhdGUiLCJub29wIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX2NvbnRleHRUeXBlcyIsIl9jaGlsZENvbnRleHRUeXBlcyIsIl9yZWYyIiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiX3JlZjIkc3RvcmVLZXkiLCJfcmVmMiR3aXRoUmVmIiwid2l0aFJlZiIsImNvbm5lY3RPcHRpb25zIiwiV3JhcHBlZENvbXBvbmVudCIsImJyb3dzZXJfZGVmYXVsdCIsInJlYWN0X2lzIiwic3RyaW5naWZ5Iiwid3JhcHBlZENvbXBvbmVudE5hbWUiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwiQ29ubmVjdCIsInN0YXRlIiwicmVuZGVyQ291bnQiLCJwcm9wc01vZGUiLCJzZXRXcmFwcGVkSW5zdGFuY2UiLCJpbml0U2VsZWN0b3IiLCJpbml0U3Vic2NyaXB0aW9uIiwiX3JlZjMiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnREaWRNb3VudCIsInJ1biIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImZvcmNlVXBkYXRlIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0V3JhcHBlZEluc3RhbmNlIiwid3JhcHBlZEluc3RhbmNlIiwic291cmNlU2VsZWN0b3IiLCJtYWtlU2VsZWN0b3JTdGF0ZWZ1bCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSIsImFkZEV4dHJhUHJvcHMiLCJ3aXRoRXh0cmFzIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfY2pzX2RlZmF1bHQiLCJpcyIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJjb25zdGFudCIsImNvbnN0YW50U2VsZWN0b3IiLCJkZXBlbmRzT25Pd25Qcm9wcyIsImdldERlcGVuZHNPbk93blByb3BzIiwibWFwVG9Qcm9wcyIsIndyYXBNYXBUb1Byb3BzRnVuYyIsInByb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJjb25uZWN0X21hcERpc3BhdGNoVG9Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsInJlZHV4IiwiY29ubmVjdF9tYXBTdGF0ZVRvUHJvcHMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwiY29ubmVjdF9tZXJnZVByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwicHVyZSIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwiaGFuZGxlTmV3U3RhdGUiLCJmaXJzdFN0YXRlIiwiZmlyc3RPd25Qcm9wcyIsImhhbmRsZUZpcnN0Q2FsbCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjb25uZWN0X2Nvbm5lY3QiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJnIiwiRnVuY3Rpb24iLCJldmFsIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJjaGFyQXQiLCJzcGxpY2VPbmUiLCJsaXN0IiwiayIsInJlc29sdmVfcGF0aG5hbWUiLCJ0byIsImZyb20iLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwibGFzdCIsInVwIiwicGFydCIsInVuc2hpZnQiLCJzdWJzdHIiLCJ2YWx1ZV9lcXVhbCIsInZhbHVlRXF1YWwiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwiaGFzQmFzZW5hbWUiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwic2VhcmNoIiwiaGFzaCIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiTG9jYXRpb25VdGlsc19sb2NhdGlvbnNBcmVFcXVhbCIsImVzX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJhY3Rpb24iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImFkZEV2ZW50TGlzdGVuZXIiLCJub2RlIiwiZXZlbnQiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJjb25maXJtIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfdHlwZW9mIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfZXh0ZW5kcyIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJlc19jcmVhdGVCcm93c2VySGlzdG9yeSIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwic3VwcG9ydHNIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsImlzQmxvY2tlZCIsImhyZWYiLCJwdXNoU3RhdGUiLCJwcmV2SW5kZXgiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV90eXBlb2YiLCJjcmVhdGVNZW1vcnlIaXN0b3J5X2V4dGVuZHMiLCJjbGFtcCIsInVwcGVyQm91bmQiLCJtaW4iLCJlc19jcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cmllcyIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIl9fZyIsInVpZCIsIlVTRV9TWU1CT0wiLCJjcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsImFwcGx5TWlkZGxld2FyZSIsImNvbXBvc2UiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwicmFuZG9tU3RyaW5nIiwic3Vic3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJyZWR1Y2VyIiwicHJlbG9hZGVkU3RhdGUiLCJlbmhhbmNlciIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2RlZmluZVByb3BlcnR5IiwiZnVuY3MiLCJyZWR1Y2UiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiX29iamVjdFNwcmVhZCIsImNhcGl0YWxpemUiLCJ0b1VwcGVyQ2FzZSIsImNvbnRhaW5zIiwiZmluZEluZGV4IiwiZmluZCIsImFyciIsInByZWQiLCJjcmVhdGVDaGFpbmVkRnVuY3Rpb24iLCJhY2MiLCJfbGVuMiIsIl9rZXkyIiwiX3R5cGVvZjIiLCJwcmVkVHlwZSIsImN0eCIsImhpZGUiLCJoYXMiLCIkZXhwb3J0Iiwib3duIiwib3V0IiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJQIiwiSVNfQklORCIsIkIiLCJJU19XUkFQIiwiVyIsImV4cFByb3RvIiwiQyIsInZpcnR1YWwiLCJSIiwiVSIsIkF1dGgiLCJ3aXRoQXV0aCIsIlNlY3VyaXR5IiwiU2VjdXJlUm91dGUiLCJJbXBsaWNpdENhbGxiYWNrIiwiX1NlY3VyaXR5MiIsIl9JbXBsaWNpdENhbGxiYWNrMiIsIl9TZWN1cmVSb3V0ZTIiLCJfd2l0aEF1dGgyIiwiX0F1dGgyIiwiX0dyaWQiLCJpc09iamVjdCIsIml0Iiwib2lkYyIsImNsaWVudElkIiwiaXNzdWVyIiwiYXVkaWVuY2UiLCJyZWRpcmVjdFVyaSIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0Iiwic2NvcGUiLCJiYXNlQXBpIiwidWkiLCJzaWRlQmFyV2lkdGgiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsIk8iLCJBdHRyaWJ1dGVzIiwiX2V4YWN0UHJvcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2V4YWN0UHJvcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfZ2V0RGlzcGxheU5hbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9nZXREaXNwbGF5TmFtZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJfcG9ueWZpbGxHbG9iYWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9wb255ZmlsbEdsb2JhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJfTXVpVGhlbWVQcm92aWRlciIsIl9jcmVhdGVTdHlsZXMiLCJfd2l0aFN0eWxlcyIsIl93aXRoVGhlbWUiLCJ1dGlsIiwiYmFzZTY0VXJsVG9CYXNlNjQiLCJiNjR1IiwiYmFzZTY0VXJsVG9TdHJpbmciLCJiNjQiLCJ1dGY4IiwiYXRvYiIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ1RvQnVmZmVyIiwiYnVmZmVyIiwiVWludDhBcnJheSIsImJhc2U2NFVybERlY29kZSIsImFkZGl0aW9uYWxBcmdzIiwiaXNBYnNvbHV0ZVVybCIsInVybCIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc29Ub1VUQ1N0cmluZyIsInBhcnRzIiwiaXNvVGltZSIsIkRhdGUiLCJVVEMiLCJ0b1VUQ1N0cmluZyIsInRvUXVlcnlQYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZW5SYW5kb21TdHJpbmciLCJyYW5kb21DaGFyc2V0IiwiY2wiLCJleHRlbmQiLCJvYmoxIiwicHJvcCIsInJlbW92ZU5pbHMiLCJjbGVhbmVkIiwib21pdCIsIm5ld29iaiIsImNvbGxlY3Rpb24iLCJzZWFyY2hQYXJhbXMiLCJmb3VuZCIsImdldExpbmsiLCJsaW5rTmFtZSIsImFsdE5hbWUiLCJfbGlua3MiLCJnZXROYXRpdmVDb25zb2xlIiwiZ2V0Q29uc29sZSIsIm5hdGl2ZUNvbnNvbGUiLCJsb2ciLCJ0ZXh0IiwiZGVwcmVjYXRlIiwiZGVwcmVjYXRlV3JhcCIsInJlbW92ZVRyYWlsaW5nU2xhc2giLCJ0cmltbWVkIiwiaXNJRTExT3JMZXNzIiwiZG9jdW1lbnRNb2RlIiwib3duZXJEb2N1bWVudCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVyX1JvdXRlciIsIlJvdXRlciIsIl9jbGFzc0NhbGxDaGVjayIsImNvbXB1dGVNYXRjaCIsIl9pbmhlcml0cyIsInJvdXRlciIsInJvdXRlIiwicGFyYW1zIiwiaXNFeGFjdCIsImNvbXBvbmVudFdpbGxNb3VudCIsInJlYWN0X2RlZmF1bHQiLCJjb3VudCIsIndhcm5pbmdfZGVmYXVsdCIsImVzX1JvdXRlciIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImVzIiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwiYXJyYXkiLCJudW1iZXIiLCJlc19NZW1vcnlSb3V0ZXIiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsImJvb2wiLCJvbmVPZlR5cGUiLCJlc19Qcm9tcHQiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfZ2VuZXJhdGVQYXRoIiwicGF0dGVybiIsImNhY2hlS2V5IiwiY2FjaGUiLCJjb21waWxlZEdlbmVyYXRvciIsInBhdGhfdG9fcmVnZXhwX2RlZmF1bHQiLCJjb21waWxlIiwiZ2VuZXJhdGVQYXRoX2NvbXBpbGVHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJwcmV0dHkiLCJSZWRpcmVjdF9leHRlbmRzIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwic3RhdGljQ29udGV4dCIsInBlcmZvcm0iLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJjb21wdXRlVG8iLCJjb21wdXRlZE1hdGNoIiwiZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiYWRkQmFzZW5hbWUiLCJTdGF0aWNSb3V0ZXJfY3JlYXRlVVJMIiwiU3RhdGljUm91dGVyX3N0YXRpY0hhbmRsZXIiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJlc19TdGF0aWNSb3V0ZXIiLCJSb3V0ZSIsIlN3aXRjaCIsIm1hdGNoUGF0aCIsIndpdGhSb3V0ZXIiLCJhcGlNaWRkbGV3YXJlIiwiZ2V0SlNPTiIsIkFwaUVycm9yIiwiUmVxdWVzdEVycm9yIiwiSW50ZXJuYWxFcnJvciIsIkludmFsaWRSU0FBIiwiaXNWYWxpZFJTQUEiLCJ2YWxpZGF0ZVJTQUEiLCJpc1JTQUEiLCJSU0FBIiwiQ0FMTF9BUEkiLCJfUlNBQTIiLCJfdmFsaWRhdGlvbiIsIl9lcnJvcnMiLCJfdXRpbCIsIl9taWRkbGV3YXJlIiwiY3JlYXRlRGVzYyIsIkRJUkVDVE9SWV9JRCIsIk1FTUJFUl9JRCIsIkRFRkFVTFRfQVBQTElDQVRJT05fSUQiLCJhcHBsaWNhdGlvbnMiLCJjcmVhdGVBcHBsaWNhdGlvbiIsImNvbG9yIiwicmVsYXRpdmVQYXRoIiwiaWNvbiIsImlzQ3VycmVudCIsIl9UYWJsZUNlbGwiLCJJT2JqZWN0IiwiZGVmaW5lZCIsImFGdW5jdGlvbiIsInRoYXQiLCJleGVjIiwiQXV0aFNka0Vycm9yIiwibXNnIiwieGhyIiwiZXJyb3JDb2RlIiwiZXJyb3JTdW1tYXJ5IiwiZXJyb3JMaW5rIiwiZXJyb3JJZCIsImVycm9yQ2F1c2VzIiwiU1RBVEVfVE9LRU5fQ09PS0lFX05BTUUiLCJERUZBVUxUX1BPTExJTkdfREVMQVkiLCJERUZBVUxUX01BWF9DTE9DS19TS0VXIiwiREVGQVVMVF9DQUNIRV9EVVJBVElPTiIsIkZSQU1FX0lEIiwiUkVESVJFQ1RfT0FVVEhfUEFSQU1TX0NPT0tJRV9OQU1FIiwiUkVESVJFQ1RfU1RBVEVfQ09PS0lFX05BTUUiLCJSRURJUkVDVF9OT05DRV9DT09LSUVfTkFNRSIsIlRPS0VOX1NUT1JBR0VfTkFNRSIsIkNBQ0hFX1NUT1JBR0VfTkFNRSIsIlNES19WRVJTSU9OIiwiX2NyZWF0ZUNsYXNzIiwiX3dhcm5pbmcyIiwiX3RvQ3NzMiIsIl90b0Nzc1ZhbHVlMiIsIlN0eWxlUnVsZSIsImlzUHJvY2Vzc2VkIiwiUmVuZGVyZXIiLCJzZWxlY3RvclRleHQiLCJyZW5kZXJlciIsImlzRW1wdHkiLCJwbHVnaW5zIiwib25DaGFuZ2VWYWx1ZSIsImlzRGVmaW5lZCIsInJlbmRlcmFibGUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiYXR0YWNoZWQiLCJqc29uIiwidG9KU09OIiwib3B0cyIsImFsbG93RW1wdHkiLCJzZXRTZWxlY3RvciIsInJlcGxhY2VSdWxlIiwiY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZSIsImNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lIiwiaXNWYWxpZEVsZW1lbnQiLCJpc011aUVsZW1lbnQiLCJtdWlOYW1lcyIsIm11aU5hbWUiLCJzZXRSZWYiLCJfY2xhc3NuYW1lcyIsImNsb25lRWxlbWVudCIsImZvcm1Db250cm9sU3RhdGUiLCJfcmVhY3RIZWxwZXJzIiwiX1RleHRhcmVhIiwibGlnaHQiLCJwYWxldHRlIiwicGxhY2Vob2xkZXIiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiZHVyYXRpb24iLCJzaG9ydGVyIiwicGxhY2Vob2xkZXJIaWRkZW4iLCJwbGFjZWhvbGRlclZpc2libGUiLCJyb290IiwiZm9udEZhbWlseSIsInByaW1hcnkiLCJmb250U2l6ZSIsInB4VG9SZW0iLCJsaW5lSGVpZ2h0IiwiY3Vyc29yIiwiZGlzcGxheSIsImFsaWduSXRlbXMiLCImJGRpc2FibGVkIiwiZGlzYWJsZWQiLCJmb3JtQ29udHJvbCIsImZvY3VzZWQiLCJhZG9ybmVkU3RhcnQiLCJhZG9ybmVkRW5kIiwibWFyZ2luRGVuc2UiLCJtdWx0aWxpbmUiLCJwYWRkaW5nIiwiZnVsbFdpZHRoIiwid2lkdGgiLCJpbnB1dCIsImZvbnQiLCJib3JkZXIiLCJib3hTaXppbmciLCJiYWNrZ3JvdW5kIiwibWFyZ2luIiwiV2Via2l0VGFwSGlnaGxpZ2h0Q29sb3IiLCJtaW5XaWR0aCIsIiY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOjotbW96LXBsYWNlaG9sZGVyIiwiJjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzIiwib3V0bGluZSIsIiY6aW52YWxpZCIsImJveFNoYWRvdyIsIiY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24iLCItd2Via2l0LWFwcGVhcmFuY2UiLCJsYWJlbFtkYXRhLXNocmluaz1mYWxzZV0gKyAkZm9ybUNvbnRyb2wgJiIsIiY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyIiwiJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCImOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXIiLCJpbnB1dE1hcmdpbkRlbnNlIiwicGFkZGluZ1RvcCIsImlucHV0TXVsdGlsaW5lIiwicmVzaXplIiwiaW5wdXRUeXBlIiwiaGVpZ2h0IiwiaW5wdXRUeXBlU2VhcmNoIiwiLW1vei1hcHBlYXJhbmNlIiwiaW5wdXRBZG9ybmVkU3RhcnQiLCJpbnB1dEFkb3JuZWRFbmQiLCJzdGF0ZXMiLCJtdWlGb3JtQ29udHJvbCIsIklucHV0QmFzZSIsImhhbmRsZUZvY3VzIiwic3RvcFByb3BhZ2F0aW9uIiwib25Gb2N1cyIsImhhbmRsZUJsdXIiLCJvbkJsdXIiLCJoYW5kbGVDaGFuZ2UiLCJpc0NvbnRyb2xsZWQiLCJjaGVja0RpcnR5IiwiaW5wdXRSZWYiLCJvbkNoYW5nZSIsImhhbmRsZVJlZklucHV0IiwicmVmUHJvcCIsImlucHV0UHJvcHMiLCJoYW5kbGVDbGljayIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsIm9uQ2xpY2siLCJpc0ZpbGxlZCIsIm9uRmlsbGVkIiwib25FbXB0eSIsIl9jbGFzc05hbWVzIiwiX2NsYXNzTmFtZXMyIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0ZvY3VzIiwiY2xhc3NOYW1lUHJvcCIsImRlZmF1bHRWYWx1ZSIsImVuZEFkb3JubWVudCIsImlucHV0Q29tcG9uZW50IiwiX3RoaXMkcHJvcHMyJGlucHV0UHJvIiwiaW5wdXRQcm9wc0NsYXNzTmFtZSIsImlucHV0UHJvcHNQcm9wIiwib25LZXlEb3duIiwib25LZXlVcCIsInJlYWRPbmx5IiwicmVuZGVyUHJlZml4Iiwicm93cyIsInJvd3NNYXgiLCJzdGFydEFkb3JubWVudCIsImZjcyIsImlucHV0Q2xhc3NOYW1lIiwiSW5wdXRDb21wb25lbnQiLCJ0ZXh0YXJlYVJlZiIsImFyaWEtaW52YWxpZCIsInJlcXVpcmVkIiwicGF0aF90b19yZWdleHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInBhdGhfdG9fcmVnZXhwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsImNvbXBpbGVkUGF0dGVybiIsInJlIiwiY29tcGlsZVBhdGgiLCJ2YWx1ZXMiLCJtZW1vIiwiX1R5cG9ncmFwaHkiLCJfX1Jld2lyZUFQSV9fIiwiX19SZXNldERlcGVuZGVuY3lfXyIsIl9fc2V0X18iLCJfX1Jld2lyZV9fIiwiX19HZXREZXBlbmRlbmN5X18iLCJfX2dldF9fIiwiY3JlYXRlTWF0Y2hTZWxlY3RvciIsImdldEFjdGlvbiIsImdldExvY2F0aW9uIiwicm91dGVyTWlkZGxld2FyZSIsImNvbm5lY3RSb3V0ZXIiLCJDb25uZWN0ZWRSb3V0ZXIiLCJyb3V0ZXJBY3Rpb25zIiwiQ0FMTF9ISVNUT1JZX01FVEhPRCIsIkxPQ0FUSU9OX0NIQU5HRSIsIl9jcmVhdGVBbGwyIiwiX3BsYWluMiIsIl9nZXRfXzIiLCJfZ2V0X18iLCJfZ2V0R2xvYmFsT2JqZWN0IiwiX1Jld2lyZU1vZHVsZUlkX18iLCJfZ2V0UmV3aXJlTW9kdWxlSWRfXyIsImdsb2JhbFZhcmlhYmxlIiwiX18kJEdMT0JBTF9SRVdJUkVfTkVYVF9NT0RVTEVfSURfXyIsIl9nZXRSZXdpcmVSZWdpc3RyeV9fIiwidGhlR2xvYmFsVmFyaWFibGUiLCJfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fIiwiX2dldFJld2lyZWREYXRhX18iLCJyZWdpc3RyeSIsInJld2lyZURhdGEiLCJJTlRFTlRJT05BTF9VTkRFRklORUQiLCJfUmV3aXJlQVBJX18iLCJ2YXJpYWJsZU5hbWUiLCJfZ2V0X29yaWdpbmFsX18iLCJfc2V0X18iLCJfcmVzZXRfXyIsIl93aXRoX18iLCJyZXdpcmVkVmFyaWFibGVOYW1lcyIsInByZXZpb3VzVmFsdWVzIiwiY2F0Y2giLCJhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0IiwiX0FwcEJhciIsIl9Ub29sYmFyIiwiYml0bWFwIiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsInBvaW50IiwiZG9uZSIsIl90eXBlb2YzIiwiX3NldFByb3RvdHlwZU9mMiIsIl9jcmVhdGUyIiwic2V0SW1tZWRpYXRlIiwiZGVmaW5pdGlvbiIsImJvb3RzdHJhcCIsImhhc1N0YWNrcyIsInN0YWNrIiwicUZpbGVOYW1lIiwicVN0YXJ0aW5nTGluZSIsImNhcHR1cmVMaW5lIiwibmV4dFRpY2siLCJ0YXNrIiwidGFpbCIsImZsdXNoaW5nIiwicmVxdWVzdFRpY2siLCJpc05vZGVKUyIsImxhdGVyUXVldWUiLCJmbHVzaCIsImRvbWFpbiIsImVudGVyIiwicnVuU2luZ2xlIiwiZXhpdCIsInNldFRpbWVvdXQiLCJNZXNzYWdlQ2hhbm5lbCIsImNoYW5uZWwiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInJlcXVlc3RQb3J0VGljayIsInBvcnQyIiwicG9zdE1lc3NhZ2UiLCJydW5BZnRlciIsInVuY3VycnlUaGlzIiwiUVJldHVyblZhbHVlIiwiYXJyYXlfc2xpY2UiLCJhcnJheV9yZWR1Y2UiLCJiYXNpcyIsImFycmF5X2luZGV4T2YiLCJhcnJheV9tYXAiLCJ0aGlzcCIsImNvbGxlY3QiLCJvYmplY3RfY3JlYXRlIiwiVHlwZSIsIm9iamVjdF9oYXNPd25Qcm9wZXJ0eSIsIm9iamVjdF9rZXlzIiwib2JqZWN0X3RvU3RyaW5nIiwiUmV0dXJuVmFsdWUiLCJTVEFDS19KVU1QX1NFUEFSQVRPUiIsIm1ha2VTdGFja1RyYWNlTG9uZyIsInN0YWNrcyIsImNvbmNhdGVkU3RhY2tzIiwic3RhY2tTdHJpbmciLCJsaW5lcyIsImRlc2lyZWRMaW5lcyIsImxpbmUiLCJpc0ludGVybmFsRnJhbWUiLCJpc05vZGVGcmFtZSIsImZpbHRlclN0YWNrU3RyaW5nIiwic3RhY2tMaW5lIiwiZ2V0RmlsZU5hbWVBbmRMaW5lTnVtYmVyIiwiYXR0ZW1wdDEiLCJOdW1iZXIiLCJhdHRlbXB0MiIsImF0dGVtcHQzIiwiZmlsZU5hbWVBbmRMaW5lTnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicUVuZGluZ0xpbmUiLCJRIiwiaXNQcm9taXNlQWxpa2UiLCJkZWZlciIsImV4Y2VwdGlvbiIsImNvZXJjZSIsImZ1bGZpbGwiLCJyZXNvbHZlZFByb21pc2UiLCJtZXNzYWdlcyIsInByb2dyZXNzTGlzdGVuZXJzIiwicHJvbWlzZURpc3BhdGNoIiwib3AiLCJvcGVyYW5kcyIsIm5lYXJlclZhbHVlIiwibmVhcmVyIiwiaXNQcm9taXNlIiwiaW5zcGVjdCIsImxvbmdTdGFja1N1cHBvcnQiLCJiZWNvbWUiLCJuZXdQcm9taXNlIiwicmVhc29uIiwicHJvZ3Jlc3MiLCJwcm9ncmVzc0xpc3RlbmVyIiwicmVzb2x2ZXIiLCJyYWNlIiwiYW5zd2VyUHMiLCJmYWxsYmFjayIsImluc3BlY3RlZCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHJvZ3Jlc3NlZCIsIlFfREVCVUciLCJtYWtlTm9kZVJlc29sdmVyIiwiYWxsIiwicGFzc0J5Q29weSIsInNwcmVhZCIsIm1ha2VQcm9taXNlIiwiX2Z1bGZpbGxlZCIsIm5ld0V4Y2VwdGlvbiIsIl9yZWplY3RlZCIsIm5ld1ZhbHVlIiwidGhyZXciLCJfcHJvZ3Jlc3NlZCIsIm9uZXJyb3IiLCJ0YXAiLCJmY2FsbCIsInRoZW5SZXNvbHZlIiwidGhlblJlamVjdCIsImlzUGVuZGluZyIsImlzRnVsZmlsbGVkIiwiaXNSZWplY3RlZCIsInVuaGFuZGxlZFJlYXNvbnMiLCJ1bmhhbmRsZWRSZWplY3Rpb25zIiwicmVwb3J0ZWRVbmhhbmRsZWRSZWplY3Rpb25zIiwidHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zIiwicmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zIiwicmVqZWN0aW9uIiwiYXQiLCJlbWl0IiwiYXRSZXBvcnQiLCJ1bnRyYWNrUmVqZWN0aW9uIiwidHJhY2tSZWplY3Rpb24iLCJyaHMiLCJwb3N0IiwicHJvbWlzZXMiLCJwZW5kaW5nQ291bnQiLCJzbmFwc2hvdCIsImFueSIsImFsbFJlc29sdmVkIiwiZ2V0VW5oYW5kbGVkUmVhc29ucyIsInN0b3BVbmhhbmRsZWRSZWplY3Rpb25UcmFja2luZyIsImlzRGVmIiwiYXN5bmMiLCJtYWtlR2VuZXJhdG9yIiwiY29udGludWVyIiwidmVyYiIsIlN0b3BJdGVyYXRpb24iLCJlcnJiYWNrIiwiaXNTdG9wSXRlcmF0aW9uIiwic3Bhd24iLCJwcm9taXNlZCIsImRlbCIsIm1hcHBseSIsIm1jYWxsIiwiaW52b2tlIiwiZmFwcGx5IiwiZmJpbmQiLCJhbHRlcm5hdGl2ZSIsImFsbFNldHRsZWQiLCJyZWdhcmRsZXNzIiwiZmFpbCIsImZpbiIsIm9uVW5oYW5kbGVkRXJyb3IiLCJtcyIsInRpbWVvdXRJZCIsImNsZWFyVGltZW91dCIsImRlbGF5IiwibmZhcHBseSIsIm5vZGVBcmdzIiwibmZjYWxsIiwibmZiaW5kIiwiZGVub2RlaWZ5IiwiYmFzZUFyZ3MiLCJuYmluZCIsIm5tYXBwbHkiLCJucG9zdCIsIm5zZW5kIiwibm1jYWxsIiwibmludm9rZSIsIm5vZGVpZnkiLCJub2RlYmFjayIsIm5vQ29uZmxpY3QiLCJjb29raWVzIiwic3RvcmFnZVV0aWwiLCJBdXRoQXBpRXJyb3IiLCJodHRwUmVxdWVzdCIsInNkayIsIm1ldGhvZCIsInNhdmVBdXRoblN0YXRlIiwiYWNjZXNzVG9rZW4iLCJodHRwQ2FjaGUiLCJnZXRIdHRwQ2FjaGUiLCJjYWNoZVJlc3BvbnNlIiwiY2FjaGVkUmVzcG9uc2UiLCJnZXRTdG9yYWdlIiwibm93IiwiZXhwaXJlc0F0IiwicmVzcG9uc2UiLCJoZWFkZXJzIiwiQWNjZXB0IiwiQ29udGVudC1UeXBlIiwiWC1Pa3RhLVVzZXItQWdlbnQtRXh0ZW5kZWQiLCJyZXMiLCJhamF4T3B0aW9ucyIsImFqYXhSZXF1ZXN0IiwicmVzcCIsInN0YXRlVG9rZW4iLCJkZWxldGVDb29raWUiLCJzZXRDb29raWUiLCJ1cGRhdGVTdG9yYWdlIiwic2VydmVyRXJyIiwidHJhbnNmb3JtRXJyb3JYSFIiLCJnZXRPcHRpb25zIiwicG9zdE9wdGlvbnMiLCJfY3JlYXRlUnVsZTIiLCJfbGlua1J1bGUyIiwiX1N0eWxlUnVsZTIiLCJfZXNjYXBlMiIsIlJ1bGVMaXN0Iiwib25VcGRhdGUiLCJkZWNsIiwiX29wdGlvbnMyIiwicmVnaXN0ZXIiLCJ1bnJlZ2lzdGVyIiwib25Qcm9jZXNzUnVsZSIsImdldFVuZXNjYXBlZEtleXNNYXAiLCJnZXRLZXkiLCJrZXlDb2RlIiwic2VhcmNoSW5wdXQiLCJoYXNLZXlDb2RlIiwid2hpY2giLCJjaGFyQ29kZSIsImZvdW5kTmFtZWRLZXkiLCJjb2RlcyIsImFsaWFzZXMiLCJpc0V2ZW50S2V5IiwibmFtZU9yQ29kZSIsImJhY2tzcGFjZSIsInRhYiIsInNoaWZ0IiwiY3RybCIsImFsdCIsInBhdXNlL2JyZWFrIiwiY2FwcyBsb2NrIiwiZXNjIiwic3BhY2UiLCJwYWdlIHVwIiwicGFnZSBkb3duIiwiaG9tZSIsImxlZnQiLCJyaWdodCIsImRvd24iLCJpbnNlcnQiLCJjb21tYW5kIiwibGVmdCBjb21tYW5kIiwicmlnaHQgY29tbWFuZCIsIm51bXBhZCAqIiwibnVtcGFkICsiLCJudW1wYWQgLSIsIm51bXBhZCAuIiwibnVtcGFkIC8iLCJudW0gbG9jayIsInNjcm9sbCBsb2NrIiwibXkgY29tcHV0ZXIiLCJteSBjYWxjdWxhdG9yIiwiOyIsIj0iLCIsIiwiLSIsIi4iLCIvIiwiYCIsIlsiLCJcXCIsIl0iLCInIiwid2luZG93cyIsIuKHpyIsIuKMpSIsIuKMgyIsIuKMmCIsImN0bCIsImNvbnRyb2wiLCJvcHRpb24iLCJwYXVzZSIsImJyZWFrIiwiY2FwcyIsInJldHVybiIsInNwYyIsInNwYWNlYmFyIiwicGd1cCIsInBnZG4iLCJpbnMiLCJjbWQiLCJ0aXRsZSIsImFsaWFzIiwiZGVmYXVsdFN0YXRlIiwiaXRlbXMiLCJmZXRjaGluZyIsInVzZXIiLCJvYmplY3RTcHJlYWRfZGVmYXVsdCIsInBheWxvYWQiLCJ1c2VycyIsImRpcmVjdG9yeSIsIm1lbnVzIiwiX21lbnVzIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsImdyb3VwcyIsImxpbmtzIiwiaXNEZWZhdWx0IiwiYnJlYWRDcnVtYiIsImF1dGhlbnRpY2F0ZWQiLCJ1c2VySW5mbyIsImlkVG9rZW4iLCJjcmVhdGVSb290UmVkdWNlciIsImFwcCIsImF1dGgiLCJvbkxvY2F0aW9uQ2hhbmdlZCIsInVwZGF0ZUxvY2F0aW9uIiwiSXRlcmF0b3JzIiwiVE9fU1RSSU5HX1RBRyIsIkRPTUl0ZXJhYmxlcyIsIk5BTUUiLCJDb2xsZWN0aW9uIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsInB4IiwiZGVmIiwiVEFHIiwic3RhdCIsIl9pdGVyYXRvcjIiLCJfc3ltYm9sMiIsIl9hc3NpZ24yIiwiX3Byb21pc2UyIiwiZ2VuIiwic3RlcCIsImluZm8iLCJDb29raWVzIiwiZ2V0Q29va2llIiwiY29va2llT3B0aW9ucyIsImV4cGlyZXMiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImJ5IiwiZGVjbENvcHkiLCJfY2xvbmVTdHlsZTIiLCJvbkNyZWF0ZVJ1bGUiLCJpc0Jyb3dzZXIiLCJub2RlVHlwZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImZvciIsImNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIiwiZGVlcG1lcmdlIiwidmFsIiwiZW1wdHlUYXJnZXQiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImFycmF5TWVyZ2UiLCJzb3VyY2VJc0FycmF5IiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImRlZXBtZXJnZV8xIiwiZm9ybWF0TXMiLCJlYXNpbmciLCJlYXNlSW5PdXQiLCJlYXNlT3V0IiwiZWFzZUluIiwic2hhcnAiLCJzaG9ydGVzdCIsInNob3J0Iiwic3RhbmRhcmQiLCJjb21wbGV4IiwiZW50ZXJpbmdTY3JlZW4iLCJsZWF2aW5nU2NyZWVuIiwibWlsbGlzZWNvbmRzIiwicm91bmQiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJfb3B0aW9ucyRkdXJhdGlvbiIsImR1cmF0aW9uT3B0aW9uIiwiX29wdGlvbnMkZWFzaW5nIiwiZWFzaW5nT3B0aW9uIiwiX29wdGlvbnMkZGVsYXkiLCJhbmltYXRlZFByb3AiLCJnZXRBdXRvSGVpZ2h0RHVyYXRpb24iLCJwb3ciLCJfb3duZXJEb2N1bWVudCIsImRvYyIsImRlZmF1bHRWaWV3IiwicGFyZW50VmlldyIsIkVYSVRJTkciLCJFTlRFUkVEIiwiRU5URVJJTkciLCJFWElURUQiLCJVTk1PVU5URUQiLCJQcm9wVHlwZXMiLCJuZXdPYmoiLCJkZXNjIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfcmVhY3REb20iLCJfcmVhY3RMaWZlY3ljbGVzQ29tcGF0IiwiVHJhbnNpdGlvbiIsImluaXRpYWxTdGF0dXMiLCJwYXJlbnRHcm91cCIsInRyYW5zaXRpb25Hcm91cCIsImFwcGVhciIsImlzTW91bnRpbmciLCJhcHBlYXJTdGF0dXMiLCJpbiIsInVubW91bnRPbkV4aXQiLCJtb3VudE9uRW50ZXIiLCJuZXh0Q2FsbGJhY2siLCJwcmV2U3RhdGUiLCJ1cGRhdGVTdGF0dXMiLCJuZXh0U3RhdHVzIiwiY2FuY2VsTmV4dENhbGxiYWNrIiwiZ2V0VGltZW91dHMiLCJtb3VudGluZyIsImZpbmRET01Ob2RlIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJ0aW1lb3V0cyIsIm9uRW50ZXIiLCJzYWZlU2V0U3RhdGUiLCJvbkVudGVyaW5nIiwib25UcmFuc2l0aW9uRW5kIiwib25FbnRlcmVkIiwiX3RoaXMzIiwib25FeGl0Iiwib25FeGl0aW5nIiwib25FeGl0ZWQiLCJjYW5jZWwiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJoYW5kbGVyIiwiYWRkRW5kTGlzdGVuZXIiLCJjaGlsZFByb3BzIiwicG9seWZpbGwiLCJXaXRoVGhlbWUiLCJjcmVhdGVDb250ZXh0Iiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIl9tYXRjaFBhdGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImlzRW1wdHlDaGlsZHJlbiIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9Sb3V0ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwid3JhcHBlZENvbXBvbmVudFJlZiIsInJlbWFpbmluZ1Byb3BzIiwicm91dGVDb21wb25lbnRQcm9wcyIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImVuY29kZUFzdGVyaXNrIiwibWF0Y2hlcyIsImVuY29kZSIsInRva2VuIiwic2VnbWVudCIsImF0dGFjaEtleXMiLCJmbGFncyIsImVuZHNXaXRoRGVsaW1pdGVyIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJ1c2Vyc0FwaSIsIl9jb25maWdfY29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJkaXJlY3RvcnlCYXNlQXBpIiwicmVjaWV2ZUF1dGhlbnRpY2F0aW9uIiwiY2xlYXJBdXRoZW50aWNhdGlvbiIsIl9JY29uIiwiX0J1dHRvbiIsImFzeW5jR2VuZXJhdG9yU3RlcCIsIl9uZXh0IiwiX3Rocm93IiwiX2lzSXRlcmFibGUzIiwiX2dldEl0ZXJhdG9yMyIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsInNsaWNlSXRlcmF0b3IiLCJkUHMiLCJJRV9QUk9UTyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJ0b0ludGVnZXIiLCJjZWlsIiwic2hhcmVkIiwiY29weXJpZ2h0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNsYXNzb2YiLCJJVEVSQVRPUiIsImdldEl0ZXJhdG9yTWV0aG9kIiwiTElCUkFSWSIsIndrc0V4dCIsIiRTeW1ib2wiLCJfY2xhc3NDYWxsQ2hlY2szIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zIiwiX2luaGVyaXRzMyIsInZhbGlkYXRpb25FcnJvcnMiLCJfRXJyb3IyIiwiX0Vycm9yMyIsIl9FcnJvcjQiLCJzdGF0dXNUZXh0IiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwic3RvcmFnZUJ1aWxkZXIiLCJicm93c2VySGFzTG9jYWxTdG9yYWdlIiwiZ2V0TG9jYWxTdG9yYWdlIiwiYnJvd3Nlckhhc1Nlc3Npb25TdG9yYWdlIiwiZ2V0U2Vzc2lvblN0b3JhZ2UiLCJnZXRDb29raWVTdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJnZXRJdGVtIiwic2V0SXRlbSIsIl9yZWFjdDIiLCJfU2VjdXJlMiIsInNlY3VyZUNvbXBvbmVudFByb3BzIiwiX29wdGlvbnMkaW5kZW50IiwiaW5kZW50IiwiZmFsbGJhY2tzIiwiaW5kZW50U3RyIiwiX3Byb3AiLCJfdmFsdWUiLCJfcHJvcDIiLCJfdmFsdWUyIiwiX1NoZWV0c1JlZ2lzdHJ5MiIsImpzIiwianNDc3NNYXAiLCJNb3oiLCJXZWJraXQiLCJfZGVlcG1lcmdlIiwiX2lzUGxhaW5PYmplY3QiLCJfY3JlYXRlQnJlYWtwb2ludHMiLCJfY3JlYXRlTWl4aW5zIiwiX2NyZWF0ZVBhbGV0dGUiLCJfY3JlYXRlVHlwb2dyYXBoeSIsIl9zaGFkb3dzIiwiX3NoYXBlIiwiX3NwYWNpbmciLCJfdHJhbnNpdGlvbnMiLCJfekluZGV4IiwiX29wdGlvbnMkYnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJzaGFkb3dzSW5wdXQiLCJzaGFkb3dzIiwiX29wdGlvbnMkc3BhY2luZyIsInNwYWNpbmciLCJzcGFjaW5nSW5wdXQiLCJfb3B0aW9ucyR0eXBvZ3JhcGh5IiwidHlwb2dyYXBoeUlucHV0Iiwib3ZlcnJpZGVzIiwiekluZGV4IiwiY29udmVydEhleFRvUkdCIiwicmdiVG9IZXgiLCJkZWNvbXBvc2VDb2xvciIsImhleCIsImludFRvSGV4IiwicmVjb21wb3NlQ29sb3IiLCJnZXRDb250cmFzdFJhdGlvIiwiZm9yZWdyb3VuZCIsImx1bUEiLCJnZXRMdW1pbmFuY2UiLCJsdW1CIiwiZW1waGFzaXplIiwiY29lZmZpY2llbnQiLCJkYXJrZW4iLCJsaWdodGVuIiwiZmFkZSIsImNvbG9ycyIsInBhcnNlSW50IiwiZGVjb21wb3NlZENvbG9yIiwicmdiIiwidG9GaXhlZCIsIkNIQU5ORUwiLCJzdWJzY3JpcHRpb25JZCIsIl9QYXBlciIsInByb3BUeXBlMSIsInByb3BUeXBlMiIsImdldFRyYW5zaXRpb25Qcm9wcyIsIl9wcm9wcyRzdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsInJlZmxvdyIsInNjcm9sbFRvcCIsIl9pbnRlcm9wRGVmYXVsdCIsImV4IiwiUmVhY3QiLCJwYXNzaXZlT3B0aW9uIiwic3VwcG9ydHNQYXNzaXZlT3B0aW9uIiwiZGVmYXVsdEV2ZW50T3B0aW9ucyIsInBhc3NpdmUiLCJtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMiLCJnZXRFdmVudExpc3RlbmVyQXJncyIsImV2ZW50TmFtZSIsIkV2ZW50TGlzdGVuZXIiLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsImFwcGx5TGlzdGVuZXJzIiwib25Pck9mZiIsIml0ZXJhdGVlIiwiZXZlbnRQcm9wcyIsImZvckVhY2hMaXN0ZW5lciIsIlB1cmVDb21wb25lbnQiLCJ3aXRoT3B0aW9ucyIsImRlYm91bmNlIiwid2FpdCIsImltbWVkaWF0ZSIsInRpbWVzdGFtcCIsImxhdGVyIiwiZGVib3VuY2VkIiwiY2FsbE5vdyIsIl9JbnB1dCIsIl9JbnB1dEJhc2UiLCJoYXNWYWx1ZSIsIlNTUiIsImlzQWRvcm5lZFN0YXJ0IiwiZXNfd2l0aFJvdXRlciIsImRlZmF1bHRFcXVhbGl0eUNoZWNrIiwiY3JlYXRlU2VsZWN0b3IiLCJtZW1vaXplIiwibWVtb2l6ZU9wdGlvbnMiLCJyZWNvbXB1dGF0aW9ucyIsInJlc3VsdEZ1bmMiLCJkZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5VHlwZXMiLCJnZXREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJyZXNldFJlY29tcHV0YXRpb25zIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwiZXF1YWxpdHlDaGVjayIsImxhc3RBcmdzIiwibGFzdFJlc3VsdCIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwicGF0aE5hbWVTZWxlY3RvciIsImFwcGxpY2F0aW9uc1NlbGVjdG9yIiwicGF0aE5hbWUiLCJpc0N1cnJlbnRBcHBsaWNhdGlvbiIsImN1cnJlbnRBcHBsaWNhdGlvblNlbGVjdG9yIiwiY3VycmVudE1lbnVTZWxlY3RvciIsImFwcGxpY2F0aW9uIiwibWVudSIsImlzQ3VycmVudE1lbnVMaW5rIiwiY3VycmVudE1lbnVMaW5rU2VsZWN0b3IiLCJ0b0NvbnN1bWFibGVBcnJheV9kZWZhdWx0IiwiQXBwQmFyIiwiQXBwQmFyTVVJIiwiX3RlbXBsYXRlT2JqZWN0IiwiZHJhd2VyIiwiVG9vbGJhciIsIlRvb2xiYXJNVUkiLCJfdGVtcGxhdGVPYmplY3QyIiwiVG9vbGJhckl0ZW0iLCJkaXYiLCJfdGVtcGxhdGVPYmplY3QzIiwiZm9udFdlaWdodE1lZGl1bSIsIkhlYWRlciIsIl90ZW1wbGF0ZU9iamVjdDQiLCJMaWdodCIsInNwYW4iLCJfdGVtcGxhdGVPYmplY3Q1IiwiQm9sZCIsIl90ZW1wbGF0ZU9iamVjdDYiLCJOYXZJdGVtIiwiX3RlbXBsYXRlT2JqZWN0NyIsIl90ZW1wbGF0ZU9iamVjdDgiLCJOYXZJdGVtVGV4dCIsIl90ZW1wbGF0ZU9iamVjdDkiLCJOYXZpZ2F0b3IiLCJOYXZpZ2F0b3JfQXBwQmFyIiwicG9zaXRpb24iLCJjdXJyZW50QXBwbGljYXRpb24iLCJOYXZpZ2F0b3JfVG9vbGJhciIsIm5hdmlnYXRlIiwiSWNvbl9kZWZhdWx0IiwiQnV0dG9uX2RlZmF1bHQiLCJvbkxvZ291dCIsImNvbm5lY3QiLCJpc01vZGlmaWVkRXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsInNoaWZ0S2V5IiwiTGlua19MaW5rIiwiTGluayIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJwcmV2ZW50RGVmYXVsdCIsImhpc3RvcnlfZXMiLCJlc19MaW5rIiwiZHJhd2VyV2lkdGgiLCJEcmF3ZXIiLCJEcmF3ZXJNVUkiLCJTaWRlTWVudV90ZW1wbGF0ZU9iamVjdCIsIkxpc3QiLCJMaXN0TVVJIiwiU2lkZU1lbnVfdGVtcGxhdGVPYmplY3QyIiwiU2lkZU1lbnUiLCJTaWRlTWVudV9EcmF3ZXIiLCJ2YXJpYW50IiwiQXBwQmFyX2RlZmF1bHQiLCJUb29sYmFyX2RlZmF1bHQiLCJTaWRlTWVudV9MaXN0Iiwic3ViaGVhZGVyIiwiTGlzdFN1YmhlYWRlcl9kZWZhdWx0IiwiU2lkZU1lbnVfTGlzdEl0ZW1MaW5rIiwiTGlzdEl0ZW1Db250ZXh0IiwibGkiLCJTaWRlTWVudV90ZW1wbGF0ZU9iamVjdDMiLCJTaWRlTWVudV90ZW1wbGF0ZU9iamVjdDQiLCJTaWRlTWVudV90ZW1wbGF0ZU9iamVjdDUiLCJMaXN0SXRlbUxpbmsiLCJpdGVtUHJvcHMiLCJleHRlbmRzX2RlZmF1bHQiLCJMaXN0SXRlbV9kZWZhdWx0IiwicmVuZGVyTGluayIsInNlbGVjdGVkIiwiTGlzdEl0ZW1JY29uX2RlZmF1bHQiLCJMaXN0SXRlbVRleHRfZGVmYXVsdCIsIlBhZ2VIZWFkZXIiLCJSb3ciLCJjb250YWluZXIiLCJqdXN0aWZ5IiwiUGFnZUhlYWRlcl9IZWFkZXIiLCJQYWdlSGVhZGVyX0xpZ2h0IiwiR3JpZCIsIlBhZ2VIZWFkZXJfdGVtcGxhdGVPYmplY3QiLCJQYWdlSGVhZGVyX3RlbXBsYXRlT2JqZWN0MiIsIlBhZ2VIZWFkZXJfdGVtcGxhdGVPYmplY3QzIiwiYnJlYWRDcnVtYlNlbGVjdG9yIiwiTWFpbiIsIlR5cG9ncmFwaHkiLCJCb2R5X3RlbXBsYXRlT2JqZWN0IiwiQm9keSIsImxheW91dF9QYWdlSGVhZGVyIiwiUm9vdCIsIkxheW91dF90ZW1wbGF0ZU9iamVjdCIsIkxheW91dCIsImxheW91dF9OYXZpZ2F0b3IiLCJsYXlvdXRfU2lkZU1lbnUiLCJsYXlvdXRfQm9keSIsIldyYXBwZXIiLCJMb2FkZXJfdGVtcGxhdGVPYmplY3QiLCJUZXh0IiwiTG9hZGVyX3RlbXBsYXRlT2JqZWN0MiIsIkxvYWRlciIsIl9yZWYkdGV4dCIsIkdyaWRfZGVmYXVsdCIsIkNpcmN1bGFyUHJvZ3Jlc3NfZGVmYXVsdCIsIkF1dGhlbnRpY2F0aW9uIiwiY2xhc3NDYWxsQ2hlY2tfZGVmYXVsdCIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5fZGVmYXVsdCIsImdldFByb3RvdHlwZU9mX2RlZmF1bHQiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWRfZGVmYXVsdCIsImFzeW5jVG9HZW5lcmF0b3JfZGVmYXVsdCIsInJlZ2VuZXJhdG9yX2RlZmF1bHQiLCJtYXJrIiwiX2NhbGxlZSIsInVzZXJpbmZvIiwid3JhcCIsIl9jb250ZXh0IiwiaXNBdXRoZW50aWNhdGVkIiwic2VudCIsInJlZGlyZWN0IiwiYWJydXB0IiwiZ2V0VXNlciIsImdldElkVG9rZW4iLCJnZXRBY2Nlc3NUb2tlbiIsInN0b3AiLCJsb2dvdXQiLCJjaGVja0F1dGhlbnRpY2F0aW9uIiwibGF5b3V0X0xheW91dCIsImNvbW1vbl9Mb2FkZXIiLCJjcmVhdGVNdWlUaGVtZSIsImJsdWUiLCJ1c2VOZXh0VmFyaWFudHMiLCJyb290U2VsZWN0b3IiLCJsaXN0U2VsZWN0b3IiLCJnZXRDYWNoZWRVc2VyIiwidXNlcklkIiwidSIsIlVzZXJMaXN0IiwiZmV0Y2hVc2VycyIsImNvbW1vbl9FcnJvciIsIlRhYmxlX2RlZmF1bHQiLCJUYWJsZUhlYWRfZGVmYXVsdCIsIlRhYmxlUm93X2RlZmF1bHQiLCJUYWJsZUNlbGxfZGVmYXVsdCIsIlRhYmxlQm9keV9kZWZhdWx0IiwiZWRpdFVzZXIiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsIkZvcm0iLCJVc2VyRm9ybV90ZW1wbGF0ZU9iamVjdCIsIlVzZXJGb3JtIiwieHMiLCJUZXh0RmllbGRfZGVmYXVsdCIsImxhYmVsIiwiTmV3VXNlciIsIkZyYWdtZW50IiwiQ29udGVudENvbXBvbmVudCIsInJlY2lldmVCcmVhZENydW1iIiwiQ29udGVudFdyYXBwZXIiLCJDb250ZW50X3RlbXBsYXRlT2JqZWN0IiwiQ29udGVudCIsIkZvb3RlciIsIkZvb3Rlcl9XcmFwcGVyIiwiRm9vdGVyX3RlbXBsYXRlT2JqZWN0IiwiQnV0dG9uU3R5bGVkIiwiQnV0dG9uTXVpIiwiQnV0dG9uX3RlbXBsYXRlT2JqZWN0IiwiQnV0dG9uIiwidXNlclNlbGVjdG9yIiwiRWRpdFVzZXIiLCJmZXRjaFVzZXIiLCJ1c2VyX1VzZXJGb3JtIiwiRm9vdGVyX0Zvb3RlciIsIkJ1dHRvbl9CdXR0b24iLCJEaXJlY3RvcnlSb3V0ZXMiLCJkaXN0IiwiQXBwIiwiY2xpZW50X2lkIiwicmVkaXJlY3RfdXJpIiwiQ3NzQmFzZWxpbmVfZGVmYXVsdCIsImxheW91dF9BdXRoZW50aWNhdGlvbiIsInJvdXRlc19EaXJlY3RvcnlSb3V0ZXMiLCJfYmFiZWxfcnVudGltZV9oZWxwZXJzX2RlZmluZVByb3BlcnR5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsImVuZHBvaW50IiwidHlwZXMiLCJfTGlzdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY29uZmlndXJlU3RvcmUiLCJyZWR1eF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY29ubmVjdGVkX3JlYWN0X3JvdXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicmVkdXhfYXBpX21pZGRsZXdhcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImhpc3RvcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInJlZHV4X3RodW5rX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfcm9vdFJlZHVjZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl9taWRkbGV3YXJlX2h0dHBBdXRoSW5qZWN0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwidGh1bmsiLCJodHRwQXV0aEluamVjdG9yIiwiZW5oYW5jZXJzIiwiX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyIsIl9fV0VCUEFDS19PVVREQVRFRF9ERVBFTkRFTkNJRVNfXyIsIm5leHRDcmVhdGVSb290UmVkdWNlciIsInJlcXVpcmUiLCJBIiwidyIsInYiLCIkIiwieiIsIk4iLCJxIiwiRCIsIkUiLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJWIiwiWCIsIlkiLCJaIiwiZWUiLCJhZSIsImNlIiwic2UiLCJ0ZSIsImllIiwiZmUiLCJuZSIsImxlIiwib2UiLCJoZSIsInVlIiwiZGUiLCJiZSIsInBlIiwia2UiLCJnZSIsIkFlIiwiQ2UiLCJ3ZSIsInZlIiwieGUiLCIkZSIsInllIiwiT2UiLCJqZSIsInplIiwiTmUiLCJTZSIsIkZlIiwiV2UiLCJxZSIsIkJlIiwiRGUiLCJFZSIsIkdlIiwiSGUiLCJKZSIsIlJlIiwiVGUiLCJVZSIsIlZlIiwiWGUiLCJZZSIsIlFlIiwiSWUiLCJQZSIsIk1lIiwiTGUiLCJLZSIsInNpbXBsZUlzRXF1YWwiLCJyZXN1bHRGbiIsImlzRXF1YWwiLCJsYXN0VGhpcyIsImNhbGxlZE9uY2UiLCJpc05ld0FyZ0VxdWFsVG9MYXN0IiwibmV3QXJnIiwibmV3QXJncyIsIl9UYWJsZVJvdyIsIl9UZXh0RmllbGQiLCJwcm9wSXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvT2JqZWN0Iiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJ3YXJuaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ3YXJuaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiaW52YXJpYW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJpc1ZhbGlkVHlwZURlc2NyaXB0b3IiLCJfc2xpY2VkVG9BcnJheTMiLCJfbG9kYXNoMiIsInZhbGlkS2V5cyIsInZhbGlkQ2FsbEFQSUtleXMiLCJjYWxsQVBJIiwiY3JlZGVudGlhbHMiLCJiYWlsb3V0IiwiZmV0Y2giLCJfdHlwZXMiLCJyZXF1ZXN0VHlwZSIsInN1Y2Nlc3NUeXBlIiwiZmFpbHVyZVR5cGUiLCJyZWRlZmluZSIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsImtpbmQiLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsIiRlbnRyaWVzIiwiJGFueU5hdGl2ZSIsInRvSU9iamVjdCIsImFycmF5SW5kZXhPZiIsImRvY3VtZW50RWxlbWVudCIsIk9iamVjdFByb3RvIiwiaGlkZGVuS2V5cyIsInBJRSIsImdPUEQiLCJhY3Rpb25XaXRoIiwibm9ybWFsaXplVHlwZURlc2NyaXB0b3JzIiwiX3RvQ29uc3VtYWJsZUFycmF5MyIsIl9yZWdlbmVyYXRvcjIiLCJfYXN5bmNUb0dlbmVyYXRvcjMiLCJjb250ZW50VHlwZSIsIl94IiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJ0MCIsInQxIiwiX3gyIiwiX3gzIiwicmV0IiwiQXJyYXlQcm90byIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJzYWZlIiwiaXRlciIsIlNQRUNJRVMiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwiaW1wb3J0U2NyaXB0cyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJfc3RyaW5naWZ5MiIsIl9jcmVhdGVDbGFzczMiLCJfY29uZmlndXJhdGlvblZhbGlkYXRpb24iLCJfb2t0YUF1dGhKczIiLCJfcGFja2FnZUluZm8yIiwiY29udGFpbnNBdXRoVG9rZW5zIiwiYXNzZXJ0SXNzdWVyIiwiYXNzZXJ0Q2xpZW50SWQiLCJhc3NlcnRSZWRpcmVjdFVyaSIsIl9va3RhQXV0aCIsIl9jb25maWciLCJfaGlzdG9yeSIsImhhbmRsZUF1dGhlbnRpY2F0aW9uIiwibG9naW4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvciIsIl9zdGVwIiwicGFyc2VGcm9tVXJsIiwidG9rZW5NYW5hZ2VyIiwiZmluaXNoIiwiX2NhbGxlZTMiLCJfY29udGV4dDMiLCJnZXRVc2VySW5mbyIsInN1YiIsImNsYWltcyIsIl9yZWY0IiwiX2NhbGxlZTQiLCJfY29udGV4dDQiLCJfcmVmNSIsIl9jYWxsZWU1IiwiX2NvbnRleHQ1IiwiX3JlZjYiLCJfY2FsbGVlNiIsImZyb21VcmkiLCJhZGRpdGlvbmFsUGFyYW1zIiwicmVmZXJyZXJQYXRoIiwiX2NvbnRleHQ2Iiwib25BdXRoUmVxdWlyZWQiLCJfcmVmNyIsIl9jYWxsZWU3IiwiX2NvbnRleHQ3Iiwic2lnbk91dCIsIl9yZWY4IiwiX2NhbGxlZTgiLCJyZXNwb25zZVR5cGUiLCJzY29wZXMiLCJfY29udGV4dDgiLCJyZXNwb25zZV90eXBlIiwiZ2V0V2l0aFJlZGlyZWN0IiwiaHR0cCIsImdldFdlbGxLbm93biIsImtpZCIsIndlbGxLbm93biIsImp3a3NVcmkiLCJjYWNoZWRLZXkiLCJjbGVhclN0b3JhZ2UiLCJ2YWxpZGF0ZUNsYWltcyIsInZhbGlkYXRpb25QYXJhbXMiLCJhdWQiLCJpc3MiLCJnZXRUaW1lIiwiaWF0IiwiZXhwIiwibWF4Q2xvY2tTa2V3IiwiZ2V0T0F1dGhVcmxzIiwib2F1dGhQYXJhbXMiLCJhdXRob3JpemVVcmwiLCJ1c2VyaW5mb1VybCIsInNoYXJlZFJlc291cmNlU2VydmVyUmVnZXgiLCJsb2FkRnJhbWUiLCJib2R5IiwibG9hZFBvcHVwIiwicG9wdXBUaXRsZSIsImFwcGVhcmFuY2UiLCJ3aW5FbCIsImhhc2hUb09iamVjdCIsInBhcmFtIiwicGx1czJzcGFjZSIsInBhcmFtU3BsaXQiLCJmcmFnbWVudCIsImlzVG9rZW4iLCJldmVudFRhcmdldCIsIndlYnN0b3JhZ2UiLCJzdG9yYWdlTmFtZSIsInN0b3JhZ2VTdHJpbmciLCJzZXRTdG9yYWdlIiwic3RvcmFnZSIsIlJlYWN0SXMiLCJjb250ZXh0VHlwZSIsImdldERlZmF1bHRQcm9wcyIsIkZvcndhcmRSZWYiLCJzcGVjaWFsUHJvcGVydHkiLCJnZXRGdW5jdGlvbk5hbWUiLCJmbk5hbWVNYXRjaFJlZ2V4IiwiY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUiLCJzaGVldHMiLCJTaGVldHNNYW5hZ2VyIiwiU2hlZXRzUmVnaXN0cnkiLCJ0b0Nzc1ZhbHVlIiwiZ2V0RHluYW1pY1N0eWxlcyIsIl9nZXREeW5hbWljU3R5bGVzIiwiX3RvQ3NzVmFsdWUiLCJfU2hlZXRzUmVnaXN0cnkiLCJfU2hlZXRzTWFuYWdlciIsIl9SdWxlTGlzdCIsIl9zaGVldHMiLCJfSnNzMiIsIl9zeW1ib2xPYnNlcnZhYmxlMiIsIl9tb2R1bGVJZDIiLCJydWxlQ291bnRlciIsImpzc0lkIiwiX1J1bGVMaXN0MiIsIl9uYW1lIiwiZGVwbG95ZWQiLCJsaW5rZWQiLCJkZXBsb3kiLCJhZGRlZCIsIl9uYW1lMiIsImFkZFJ1bGUiLCJnZXRSdWxlcyIsIl9qc3NHbG9iYWwiLCJfanNzTmVzdGVkIiwiX2pzc0NhbWVsQ2FzZSIsIl9qc3NEZWZhdWx0VW5pdCIsIl9qc3NWZW5kb3JQcmVmaXhlciIsIl9qc3NQcm9wc1NvcnQiLCJuZXh0Q2xhc3NlcyIsIl9icmVha3BvaW50cyR2YWx1ZXMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl9icmVha3BvaW50cyR1bml0IiwidW5pdCIsIl9icmVha3BvaW50cyRzdGVwIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kSW5kZXgiLCJ1cHBlcmJvdW5kIiwiX29wdGlvbnMkZGFuZ2Vyb3VzbHlVIiwiZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MiLCJfb3B0aW9ucyRwcm9kdWN0aW9uUHIiLCJwcm9kdWN0aW9uUHJlZml4IiwiX29wdGlvbnMkc2VlZCIsInNlZWQiLCJzYWZlUHJlZml4IiwiX0J1dHRvbkJhc2UiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnIiwiX19yZWFjdEludGVybmFsU25hcHNob3QiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImZvdW5kV2lsbE1vdW50TmFtZSIsImZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUiLCJmb3VuZFdpbGxVcGRhdGVOYW1lIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnROYW1lIiwibmV3QXBpTmFtZSIsIm1heWJlU25hcHNob3QiLCJfX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nIiwiX01vZGFsIiwiX01vZGFsTWFuYWdlciIsIl9zdHlsZSIsIl9zY3JvbGxiYXJTaXplIiwiX2lzT3ZlcmZsb3dpbmciLCJfbWFuYWdlQXJpYUhpZGRlbiIsImZpbmRJbmRleE9mIiwiZ2V0UGFkZGluZ1JpZ2h0IiwiTW9kYWxNYW5hZ2VyIiwiX29wdGlvbnMkaGlkZVNpYmxpbmdOIiwiaGlkZVNpYmxpbmdOb2RlcyIsIl9vcHRpb25zJGhhbmRsZUNvbnRhaSIsImhhbmRsZUNvbnRhaW5lck92ZXJmbG93IiwibW9kYWxzIiwibW9kYWwiLCJtb2RhbElkeCIsIm1vZGFsUmVmIiwiYXJpYUhpZGRlbiIsImFyaWFIaWRkZW5TaWJsaW5ncyIsIm1vdW50Tm9kZSIsImNvbnRhaW5lcklkeCIsIm92ZXJmbG93aW5nIiwicHJldlBhZGRpbmdzIiwib3ZlcmZsb3ciLCJwYWRkaW5nUmlnaHQiLCJzY3JvbGxiYXJTaXplIiwiZml4ZWROb2RlcyIsInNldENvbnRhaW5lclN0eWxlIiwicmVtb3ZlQ29udGFpbmVyU3R5bGUiLCJuZXh0VG9wIiwiX2NhbWVsaXplIiwicmVjYWxjIiwiX2luRE9NIiwic2Nyb2xsRGl2IiwidG9wIiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImN1cnJlbnROb2RlIiwic2hvdyIsIm1vdW50IiwiQkxBQ0tMSVNUIiwidGFnTmFtZSIsImlzSGlkYWJsZSIsInNpYmxpbmdzIiwicmVtb3ZlQXR0cmlidXRlIiwiX3B1cmUiLCJfU3ZnSWNvbiIsIkFycm93RHJvcERvd24iLCJfc2V0U3RhdGljIiwiX2dldERpc3BsYXlOYW1lIiwiQmFzZUNvbXBvbmVudCIsImhvY05hbWUiLCJOYXRpdmVTZWxlY3RJbnB1dCIsIkljb25Db21wb25lbnQiLCJzZWxlY3QiLCJmaWxsZWQiLCJvdXRsaW5lZCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJjcmVhdGVUaHVua01pZGRsZXdhcmUiLCJleHRyYUFyZ3VtZW50Iiwid2l0aEV4dHJhQXJndW1lbnQiLCJyc2FhIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19vYmplY3RTcHJlYWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwiQXV0aG9yaXphdGlvbiIsInRvU2hlZXQiLCJjb250ZW50IiwiY29sdW1uIiwiZGVwdGgiLCJmYWN0b3J5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsIm1zR3JpZFJvdyIsIm1zR3JpZFJvd1NwYW4iLCJtc0dyaWRDb2x1bW4iLCJtc0dyaWRDb2x1bW5TcGFuIiwiZm9udFdlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiX0RyYXdlciIsIl9MaXN0U3ViaGVhZGVyIiwiX0xpc3RJdGVtIiwiX0xpc3RJdGVtSWNvbiIsIl9MaXN0SXRlbVRleHQiLCJfQ2lyY3VsYXJQcm9ncmVzcyIsIjUwIiwiMTAwIiwiMjAwIiwiMzAwIiwiNDAwIiwiNTAwIiwiNjAwIiwiNzAwIiwiODAwIiwiOTAwIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsIl9UYWJsZSIsIl9UYWJsZUhlYWQiLCJfVGFibGVCb2R5IiwiX0Nzc0Jhc2VsaW5lIiwicmVhY3RQcm9wc1JlZ2V4IiwibWVtb2l6ZV9lc20iLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJyZWFjdF9yZWR1eF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiY29ubmVjdGVkX3JlYWN0X3JvdXRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX3N0YXRlX2NvbmZpZ3VyZVN0b3JlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyb290RWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwiUmVhY3RET00iLCJhYSIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJ1cGRhdGVyIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjdXJyZW50RGlzcGF0Y2hlciIsIl9fc2VsZiIsIl9fc291cmNlIiwiX293bmVyIiwia2V5UHJlZml4IiwiOiIsImNhIiwiZGEiLCJiYSIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsImNvbXBhcmUiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjcmVhdGVGYWN0b3J5IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfUHJvZmlsZXIiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwib25FcnJvciIsImthIiwibWEiLCJuYSIsIm9hIiwicGEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInFhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJzYSIsInRhIiwidmEiLCJ3YSIsInhhIiwibGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkNhIiwiaW5qZWN0RXZlbnRQbHVnaW5PcmRlciIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsIkRhIiwic3RhdGVOb2RlIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJkaXNwYXRjaENvbmZpZyIsIk9hIiwiX3RhcmdldEluc3QiLCJQYSIsIlFhIiwiUmEiLCJTYSIsIlRhIiwiVWEiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJWYSIsIldhIiwiWGEiLCJhbmltYXRpb24iLCJZYSIsIlphIiwiJGEiLCJhYiIsImJiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJrYiIsImV2ZW50UG9vbCIsImxiIiwiZGVzdHJ1Y3RvciIsImpiIiwiZ2V0UG9vbGVkIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsIm1iIiwibmIiLCJvYiIsInBiIiwicWIiLCJyYiIsInNiIiwidGIiLCJ1YiIsImJlZm9yZUlucHV0IiwiYnViYmxlZCIsImNhcHR1cmVkIiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJ2YiIsIndiIiwieGIiLCJkZXRhaWwiLCJ5YiIsIkJiIiwibG9jYWxlIiwiemIiLCJjaGFyIiwiQWIiLCJDYiIsIkRiIiwiRWIiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJkYXRlIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwidGVsIiwidGltZSIsIndlZWsiLCJRYiIsIm5vZGVOYW1lIiwiUmIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJTYiIsIlRiIiwiVmIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlViIiwiV2IiLCJjaGVja2VkIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwib2MiLCJwYyIsInFjIiwicmMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidmMiLCJ4YyIsInljIiwidGMiLCJ1YyIsInNjIiwic2V0QXR0cmlidXRlTlMiLCJ6YyIsIkFjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJCYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJDYyIsIkRjIiwiRWMiLCJGYyIsImFjdGl2ZUVsZW1lbnQiLCJ0YWJJbmRleCIsIkdjIiwiY2hhbmdlIiwiSGMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJWYyIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJXYyIsInZpZXciLCJYYyIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJZYyIsImdldE1vZGlmaWVyU3RhdGUiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJlZCIsInBvaW50ZXJJZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJmZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiZ2QiLCJwYXJlbnRXaW5kb3ciLCJhbHRlcm5hdGUiLCJoZCIsImpkIiwia2QiLCJlZmZlY3RUYWciLCJsZCIsIm5kIiwic2libGluZyIsIm9kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsInBkIiwiY2xpcGJvYXJkRGF0YSIsInFkIiwicmQiLCJzZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJ0ZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJ1ZCIsInZkIiwiZGF0YVRyYW5zZmVyIiwid2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwieGQiLCJ5ZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJpc0ludGVyYWN0aXZlIiwiRGQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJFZCIsIkZkIiwiR2QiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIkhkIiwiSWQiLCJKZCIsIktkIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiZmlyc3RDaGlsZCIsIlJkIiwiVGQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsIlVkIiwiY29udGVudEVkaXRhYmxlIiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJvblNlbGVjdCIsImRlZmF1bHRTZWxlY3RlZCIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJtYXRobWwiLCJzdmciLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiZ3JpZEFyZWEiLCJsaW5lQ2xhbXAiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJ0cmFjayIsIndiciIsImJsdXIiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImVsZW1lbnRUeXBlIiwicGVuZGluZ1Byb3BzIiwiZmlyc3RDb250ZXh0RGVwZW5kZW5jeSIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsImV4cGlyYXRpb25UaW1lIiwiWmUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiZWYiLCJkaWRFcnJvciIsImVhcmxpZXN0UGVuZGluZ1RpbWUiLCJsYXRlc3RQZW5kaW5nVGltZSIsImZmIiwiZ2YiLCJsYXRlc3RQaW5nZWRUaW1lIiwiZWFybGllc3RTdXNwZW5kZWRUaW1lIiwibGF0ZXN0U3VzcGVuZGVkVGltZSIsImhmIiwibmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT24iLCJqZiIsImtmIiwiYmFzZVN0YXRlIiwiZmlyc3RVcGRhdGUiLCJsYXN0VXBkYXRlIiwiZmlyc3RDYXB0dXJlZFVwZGF0ZSIsImxhc3RDYXB0dXJlZFVwZGF0ZSIsImZpcnN0Q2FwdHVyZWRFZmZlY3QiLCJsYXN0Q2FwdHVyZWRFZmZlY3QiLCJsZiIsIm1mIiwibmYiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIm9ic2VydmVkQml0cyIsIkVmIiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJKZiIsIktmIiwiTGYiLCJOZiIsIk9mIiwiUGYiLCJVZiIsIl9yZWFjdEludGVybmFsRmliZXIiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlZmIiwiV2YiLCJyZWFkQ29udGV4dCIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiX3N0cmluZ1JlZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIndnIiwicGVuZGluZ0NvbnRleHQiLCJ4ZyIsInRpbWVkT3V0QXQiLCJ5ZyIsIk1mIiwiaHlkcmF0ZSIsImhpZGRlbiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsInpnIiwiQWciLCJCZyIsIkZnIiwiR2ciLCJIZyIsIklnIiwiSmciLCJLZyIsImRlc3Ryb3kiLCJMZyIsIk1nIiwiTmciLCJfcmVhY3RSb290Q29udGFpbmVyIiwib25jbGljayIsIk9nIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIlBnIiwiUWciLCJSZyIsImNvbXBvbmVudERpZENhdGNoIiwiU2ciLCJjb21wb25lbnRTdGFjayIsIlRnIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiZWgiLCJjcmVhdGVFbGVtZW50TlMiLCJmaCIsImdoIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiaGgiLCJtYXhEdXJhdGlvbiIsImloIiwiZmluaXNoZWRXb3JrIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsInVuc3RhYmxlX25vdyIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiRmgiLCJ0aW1lb3V0SGFuZGxlIiwiSGgiLCJJaCIsIm5leHRTY2hlZHVsZWRSb290IiwiSmgiLCJLaCIsIkxoIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJfb25Db21wbGV0ZSIsIk1oIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInJhbmdlQ291bnQiLCJkYiIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaCIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiU2QiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbExlZnQiLCJGYiIsIkdiIiwid2MiLCJjaSIsIkNnIiwiRGciLCJkaSIsIkljIiwiRWciLCJOaCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJWaCIsIl9yb290IiwiX2NhbGxiYWNrcyIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsIldoIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsIlhoIiwiX2ludGVybmFsUm9vdCIsIlloIiwiJGgiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJaaCIsImFpIiwiVWgiLCJmb3JtIiwiY29tbWl0IiwidW5tb3VudCIsImNyZWF0ZUJhdGNoIiwiYmkiLCJjcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2ludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoU3luYyIsInVuc3RhYmxlX2ZsdXNoQ29udHJvbGxlZCIsIkV2ZW50cyIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJlaSIsImZpIiwicHJldmlvdXMiLCJwcmlvcml0eUxldmVsIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwZXJmb3JtYW5jZSIsIl9zY2hlZE1vY2siLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwic2hpbSIsInByb3BOYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlT2YiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJQcm9maWxlciIsIlBvcnRhbCIsImlzVmFsaWRFbGVtZW50VHlwZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNQcm9maWxlciIsImlzUG9ydGFsIiwiaXNTdHJpY3RNb2RlIiwiYWN0aW9ucyIsIl9Db25uZWN0ZWRSb3V0ZXIyIiwiX3JlZHVjZXIyIiwiX21pZGRsZXdhcmUyIiwiX3NlbGVjdG9yczIiLCJjcmVhdGVBbGwiLCJzdHJ1Y3R1cmUiLCJ3aWxkY2FyZEltcG9ydCIsImZpbHRlcmVkV2lsZGNhcmRJbXBvcnQiLCJfZmlsdGVyV2lsZGNhcmRJbXBvcnRfXyIsIl90eXBlT2ZPcmlnaW5hbEV4cG9ydCIsImFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSIsImlzRXh0ZW5zaWJsZSIsIl9wcm9wVHlwZXMyIiwiX3JlYWN0UmVkdXgiLCJfcmVhY3RSb3V0ZXIiLCJfYWN0aW9ucyIsImNyZWF0ZUNvbm5lY3RlZFJvdXRlciIsImdldEluIiwidG9KUyIsImluVGltZVRyYXZlbGxpbmciLCJfdG9KUyIsInBhdGhuYW1lSW5TdG9yZSIsInNlYXJjaEluU3RvcmUiLCJoYXNoSW5TdG9yZSIsIl9wcm9wcyRoaXN0b3J5JGxvY2F0aSIsInBhdGhuYW1lSW5IaXN0b3J5Iiwic2VhcmNoSW5IaXN0b3J5IiwiaGFzaEluSGlzdG9yeSIsImhhbmRsZUxvY2F0aW9uQ2hhbmdlIiwiY3JlYXRlQ29ubmVjdFJvdXRlciIsImZyb21KUyIsIm1lcmdlIiwiaW5pdGlhbFJvdXRlclN0YXRlIiwiX2FjdGlvbiRwYXlsb2FkIiwiYXJyMiIsIl90b0NvbnN1bWFibGVBcnJheSIsImNyZWF0ZVNlbGVjdG9ycyIsImxhc3RQYXRobmFtZSIsImxhc3RNYXRjaCIsIl9nZXRJbjIiLCJhZGRUb1Vuc2NvcGFibGVzIiwiX2siLCJBcmd1bWVudHMiLCJnZXRLZXlzIiwidG9MZW5ndGgiLCJ0b0Fic29sdXRlSW5kZXgiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiVE9fU1RSSU5HIiwicG9zIiwiaXNJdGVyYWJsZSIsImdldEl0ZXJhdG9yIiwiaXRlckZuIiwiREVTQ1JJUFRPUlMiLCJNRVRBIiwiS0VZIiwiJGZhaWxzIiwid2tzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QTiIsIiRKU09OIiwiX3N0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsImlzRW51bSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnR5IiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiSVNfT1AiLCIkc2V0IiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInNldERlc2MiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsImdPUFMiLCJnZXRTeW1ib2xzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsIm9iamVjdFRhZyIsImZ1bmNQcm90byIsIm9iamVjdFByb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlIiwidHJhbnNmb3JtIiwib3ZlckFyZyIsImlzT2JqZWN0TGlrZSIsImlzSG9zdE9iamVjdCIsIkN0b3IiLCIkZ2V0UHJvdG90eXBlT2YiLCJmYWlscyIsImJ1Z2d5IiwiJE9iamVjdCIsIl9mcm9tMiIsImlzQXJyYXlJdGVyIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyRm4iLCJhcnJheUxpa2UiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiJGFzc2lnbiIsImhhZFJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJvbGRSdW50aW1lIiwiT3AiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJyZXZlcnNlIiwiQ29udGV4dCIsInNraXBUZW1wUmVzZXQiLCJfc2VudCIsImRlbGVnYXRlIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiYWZ0ZXJMb2MiLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwiaXRlcmFibGUiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiX2ludm9rZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInVud3JhcHBlZCIsInB1c2hUcnlFbnRyeSIsImxvY3MiLCJpdGVyYXRvck1ldGhvZCIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJhbkluc3RhbmNlIiwiZm9yT2YiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInByb21pc2VSZXNvbHZlIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfYyIsIl92IiwicmVhY3Rpb24iLCJleGl0ZWQiLCJfaCIsIm9uSGFuZGxlVW5oYW5kbGVkIiwib25VbmhhbmRsZWQiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsInVuIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJjYWxsYmFja2ZuIiwiX2NhbGxBUEkiLCJfcmVxdWVzdFR5cGUiLCJfY2FsbEFQSSRvcHRpb25zIiwiX2NhbGxBUEkkZmV0Y2giLCJkb0ZldGNoIiwiX25vcm1hbGl6ZVR5cGVEZXNjcmlwIiwiX25vcm1hbGl6ZVR5cGVEZXNjcmlwMiIsInQyIiwidDMiLCJ0NCIsInQ1IiwidDYiLCJ0NyIsInQ4IiwidDkiLCJ0MTAiLCJ0MTEiLCJ0MTIiLCJ0MTMiLCJ0MTQiLCJ0MTUiLCJ0MTYiLCJ0MTciLCJ0MTgiLCJ0MTkiLCJ0MjAiLCJ0MjEiLCJ0MjIiLCJ0MjMiLCJDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yIiwiY29uZmlnVXRpbCIsImNvcHlDcmVkZW50aWFsc01lc3NhZ2UiLCJ0ZXN0aW5nIiwiY29weU1lc3NhZ2UiLCJkaXNhYmxlSHR0cHNDaGVjayIsImFzc2VydENsaWVudFNlY3JldCIsImNsaWVudFNlY3JldCIsInJlcXdlc3RSZXF1ZXN0IiwicmVxd2VzdCIsIndpdGhDcmVkZW50aWFscyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIlhIUjIiLCJieVRhZyIsImh0dHBzUmUiLCJwcm90b2NvbFJlIiwidHdvSHVuZG8iLCJyZXF1ZXN0ZWRXaXRoIiwidW5pcWlkIiwiY2FsbGJhY2tQcmVmaXgiLCJsYXN0VmFsdWUiLCJ4bWxIdHRwUmVxdWVzdCIsInhEb21haW5SZXF1ZXN0IiwiZGVmYXVsdEhlYWRlcnMiLCIqIiwieG1sIiwiWERvbWFpblJlcXVlc3QiLCJBY3RpdmVYT2JqZWN0IiwiZ2xvYmFsU2V0dXBPcHRpb25zIiwiZGF0YUZpbHRlciIsInN1Y2NlZWQiLCJoYW5kbGVSZWFkeVN0YXRlIiwic3VjY2VzcyIsIl9hYm9ydGVkIiwiX3RpbWVkT3V0Iiwic2V0SGVhZGVycyIsImlzQUZvcm1EYXRhIiwiRm9ybURhdGEiLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2V0Q3JlZGVudGlhbHMiLCJnZW5lcmFsQ2FsbGJhY2siLCJ1cmxhcHBlbmQiLCJoYW5kbGVKc29ucCIsInJlcUlkIiwiY2JrZXkiLCJjYnZhbCIsImdldGNhbGxiYWNrUHJlZml4IiwiY2JyZWciLCJsb2FkZWQiLCJpc0lFMTAiLCJodG1sRm9yIiwib25sb2FkIiwiYWJvcnQiLCJnZXRSZXF1ZXN0IiwidG9RdWVyeVN0cmluZyIsInNlbmRXYWl0Iiwib25wcm9ncmVzcyIsIlJlcXdlc3QiLCJpbml0Iiwic2V0VHlwZSIsImhlYWRlciIsIl9zdWNjZXNzSGFuZGxlciIsIl9mdWxmaWxsbWVudEhhbmRsZXJzIiwiX2Vycm9ySGFuZGxlcnMiLCJfY29tcGxldGVIYW5kbGVycyIsIl9lcnJlZCIsIl9yZXNwb25zZUFyZ3MiLCJnZXRSZXNwb25zZUhlYWRlciIsImZpbHRlcmVkUmVzcG9uc2UiLCJyZXNwb25zZVhNTCIsInBhcnNlRXJyb3IiLCJ0aW1lZE91dCIsIm5vcm1hbGl6ZSIsInNlcmlhbCIsIm9wdENiIiwic2VsZWN0ZWRJbmRleCIsImVhY2hGb3JtRWxlbWVudCIsInNlcmlhbGl6ZVN1YnRhZ3MiLCJzZXJpYWxpemVRdWVyeVN0cmluZyIsInNlcmlhbGl6ZUFycmF5Iiwic2VyaWFsaXplSGFzaCIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJyYnJhY2tldCIsInJldHJ5IiwiYWx3YXlzIiwic2VyaWFsaXplIiwib3B0IiwidHJhZCIsImVuYyIsImNvbXBhdCIsImFqYXhTZXR1cCIsIm9hdXRoVXRpbCIsInR4Iiwic2Vzc2lvbiIsIlRva2VuTWFuYWdlciIsIk9rdGFBdXRoQnVpbGRlciIsImlzVXJsUmVnZXgiLCJpZ25vcmVTaWduYXR1cmUiLCJjbG9zZVNlc3Npb24iLCJleGlzdHMiLCJzZXNzaW9uRXhpc3RzIiwiZ2V0U2Vzc2lvbiIsInJlZnJlc2giLCJyZWZyZXNoU2Vzc2lvbiIsInNldENvb2tpZUFuZFJlZGlyZWN0IiwidHJhbnNhY3Rpb25TdGF0dXMiLCJyZXN1bWUiLCJyZXN1bWVUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uRXhpc3RzIiwiX2dldENvb2tpZSIsImF1dGhvcml6ZSIsIl9nZXRMb2NhdGlvbkhyZWYiLCJnZXRXaXRob3V0UHJvbXB0IiwiZ2V0V2l0aFBvcHVwIiwiZGVjb2RlIiwiZGVjb2RlVG9rZW4iLCJyZW5ldyIsInJlbmV3VG9rZW4iLCJ2ZXJpZnkiLCJ2ZXJpZnlUb2tlbiIsIl9zZXRMb2NhdGlvbiIsIl9nZXRIaXN0b3J5IiwiX2dldExvY2F0aW9uIiwiX2dldERvY3VtZW50IiwiZmluZ2VycHJpbnQiLCJfZ2V0VXNlckFnZW50IiwiaXNXaW5kb3dzUGhvbmUiLCJmZWF0dXJlcyIsImlzRmluZ2VycHJpbnRTdXBwb3J0ZWQiLCJhZ2VudCIsImlzUG9wdXBQb3N0TWVzc2FnZVN1cHBvcnRlZCIsImlzSUU4b3I5IiwiaXNUb2tlblZlcmlmeVN1cHBvcnRlZCIsImNyeXB0byIsInN1YnRsZSIsInNpZ25JbiIsInBvc3RUb1RyYW5zYWN0aW9uIiwic2VuZEZpbmdlcnByaW50IiwiWC1EZXZpY2UtRmluZ2VycHJpbnQiLCJmb3Jnb3RQYXNzd29yZCIsInVubG9ja0FjY291bnQiLCJ2ZXJpZnlSZWNvdmVyeVRva2VuIiwid2ViZmluZ2VyIiwib3JpZ2luIiwicGFyZW50RWxlbWVudCIsIk9rdGFBdXRoIiwic2VhcmNoRWxlbWVudCIsImFicyIsIkluZmluaXR5IiwiY2hhcnMiLCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3IiLCJidG9hIiwib3V0cHV0IiwiYnMiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidW5yZWYiLCJlbnJvbGwiLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJfb25UaW1lb3V0IiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImF0dGFjaFRvIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsImluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uIiwiaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24iLCJpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uIiwiT2xkQ29va2llcyIsImFwaSIsImF0dHJpYnV0ZXMiLCJjb252ZXJ0ZXIiLCJkZWZhdWx0cyIsInNldE1pbGxpc2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInN0cmluZ2lmaWVkQXR0cmlidXRlcyIsImNvb2tpZSIsInJkZWNvZGUiLCJyZWFkIiwid2l0aENvbnZlcnRlciIsIkF1dGhQb2xsU3RvcEVycm9yIiwiYWRkU3RhdGVUb2tlbiIsImJ1aWx0QXJncyIsIkF1dGhUcmFuc2FjdGlvbiIsImdldFBvbGxGbiIsInJlbWVtYmVyRGV2aWNlIiwiYXV0b1B1c2giLCJwb2xsTGluayIsInBvbGxGbiIsImdldFN0YXRlVG9rZW4iLCJpc1BvbGxpbmciLCJyZXRyeUNvdW50IiwicmVjdXJzaXZlUG9sbCIsInBvbGxSZXMiLCJmYWN0b3JSZXN1bHQiLCJkZWxheUxlbmd0aCIsImxpbmsyZm4iLCJsayIsImhpbnRzIiwiYWxsb3ciLCJmYWN0b3JUeXBlIiwicHJvdmlkZXIiLCJwcm9maWxlIiwidXBkYXRlUGhvbmUiLCJmbGF0dGVuRW1iZWRkZWQiLCJvYmpBcnIiLCJvbCIsImVtYmVkZGVkIiwiX2VtYmVkZGVkIiwiZm5zIiwicG9sbCIsImxpbmtzMmZucyIsInNlc3Npb25Ub2tlbiIsInJlZGlyZWN0VXJsIiwiY2hlY2tBY2NvdW50U2V0dXBDb21wbGV0ZSIsInNka0NyeXB0byIsIk9BdXRoRXJyb3IiLCJkZWNvZGVkVG9rZW4iLCJqd3QiLCJzaWduYXR1cmUiLCJ2YWxpZGF0aW9uT3B0aW9ucyIsInZhbGlkIiwiYWRkUG9zdE1lc3NhZ2VMaXN0ZW5lciIsInJlc3BvbnNlSGFuZGxlciIsImhhbmRsZU9BdXRoUmVzcG9uc2UiLCJ1cmxzIiwidG9rZW5UeXBlcyIsInRva2VuRGljdCIsInRva2VuVHlwZSIsImF1dGhvcml6YXRpb25Db2RlIiwiZ2V0RGVmYXVsdE9BdXRoUGFyYW1zIiwib2F1dGhPcHRpb25zIiwicmVzcG9uc2VNb2RlIiwiYnVpbGRBdXRob3JpemVQYXJhbXMiLCJvYXV0aFF1ZXJ5UGFyYW1zIiwicmVzcG9uc2VfbW9kZSIsImlkcCIsIm1heF9hZ2UiLCJtYXhBZ2UiLCJjb252ZXJ0T0F1dGhQYXJhbXNUb1F1ZXJ5UGFyYW1zIiwiZ2V0VG9rZW4iLCJyZXF1ZXN0VXJsIiwiZ2V0T3JpZ2luIiwiaWZyYW1lUHJvbWlzZSIsImlmcmFtZUVsIiwicG9wdXBQcm9taXNlIiwid2luZG93T3B0aW9ucyIsIndpbmRvd0VsIiwid2luZG93T3JpZ2luIiwicmVkaXJlY3RVcmlPcmlnaW4iLCJoYXNoQ2hhbmdlSGFuZGxlciIsImNsb3NlZCIsImFkZEZyYWdtZW50TGlzdGVuZXIiLCJwb3B1cERlZmVycmVkIiwiY2xvc2VQb2xsZXIiLCJ3aW4iLCJoYXNDbG9zZWQiLCJyZXNwVHlwZSIsIm9hdXRoUGFyYW1zQ29va2llIiwibmF0aXZlSGlzdG9yeSIsIm5hdGl2ZURvYyIsIm5hdGl2ZUxvYyIsInJlbW92ZUhhc2giLCJhY2Nlc3NUb2tlbk9iamVjdCIsImF1dGhlbnRpY2F0ZUhlYWRlciIsImVycm9yTWF0Y2hlcyIsImVycm9yRGVzY3JpcHRpb25NYXRjaGVzIiwiZXJyb3JEZXNjcmlwdGlvbiIsImFsZ28iLCJpbXBvcnRLZXkiLCJjcnlwdG9LZXkiLCJiNjRTaWduYXR1cmUiLCJzdW1tYXJ5IiwiRW1pdHRlciIsImVtaXRFcnJvciIsInRva2VuTWdtdFJlZiIsImVtaXR0ZXIiLCJjbGVhckV4cGlyZUV2ZW50VGltZW91dCIsImV4cGlyZVRpbWVvdXRzIiwicmVuZXdQcm9taXNlIiwic2V0RXhwaXJlRXZlbnRUaW1lb3V0IiwiY2xvY2tTa2V3IiwiZXhwaXJlRXZlbnRXYWl0IiwiZXhwaXJlRXZlbnRUaW1lb3V0IiwiZW1pdEV4cGlyZWQiLCJ0b2tlblN0b3JhZ2UiLCJnZXRBc3luYyIsImF1dG9SZW5ldyIsImZyZXNoVG9rZW4iLCJjbGVhckV4cGlyZUV2ZW50VGltZW91dEFsbCIsInNldEV4cGlyZUV2ZW50VGltZW91dEFsbCIsImV2dEFyciIsImV2dHMiLCJsaXZlRXZlbnRzIiwicmVtb3ZlSXRlbSIsIlNlY3VyZSIsIlJlbmRlcldyYXBwZXIiLCJyZW5kZXJQcm9wcyIsIl9Db21wb25lbnQyIiwiY3JlYXRlUmVuZGVyV3JhcHBlciIsIl9zZXRQcm90b3R5cGVPZiIsIl9oZWxwZXJzIiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsImdyZXkiLCJmbGV4RGlyZWN0aW9uIiwiYXBwQmFyIiwicG9zaXRpb25GaXhlZCIsInBvc2l0aW9uQWJzb2x1dGUiLCJwb3NpdGlvblN0aWNreSIsInBvc2l0aW9uU3RhdGljIiwicG9zaXRpb25SZWxhdGl2ZSIsImNvbG9yRGVmYXVsdCIsImJhY2tncm91bmRDb2xvciIsImdldENvbnRyYXN0VGV4dCIsImNvbG9yUHJpbWFyeSIsIm1haW4iLCJjb250cmFzdFRleHQiLCJjb2xvclNlY29uZGFyeSIsInNlY29uZGFyeSIsInNxdWFyZSIsImVsZXZhdGlvbiIsImNsb25lU3R5bGUiLCJ0eXBlT2ZTdHlsZSIsIl9pc09ic2VydmFibGUyIiwibmV3U3R5bGUiLCJDU1MiLCJfaXNJbkJyb3dzZXIyIiwiX1N0eWxlU2hlZXQyIiwiX1BsdWdpbnNSZWdpc3RyeTIiLCJfcnVsZXMyIiwiX29ic2VydmFibGVzMiIsIl9mdW5jdGlvbnMyIiwiX3NoZWV0czIiLCJfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyIiwiX2NyZWF0ZVJ1bGUzIiwiX0RvbVJlbmRlcmVyMiIsIl9WaXJ0dWFsUmVuZGVyZXIyIiwiZGVmYXVsdFBsdWdpbnMiLCJpbnN0YW5jZUNvdW50ZXIiLCJKc3MiLCJzZXR1cCIsImluc2VydGlvblBvaW50Iiwib25Qcm9jZXNzU2hlZXQiLCJydWxlT3B0aW9ucyIsInBsdWdpbiIsIlBsdWdpbnNSZWdpc3RyeSIsImhvb2tzIiwib25Qcm9jZXNzU3R5bGUiLCJuZXh0U3R5bGUiLCJwcm9jZXNzZWRWYWx1ZSIsIl9TaW1wbGVSdWxlMiIsIl9LZXlmcmFtZXNSdWxlMiIsIl9Db25kaXRpb25hbFJ1bGUyIiwiX0ZvbnRGYWNlUnVsZTIiLCJfVmlld3BvcnRSdWxlMiIsIkBjaGFyc2V0IiwiQGltcG9ydCIsIkBuYW1lc3BhY2UiLCJAa2V5ZnJhbWVzIiwiQG1lZGlhIiwiQHN1cHBvcnRzIiwiQGZvbnQtZmFjZSIsIkB2aWV3cG9ydCIsIkAtbXMtdmlld3BvcnQiLCJSdWxlQ2xhc3MiLCJTaW1wbGVSdWxlIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIkNvbmRpdGlvbmFsUnVsZSIsIkZvbnRGYWNlUnVsZSIsIlZpZXdwb3J0UnVsZSIsInN0eWxlJCIsInN0eWxlUnVsZSIsIl9sb29wIiwibmV4dFZhbHVlIiwiZm5WYWx1ZXNOcyIsImZuU3R5bGVOcyIsImZuU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiQ1NTUnVsZVR5cGVzIiwiZXh0cmFjdEtleSIsImdldEhlYWQiLCJpc0F0dGFjaGVkIiwiZmluZFByZXZOb2RlIiwiZmluZEhpZ2hlclNoZWV0IiwiZmluZEhpZ2hlc3RTaGVldCIsIm5leHRFbGVtZW50U2libGluZyIsImNvbW1lbnQiLCJjaGlsZE5vZGVzIiwiZmluZENvbW1lbnROb2RlIiwicXVlcnlTZWxlY3RvciIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsIm1lZGlhIiwicHJldk5vZGUiLCJpbnNlcnRpb25Qb2ludEVsZW1lbnQiLCJfcGFyZW50Tm9kZSIsImluc2VydFN0eWxlIiwiX2luZGV4IiwibmV3Q3NzUnVsZSIsIlZpcnR1YWxSZW5kZXJlciIsInByb3BLZXkiLCJHbG9iYWxDb250YWluZXJSdWxlIiwicHJlZml4S2V5IiwiR2xvYmFsUHJlZml4ZWRSdWxlIiwiYWRkU2NvcGUiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwiY3JlYXRlUnVsZSIsInNlcGFyYXRvclJlZ0V4cCIsInNjb3BlZCIsImdldFJlcGxhY2VSZWYiLCJnZXRSdWxlIiwiaGFzQW5kIiwicmVwbGFjZVBhcmVudFJlZnMiLCJuZXN0ZWRQcm9wIiwicGFyZW50UHJvcCIsInBhcmVudFNlbGVjdG9ycyIsIm5lc3RlZFNlbGVjdG9ycyIsIm5lc3RlZCIsInBhcmVudFJlZ0V4cCIsIm5lc3RpbmdMZXZlbCIsInJlcGxhY2VSZWYiLCJpc05lc3RlZCIsImlzTmVzdGVkQ29uZGl0aW9uYWwiLCJyZWZSZWdFeHAiLCJjb252ZXJ0Q2FzZSIsImh5cGhlbmF0ZWRQcm9wIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJjb252ZXJ0ZWQiLCJhZGRDYW1lbENhc2VkVmVyc2lvbiIsInJlZ0V4cCIsImNhbWVsQ2FzZWRPcHRpb25zIiwiaXRlcmF0ZSIsInVuaXRzIiwiY29udmVydGVkVmFsdWUiLCJpbm5lclByb3AiLCJfaW5uZXJQcm9wIiwiYW5pbWF0aW9uLWRlbGF5IiwiYW5pbWF0aW9uLWR1cmF0aW9uIiwiYmFja2dyb3VuZC1wb3NpdGlvbiIsImJhY2tncm91bmQtcG9zaXRpb24teCIsImJhY2tncm91bmQtcG9zaXRpb24teSIsImJhY2tncm91bmQtc2l6ZSIsImJvcmRlci1ib3R0b20iLCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzIiwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMiLCJib3JkZXItYm90dG9tLXdpZHRoIiwiYm9yZGVyLWxlZnQiLCJib3JkZXItbGVmdC13aWR0aCIsImJvcmRlci1yYWRpdXMiLCJib3JkZXItcmlnaHQiLCJib3JkZXItcmlnaHQtd2lkdGgiLCJib3JkZXItc3BhY2luZyIsImJvcmRlci10b3AiLCJib3JkZXItdG9wLWxlZnQtcmFkaXVzIiwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMiLCJib3JkZXItdG9wLXdpZHRoIiwiYm9yZGVyLXdpZHRoIiwiYm9yZGVyLWFmdGVyLXdpZHRoIiwiYm9yZGVyLWJlZm9yZS13aWR0aCIsImJvcmRlci1lbmQtd2lkdGgiLCJib3JkZXItaG9yaXpvbnRhbC1zcGFjaW5nIiwiYm9yZGVyLXN0YXJ0LXdpZHRoIiwiYm9yZGVyLXZlcnRpY2FsLXNwYWNpbmciLCJib3R0b20iLCJib3gtc2hhZG93IiwiY29sdW1uLWdhcCIsImNvbHVtbi1ydWxlIiwiY29sdW1uLXJ1bGUtd2lkdGgiLCJjb2x1bW4td2lkdGgiLCJmbGV4LWJhc2lzIiwiZm9udC1zaXplIiwiZm9udC1zaXplLWRlbHRhIiwibGV0dGVyLXNwYWNpbmciLCJsb2dpY2FsLWhlaWdodCIsImxvZ2ljYWwtd2lkdGgiLCJtYXJnaW4tYWZ0ZXIiLCJtYXJnaW4tYmVmb3JlIiwibWFyZ2luLWJvdHRvbSIsIm1hcmdpbi1sZWZ0IiwibWFyZ2luLXJpZ2h0IiwibWFyZ2luLXRvcCIsIm1heC1oZWlnaHQiLCJtYXgtd2lkdGgiLCJtYXJnaW4tZW5kIiwibWFyZ2luLXN0YXJ0IiwibWFzay1wb3NpdGlvbi14IiwibWFzay1wb3NpdGlvbi15IiwibWFzay1zaXplIiwibWF4LWxvZ2ljYWwtaGVpZ2h0IiwibWF4LWxvZ2ljYWwtd2lkdGgiLCJtaW4taGVpZ2h0IiwibWluLXdpZHRoIiwibWluLWxvZ2ljYWwtaGVpZ2h0IiwibWluLWxvZ2ljYWwtd2lkdGgiLCJtb3Rpb24iLCJtb3Rpb24tb2Zmc2V0Iiwib3V0bGluZS1vZmZzZXQiLCJvdXRsaW5lLXdpZHRoIiwicGFkZGluZy1ib3R0b20iLCJwYWRkaW5nLWxlZnQiLCJwYWRkaW5nLXJpZ2h0IiwicGFkZGluZy10b3AiLCJwYWRkaW5nLWFmdGVyIiwicGFkZGluZy1iZWZvcmUiLCJwYWRkaW5nLWVuZCIsInBhZGRpbmctc3RhcnQiLCJwZXJzcGVjdGl2ZS1vcmlnaW4teCIsInBlcnNwZWN0aXZlLW9yaWdpbi15IiwicGVyc3BlY3RpdmUiLCJzaGFwZS1tYXJnaW4iLCJ0ZXh0LWluZGVudCIsInRleHQtc3Ryb2tlIiwidGV4dC1zdHJva2Utd2lkdGgiLCJ0cmFuc2Zvcm0tb3JpZ2luIiwidHJhbnNmb3JtLW9yaWdpbi14IiwidHJhbnNmb3JtLW9yaWdpbi15IiwidHJhbnNmb3JtLW9yaWdpbi16IiwidHJhbnNpdGlvbi1kZWxheSIsInRyYW5zaXRpb24tZHVyYXRpb24iLCJ2ZXJ0aWNhbC1hbGlnbiIsIndvcmQtc3BhY2luZyIsImJveC1zaGFkb3cteCIsImJveC1zaGFkb3cteSIsImJveC1zaGFkb3ctYmx1ciIsImJveC1zaGFkb3ctc3ByZWFkIiwiZm9udC1saW5lLWhlaWdodCIsInRleHQtc2hhZG93LXgiLCJ0ZXh0LXNoYWRvdy15IiwidGV4dC1zaGFkb3ctYmx1ciIsInZlbmRvciIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwic3VwcG9ydGVkUHJvcGVydHkiLCJjaGFuZ2VWYWx1ZSIsInN1cHBvcnRlZFZhbHVlIiwiX3ByZWZpeDIiLCJfc3VwcG9ydGVkUHJvcGVydHkyIiwiX3N1cHBvcnRlZFZhbHVlMiIsIl9jYW1lbGl6ZTIiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJ0b1VwcGVyIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJrZXkxIiwia2V5MiIsInN1YkNhY2hlIiwiaXNPYmplY3RPYmplY3QiLCJwcm90IiwiX3Rvb2xiYXIiLCJndXR0ZXJzIiwicGFkZGluZ0xlZnQiLCJ0b29sYmFyIiwibWluSGVpZ2h0IiwiX3BhbGV0dGUkcHJpbWFyeSIsIl9pbmRpZ28iLCJkYXJrIiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BpbmsiLCJfcGFsZXR0ZSRlcnJvciIsIl9yZWQiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0IiwiX2NvbG9yTWFuaXB1bGF0b3IiLCJhdWdtZW50Q29sb3IiLCJtYWluU2hhZGUiLCJsaWdodFNoYWRlIiwiZGFya1NoYWRlIiwiYWRkTGlnaHRPckRhcmsiLCJjb21tb24iLCJfY29tbW9uIiwiX2dyZXkiLCJoaW50IiwiZGl2aWRlciIsInBhcGVyIiwid2hpdGUiLCJob3ZlciIsImhvdmVyT3BhY2l0eSIsImRpc2FibGVkQmFja2dyb3VuZCIsImludGVudCIsInNoYWRlIiwiYmxhY2siLCJfcmVmJGZvbnRGYW1pbHkiLCJkZWZhdWx0Rm9udEZhbWlseSIsIl9yZWYkZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiX3JlZiRodG1sRm9udFNpemUiLCJodG1sRm9udFNpemUiLCJfcmVmJHVzZU5leHRWYXJpYW50cyIsIl9fTVVJX1VTRV9ORVhUX1RZUE9HUkFQSFlfVkFSSUFOVFNfXyIsImFsbFZhcmlhbnRzIiwiY29lZiIsImJ1aWxkVmFyaWFudCIsImxldHRlclNwYWNpbmciLCJjYXNpbmciLCJuZXh0VmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MU5leHQiLCJib2R5Mk5leHQiLCJidXR0b25OZXh0IiwiY2FzZUFsbENhcHMiLCJjYXB0aW9uTmV4dCIsIm92ZXJsaW5lIiwib2xkVmFyaWFudHMiLCJkaXNwbGF5NCIsIm1hcmdpbkxlZnQiLCJkaXNwbGF5MyIsImRpc3BsYXkyIiwiZGlzcGxheTEiLCJoZWFkbGluZSIsInN1YmhlYWRpbmciLCJib2R5MiIsImJvZHkxIiwiY2FwdGlvbiIsInRleHRUcmFuc2Zvcm0iLCJzaGFkb3dLZXlVbWJyYU9wYWNpdHkiLCJzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkiLCJzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSIsImNyZWF0ZVNoYWRvdyIsImJvcmRlclJhZGl1cyIsIm1vYmlsZVN0ZXBwZXIiLCJzbmFja2JhciIsInRvb2x0aXAiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwiZWxldmF0aW9ucyIsInNoYWRvdyIsInJvdW5kZWQiLCJQYXBlciIsInJlZ3VsYXIiLCJkZW5zZSIsImRpc2FibGVHdXR0ZXJzIiwidXNlclNlbGVjdCIsImNvbG9yQWN0aW9uIiwiY29sb3JFcnJvciIsImNvbG9yRGlzYWJsZWQiLCJmb250U2l6ZUluaGVyaXQiLCJmb250U2l6ZVNtYWxsIiwiZm9udFNpemVMYXJnZSIsIkljb24iLCJhcmlhLWhpZGRlbiIsIiY6aG92ZXIiLCJ0ZXh0RGVjb3JhdGlvbiIsIkBtZWRpYSAoaG92ZXI6IG5vbmUpIiwianVzdGlmeUNvbnRlbnQiLCJ0ZXh0UHJpbWFyeSIsInRleHRTZWNvbmRhcnkiLCJmbGF0IiwiZmxhdFByaW1hcnkiLCJmbGF0U2Vjb25kYXJ5Iiwib3V0bGluZWRQcmltYXJ5Iiwib3V0bGluZWRTZWNvbmRhcnkiLCJjb250YWluZWQiLCImJGZvY3VzVmlzaWJsZSIsIiY6YWN0aXZlIiwiY29udGFpbmVkUHJpbWFyeSIsImNvbnRhaW5lZFNlY29uZGFyeSIsInJhaXNlZCIsInJhaXNlZFByaW1hcnkiLCJyYWlzZWRTZWNvbmRhcnkiLCJmYWIiLCJleHRlbmRlZEZhYiIsImZvY3VzVmlzaWJsZSIsImNvbG9ySW5oZXJpdCIsIm1pbmkiLCJzaXplU21hbGwiLCJzaXplTGFyZ2UiLCJkaXNhYmxlRm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJmb2N1c1JpcHBsZSIsIl9nZXRQcm90b3R5cGVPZjMiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9rZXljb2RlIiwiX293bmVyV2luZG93IiwiX05vU3NyIiwiX2ZvY3VzVmlzaWJsZSIsIl9Ub3VjaFJpcHBsZSIsIl9jcmVhdGVSaXBwbGVIYW5kbGVyIiwidmVydGljYWxBbGlnbiIsIiY6Oi1tb3otZm9jdXMtaW5uZXIiLCJib3JkZXJTdHlsZSIsInBvaW50ZXJFdmVudHMiLCJCdXR0b25CYXNlIiwia2V5RG93biIsImZvY3VzVmlzaWJsZUNoZWNrVGltZSIsImZvY3VzVmlzaWJsZU1heENoZWNrVGltZXMiLCJoYW5kbGVNb3VzZURvd24iLCJmb2N1c1Zpc2libGVUaW1lb3V0IiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJvblJpcHBsZVJlZiIsInJpcHBsZSIsIm9uRm9jdXNWaXNpYmxlSGFuZGxlciIsIm9uRm9jdXNWaXNpYmxlIiwiaGFuZGxlS2V5RG93biIsImhhbmRsZUtleVVwIiwicHVsc2F0ZSIsImRldGVjdEZvY3VzVmlzaWJsZSIsImxpc3RlbkZvckZvY3VzS2V5cyIsImRpc2FibGVSaXBwbGUiLCJidXR0b25SZWYiLCJjZW50ZXJSaXBwbGUiLCJkaXNhYmxlVG91Y2hSaXBwbGUiLCJvbk1vdXNlRG93biIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VVcCIsIm9uVG91Y2hFbmQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIlRvdWNoUmlwcGxlUHJvcHMiLCJDb21wb25lbnRQcm9wIiwiYnV0dG9uUHJvcHMiLCJyb2xlIiwiY2VudGVyIiwibGFzdERpc2FibGVkIiwiTm9Tc3IiLCJtb3VudGVkIiwiYXR0ZW1wdCIsInNoYWRvd1Jvb3QiLCJmaW5kQWN0aXZlRWxlbWVudCIsImludGVybmFsIiwiZm9jdXNLZXlQcmVzc2VkIiwiaGFuZGxlS2V5VXBFdmVudCIsImtleVVwRXZlbnRUaW1lb3V0IiwiRk9DVVNfS0VZUyIsImlzRm9jdXNLZXkiLCJERUxBWV9SSVBQTEUiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiX1RyYW5zaXRpb25Hcm91cCIsIl9SaXBwbGUiLCJEVVJBVElPTiIsInJpcHBsZVZpc2libGUiLCJyaXBwbGVQdWxzYXRlIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJjaGlsZExlYXZpbmciLCJjaGlsZFB1bHNhdGUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZW50ZXIiLCIwJSIsIjEwMCUiLCJAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCIsIkBrZXlmcmFtZXMgbXVpLXJpcHBsZS1wdWxzYXRlIiwiNTAlIiwiVG91Y2hSaXBwbGUiLCJuZXh0S2V5IiwicmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwiaWdub3JpbmdNb3VzZURvd24iLCJyaXBwbGVYIiwicmlwcGxlWSIsInJpcHBsZVNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic3FydCIsInNpemVYIiwic2l6ZVkiLCJjbGllbnRIZWlnaHQiLCJzdGFydFRpbWVyQ29tbWl0Iiwic3RhcnRDb21taXQiLCJzdGFydFRpbWVyIiwiX0NoaWxkTWFwcGluZyIsIlRyYW5zaXRpb25Hcm91cCIsImhhbmRsZUV4aXRlZCIsImZpcnN0UmVuZGVyIiwiYXBwZWFyZWQiLCJwcmV2Q2hpbGRNYXBwaW5nIiwiZ2V0SW5pdGlhbENoaWxkTWFwcGluZyIsImdldE5leHRDaGlsZE1hcHBpbmciLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiZ2V0Q2hpbGRNYXBwaW5nIiwiY2hpbGRGYWN0b3J5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiZ2V0UHJvcCIsIm5leHRDaGlsZE1hcHBpbmciLCJoYXNQcmV2IiwiaGFzTmV4dCIsInByZXZDaGlsZCIsImlzTGVhdmluZyIsIm1hcEZuIiwibWFwcGVyIiwiZ2V0VmFsdWVGb3JLZXkiLCJuZXh0S2V5c1BlbmRpbmciLCJwZW5kaW5nS2V5cyIsImNoaWxkTWFwcGluZyIsInBlbmRpbmdOZXh0S2V5IiwiX1RyYW5zaXRpb24iLCJSaXBwbGUiLCJ2aXNpYmxlIiwibGVhdmluZyIsImhhbmRsZUVudGVyIiwiaGFuZGxlRXhpdCIsIl90aGlzJHN0YXRlIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlU3R5bGVzIiwiY2hpbGRDbGFzc05hbWUiLCJ0cmFuc2l0aW9uVGltZW91dCIsInRyYW5zaXRpb25UeXBlIiwidGltZW91dFByb3BOYW1lIiwiZW5hYmxlZFByb3BOYW1lIiwiY2xhc3NOYW1lc1NoYXBlIiwidGltZW91dHNTaGFwZSIsImVudGVyRG9uZSIsImVudGVyQWN0aXZlIiwiZXhpdERvbmUiLCJleGl0QWN0aXZlIiwiY3JlYXRlUmlwcGxlSGFuZGxlciIsImlnbm9yZSIsIk11aVRoZW1lUHJvdmlkZXJPbGQiLCJfYnJjYXN0IiwiYnJvYWRjYXN0IiwibWVyZ2VPdXRlckxvY2FsVGhlbWUiLCJsb2NhbFRoZW1lIiwiTXVpVGhlbWVQcm92aWRlciIsImluaXRpYWxTdGF0ZSIsIl9zdGF0ZSIsImN1cnJlbnRJZCIsImlzSG9yaXpvbnRhbCIsImdldEFuY2hvciIsIl9TbGlkZSIsIm9wcG9zaXRlRGlyZWN0aW9uIiwiYW5jaG9yIiwiZG9ja2VkIiwib3ZlcmZsb3dZIiwiV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmciLCJwYXBlckFuY2hvckxlZnQiLCJwYXBlckFuY2hvclJpZ2h0IiwicGFwZXJBbmNob3JUb3AiLCJtYXhIZWlnaHQiLCJwYXBlckFuY2hvckJvdHRvbSIsInBhcGVyQW5jaG9yRG9ja2VkTGVmdCIsImJvcmRlclJpZ2h0IiwicGFwZXJBbmNob3JEb2NrZWRUb3AiLCJib3JkZXJCb3R0b20iLCJwYXBlckFuY2hvckRvY2tlZFJpZ2h0IiwiYm9yZGVyTGVmdCIsInBhcGVyQW5jaG9yRG9ja2VkQm90dG9tIiwiYm9yZGVyVG9wIiwiQmFja2Ryb3BQcm9wcyIsIl90aGlzJHByb3BzJE1vZGFsUHJvcCIsIk1vZGFsUHJvcHMiLCJCYWNrZHJvcFByb3BzUHJvcCIsIm9uQ2xvc2UiLCJQYXBlclByb3BzIiwiU2xpZGVQcm9wcyIsInNsaWRpbmdEcmF3ZXIiLCJfUm9vdFJlZiIsIl9Qb3J0YWwiLCJfQmFja2Ryb3AiLCJnZXRIYXNUcmFuc2l0aW9uIiwidmlzaWJpbGl0eSIsIk1vZGFsIiwiaGFuZGxlT3BlbiIsImRlZmF1bHRDb250YWluZXIiLCJnZXRDb250YWluZXIiLCJtYW5hZ2VyIiwiaGFuZGxlRG9jdW1lbnRLZXlEb3duIiwiZW5mb3JjZUZvY3VzIiwiZGlhbG9nUmVmIiwiaGFuZGxlT3BlbmVkIiwiaGFuZGxlUmVuZGVyZWQiLCJvblJlbmRlcmVkIiwiaGFuZGxlQ2xvc2UiLCJyZXN0b3JlTGFzdEZvY3VzIiwiaGFuZGxlQmFja2Ryb3BDbGljayIsIm9uQmFja2Ryb3BDbGljayIsImRpc2FibGVCYWNrZHJvcENsaWNrIiwiaXNUb3BNb2RhbCIsIm9uRXNjYXBlS2V5RG93biIsImRpc2FibGVFc2NhcGVLZXlEb3duIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsImN1cnJlbnRBY3RpdmVFbGVtZW50IiwiaGFuZGxlUG9ydGFsUmVmIiwiZ2V0TW91bnROb2RlIiwiaGFuZGxlTW9kYWxSZWYiLCJvblJvb3RSZWYiLCJsYXN0Rm9jdXMiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiZGlzYWJsZVJlc3RvcmVGb2N1cyIsIkJhY2tkcm9wQ29tcG9uZW50IiwiZGlzYWJsZVBvcnRhbCIsImhpZGVCYWNrZHJvcCIsImtlZXBNb3VudGVkIiwiaGFzVHJhbnNpdGlvbiIsInJvb3RSZWYiLCJSb290UmVmIiwic2V0TW91bnROb2RlIiwiZ2V0T3duZXJEb2N1bWVudCIsInRyYW5zZm9ybXMiLCJfY2FtZWxpemVTdHlsZSIsIl9nZXRDb21wdXRlZFN0eWxlMiIsIl9oeXBoZW5hdGVTdHlsZSIsIl9pc1RyYW5zZm9ybSIsIl9yZW1vdmVTdHlsZSIsIl9wcm9wZXJ0aWVzIiwickh5cGhlbiIsImNociIsIl9oeXBoZW5hdGUiLCJyVXBwZXIiLCJvcGVuZXIiLCJjdXJyZW50U3R5bGUiLCJybnVtbm9ucHgiLCJycG9zaXRpb24iLCJydW5TdHlsZSIsInJ1bnRpbWVTdHlsZSIsInJzTGVmdCIsInBpeGVsTGVmdCIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGlvbkRlbGF5IiwiYW5pbWF0aW9uVGltaW5nIiwidHJhbnNpdGlvbkVuZCIsInRyYW5zaXRpb25UaW1pbmciLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJfZ2V0VHJhbnNpdGlvblByb3BlcnQiLCJ2ZW5kb3JNYXAiLCJ2ZW5kb3JzIiwiZ2V0VHJhbnNpdGlvblByb3BlcnRpZXMiLCJ0aW1pbmciLCJzdXBwb3J0ZWRUcmFuc2Zvcm1zIiwiaXNCb2R5IiwiX2lzV2luZG93Iiwic2Nyb2xsSGVpZ2h0IiwibWFyZ2luUmlnaHQiLCJpbm5lcldpZHRoIiwiX0ZhZGUiLCJ0b3VjaEFjdGlvbiIsImludmlzaWJsZSIsIkJhY2tkcm9wIiwiZW50ZXJpbmciLCJlbnRlcmVkIiwiRmFkZSIsInRyYW5zaXRpb25Qcm9wcyIsIndlYmtpdFRyYW5zaXRpb24iLCJzdHlsZVByb3AiLCJ3aWxsQ2hhbmdlIiwic2V0VHJhbnNsYXRlVmFsdWUiLCJfcmVhY3RFdmVudExpc3RlbmVyIiwiX2RlYm91bmNlIiwiR1VUVEVSIiwiZmFrZVRyYW5zZm9ybSIsImNvbXB1dGVkU3R5bGUiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zZm9ybVZhbHVlcyIsImdldFRyYW5zbGF0ZVZhbHVlIiwid2Via2l0VHJhbnNmb3JtIiwiU2xpZGUiLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZVJlc2l6ZSIsInRyYW5zaXRpb25SZWYiLCJ1cGRhdGVQb3NpdGlvbiIsIm9uUmVzaXplIiwiX0xpc3RDb250ZXh0IiwibGlzdFN0eWxlIiwicGFkZGluZ0JvdHRvbSIsImRpc2FibGVQYWRkaW5nIiwiaW5zZXQiLCJzdGlja3kiLCJMaXN0U3ViaGVhZGVyIiwiZGlzYWJsZVN0aWNreSIsIl9NZXJnZUxpc3RDb250ZXh0IiwidGV4dEFsaWduIiwiJiRzZWxlY3RlZCwgJiRzZWxlY3RlZDpob3ZlciIsImJhY2tncm91bmRDbGlwIiwic2Vjb25kYXJ5QWN0aW9uIiwiTGlzdEl0ZW0iLCJjaGlsZHJlblByb3AiLCJjb21wb25lbnRQcm9wIiwiQ29udGFpbmVyQ29tcG9uZW50IiwiX3Byb3BzJENvbnRhaW5lclByb3BzIiwiQ29udGFpbmVyUHJvcHMiLCJDb250YWluZXJDbGFzc05hbWUiLCJkZW5zZVByb3AiLCJoYXNBdmF0YXIiLCJoYXNTZWNvbmRhcnlBY3Rpb24iLCJjb21wb25lbnRQcm9wcyIsIk1lcmdlTGlzdENvbnRleHQiLCJjaGlsZENvbnRleHQiLCJMaXN0SXRlbUljb24iLCImOmZpcnN0LWNoaWxkIiwiJiR0ZXh0RGVuc2UiLCJ0ZXh0RGVuc2UiLCJMaXN0SXRlbVRleHQiLCJkaXNhYmxlVHlwb2dyYXBoeSIsInByaW1hcnlQcm9wIiwicHJpbWFyeVR5cG9ncmFwaHlQcm9wcyIsInNlY29uZGFyeVByb3AiLCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMiLCJfY2xhc3NOYW1lczMiLCJpbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50Iiwic3JPbmx5IiwiYWxpZ25MZWZ0IiwiYWxpZ25DZW50ZXIiLCJhbGlnblJpZ2h0IiwiYWxpZ25KdXN0aWZ5Iiwibm9XcmFwIiwidGV4dE92ZXJmbG93Iiwid2hpdGVTcGFjZSIsImd1dHRlckJvdHRvbSIsIm1hcmdpbkJvdHRvbSIsInBhcmFncmFwaCIsImNvbG9yVGV4dFByaW1hcnkiLCJjb2xvclRleHRTZWNvbmRhcnkiLCJkZWZhdWx0SGVhZGxpbmVNYXBwaW5nIiwiYWxpZ24iLCJoZWFkbGluZU1hcHBpbmciLCJ2YXJpYW50UHJvcCIsImdldFZhcmlhbnQiLCJHVVRURVJTIiwiR1JJRF9TSVpFUyIsImZsZXhXcmFwIiwiemVyb01pbldpZHRoIiwiZGlyZWN0aW9uLXhzLWNvbHVtbiIsImRpcmVjdGlvbi14cy1jb2x1bW4tcmV2ZXJzZSIsImRpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSIsIndyYXAteHMtbm93cmFwIiwid3JhcC14cy13cmFwLXJldmVyc2UiLCJhbGlnbi1pdGVtcy14cy1jZW50ZXIiLCJhbGlnbi1pdGVtcy14cy1mbGV4LXN0YXJ0IiwiYWxpZ24taXRlbXMteHMtZmxleC1lbmQiLCJhbGlnbi1pdGVtcy14cy1iYXNlbGluZSIsImFsaWduLWNvbnRlbnQteHMtY2VudGVyIiwiYWxpZ25Db250ZW50IiwiYWxpZ24tY29udGVudC14cy1mbGV4LXN0YXJ0IiwiYWxpZ24tY29udGVudC14cy1mbGV4LWVuZCIsImFsaWduLWNvbnRlbnQteHMtc3BhY2UtYmV0d2VlbiIsImFsaWduLWNvbnRlbnQteHMtc3BhY2UtYXJvdW5kIiwianVzdGlmeS14cy1jZW50ZXIiLCJqdXN0aWZ5LXhzLWZsZXgtZW5kIiwianVzdGlmeS14cy1zcGFjZS1iZXR3ZWVuIiwianVzdGlmeS14cy1zcGFjZS1hcm91bmQiLCJqdXN0aWZ5LXhzLXNwYWNlLWV2ZW5seSIsImJyZWFrcG9pbnQiLCImID4gJGl0ZW0iLCJnZW5lcmF0ZUd1dHRlciIsImFjY3VtdWxhdG9yIiwiZ2xvYmFsU3R5bGVzIiwiZmxleEJhc2lzIiwibWF4V2lkdGgiLCJnZW5lcmF0ZUdyaWQiLCJjb21wb25lbnROYW1lSW5FcnJvciIsIlNJWkUiLCJnZXRSZWxhdGl2ZVZhbHVlIiwic3RhdGljIiwiaW5kZXRlcm1pbmF0ZSIsImNpcmNsZSIsInN0cm9rZSIsImNpcmNsZVN0YXRpYyIsImNpcmNsZUluZGV0ZXJtaW5hdGUiLCJAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1yb3RhdGUiLCJAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1kYXNoIiwiY2lyY2xlRGlzYWJsZVNocmluayIsIkNpcmN1bGFyUHJvZ3Jlc3MiLCJkaXNhYmxlU2hyaW5rIiwidGhpY2tuZXNzIiwiY2lyY2xlU3R5bGUiLCJyb290U3R5bGUiLCJyb290UHJvcHMiLCJjaXJjdW1mZXJlbmNlIiwiUEkiLCJ2aWV3Qm94IiwiY3giLCJjeSIsImZpbGwiLCJobXIiLCJpbnNlcnRJbnRvIiwibG9jYWxzIiwibmV3Q29udGVudCIsInVzZVNvdXJjZU1hcCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYWRkQXR0cnMiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwiYmxvYiIsIm9sZFNyYyIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInJlcGxhY2VUZXh0IiwidGV4dFN0b3JlIiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiYmFzZVVybCIsImhvc3QiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwiX1RhYmxlQ29udGV4dCIsImJvcmRlckNvbGxhcHNlIiwiYm9yZGVyU3BhY2luZyIsIlRhYmxlIiwiX1RhYmxlbHZsMkNvbnRleHQiLCJUYWJsZUhlYWQiLCImJHNlbGVjdGVkIiwiJiRob3Zlcjpob3ZlciIsImZvb3RlciIsIlRhYmxlUm93IiwidGFibGVsdmwyIiwiJjpsYXN0LWNoaWxkIiwibnVtZXJpYyIsInBhZGRpbmdEZW5zZSIsInBhZGRpbmdDaGVja2JveCIsInBhZGRpbmdOb25lIiwiVGFibGVDZWxsIiwic29ydERpcmVjdGlvbiIsInBhZGRpbmdQcm9wIiwic2NvcGVQcm9wIiwidGFibGUiLCJhcmlhU29ydCIsImFyaWEtc29ydCIsIlRhYmxlQm9keSIsIl9GaWxsZWRJbnB1dCIsIl9PdXRsaW5lZElucHV0IiwiX0lucHV0TGFiZWwiLCJfRm9ybUNvbnRyb2wiLCJfRm9ybUhlbHBlclRleHQiLCJfU2VsZWN0IiwidmFyaWFudENvbXBvbmVudCIsIlRleHRGaWVsZCIsImxhYmVsUmVmIiwibGFiZWxOb2RlIiwiRm9ybUhlbHBlclRleHRQcm9wcyIsImhlbHBlclRleHQiLCJJbnB1dExhYmVsUHJvcHMiLCJJbnB1dFByb3BzIiwiU2VsZWN0UHJvcHMiLCJJbnB1dE1vcmUiLCJzaHJpbmsiLCJub3RjaGVkIiwibGFiZWxXaWR0aCIsImhlbHBlclRleHRJZCIsIklucHV0RWxlbWVudCIsImFyaWEtZGVzY3JpYmVkYnkiLCJib3R0b21MaW5lQ29sb3IiLCJsYWJlbCArICYiLCJtYXJnaW5Ub3AiLCJ1bmRlcmxpbmUiLCImOmFmdGVyIiwiJiRmb2N1c2VkOmFmdGVyIiwiJiRlcnJvcjphZnRlciIsImJvcmRlckJvdHRvbUNvbG9yIiwiJjpiZWZvcmUiLCImOmhvdmVyOm5vdCgkZGlzYWJsZWQpOm5vdCgkZm9jdXNlZCk6bm90KCRlcnJvcik6YmVmb3JlIiwiJiRkaXNhYmxlZDpiZWZvcmUiLCJJbnB1dCIsImRpc2FibGVVbmRlcmxpbmUiLCJST1dTX0hFSUdIVCIsInRleHRhcmVhIiwiVGV4dGFyZWEiLCJoYW5kbGVSZWZTaW5nbGVsaW5lU2hhZG93Iiwic2luZ2xlbGluZVNoYWRvd1JlZiIsImhhbmRsZVJlZlNoYWRvdyIsInNoYWRvd1JlZiIsInN5bmNIZWlnaHRXaXRoU2hhZG93IiwibmV3SGVpZ2h0IiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiJiRmb2N1c2VkIiwiRmlsbGVkSW5wdXQiLCJfTm90Y2hlZE91dGxpbmUiLCJib3JkZXJDb2xvciIsIiYgJG5vdGNoZWRPdXRsaW5lIiwiJjpob3Zlcjpub3QoJGRpc2FibGVkKTpub3QoJGZvY3VzZWQpOm5vdCgkZXJyb3IpICRub3RjaGVkT3V0bGluZSIsIiYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUiLCJib3JkZXJXaWR0aCIsIiYkZXJyb3IgJG5vdGNoZWRPdXRsaW5lIiwiJiRkaXNhYmxlZCAkbm90Y2hlZE91dGxpbmUiLCJub3RjaGVkT3V0bGluZSIsIk91dGxpbmVkSW5wdXQiLCJfc3R5bGVzIiwibGVnZW5kIiwiTm90Y2hlZE91dGxpbmUiLCJsYWJlbFdpZHRoUHJvcCIsIl9Gb3JtTGFiZWwiLCJ0cmFuc2Zvcm1PcmlnaW4iLCJhbmltYXRlZCIsIiYkbWFyZ2luRGVuc2UiLCImJHNocmluayIsIklucHV0TGFiZWwiLCJkaXNhYmxlQW5pbWF0aW9uIiwiRm9ybUxhYmVsQ2xhc3NlcyIsInNocmlua1Byb3AiLCJkYXRhLXNocmluayIsIiYkZXJyb3IiLCJGb3JtTGFiZWwiLCJtYXJnaW5Ob3JtYWwiLCJGb3JtQ29udHJvbCIsImhhbmRsZURpcnR5IiwiaGFuZGxlQ2xlYW4iLCJGb3JtSGVscGVyVGV4dCIsIl9TZWxlY3RJbnB1dCIsIl9BcnJvd0Ryb3BEb3duIiwiX05hdGl2ZVNlbGVjdCIsIl9OYXRpdmVTZWxlY3RJbnB1dCIsIlNlbGVjdCIsImF1dG9XaWR0aCIsImRpc3BsYXlFbXB0eSIsIk1lbnVQcm9wcyIsIm5hdGl2ZSIsIm9uT3BlbiIsInJlbmRlclZhbHVlIiwiU2VsZWN0RGlzcGxheVByb3BzIiwiX01lbnUiLCJhcmVFcXVhbFZhbHVlcyIsIlNlbGVjdElucHV0IiwiaWdub3JlTmV4dEJsdXIiLCJpc09wZW5Db250cm9sbGVkIiwibWVudU1pbldpZHRoIiwiZGlzcGxheVJlZiIsImhhbmRsZUl0ZW1DbGljayIsIml0ZW1JbmRleCIsImhhbmRsZURpc3BsYXlSZWYiLCJoYW5kbGVJbnB1dFJlZiIsIm5vZGVQcm94eSIsIl90aGlzJHByb3BzMyIsIl90aGlzJHByb3BzMyRNZW51UHJvcCIsIm9wZW5Qcm9wIiwidGFiSW5kZXhQcm9wIiwiX3RoaXMkcHJvcHMzJHR5cGUiLCJkaXNwbGF5U2luZ2xlIiwiZGlzcGxheU11bHRpcGxlIiwiY29tcHV0ZURpc3BsYXkiLCJkYXRhLXZhbHVlIiwic2VsZWN0TWVudSIsImFyaWEtcHJlc3NlZCIsImFyaWEtb3ducyIsImFyaWEtaGFzcG9wdXAiLCJhbmNob3JFbCIsIk1lbnVMaXN0UHJvcHMiLCJfUG9wb3ZlciIsIl9NZW51TGlzdCIsIlJUTF9PUklHSU4iLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJMVFJfT1JJR0lOIiwiZ2V0Q29udGVudEFuY2hvckVsIiwibWVudUxpc3RSZWYiLCJzZWxlY3RlZEl0ZW1SZWYiLCJtZW51TGlzdCIsImRpc2FibGVBdXRvRm9jdXNJdGVtIiwiaGFuZGxlTGlzdEtleURvd24iLCJfdGhpcyRwcm9wczIkUGFwZXJQcm8iLCJQb3BvdmVyQ2xhc3NlcyIsImFuY2hvck9yaWdpbiIsIl9Hcm93IiwiZ2V0T2Zmc2V0VG9wIiwiZ2V0T2Zmc2V0TGVmdCIsImdldFRyYW5zZm9ybU9yaWdpblZhbHVlIiwiZ2V0QW5jaG9yRWwiLCJvdmVyZmxvd1giLCJQb3BvdmVyIiwiaGFuZGxlR2V0T2Zmc2V0VG9wIiwiaGFuZGxlR2V0T2Zmc2V0TGVmdCIsInNldFBvc2l0aW9uaW5nU3R5bGVzIiwicG9zaXRpb25pbmciLCJnZXRQb3NpdGlvbmluZ1N0eWxlIiwiYW5jaG9yUmVmZXJlbmNlIiwibWFyZ2luVGhyZXNob2xkIiwiY29udGVudEFuY2hvck9mZnNldCIsImdldENvbnRlbnRBbmNob3JPZmZzZXQiLCJlbGVtUmVjdCIsIm9mZnNldEhlaWdodCIsImdldFRyYW5zZm9ybU9yaWdpbiIsImdldEFuY2hvck9mZnNldCIsImNvbnRhaW5lcldpbmRvdyIsImhlaWdodFRocmVzaG9sZCIsImlubmVySGVpZ2h0Iiwid2lkdGhUaHJlc2hvbGQiLCJkaWZmIiwiX2RpZmYiLCJfZGlmZjIiLCJfZGlmZjMiLCJwYXBlclJlZiIsImFuY2hvclBvc2l0aW9uIiwiYW5jaG9yUmVjdCIsImFuY2hvclZlcnRpY2FsIiwiY29udGVudEFuY2hvckVsIiwiZ2V0U2Nyb2xsUGFyZW50Iiwib2Zmc2V0VG9wIiwiX3RoaXMkcHJvcHM0IiwiY29udGFpbmVyUHJvcCIsIk1vZGFsQ2xhc3NlcyIsIlRyYW5zaXRpb25Db21wb25lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb25Qcm9wIiwiVHJhbnNpdGlvblByb3BzIiwibXVpU3VwcG9ydEF1dG8iLCJnZXRTY2FsZSIsIkdyb3ciLCJfZ2V0VHJhbnNpdGlvblByb3BzIiwiYXV0b1RpbWVvdXQiLCJfZ2V0VHJhbnNpdGlvblByb3BzMiIsInRpbWVyIiwiTWVudUxpc3QiLCJjdXJyZW50VGFiSW5kZXgiLCJibHVyVGltZXIiLCJsaXN0UmVmIiwiY3VycmVudEZvY3VzIiwicmVzZXRUYWJJbmRleCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJoYW5kbGVJdGVtRm9jdXMiLCJzZXRUYWJJbmRleCIsImN1cnJlbnRGb2N1c0luZGV4IiwiX3Nob3VsZFVwZGF0ZSIsIl9zaGFsbG93RXF1YWwiLCJob2MiLCJfaW5oZXJpdHNMb29zZTIiLCJTaG91bGRVcGRhdGUiLCJTdmdJY29uIiwibmF0aXZlQ29sb3IiLCJ0aXRsZUFjY2VzcyIsImZvY3VzYWJsZSIsIiY6Oi1tcy1leHBhbmQiLCJwb2ludGVyLWV2ZW50cyIsIk5hdGl2ZVNlbGVjdCIsIkNzc0Jhc2VsaW5lIiwiQGdsb2JhbCIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiKiwgKjo6YmVmb3JlLCAqOjphZnRlciIsIkBtZWRpYSBwcmludCJdLCJtYXBwaW5ncyI6ImFBR0EsSUFBQUEsRUFBQUMsT0FBQSxpQkFDQUEsT0FBQSxpQkFDQSxTQUFBQyxFQUFBQyxJQWlSQSxTQUFBRCxFQUFBQyxHQUNBLElBQUFDLEVBQUFGLEtBQUFHLEVBQUFILEdBQ0EsT0FFQSxRQUFBSSxLQURBRCxFQUFBSCxJQUFBLEVBQ0FDLEVBQ0FJLE9BQUFDLFVBQUFDLGVBQUFDLEtBQUFQLEVBQUFHLEtBQ0FLLEVBQUFMLEdBQUFILEVBQUFHLElBR0EsS0FBQU0sR0FBQSxJQUFBQyxHQUNBQyxJQTFSQUMsQ0FBQWIsRUFBQUMsR0FDQUgsS0FBQUUsRUFBQUMsSUF3REEsSUFLQWEsRUFMQUMsR0FB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QWlDLFdBQUF4ckMsUUFDQWlsSyxnQkFFQTNpQyxnQkFBQW44SCxFQUFBb2pDLFFBQUFzcEcsT0FBQU0sWUErQ0E3OEksS0FBQSxrQkFEQSxDQUVDc3VLLEdBRUQzbUssRUFBQStCLFFBQUEwSSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkge1xuIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0aWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdH1cbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcbiBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcbiBcdFx0XHRcdFx0cmVqZWN0KFxuIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbiBcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcbiBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbiBcdFx0XHRcdFx0cmVqZWN0KG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIGZhaWxlZC5cIikpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcbiBcdFx0XHRcdFx0XHRyZXR1cm47XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiMmFiNzlhM2Q0OTRiMjE1ZmQ5N2NcIjtcbiBcdHZhciBob3RSZXF1ZXN0VGltZW91dCA9IDEwMDAwO1xuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIiAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRcdGlmIChtb2RlICYgMSkgdmFsdWUgPSBmbih2YWx1ZSk7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcbiBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuIFx0XHR9O1xuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XG4gXHRcdHJldHVybiBob3Q7XG4gXHR9XG5cbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbiBcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcbiBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4gXHR9XG5cbiBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcbiBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90RGVmZXJyZWQ7XG5cbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xuIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xuIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB7XG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdH1cbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcbiBcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuIFx0XHRcdFx0XHRpZDogaWRcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbiBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fbWFpbikge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4gXHRcdFx0XHRcdHZhciBwYXJlbnQgPSBpbnN0YWxsZWRNb2R1bGVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cblxuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuIFx0XHRcdH07XG4gXHRcdH1cblxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XG4gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuIFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4gXHRcdFx0KTtcbiBcdFx0fTtcblxuIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuIFx0XHRcdFx0dmFyIHJlc3VsdDtcbiBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdC8qKiBAdHlwZSB7RXJyb3J8ZmFsc2V9ICovXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgyMzIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIzMik7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgZGVmYXVsdDogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHM7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsInZhciBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlID0gcmVxdWlyZShcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllczsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjazsiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCIvKiFcbiAgQ29weXJpZ2h0IChjKSAyMDE3IEplZCBXYXRzb24uXG4gIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlXG4gIGh0dHA6Ly9qZWR3YXRzb24uZ2l0aHViLmlvL2NsYXNzbmFtZXNcbiovXG4vKiBnbG9iYWwgZGVmaW5lICovXG5cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgaGFzT3duID0ge30uaGFzT3duUHJvcGVydHk7XG5cblx0ZnVuY3Rpb24gY2xhc3NOYW1lcyAoKSB7XG5cdFx0dmFyIGNsYXNzZXMgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0aWYgKCFhcmcpIGNvbnRpbnVlO1xuXG5cdFx0XHR2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7XG5cblx0XHRcdGlmIChhcmdUeXBlID09PSAnc3RyaW5nJyB8fCBhcmdUeXBlID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmcpICYmIGFyZy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGlubmVyID0gY2xhc3NOYW1lcy5hcHBseShudWxsLCBhcmcpO1xuXHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goaW5uZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiBhcmcpIHtcblx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRjbGFzc2VzLnB1c2goa2V5KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG5cdH1cblxuXHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRjbGFzc05hbWVzLmRlZmF1bHQgPSBjbGFzc05hbWVzO1xuXHRcdG1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lcztcblx0fSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gcmVnaXN0ZXIgYXMgJ2NsYXNzbmFtZXMnLCBjb25zaXN0ZW50IHdpdGggbnBtIHBhY2thZ2UgbmFtZVxuXHRcdGRlZmluZSgnY2xhc3NuYW1lcycsIFtdLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gY2xhc3NOYW1lcztcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHR3aW5kb3cuY2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG5cdH1cbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnNoZWV0c01hbmFnZXIgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX2pzcyA9IHJlcXVpcmUoXCJqc3NcIik7XG5cbnZhciBfcmVhY3RKc3NDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZWFjdEpzc0NvbnRleHRcIikpO1xuXG52YXIgX2pzc1ByZXNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vanNzUHJlc2V0XCIpKTtcblxudmFyIF9tZXJnZUNsYXNzZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL21lcmdlQ2xhc3Nlc1wiKSk7XG5cbnZhciBfbXVsdGlLZXlTdG9yZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbXVsdGlLZXlTdG9yZVwiKSk7XG5cbnZhciBfY3JlYXRlTXVpVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZU11aVRoZW1lXCIpKTtcblxudmFyIF90aGVtZUxpc3RlbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90aGVtZUxpc3RlbmVyXCIpKTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWVcIikpO1xuXG52YXIgX2dldFN0eWxlc0NyZWF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldFN0eWxlc0NyZWF0b3JcIikpO1xuXG52YXIgX2dldFRoZW1lUHJvcHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldFRoZW1lUHJvcHNcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuLy8gRGVmYXVsdCBKU1MgaW5zdGFuY2UuXG52YXIganNzID0gKDAsIF9qc3MuY3JlYXRlKSgoMCwgX2pzc1ByZXNldC5kZWZhdWx0KSgpKTsgLy8gVXNlIGEgc2luZ2xldG9uIG9yIHRoZSBwcm92aWRlZCBvbmUgYnkgdGhlIGNvbnRleHQuXG4vL1xuLy8gVGhlIGNvdW50ZXItYmFzZWQgYXBwcm9hY2ggZG9lc24ndCB0b2xlcmF0ZSBhbnkgbWlzdGFrZS5cbi8vIEl0J3MgbXVjaCBzYWZlciB0byB1c2UgdGhlIHNhbWUgY291bnRlciBldmVyeXdoZXJlLlxuXG52YXIgZ2VuZXJhdGVDbGFzc05hbWUgPSAoMCwgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmRlZmF1bHQpKCk7IC8vIEdsb2JhbCBpbmRleCBjb3VudGVyIHRvIHByZXNlcnZlIHNvdXJjZSBvcmRlci5cbi8vIFdlIGNyZWF0ZSB0aGUgc3R5bGUgc2hlZXQgZHVyaW5nIGF0IHRoZSBjcmVhdGlvbiBvZiB0aGUgY29tcG9uZW50LFxuLy8gY2hpbGRyZW4gYXJlIGhhbmRsZWQgYWZ0ZXIgdGhlIHBhcmVudHMsIHNvIHRoZSBvcmRlciBvZiBzdHlsZSBlbGVtZW50cyB3b3VsZCBiZSBwYXJlbnQtPmNoaWxkLlxuLy8gSXQgaXMgYSBwcm9ibGVtIHRob3VnaCB3aGVuIGEgcGFyZW50IHBhc3NlcyBhIGNsYXNzTmFtZVxuLy8gd2hpY2ggbmVlZHMgdG8gb3ZlcnJpZGUgYW55IGNoaWxkcyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxuXG52YXIgaW5kZXhDb3VudGVyID0gLTEwZTEwOyAvLyBFeHBvcnRlZCBmb3IgdGVzdCBwdXJwb3Nlc1xuXG52YXIgc2hlZXRzTWFuYWdlciA9IG5ldyBNYXAoKTsgLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG5cbmV4cG9ydHMuc2hlZXRzTWFuYWdlciA9IHNoZWV0c01hbmFnZXI7XG52YXIgbm9vcFRoZW1lID0ge307IC8vIEluIG9yZGVyIHRvIGhhdmUgc2VsZi1zdXBwb3J0aW5nIGNvbXBvbmVudHMsIHdlIHJlbHkgb24gZGVmYXVsdCB0aGVtZSB3aGVuIG5vdCBwcm92aWRlZC5cblxudmFyIGRlZmF1bHRUaGVtZTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFRoZW1lKCkge1xuICBpZiAoZGVmYXVsdFRoZW1lKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbiAgfVxuXG4gIGRlZmF1bHRUaGVtZSA9ICgwLCBfY3JlYXRlTXVpVGhlbWUuZGVmYXVsdCkoe1xuICAgIHR5cG9ncmFwaHk6IHtcbiAgICAgIHN1cHByZXNzV2FybmluZzogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZWZhdWx0VGhlbWU7XG59XG5cbl91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9ERUZBVUxUX1RIRU1FX18gPSBnZXREZWZhdWx0VGhlbWUoKTsgLy8gTGluayBhIHN0eWxlIHNoZWV0IHdpdGggYSBjb21wb25lbnQuXG4vLyBJdCBkb2VzIG5vdCBtb2RpZnkgdGhlIGNvbXBvbmVudCBwYXNzZWQgdG8gaXQ7XG4vLyBpbnN0ZWFkLCBpdCByZXR1cm5zIGEgbmV3IGNvbXBvbmVudCwgd2l0aCBhIGBjbGFzc2VzYCBwcm9wZXJ0eS5cblxudmFyIHdpdGhTdHlsZXNPbGQgPSBmdW5jdGlvbiB3aXRoU3R5bGVzT2xkKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgdmFyIF9leHRlbmRzMjtcblxuICAgIHZhciBfb3B0aW9ucyR3aXRoVGhlbWUgPSBvcHRpb25zLndpdGhUaGVtZSxcbiAgICAgICAgd2l0aFRoZW1lID0gX29wdGlvbnMkd2l0aFRoZW1lID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHdpdGhUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkZmxpcCA9IG9wdGlvbnMuZmxpcCxcbiAgICAgICAgZmxpcCA9IF9vcHRpb25zJGZsaXAgPT09IHZvaWQgMCA/IG51bGwgOiBfb3B0aW9ucyRmbGlwLFxuICAgICAgICBuYW1lID0gb3B0aW9ucy5uYW1lLFxuICAgICAgICBzdHlsZVNoZWV0T3B0aW9ucyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcIndpdGhUaGVtZVwiLCBcImZsaXBcIiwgXCJuYW1lXCJdKTtcbiAgICB2YXIgc3R5bGVzQ3JlYXRvciA9ICgwLCBfZ2V0U3R5bGVzQ3JlYXRvci5kZWZhdWx0KShzdHlsZXNPckNyZWF0b3IpO1xuICAgIHZhciBsaXN0ZW5Ub1RoZW1lID0gc3R5bGVzQ3JlYXRvci50aGVtaW5nRW5hYmxlZCB8fCB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgfHwgd2l0aFRoZW1lO1xuICAgIGluZGV4Q291bnRlciArPSAxO1xuICAgIHN0eWxlc0NyZWF0b3Iub3B0aW9ucy5pbmRleCA9IGluZGV4Q291bnRlcjtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaW5kZXhDb3VudGVyIDwgMCwgWydNYXRlcmlhbC1VSTogeW91IG1pZ2h0IGhhdmUgYSBtZW1vcnkgbGVhay4nLCAnVGhlIGluZGV4Q291bnRlciBpcyBub3Qgc3VwcG9zZWQgdG8gZ3JvdyB0aGF0IG11Y2guJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuXG4gICAgdmFyIFdpdGhTdHlsZXMgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoV2l0aFN0eWxlcywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhTdHlsZXMocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzO1xuXG4gICAgICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFdpdGhTdHlsZXMpO1xuICAgICAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoV2l0aFN0eWxlcykuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuICAgICAgICBfdGhpcy5qc3MgPSBjb250ZXh0W19yZWFjdEpzc0NvbnRleHQuZGVmYXVsdC5qc3NdIHx8IGpzcztcbiAgICAgICAgX3RoaXMuc2hlZXRzTWFuYWdlciA9IHNoZWV0c01hbmFnZXI7XG4gICAgICAgIF90aGlzLnVuc3Vic2NyaWJlSWQgPSBudWxsO1xuICAgICAgICB2YXIgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMgPSBjb250ZXh0Lm11aVRoZW1lUHJvdmlkZXJPcHRpb25zO1xuXG4gICAgICAgIGlmIChtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucykge1xuICAgICAgICAgIGlmIChtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNNYW5hZ2VyKSB7XG4gICAgICAgICAgICBfdGhpcy5zaGVldHNNYW5hZ2VyID0gbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuc2hlZXRzTWFuYWdlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5zaGVldHNDYWNoZSA9IG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLnNoZWV0c0NhY2hlO1xuICAgICAgICAgIF90aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uID0gbXVpVGhlbWVQcm92aWRlck9wdGlvbnMuZGlzYWJsZVN0eWxlc0dlbmVyYXRpb247XG4gICAgICAgIH0gLy8gQXR0YWNoIHRoZSBzdHlsZXNDcmVhdG9yIHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGFzIGluIHRoZSBjb250ZXh0XG4gICAgICAgIC8vIG9mIHJlYWN0LWhvdC1sb2FkZXIgdGhlIGhvb2tzIGNhbiBiZSBleGVjdXRlZCBpbiBhIGRpZmZlcmVudCBjbG9zdXJlIGNvbnRleHQ6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nYWVhcm9uL3JlYWN0LWhvdC1sb2FkZXIvYmxvYi9tYXN0ZXIvc3JjL3BhdGNoLmRldi5qcyNMMTA3XG5cblxuICAgICAgICBfdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQgPSBzdHlsZXNDcmVhdG9yO1xuICAgICAgICBfdGhpcy5zaGVldE9wdGlvbnMgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICBnZW5lcmF0ZUNsYXNzTmFtZTogZ2VuZXJhdGVDbGFzc05hbWVcbiAgICAgICAgfSwgY29udGV4dFtfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRPcHRpb25zXSk7IC8vIFdlIHVzZSB8fCBhcyB0aGUgZnVuY3Rpb24gY2FsbCBpcyBsYXp5IGV2YWx1YXRlZC5cblxuICAgICAgICBfdGhpcy50aGVtZSA9IGxpc3RlblRvVGhlbWUgPyBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmluaXRpYWwoY29udGV4dCkgfHwgZ2V0RGVmYXVsdFRoZW1lKCkgOiBub29wVGhlbWU7XG5cbiAgICAgICAgX3RoaXMuYXR0YWNoKF90aGlzLnRoZW1lKTtcblxuICAgICAgICBfdGhpcy5jYWNoZUNsYXNzZXMgPSB7XG4gICAgICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCBjbGFzc2VzIHByb3AgcG9pbnRlci5cbiAgICAgICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgICAgICAvLyBDYWNoZSBmb3IgdGhlIGxhc3QgdXNlZCByZW5kZXJlZCBjbGFzc2VzIHBvaW50ZXIuXG4gICAgICAgICAgbGFzdEpTUzoge31cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShXaXRoU3R5bGVzLCBbe1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgaWYgKCFsaXN0ZW5Ub1RoZW1lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy51bnN1YnNjcmliZUlkID0gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgICAgIHZhciBvbGRUaGVtZSA9IF90aGlzMi50aGVtZTtcbiAgICAgICAgICAgIF90aGlzMi50aGVtZSA9IHRoZW1lO1xuXG4gICAgICAgICAgICBfdGhpczIuYXR0YWNoKF90aGlzMi50aGVtZSk7IC8vIFJlcmVuZGVyIHRoZSBjb21wb25lbnQgc28gdGhlIHVuZGVybHlpbmcgY29tcG9uZW50IGdldHMgdGhlIHRoZW1lIHVwZGF0ZS5cbiAgICAgICAgICAgIC8vIEJ5IHRoZW1lIHVwZGF0ZSB3ZSBtZWFuIHJlY2VpdmluZyBhbmQgYXBwbHlpbmcgdGhlIG5ldyBjbGFzcyBuYW1lcy5cblxuXG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe30sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLmRldGFjaChvbGRUaGVtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICAgICAgLy8gcmVhY3QtaG90LWxvYWRlciBzcGVjaWZpYyBsb2dpY1xuICAgICAgICAgIGlmICh0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCA9PT0gc3R5bGVzQ3JlYXRvciB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5kZXRhY2godGhpcy50aGVtZSk7XG4gICAgICAgICAgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQgPSBzdHlsZXNDcmVhdG9yO1xuICAgICAgICAgIHRoaXMuYXR0YWNoKHRoaXMudGhlbWUpO1xuICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMuZGV0YWNoKHRoaXMudGhlbWUpO1xuXG4gICAgICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmVJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC51bnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIHRoaXMudW5zdWJzY3JpYmVJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJnZXRDbGFzc2VzXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDbGFzc2VzKCkge1xuICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVTdHlsZXNHZW5lcmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jbGFzc2VzIHx8IHt9O1xuICAgICAgICAgIH0gLy8gVHJhY2tzIGlmIGVpdGhlciB0aGUgcmVuZGVyZWQgY2xhc3NlcyBvciBjbGFzc2VzIHByb3AgaGFzIGNoYW5nZWQsXG4gICAgICAgICAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gICAgICAgICAgdmFyIGdlbmVyYXRlID0gZmFsc2U7XG5cbiAgICAgICAgICB2YXIgc2hlZXRNYW5hZ2VyID0gX211bHRpS2V5U3RvcmUuZGVmYXVsdC5nZXQodGhpcy5zaGVldHNNYW5hZ2VyLCB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZCwgdGhpcy50aGVtZSk7XG5cbiAgICAgICAgICBpZiAoc2hlZXRNYW5hZ2VyLnNoZWV0LmNsYXNzZXMgIT09IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RKU1MpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RKU1MgPSBzaGVldE1hbmFnZXIuc2hlZXQuY2xhc3NlcztcbiAgICAgICAgICAgIGdlbmVyYXRlID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5jbGFzc2VzICE9PSB0aGlzLmNhY2hlQ2xhc3Nlcy5sYXN0UHJvcCkge1xuICAgICAgICAgICAgdGhpcy5jYWNoZUNsYXNzZXMubGFzdFByb3AgPSB0aGlzLnByb3BzLmNsYXNzZXM7XG4gICAgICAgICAgICBnZW5lcmF0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGdlbmVyYXRlKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlQ2xhc3Nlcy52YWx1ZSA9ICgwLCBfbWVyZ2VDbGFzc2VzLmRlZmF1bHQpKHtcbiAgICAgICAgICAgICAgYmFzZUNsYXNzZXM6IHRoaXMuY2FjaGVDbGFzc2VzLmxhc3RKU1MsXG4gICAgICAgICAgICAgIG5ld0NsYXNzZXM6IHRoaXMucHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgQ29tcG9uZW50OiBDb21wb25lbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlQ2xhc3Nlcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiYXR0YWNoXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2godGhlbWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzdHlsZXNDcmVhdG9yU2F2ZWQgPSB0aGlzLnN0eWxlc0NyZWF0b3JTYXZlZDtcblxuICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmdldCh0aGlzLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3JTYXZlZCwgdGhlbWUpO1xuXG4gICAgICAgICAgaWYgKCFzaGVldE1hbmFnZXIpIHtcbiAgICAgICAgICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgICAgICAgICAgcmVmczogMCxcbiAgICAgICAgICAgICAgc2hlZXQ6IG51bGxcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuc2V0KHRoaXMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSwgc2hlZXRNYW5hZ2VyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hlZXRNYW5hZ2VyLnJlZnMgPT09IDApIHtcbiAgICAgICAgICAgIHZhciBzaGVldDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgICAgICAgICAgc2hlZXQgPSBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmdldCh0aGlzLnNoZWV0c0NhY2hlLCBzdHlsZXNDcmVhdG9yU2F2ZWQsIHRoZW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzaGVldCkge1xuICAgICAgICAgICAgICBzaGVldCA9IHRoaXMuY3JlYXRlU2hlZXQodGhlbWUpO1xuICAgICAgICAgICAgICBzaGVldC5hdHRhY2goKTtcblxuICAgICAgICAgICAgICBpZiAodGhpcy5zaGVldHNDYWNoZSkge1xuICAgICAgICAgICAgICAgIF9tdWx0aUtleVN0b3JlLmRlZmF1bHQuc2V0KHRoaXMuc2hlZXRzQ2FjaGUsIHN0eWxlc0NyZWF0b3JTYXZlZCwgdGhlbWUsIHNoZWV0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaGVldE1hbmFnZXIuc2hlZXQgPSBzaGVldDtcbiAgICAgICAgICAgIHZhciBzaGVldHNSZWdpc3RyeSA9IHRoaXMuY29udGV4dFtfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRzUmVnaXN0cnldO1xuXG4gICAgICAgICAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKHNoZWV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzaGVldE1hbmFnZXIucmVmcyArPSAxO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJjcmVhdGVTaGVldFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU2hlZXQodGhlbWUpIHtcbiAgICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQuY3JlYXRlKHRoZW1lLCBuYW1lKTtcbiAgICAgICAgICB2YXIgbWV0YSA9IG5hbWU7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhbWV0YSkge1xuICAgICAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgICAgICBtZXRhID0gKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KTtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycsIFsnTWF0ZXJpYWwtVUk6IHRoZSBjb21wb25lbnQgZGlzcGxheU5hbWUgaXMgaW52YWxpZC4gSXQgbmVlZHMgdG8gYmUgYSBzdHJpbmcuJywgXCJQbGVhc2UgZml4IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50OiBcIi5jb25jYXQoQ29tcG9uZW50LCBcIi5cIildLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgc2hlZXQgPSB0aGlzLmpzcy5jcmVhdGVTdHlsZVNoZWV0KHN0eWxlcywgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgICBtZXRhOiBtZXRhLFxuICAgICAgICAgICAgY2xhc3NOYW1lUHJlZml4OiBtZXRhLFxuICAgICAgICAgICAgZmxpcDogdHlwZW9mIGZsaXAgPT09ICdib29sZWFuJyA/IGZsaXAgOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnLFxuICAgICAgICAgICAgbGluazogZmFsc2VcbiAgICAgICAgICB9LCB0aGlzLnNoZWV0T3B0aW9ucywgdGhpcy5zdHlsZXNDcmVhdG9yU2F2ZWQub3B0aW9ucywge1xuICAgICAgICAgICAgbmFtZTogbmFtZSB8fCBDb21wb25lbnQuZGlzcGxheU5hbWVcbiAgICAgICAgICB9LCBzdHlsZVNoZWV0T3B0aW9ucykpO1xuICAgICAgICAgIHJldHVybiBzaGVldDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiZGV0YWNoXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXRhY2godGhlbWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzaGVldE1hbmFnZXIgPSBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmdldCh0aGlzLnNoZWV0c01hbmFnZXIsIHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSk7XG5cbiAgICAgICAgICBzaGVldE1hbmFnZXIucmVmcyAtPSAxO1xuXG4gICAgICAgICAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgICAgICAgICBfbXVsdGlLZXlTdG9yZS5kZWZhdWx0LmRlbGV0ZSh0aGlzLnNoZWV0c01hbmFnZXIsIHRoaXMuc3R5bGVzQ3JlYXRvclNhdmVkLCB0aGVtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLnNoZWV0KTtcbiAgICAgICAgICAgIHZhciBzaGVldHNSZWdpc3RyeSA9IHRoaXMuY29udGV4dFtfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRzUmVnaXN0cnldO1xuXG4gICAgICAgICAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgICAgICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHNoZWV0TWFuYWdlci5zaGVldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTtcbiAgICAgICAgICB2YXIgbW9yZSA9ICgwLCBfZ2V0VGhlbWVQcm9wcy5kZWZhdWx0KSh7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy50aGVtZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwcm9wczogb3RoZXJcbiAgICAgICAgICB9KTsgLy8gUHJvdmlkZSB0aGUgdGhlbWUgdG8gdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgICAgICAgIC8vIFNvIHdlIGRvbid0IGhhdmUgdG8gdXNlIHRoZSBgd2l0aFRoZW1lKClgIEhpZ2hlci1vcmRlciBDb21wb25lbnQuXG5cbiAgICAgICAgICBpZiAod2l0aFRoZW1lICYmICFtb3JlLnRoZW1lKSB7XG4gICAgICAgICAgICBtb3JlLnRoZW1lID0gdGhpcy50aGVtZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG1vcmUsIHtcbiAgICAgICAgICAgIGNsYXNzZXM6IHRoaXMuZ2V0Q2xhc3NlcygpLFxuICAgICAgICAgICAgcmVmOiBpbm5lclJlZlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuICAgICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gICAgfShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gICAgV2l0aFN0eWxlcy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICAgICAqL1xuICAgICAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICovXG4gICAgICBpbm5lclJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKVxuICAgIH0gOiB7fTtcbiAgICBXaXRoU3R5bGVzLmNvbnRleHRUeXBlcyA9ICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoKF9leHRlbmRzMiA9IHtcbiAgICAgIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuanNzLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRPcHRpb25zLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2V4dGVuZHMyLCBfcmVhY3RKc3NDb250ZXh0LmRlZmF1bHQuc2hlZXRzUmVnaXN0cnksIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QpLCBfZXh0ZW5kczIpLCBsaXN0ZW5Ub1RoZW1lID8gX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC5jb250ZXh0VHlwZXMgOiB7fSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgV2l0aFN0eWxlcy5kaXNwbGF5TmFtZSA9IFwiV2l0aFN0eWxlcyhcIi5jb25jYXQoKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18pIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fID0ge307XG59XG5cbmlmICghX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLndpdGhTdHlsZXMpIHtcbiAgX3V0aWxzLnBvbnlmaWxsR2xvYmFsLl9fTVVJX1NUWUxFU19fLndpdGhTdHlsZXMgPSB3aXRoU3R5bGVzT2xkO1xufVxuXG52YXIgX2RlZmF1bHQgPSBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFN0eWxlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKHN0cmluZ3MsIHJhdykge1xuICBpZiAoIXJhdykge1xuICAgIHJhdyA9IHN0cmluZ3Muc2xpY2UoMCk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHJpbmdzLCB7XG4gICAgcmF3OiB7XG4gICAgICB2YWx1ZTogT2JqZWN0LmZyZWV6ZShyYXcpXG4gICAgfVxuICB9KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDsiLCJpbXBvcnQgU3R5bGlzIGZyb20gJ3N0eWxpcy9zdHlsaXMubWluJztcbmltcG9ydCBfaW5zZXJ0UnVsZVBsdWdpbiBmcm9tICdzdHlsaXMtcnVsZS1zaGVldCc7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBjcmVhdGVDb250ZXh0LCBDb21wb25lbnQsIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc1ZhbGlkRWxlbWVudFR5cGUsIEZvcndhcmRSZWYgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICdtZW1vaXplLW9uZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgdmFsaWRBdHRyIGZyb20gJ0BlbW90aW9uL2lzLXByb3AtdmFsaWQnO1xuXG4vLyBcblxudmFyIGludGVybGVhdmUgPSAoZnVuY3Rpb24gKHN0cmluZ3MsIGludGVycG9sYXRpb25zKSB7XG4gIHZhciByZXN1bHQgPSBbc3RyaW5nc1swXV07XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGludGVycG9sYXRpb25zLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgcmVzdWx0LnB1c2goaW50ZXJwb2xhdGlvbnNbaV0sIHN0cmluZ3NbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmo7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbn07XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG52YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzKSB7XG4gIHZhciB0YXJnZXQgPSB7fTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7XG4gICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG4vLyBcbnZhciBpc1BsYWluT2JqZWN0ID0gKGZ1bmN0aW9uICh4KSB7XG4gIHJldHVybiAodHlwZW9mIHggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHgpKSA9PT0gJ29iamVjdCcgJiYgeC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufSk7XG5cbi8vIFxudmFyIEVNUFRZX0FSUkFZID0gT2JqZWN0LmZyZWV6ZShbXSk7XG52YXIgRU1QVFlfT0JKRUNUID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFxuZnVuY3Rpb24gaXNGdW5jdGlvbih0ZXN0KSB7XG4gIHJldHVybiB0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQuZGlzcGxheU5hbWUgfHwgdGFyZ2V0Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59XG5cbi8vIFxuZnVuY3Rpb24gaXNTdHlsZWRDb21wb25lbnQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdHlwZW9mIHRhcmdldC5zdHlsZWRDb21wb25lbnRJZCA9PT0gJ3N0cmluZyc7XG59XG5cbi8vIFxuXG52YXIgU0NfQVRUUiA9IHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudi5TQ19BVFRSIHx8ICdkYXRhLXN0eWxlZCc7XG5cbnZhciBTQ19WRVJTSU9OX0FUVFIgPSAnZGF0YS1zdHlsZWQtdmVyc2lvbic7XG5cbnZhciBTQ19TVFJFQU1fQVRUUiA9ICdkYXRhLXN0eWxlZC1zdHJlYW1lZCc7XG5cbnZhciBJU19CUk9XU0VSID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ0hUTUxFbGVtZW50JyBpbiB3aW5kb3c7XG5cbnZhciBESVNBQkxFX1NQRUVEWSA9IHR5cGVvZiBTQ19ESVNBQkxFX1NQRUVEWSA9PT0gJ2Jvb2xlYW4nICYmIFNDX0RJU0FCTEVfU1BFRURZIHx8IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbi8vIFNoYXJlZCBlbXB0eSBleGVjdXRpb24gY29udGV4dCB3aGVuIGdlbmVyYXRpbmcgc3RhdGljIHN0eWxlc1xudmFyIFNUQVRJQ19FWEVDVVRJT05fQ09OVEVYVCA9IHt9O1xuXG4vLyBcblxuXG4vKipcbiAqIFBhcnNlIGVycm9ycy5tZCBhbmQgdHVybiBpdCBpbnRvIGEgc2ltcGxlIGhhc2ggb2YgY29kZTogbWVzc2FnZVxuICovXG52YXIgRVJST1JTID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgXCIxXCI6IFwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLFxuICBcIjJcIjogXCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIixcbiAgXCIzXCI6IFwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsXG4gIFwiNFwiOiBcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsXG4gIFwiNVwiOiBcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsXG4gIFwiNlwiOiBcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsXG4gIFwiN1wiOiBcIlRoZW1lUHJvdmlkZXI6IFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciBcXFwidGhlbWVcXFwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcblwiLFxuICBcIjhcIjogXCJUaGVtZVByb3ZpZGVyOiBQbGVhc2UgbWFrZSB5b3VyIFxcXCJ0aGVtZVxcXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuXCIsXG4gIFwiOVwiOiBcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIixcbiAgXCIxMFwiOiBcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsXG4gIFwiMTFcIjogXCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLFxuICBcIjEyXCI6IFwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgKHNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzKSwgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuXFxuXFxuXCIsXG4gIFwiMTNcIjogXCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXCJcbn0gOiB7fTtcblxuLyoqXG4gKiBzdXBlciBiYXNpYyB2ZXJzaW9uIG9mIHNwcmludGZcbiAqL1xuZnVuY3Rpb24gZm9ybWF0KCkge1xuICB2YXIgYSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTtcbiAgdmFyIGIgPSBbXTtcblxuICBmb3IgKHZhciBjID0gMSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgYyA8IGxlbjsgYyArPSAxKSB7XG4gICAgYi5wdXNoKGFyZ3VtZW50cy5sZW5ndGggPD0gYyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tjXSk7XG4gIH1cblxuICBiLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBhID0gYS5yZXBsYWNlKC8lW2Etel0vLCBkKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogQ3JlYXRlIGFuIGVycm9yIGZpbGUgb3V0IG9mIGVycm9ycy5tZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGEgc2ltcGxlIHdlYiBsaW5rIHRvIHRoZSBmdWxsIGVycm9yc1xuICogaW4gcHJvZHVjdGlvbiBtb2RlLlxuICovXG5cbnZhciBTdHlsZWRDb21wb25lbnRzRXJyb3IgPSBmdW5jdGlvbiAoX0Vycm9yKSB7XG4gIGluaGVyaXRzKFN0eWxlZENvbXBvbmVudHNFcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBTdHlsZWRDb21wb25lbnRzRXJyb3IoY29kZSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlZENvbXBvbmVudHNFcnJvcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Vycm9yLmNhbGwodGhpcywgJ0FuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL3NyYy91dGlscy9lcnJvcnMubWQjJyArIGNvZGUgKyAnIGZvciBtb3JlIGluZm9ybWF0aW9uLiAnICsgKGludGVycG9sYXRpb25zID8gJ0FkZGl0aW9uYWwgYXJndW1lbnRzOiAnICsgaW50ZXJwb2xhdGlvbnMuam9pbignLCAnKSA6ICcnKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FcnJvci5jYWxsKHRoaXMsIGZvcm1hdC5hcHBseSh1bmRlZmluZWQsIFtFUlJPUlNbY29kZV1dLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpLnRyaW0oKSkpO1xuICAgIH1cbiAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gIH1cblxuICByZXR1cm4gU3R5bGVkQ29tcG9uZW50c0Vycm9yO1xufShFcnJvcik7XG5cbi8vIFxudmFyIFNDX0NPTVBPTkVOVF9JRCA9IC9eW15cXFNcXG5dKj9cXC9cXCogc2MtY29tcG9uZW50LWlkOlxccyooXFxTKylcXHMrXFwqXFwvL2dtO1xuXG52YXIgZXh0cmFjdENvbXBzID0gKGZ1bmN0aW9uIChtYXliZUNTUykge1xuICB2YXIgY3NzID0gJycgKyAobWF5YmVDU1MgfHwgJycpOyAvLyBEZWZpbml0ZWx5IGEgc3RyaW5nLCBhbmQgYSBjbG9uZVxuICB2YXIgZXhpc3RpbmdDb21wb25lbnRzID0gW107XG4gIGNzcy5yZXBsYWNlKFNDX0NPTVBPTkVOVF9JRCwgZnVuY3Rpb24gKG1hdGNoLCBjb21wb25lbnRJZCwgbWF0Y2hJbmRleCkge1xuICAgIGV4aXN0aW5nQ29tcG9uZW50cy5wdXNoKHsgY29tcG9uZW50SWQ6IGNvbXBvbmVudElkLCBtYXRjaEluZGV4OiBtYXRjaEluZGV4IH0pO1xuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHJldHVybiBleGlzdGluZ0NvbXBvbmVudHMubWFwKGZ1bmN0aW9uIChfcmVmLCBpKSB7XG4gICAgdmFyIGNvbXBvbmVudElkID0gX3JlZi5jb21wb25lbnRJZCxcbiAgICAgICAgbWF0Y2hJbmRleCA9IF9yZWYubWF0Y2hJbmRleDtcblxuICAgIHZhciBuZXh0Q29tcCA9IGV4aXN0aW5nQ29tcG9uZW50c1tpICsgMV07XG4gICAgdmFyIGNzc0Zyb21ET00gPSBuZXh0Q29tcCA/IGNzcy5zbGljZShtYXRjaEluZGV4LCBuZXh0Q29tcC5tYXRjaEluZGV4KSA6IGNzcy5zbGljZShtYXRjaEluZGV4KTtcbiAgICByZXR1cm4geyBjb21wb25lbnRJZDogY29tcG9uZW50SWQsIGNzc0Zyb21ET006IGNzc0Zyb21ET00gfTtcbiAgfSk7XG59KTtcblxuLy8gXG5cbnZhciBDT01NRU5UX1JFR0VYID0gL15cXHMqXFwvXFwvLiokL2dtO1xuXG4vLyBOT1RFOiBUaGlzIHN0eWxpcyBpbnN0YW5jZSBpcyBvbmx5IHVzZWQgdG8gc3BsaXQgcnVsZXMgZnJvbSBTU1InZCBzdHlsZSB0YWdzXG52YXIgc3R5bGlzU3BsaXR0ZXIgPSBuZXcgU3R5bGlzKHtcbiAgZ2xvYmFsOiBmYWxzZSxcbiAgY2FzY2FkZTogdHJ1ZSxcbiAga2V5ZnJhbWU6IGZhbHNlLFxuICBwcmVmaXg6IGZhbHNlLFxuICBjb21wcmVzczogZmFsc2UsXG4gIHNlbWljb2xvbjogdHJ1ZVxufSk7XG5cbnZhciBzdHlsaXMgPSBuZXcgU3R5bGlzKHtcbiAgZ2xvYmFsOiBmYWxzZSxcbiAgY2FzY2FkZTogdHJ1ZSxcbiAga2V5ZnJhbWU6IGZhbHNlLFxuICBwcmVmaXg6IHRydWUsXG4gIGNvbXByZXNzOiBmYWxzZSxcbiAgc2VtaWNvbG9uOiBmYWxzZSAvLyBOT1RFOiBUaGlzIG1lYW5zIFwiYXV0b2NvbXBsZXRlIG1pc3Npbmcgc2VtaWNvbG9uc1wiXG59KTtcblxuLy8gV3JhcCBgaW5zZXJ0UnVsZVBsdWdpbiB0byBidWlsZCBhIGxpc3Qgb2YgcnVsZXMsXG4vLyBhbmQgdGhlbiBtYWtlIG91ciBvd24gcGx1Z2luIHRvIHJldHVybiB0aGUgcnVsZXMuIFRoaXNcbi8vIG1ha2VzIGl0IGVhc2llciB0byBob29rIGludG8gdGhlIGV4aXN0aW5nIFNTUiBhcmNoaXRlY3R1cmVcblxudmFyIHBhcnNpbmdSdWxlcyA9IFtdO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciByZXR1cm5SdWxlc1BsdWdpbiA9IGZ1bmN0aW9uIHJldHVyblJ1bGVzUGx1Z2luKGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IC0yKSB7XG4gICAgdmFyIHBhcnNlZFJ1bGVzID0gcGFyc2luZ1J1bGVzO1xuICAgIHBhcnNpbmdSdWxlcyA9IFtdO1xuICAgIHJldHVybiBwYXJzZWRSdWxlcztcbiAgfVxufTtcblxudmFyIHBhcnNlUnVsZXNQbHVnaW4gPSBfaW5zZXJ0UnVsZVBsdWdpbihmdW5jdGlvbiAocnVsZSkge1xuICBwYXJzaW5nUnVsZXMucHVzaChydWxlKTtcbn0pO1xuXG52YXIgX2NvbXBvbmVudElkID0gdm9pZCAwO1xudmFyIF9zZWxlY3RvciA9IHZvaWQgMDtcbnZhciBfc2VsZWN0b3JSZWdleHAgPSB2b2lkIDA7XG5cbnZhciBzZWxmUmVmZXJlbmNlUmVwbGFjZXIgPSBmdW5jdGlvbiBzZWxmUmVmZXJlbmNlUmVwbGFjZXIobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIGlmIChcbiAgLy8gdGhlIGZpcnN0IHNlbGYtcmVmIGlzIGFsd2F5cyB1bnRvdWNoZWRcbiAgb2Zmc2V0ID4gMCAmJlxuICAvLyB0aGVyZSBzaG91bGQgYmUgYXQgbGVhc3QgdHdvIHNlbGYtcmVmcyB0byBkbyBhIHJlcGxhY2VtZW50ICguYiA+IC5iKVxuICBzdHJpbmcuc2xpY2UoMCwgb2Zmc2V0KS5pbmRleE9mKF9zZWxlY3RvcikgIT09IC0xICYmXG4gIC8vIG5vIGNvbnNlY3V0aXZlIHNlbGYgcmVmcyAoLmIuYik7IHRoYXQgaXMgYSBwcmVjZWRlbmNlIGJvb3N0IGFuZCB0cmVhdGVkIGRpZmZlcmVudGx5XG4gIHN0cmluZy5zbGljZShvZmZzZXQgLSBfc2VsZWN0b3IubGVuZ3RoLCBvZmZzZXQpICE9PSBfc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gJy4nICsgX2NvbXBvbmVudElkO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoO1xufTtcblxuLyoqXG4gKiBXaGVuIHdyaXRpbmcgYSBzdHlsZSBsaWtlXG4gKlxuICogJiArICYge1xuICogICBjb2xvcjogcmVkO1xuICogfVxuICpcbiAqIFRoZSBzZWNvbmQgYW1wZXJzYW5kIHNob3VsZCBiZSBhIHJlZmVyZW5jZSB0byB0aGUgc3RhdGljIGNvbXBvbmVudCBjbGFzcy4gc3R5bGlzXG4gKiBoYXMgbm8ga25vd2xlZGdlIG9mIHN0YXRpYyBjbGFzcyBzbyB3ZSBoYXZlIHRvIGludGVsbGlnZW50bHkgcmVwbGFjZSB0aGUgYmFzZSBzZWxlY3Rvci5cbiAqL1xudmFyIHNlbGZSZWZlcmVuY2VSZXBsYWNlbWVudFBsdWdpbiA9IGZ1bmN0aW9uIHNlbGZSZWZlcmVuY2VSZXBsYWNlbWVudFBsdWdpbihjb250ZXh0LCBfLCBzZWxlY3RvcnMpIHtcbiAgaWYgKGNvbnRleHQgPT09IDIgJiYgc2VsZWN0b3JzLmxlbmd0aCAmJiBzZWxlY3RvcnNbMF0ubGFzdEluZGV4T2YoX3NlbGVjdG9yKSA+IDApIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBzZWxlY3RvcnNbMF0gPSBzZWxlY3RvcnNbMF0ucmVwbGFjZShfc2VsZWN0b3JSZWdleHAsIHNlbGZSZWZlcmVuY2VSZXBsYWNlcik7XG4gIH1cbn07XG5cbnN0eWxpcy51c2UoW3NlbGZSZWZlcmVuY2VSZXBsYWNlbWVudFBsdWdpbiwgcGFyc2VSdWxlc1BsdWdpbiwgcmV0dXJuUnVsZXNQbHVnaW5dKTtcbnN0eWxpc1NwbGl0dGVyLnVzZShbcGFyc2VSdWxlc1BsdWdpbiwgcmV0dXJuUnVsZXNQbHVnaW5dKTtcblxudmFyIHNwbGl0QnlSdWxlcyA9IGZ1bmN0aW9uIHNwbGl0QnlSdWxlcyhjc3MpIHtcbiAgcmV0dXJuIHN0eWxpc1NwbGl0dGVyKCcnLCBjc3MpO1xufTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5UnVsZXMocnVsZXMsIHNlbGVjdG9yLCBwcmVmaXgpIHtcbiAgdmFyIGNvbXBvbmVudElkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAnJic7XG5cbiAgdmFyIGZsYXRDU1MgPSBydWxlcy5qb2luKCcnKS5yZXBsYWNlKENPTU1FTlRfUkVHRVgsICcnKTsgLy8gcmVwbGFjZSBKUyBjb21tZW50c1xuXG4gIHZhciBjc3NTdHIgPSBzZWxlY3RvciAmJiBwcmVmaXggPyBwcmVmaXggKyAnICcgKyBzZWxlY3RvciArICcgeyAnICsgZmxhdENTUyArICcgfScgOiBmbGF0Q1NTO1xuXG4gIC8vIHN0eWxpcyBoYXMgbm8gY29uY2VwdCBvZiBzdGF0ZSB0byBiZSBwYXNzZWQgdG8gcGx1Z2luc1xuICAvLyBidXQgc2luY2UgSlMgaXMgc2luZ2xlPXRocmVhZGVkLCB3ZSBjYW4gcmVseSBvbiB0aGF0IHRvIGVuc3VyZVxuICAvLyB0aGVzZSBwcm9wZXJ0aWVzIHN0YXkgaW4gc3luYyB3aXRoIHRoZSBjdXJyZW50IHN0eWxpcyBydW5cbiAgX2NvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gIF9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICBfc2VsZWN0b3JSZWdleHAgPSBuZXcgUmVnRXhwKCdcXFxcJyArIF9zZWxlY3RvciArICdcXFxcYicsICdnJyk7XG5cbiAgcmV0dXJuIHN0eWxpcyhwcmVmaXggfHwgIXNlbGVjdG9yID8gJycgOiBzZWxlY3RvciwgY3NzU3RyKTtcbn1cblxuLy8gXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UsIG5vLXVuZGVmICovXG5cbnZhciBnZXROb25jZSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xufSk7XG5cbi8vIFxuLyogVGhlc2UgYXJlIGhlbHBlcnMgZm9yIHRoZSBTdHlsZVRhZ3MgdG8ga2VlcCB0cmFjayBvZiB0aGUgaW5qZWN0ZWRcbiAqIHJ1bGUgbmFtZXMgZm9yIGVhY2ggKGNvbXBvbmVudCkgSUQgdGhhdCB0aGV5J3JlIGtlZXBpbmcgdHJhY2sgb2YuXG4gKiBUaGV5J3JlIGNydWNpYWwgZm9yIGRldGVjdGluZyB3aGV0aGVyIGEgbmFtZSBoYXMgYWxyZWFkeSBiZWVuXG4gKiBpbmplY3RlZC5cbiAqIChUaGlzIGV4Y2x1ZGVzIHJlaHlkcmF0ZWQgbmFtZXMpICovXG5cbi8qIGFkZHMgYSBuZXcgSUQ6bmFtZSBwYWlyaW5nIHRvIGEgbmFtZXMgZGljdGlvbmFyeSAqL1xudmFyIGFkZE5hbWVGb3JJZCA9IGZ1bmN0aW9uIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpIHtcbiAgaWYgKG5hbWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB2YXIgbmFtZXNGb3JJZCA9IG5hbWVzW2lkXSB8fCAobmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgbmFtZXNGb3JJZFtuYW1lXSA9IHRydWU7XG4gIH1cbn07XG5cbi8qIHJlc2V0cyBhbiBJRCBlbnRpcmVseSBieSBvdmVyd3JpdGluZyBpdCBpbiB0aGUgZGljdGlvbmFyeSAqL1xudmFyIHJlc2V0SWROYW1lcyA9IGZ1bmN0aW9uIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG5hbWVzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59O1xuXG4vKiBmYWN0b3J5IGZvciBhIG5hbWVzIGRpY3Rpb25hcnkgY2hlY2tpbmcgdGhlIGV4aXN0YW5jZSBvZiBhbiBJRDpuYW1lIHBhaXJpbmcgKi9cbnZhciBoYXNOYW1lRm9ySWQgPSBmdW5jdGlvbiBoYXNOYW1lRm9ySWQobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgbmFtZSkge1xuICAgIHJldHVybiBuYW1lc1tpZF0gIT09IHVuZGVmaW5lZCAmJiBuYW1lc1tpZF1bbmFtZV07XG4gIH07XG59O1xuXG4vKiBzdHJpbmdpZmllcyBuYW1lcyBmb3IgdGhlIGh0bWwvZWxlbWVudCBvdXRwdXQgKi9cbnZhciBzdHJpbmdpZnlOYW1lcyA9IGZ1bmN0aW9uIHN0cmluZ2lmeU5hbWVzKG5hbWVzKSB7XG4gIHZhciBzdHIgPSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICBmb3IgKHZhciBpZCBpbiBuYW1lcykge1xuICAgIHN0ciArPSBPYmplY3Qua2V5cyhuYW1lc1tpZF0pLmpvaW4oJyAnKSArICcgJztcbiAgfVxuICByZXR1cm4gc3RyLnRyaW0oKTtcbn07XG5cbi8qIGNsb25lcyB0aGUgbmVzdGVkIG5hbWVzIGRpY3Rpb25hcnkgKi9cbnZhciBjbG9uZU5hbWVzID0gZnVuY3Rpb24gY2xvbmVOYW1lcyhuYW1lcykge1xuICB2YXIgY2xvbmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluXG4gIGZvciAodmFyIGlkIGluIG5hbWVzKSB7XG4gICAgY2xvbmVbaWRdID0gX2V4dGVuZHMoe30sIG5hbWVzW2lkXSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lO1xufTtcblxuLy8gXG5cbi8qIFRoZXNlIGFyZSBoZWxwZXJzIHRoYXQgZGVhbCB3aXRoIHRoZSBpbnNlcnRSdWxlIChha2Egc3BlZWR5KSBBUElcbiAqIFRoZXkgYXJlIHVzZWQgaW4gdGhlIFN0eWxlVGFncyBhbmQgc3BlY2lmaWNhbGx5IHRoZSBzcGVlZHkgdGFnXG4gKi9cblxuLyogcmV0cmlldmUgYSBzaGVldCBmb3IgYSBnaXZlbiBzdHlsZSB0YWcgKi9cbnZhciBzaGVldEZvclRhZyA9IGZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICAvLyAkRmxvd0ZpeE1lXG4gIGlmICh0YWcuc2hlZXQpIHJldHVybiB0YWcuc2hlZXQ7XG5cbiAgLyogRmlyZWZveCBxdWlyayByZXF1aXJlcyB1cyB0byBzdGVwIHRocm91Z2ggYWxsIHN0eWxlc2hlZXRzIHRvIGZpbmQgb25lIG93bmVkIGJ5IHRoZSBnaXZlbiB0YWcgKi9cbiAgdmFyIHNpemUgPSBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgdmFyIHNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmIChzaGVldC5vd25lck5vZGUgPT09IHRhZykgcmV0dXJuIHNoZWV0O1xuICB9XG5cbiAgLyogd2Ugc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGZpbmQgYSB0YWcgKi9cbiAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxMCk7XG59O1xuXG4vKiBpbnNlcnQgYSBydWxlIHNhZmVseSBhbmQgcmV0dXJuIHdoZXRoZXIgaXQgd2FzIGFjdHVhbGx5IGluamVjdGVkICovXG52YXIgc2FmZUluc2VydFJ1bGUgPSBmdW5jdGlvbiBzYWZlSW5zZXJ0UnVsZShzaGVldCwgY3NzUnVsZSwgaW5kZXgpIHtcbiAgLyogYWJvcnQgZWFybHkgaWYgY3NzUnVsZSBzdHJpbmcgaXMgZmFsc3kgKi9cbiAgaWYgKCFjc3NSdWxlKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heEluZGV4ID0gc2hlZXQuY3NzUnVsZXMubGVuZ3RoO1xuXG4gIHRyeSB7XG4gICAgLyogdXNlIGluc2VydFJ1bGUgYW5kIGNhcCBwYXNzZWQgaW5kZXggd2l0aCBtYXhJbmRleCAobm8gb2YgY3NzUnVsZXMpICovXG4gICAgc2hlZXQuaW5zZXJ0UnVsZShjc3NSdWxlLCBpbmRleCA8PSBtYXhJbmRleCA/IGluZGV4IDogbWF4SW5kZXgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvKiBhbnkgZXJyb3IgaW5kaWNhdGVzIGFuIGludmFsaWQgcnVsZSAqL1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyogZGVsZXRlcyBgc2l6ZWAgcnVsZXMgc3RhcnRpbmcgZnJvbSBgcmVtb3ZhbEluZGV4YCAqL1xudmFyIGRlbGV0ZVJ1bGVzID0gZnVuY3Rpb24gZGVsZXRlUnVsZXMoc2hlZXQsIHJlbW92YWxJbmRleCwgc2l6ZSkge1xuICB2YXIgbG93ZXJCb3VuZCA9IHJlbW92YWxJbmRleCAtIHNpemU7XG4gIGZvciAodmFyIGkgPSByZW1vdmFsSW5kZXg7IGkgPiBsb3dlckJvdW5kOyBpIC09IDEpIHtcbiAgICBzaGVldC5kZWxldGVSdWxlKGkpO1xuICB9XG59O1xuXG4vLyBcblxuLyogdGhpcyBtYXJrZXIgc2VwYXJhdGVzIGNvbXBvbmVudCBzdHlsZXMgYW5kIGlzIGltcG9ydGFudCBmb3IgcmVoeWRyYXRpb24gKi9cbnZhciBtYWtlVGV4dE1hcmtlciA9IGZ1bmN0aW9uIG1ha2VUZXh0TWFya2VyKGlkKSB7XG4gIHJldHVybiAnXFxuLyogc2MtY29tcG9uZW50LWlkOiAnICsgaWQgKyAnICovXFxuJztcbn07XG5cbi8qIGFkZCB1cCBhbGwgbnVtYmVycyBpbiBhcnJheSB1cCB1bnRpbCBhbmQgaW5jbHVkaW5nIHRoZSBpbmRleCAqL1xudmFyIGFkZFVwVW50aWxJbmRleCA9IGZ1bmN0aW9uIGFkZFVwVW50aWxJbmRleChzaXplcywgaW5kZXgpIHtcbiAgdmFyIHRvdGFsVXBUb0luZGV4ID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPD0gaW5kZXg7IGkgKz0gMSkge1xuICAgIHRvdGFsVXBUb0luZGV4ICs9IHNpemVzW2ldO1xuICB9XG5cbiAgcmV0dXJuIHRvdGFsVXBUb0luZGV4O1xufTtcblxuLyogY3JlYXRlIGEgbmV3IHN0eWxlIHRhZyBhZnRlciBsYXN0RWwgKi9cbnZhciBtYWtlU3R5bGVUYWcgPSBmdW5jdGlvbiBtYWtlU3R5bGVUYWcodGFyZ2V0LCB0YWdFbCwgaW5zZXJ0QmVmb3JlKSB7XG4gIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGVsLnNldEF0dHJpYnV0ZShTQ19BVFRSLCAnJyk7XG4gIGVsLnNldEF0dHJpYnV0ZShTQ19WRVJTSU9OX0FUVFIsIFwiNC4xLjFcIik7XG5cbiAgdmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcbiAgaWYgKG5vbmNlKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdub25jZScsIG5vbmNlKTtcbiAgfVxuXG4gIC8qIFdvcmsgYXJvdW5kIGluc2VydFJ1bGUgcXVpcmsgaW4gRWRnZUhUTUwgKi9cbiAgZWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcblxuICBpZiAodGFyZ2V0ICYmICF0YWdFbCkge1xuICAgIC8qIEFwcGVuZCB0byB0YXJnZXQgd2hlbiBubyBwcmV2aW91cyBlbGVtZW50IHdhcyBwYXNzZWQgKi9cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoZWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghdGFnRWwgfHwgIXRhcmdldCB8fCAhdGFnRWwucGFyZW50Tm9kZSkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig2KTtcbiAgICB9XG5cbiAgICAvKiBJbnNlcnQgbmV3IHN0eWxlIHRhZyBhZnRlciB0aGUgcHJldmlvdXMgb25lICovXG4gICAgdGFnRWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIGluc2VydEJlZm9yZSA/IHRhZ0VsIDogdGFnRWwubmV4dFNpYmxpbmcpO1xuICB9XG5cbiAgcmV0dXJuIGVsO1xufTtcblxuLyogdGFrZXMgYSBjc3MgZmFjdG9yeSBmdW5jdGlvbiBhbmQgb3V0cHV0cyBhbiBodG1sIHN0eWxlZCB0YWcgZmFjdG9yeSAqL1xudmFyIHdyYXBBc0h0bWxUYWcgPSBmdW5jdGlvbiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhZGRpdGlvbmFsQXR0cnMpIHtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIHZhciBhdHRycyA9IFtub25jZSAmJiAnbm9uY2U9XCInICsgbm9uY2UgKyAnXCInLCBTQ19BVFRSICsgJz1cIicgKyBzdHJpbmdpZnlOYW1lcyhuYW1lcykgKyAnXCInLCBTQ19WRVJTSU9OX0FUVFIgKyAnPVwiJyArIFwiNC4xLjFcIiArICdcIicsIGFkZGl0aW9uYWxBdHRyc107XG5cbiAgICB2YXIgaHRtbEF0dHIgPSBhdHRycy5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuICAgIHJldHVybiAnPHN0eWxlICcgKyBodG1sQXR0ciArICc+JyArIGNzcygpICsgJzwvc3R5bGU+JztcbiAgfTtcbn07XG5cbi8qIHRha2VzIGEgY3NzIGZhY3RvcnkgZnVuY3Rpb24gYW5kIG91dHB1dHMgYW4gZWxlbWVudCBmYWN0b3J5ICovXG52YXIgd3JhcEFzRWxlbWVudCA9IGZ1bmN0aW9uIHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvcHM7XG5cbiAgICB2YXIgcHJvcHMgPSAoX3Byb3BzID0ge30sIF9wcm9wc1tTQ19BVFRSXSA9IHN0cmluZ2lmeU5hbWVzKG5hbWVzKSwgX3Byb3BzW1NDX1ZFUlNJT05fQVRUUl0gPSBcIjQuMS4xXCIsIF9wcm9wcyk7XG5cbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcHJvcHMubm9uY2UgPSBub25jZTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tZGFuZ2VyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgX2V4dGVuZHMoe30sIHByb3BzLCB7IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7IF9faHRtbDogY3NzKCkgfSB9KSk7XG4gIH07XG59O1xuXG52YXIgZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5ID0gZnVuY3Rpb24gZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFya2Vycyk7XG4gIH07XG59O1xuXG4vKiBzcGVlZHkgdGFncyB1dGlsaXNlIGluc2VydFJ1bGUgKi9cbnZhciBtYWtlU3BlZWR5VGFnID0gZnVuY3Rpb24gbWFrZVNwZWVkeVRhZyhlbCwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICB2YXIgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbWFya2VycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzaXplcyA9IFtdO1xuXG4gIHZhciBleHRyYWN0SW1wb3J0ID0gZ2V0SW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkO1xuICAvKiBpbmRpY2F0ZXMgd2h0aGVyIGdldEltcG9ydFJ1bGVUYWcgd2FzIGNhbGxlZCAqL1xuICB2YXIgdXNlZEltcG9ydFJ1bGVUYWcgPSBmYWxzZTtcblxuICB2YXIgaW5zZXJ0TWFya2VyID0gZnVuY3Rpb24gaW5zZXJ0TWFya2VyKGlkKSB7XG4gICAgdmFyIHByZXYgPSBtYXJrZXJzW2lkXTtcbiAgICBpZiAocHJldiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG5cbiAgICBtYXJrZXJzW2lkXSA9IHNpemVzLmxlbmd0aDtcbiAgICBzaXplcy5wdXNoKDApO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdO1xuICB9O1xuXG4gIHZhciBpbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKGlkLCBjc3NSdWxlcywgbmFtZSkge1xuICAgIHZhciBtYXJrZXIgPSBpbnNlcnRNYXJrZXIoaWQpO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgaW5zZXJ0SW5kZXggPSBhZGRVcFVudGlsSW5kZXgoc2l6ZXMsIG1hcmtlcik7XG5cbiAgICB2YXIgaW5qZWN0ZWRSdWxlcyA9IDA7XG4gICAgdmFyIGltcG9ydFJ1bGVzID0gW107XG4gICAgdmFyIGNzc1J1bGVzU2l6ZSA9IGNzc1J1bGVzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3NzUnVsZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBjc3NSdWxlID0gY3NzUnVsZXNbaV07XG4gICAgICB2YXIgbWF5SGF2ZUltcG9ydCA9IGV4dHJhY3RJbXBvcnQ7IC8qIEBpbXBvcnQgcnVsZXMgYXJlIHJlb3JkZXJlZCB0byBhcHBlYXIgZmlyc3QgKi9cbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIGNzc1J1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKGNzc1J1bGUpO1xuICAgICAgfSBlbHNlIGlmIChzYWZlSW5zZXJ0UnVsZShzaGVldCwgY3NzUnVsZSwgaW5zZXJ0SW5kZXggKyBpbmplY3RlZFJ1bGVzKSkge1xuICAgICAgICBtYXlIYXZlSW1wb3J0ID0gZmFsc2U7XG4gICAgICAgIGluamVjdGVkUnVsZXMgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXh0cmFjdEltcG9ydCAmJiBpbXBvcnRSdWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICB1c2VkSW1wb3J0UnVsZVRhZyA9IHRydWU7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkuaW5zZXJ0UnVsZXMoaWQgKyAnLWltcG9ydCcsIGltcG9ydFJ1bGVzKTtcbiAgICB9XG5cbiAgICBzaXplc1ttYXJrZXJdICs9IGluamVjdGVkUnVsZXM7IC8qIGFkZCB1cCBubyBvZiBpbmplY3RlZCBydWxlcyAqL1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKGVsKTtcbiAgICB2YXIgcmVtb3ZhbEluZGV4ID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpIC0gMTtcbiAgICBkZWxldGVSdWxlcyhzaGVldCwgcmVtb3ZhbEluZGV4LCBzaXplKTtcbiAgICBzaXplc1ttYXJrZXJdID0gMDtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBfc2hlZXRGb3JUYWcgPSBzaGVldEZvclRhZyhlbCksXG4gICAgICAgIGNzc1J1bGVzID0gX3NoZWV0Rm9yVGFnLmNzc1J1bGVzO1xuXG4gICAgdmFyIHN0ciA9ICcnO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pblxuICAgIGZvciAodmFyIGlkIGluIG1hcmtlcnMpIHtcbiAgICAgIHN0ciArPSBtYWtlVGV4dE1hcmtlcihpZCk7XG4gICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpZF07XG4gICAgICB2YXIgZW5kID0gYWRkVXBVbnRpbEluZGV4KHNpemVzLCBtYXJrZXIpO1xuICAgICAgdmFyIHNpemUgPSBzaXplc1ttYXJrZXJdO1xuICAgICAgZm9yICh2YXIgaSA9IGVuZCAtIHNpemU7IGkgPCBlbmQ7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcnVsZSA9IGNzc1J1bGVzW2ldO1xuICAgICAgICBpZiAocnVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyICs9IHJ1bGUuY3NzVGV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDUpO1xuICAgIH0sXG5cbiAgICBjc3M6IGNzcyxcbiAgICBnZXRJZHM6IGdldElkc0Zyb21NYXJrZXJzRmFjdG9yeShtYXJrZXJzKSxcbiAgICBoYXNOYW1lRm9ySWQ6IGhhc05hbWVGb3JJZChuYW1lcyksXG4gICAgaW5zZXJ0TWFya2VyOiBpbnNlcnRNYXJrZXIsXG4gICAgaW5zZXJ0UnVsZXM6IGluc2VydFJ1bGVzLFxuICAgIHJlbW92ZVJ1bGVzOiByZW1vdmVSdWxlcyxcbiAgICBzZWFsZWQ6IGZhbHNlLFxuICAgIHN0eWxlVGFnOiBlbCxcbiAgICB0b0VsZW1lbnQ6IHdyYXBBc0VsZW1lbnQoY3NzLCBuYW1lcyksXG4gICAgdG9IVE1MOiB3cmFwQXNIdG1sVGFnKGNzcywgbmFtZXMpXG4gIH07XG59O1xuXG52YXIgbWFrZVRleHROb2RlID0gZnVuY3Rpb24gbWFrZVRleHROb2RlKGlkKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtYWtlVGV4dE1hcmtlcihpZCkpO1xufTtcblxudmFyIG1ha2VCcm93c2VyVGFnID0gZnVuY3Rpb24gbWFrZUJyb3dzZXJUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpIHtcbiAgdmFyIG5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIG1hcmtlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHZhciBleHRyYWN0SW1wb3J0ID0gZ2V0SW1wb3J0UnVsZVRhZyAhPT0gdW5kZWZpbmVkO1xuXG4gIC8qIGluZGljYXRlcyB3aHRoZXIgZ2V0SW1wb3J0UnVsZVRhZyB3YXMgY2FsbGVkICovXG4gIHZhciB1c2VkSW1wb3J0UnVsZVRhZyA9IGZhbHNlO1xuXG4gIHZhciBpbnNlcnRNYXJrZXIgPSBmdW5jdGlvbiBpbnNlcnRNYXJrZXIoaWQpIHtcbiAgICB2YXIgcHJldiA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChwcmV2ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIG1hcmtlcnNbaWRdID0gbWFrZVRleHROb2RlKGlkKTtcbiAgICBlbC5hcHBlbmRDaGlsZChtYXJrZXJzW2lkXSk7XG4gICAgbmFtZXNbaWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHJldHVybiBtYXJrZXJzW2lkXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICB2YXIgaW1wb3J0UnVsZXMgPSBbXTtcbiAgICB2YXIgY3NzUnVsZXNTaXplID0gY3NzUnVsZXMubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NSdWxlc1NpemU7IGkgKz0gMSkge1xuICAgICAgdmFyIHJ1bGUgPSBjc3NSdWxlc1tpXTtcbiAgICAgIHZhciBtYXlIYXZlSW1wb3J0ID0gZXh0cmFjdEltcG9ydDtcbiAgICAgIGlmIChtYXlIYXZlSW1wb3J0ICYmIHJ1bGUuaW5kZXhPZignQGltcG9ydCcpICE9PSAtMSkge1xuICAgICAgICBpbXBvcnRSdWxlcy5wdXNoKHJ1bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF5SGF2ZUltcG9ydCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gaSA9PT0gY3NzUnVsZXNTaXplIC0gMSA/ICcnIDogJyAnO1xuICAgICAgICBtYXJrZXIuYXBwZW5kRGF0YSgnJyArIHJ1bGUgKyBzZXBhcmF0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuXG4gICAgaWYgKGV4dHJhY3RJbXBvcnQgJiYgaW1wb3J0UnVsZXMubGVuZ3RoID4gMCkge1xuICAgICAgdXNlZEltcG9ydFJ1bGVUYWcgPSB0cnVlO1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgZ2V0SW1wb3J0UnVsZVRhZygpLmluc2VydFJ1bGVzKGlkICsgJy1pbXBvcnQnLCBpbXBvcnRSdWxlcyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgLyogY3JlYXRlIG5ldyBlbXB0eSB0ZXh0IG5vZGUgYW5kIHJlcGxhY2UgdGhlIGN1cnJlbnQgb25lICovXG4gICAgdmFyIG5ld01hcmtlciA9IG1ha2VUZXh0Tm9kZShpZCk7XG4gICAgZWwucmVwbGFjZUNoaWxkKG5ld01hcmtlciwgbWFya2VyKTtcbiAgICBtYXJrZXJzW2lkXSA9IG5ld01hcmtlcjtcbiAgICByZXNldElkTmFtZXMobmFtZXMsIGlkKTtcblxuICAgIGlmIChleHRyYWN0SW1wb3J0ICYmIHVzZWRJbXBvcnRSdWxlVGFnKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRJbXBvcnRSdWxlVGFnKCkucmVtb3ZlUnVsZXMoaWQgKyAnLWltcG9ydCcpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBzdHIgPSAnJztcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBzdHIgKz0gbWFya2Vyc1tpZF0uZGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcig1KTtcbiAgICB9LFxuXG4gICAgY3NzOiBjc3MsXG4gICAgZ2V0SWRzOiBnZXRJZHNGcm9tTWFya2Vyc0ZhY3RvcnkobWFya2VycyksXG4gICAgaGFzTmFtZUZvcklkOiBoYXNOYW1lRm9ySWQobmFtZXMpLFxuICAgIGluc2VydE1hcmtlcjogaW5zZXJ0TWFya2VyLFxuICAgIGluc2VydFJ1bGVzOiBpbnNlcnRSdWxlcyxcbiAgICByZW1vdmVSdWxlczogcmVtb3ZlUnVsZXMsXG4gICAgc2VhbGVkOiBmYWxzZSxcbiAgICBzdHlsZVRhZzogZWwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xufTtcblxudmFyIG1ha2VTZXJ2ZXJUYWcgPSBmdW5jdGlvbiBtYWtlU2VydmVyVGFnKG5hbWVzQXJnLCBtYXJrZXJzQXJnKSB7XG4gIHZhciBuYW1lcyA9IG5hbWVzQXJnID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogbmFtZXNBcmc7XG4gIHZhciBtYXJrZXJzID0gbWFya2Vyc0FyZyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IG1hcmtlcnNBcmc7XG5cbiAgdmFyIGluc2VydE1hcmtlciA9IGZ1bmN0aW9uIGluc2VydE1hcmtlcihpZCkge1xuICAgIHZhciBwcmV2ID0gbWFya2Vyc1tpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHByZXY7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtlcnNbaWRdID0gWycnXTtcbiAgfTtcblxuICB2YXIgaW5zZXJ0UnVsZXMgPSBmdW5jdGlvbiBpbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgbWFya2VyID0gaW5zZXJ0TWFya2VyKGlkKTtcbiAgICBtYXJrZXJbMF0gKz0gY3NzUnVsZXMuam9pbignICcpO1xuICAgIGFkZE5hbWVGb3JJZChuYW1lcywgaWQsIG5hbWUpO1xuICB9O1xuXG4gIHZhciByZW1vdmVSdWxlcyA9IGZ1bmN0aW9uIHJlbW92ZVJ1bGVzKGlkKSB7XG4gICAgdmFyIG1hcmtlciA9IG1hcmtlcnNbaWRdO1xuICAgIGlmIChtYXJrZXIgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIG1hcmtlclswXSA9ICcnO1xuICAgIHJlc2V0SWROYW1lcyhuYW1lcywgaWQpO1xuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICB2YXIgY3NzRm9ySWQgPSBtYXJrZXJzW2lkXVswXTtcbiAgICAgIGlmIChjc3NGb3JJZCkge1xuICAgICAgICBzdHIgKz0gbWFrZVRleHRNYXJrZXIoaWQpICsgY3NzRm9ySWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgdmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIG5hbWVzQ2xvbmUgPSBjbG9uZU5hbWVzKG5hbWVzKTtcbiAgICB2YXIgbWFya2Vyc0Nsb25lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKHZhciBpZCBpbiBtYXJrZXJzKSB7XG4gICAgICBtYXJrZXJzQ2xvbmVbaWRdID0gW21hcmtlcnNbaWRdWzBdXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZVNlcnZlclRhZyhuYW1lc0Nsb25lLCBtYXJrZXJzQ2xvbmUpO1xuICB9O1xuXG4gIHZhciB0YWcgPSB7XG4gICAgY2xvbmU6IGNsb25lLFxuICAgIGNzczogY3NzLFxuICAgIGdldElkczogZ2V0SWRzRnJvbU1hcmtlcnNGYWN0b3J5KG1hcmtlcnMpLFxuICAgIGhhc05hbWVGb3JJZDogaGFzTmFtZUZvcklkKG5hbWVzKSxcbiAgICBpbnNlcnRNYXJrZXI6IGluc2VydE1hcmtlcixcbiAgICBpbnNlcnRSdWxlczogaW5zZXJ0UnVsZXMsXG4gICAgcmVtb3ZlUnVsZXM6IHJlbW92ZVJ1bGVzLFxuICAgIHNlYWxlZDogZmFsc2UsXG4gICAgc3R5bGVUYWc6IG51bGwsXG4gICAgdG9FbGVtZW50OiB3cmFwQXNFbGVtZW50KGNzcywgbmFtZXMpLFxuICAgIHRvSFRNTDogd3JhcEFzSHRtbFRhZyhjc3MsIG5hbWVzKVxuICB9O1xuXG4gIHJldHVybiB0YWc7XG59O1xuXG52YXIgbWFrZVRhZyA9IGZ1bmN0aW9uIG1ha2VUYWcodGFyZ2V0LCB0YWdFbCwgZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgZ2V0SW1wb3J0UnVsZVRhZykge1xuICBpZiAoSVNfQlJPV1NFUiAmJiAhZm9yY2VTZXJ2ZXIpIHtcbiAgICB2YXIgZWwgPSBtYWtlU3R5bGVUYWcodGFyZ2V0LCB0YWdFbCwgaW5zZXJ0QmVmb3JlKTtcblxuICAgIGlmIChESVNBQkxFX1NQRUVEWSkge1xuICAgICAgcmV0dXJuIG1ha2VCcm93c2VyVGFnKGVsLCBnZXRJbXBvcnRSdWxlVGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1ha2VTcGVlZHlUYWcoZWwsIGdldEltcG9ydFJ1bGVUYWcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYWtlU2VydmVyVGFnKCk7XG59O1xuXG52YXIgcmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlKHRhZywgZWxzLCBleHRyYWN0ZWQpIHtcbiAgLyogYWRkIGFsbCBleHRyYWN0ZWQgY29tcG9uZW50cyB0byB0aGUgbmV3IHRhZyAqL1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXh0cmFjdGVkLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgdmFyIF9leHRyYWN0ZWQkaSA9IGV4dHJhY3RlZFtpXSxcbiAgICAgICAgY29tcG9uZW50SWQgPSBfZXh0cmFjdGVkJGkuY29tcG9uZW50SWQsXG4gICAgICAgIGNzc0Zyb21ET00gPSBfZXh0cmFjdGVkJGkuY3NzRnJvbURPTTtcblxuICAgIHZhciBjc3NSdWxlcyA9IHNwbGl0QnlSdWxlcyhjc3NGcm9tRE9NKTtcbiAgICB0YWcuaW5zZXJ0UnVsZXMoY29tcG9uZW50SWQsIGNzc1J1bGVzKTtcbiAgfVxuXG4gIC8qIHJlbW92ZSBvbGQgSFRNTFN0eWxlRWxlbWVudHMsIHNpbmNlIHRoZXkgaGF2ZSBiZWVuIHJlaHlkcmF0ZWQgKi9cbiAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gZWxzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSArPSAxKSB7XG4gICAgdmFyIGVsID0gZWxzW19pXTtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSkge1xuICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICB9XG59O1xuXG4vLyBcblxudmFyIFNQTElUX1JFR0VYID0gL1xccysvO1xuXG4vKiBkZXRlcm1pbmUgdGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBvbmVudHMgYmVmb3JlIHRhZ3MgYXJlIHNoYXJkZWQgKi9cbnZhciBNQVhfU0laRSA9IHZvaWQgMDtcbmlmIChJU19CUk9XU0VSKSB7XG4gIC8qIGluIHNwZWVkeSBtb2RlIHdlIGNhbiBrZWVwIGEgbG90IG1vcmUgcnVsZXMgaW4gYSBzaGVldCBiZWZvcmUgYSBzbG93ZG93biBjYW4gYmUgZXhwZWN0ZWQgKi9cbiAgTUFYX1NJWkUgPSBESVNBQkxFX1NQRUVEWSA/IDQwIDogMTAwMDtcbn0gZWxzZSB7XG4gIC8qIGZvciBzZXJ2ZXJzIHdlIGRvIG5vdCBuZWVkIHRvIHNoYXJkIGF0IGFsbCAqL1xuICBNQVhfU0laRSA9IC0xO1xufVxuXG52YXIgc2hlZXRSdW5uaW5nSWQgPSAwO1xudmFyIG1hc3RlciA9IHZvaWQgMDtcblxudmFyIFN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyogYSBtYXAgZnJvbSBpZHMgdG8gdGFncyAqL1xuXG4gIC8qIGRlZmVycmVkIHJ1bGVzIGZvciBhIGdpdmVuIGlkICovXG5cbiAgLyogdGhpcyBpcyB1c2VkIGZvciBub3QgcmVpbmplY3RpbmcgcnVsZXMgdmlhIGhhc05hbWVGb3JJZCgpICovXG5cbiAgLyogd2hlbiBydWxlcyBmb3IgYW4gaWQgYXJlIHJlbW92ZWQgdXNpbmcgcmVtb3ZlKCkgd2UgaGF2ZSB0byBpZ25vcmUgcmVoeWRyYXRlZE5hbWVzIGZvciBpdCAqL1xuXG4gIC8qIGEgbGlzdCBvZiB0YWdzIGJlbG9uZ2luZyB0byB0aGlzIFN0eWxlU2hlZXQgKi9cblxuICAvKiBhIHRhZyBmb3IgaW1wb3J0IHJ1bGVzICovXG5cbiAgLyogY3VycmVudCBjYXBhY2l0eSB1bnRpbCBhIG5ldyB0YWcgbXVzdCBiZSBjcmVhdGVkICovXG5cbiAgLyogY2hpbGRyZW4gKGFrYSBjbG9uZXMpIG9mIHRoaXMgU3R5bGVTaGVldCBpbmhlcml0aW5nIGFsbCBhbmQgZnV0dXJlIGluamVjdGlvbnMgKi9cblxuICBmdW5jdGlvbiBTdHlsZVNoZWV0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBJU19CUk9XU0VSID8gZG9jdW1lbnQuaGVhZCA6IG51bGw7XG4gICAgdmFyIGZvcmNlU2VydmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVNoZWV0KTtcblxuICAgIHRoaXMuZ2V0SW1wb3J0UnVsZVRhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbXBvcnRSdWxlVGFnID0gX3RoaXMuaW1wb3J0UnVsZVRhZztcblxuICAgICAgaWYgKGltcG9ydFJ1bGVUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaW1wb3J0UnVsZVRhZztcbiAgICAgIH1cblxuICAgICAgdmFyIGZpcnN0VGFnID0gX3RoaXMudGFnc1swXTtcbiAgICAgIHZhciBpbnNlcnRCZWZvcmUgPSB0cnVlO1xuXG4gICAgICByZXR1cm4gX3RoaXMuaW1wb3J0UnVsZVRhZyA9IG1ha2VUYWcoX3RoaXMudGFyZ2V0LCBmaXJzdFRhZyA/IGZpcnN0VGFnLnN0eWxlVGFnIDogbnVsbCwgX3RoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSk7XG4gICAgfTtcblxuICAgIHNoZWV0UnVubmluZ0lkICs9IDE7XG4gICAgdGhpcy5pZCA9IHNoZWV0UnVubmluZ0lkO1xuICAgIHRoaXMuZm9yY2VTZXJ2ZXIgPSBmb3JjZVNlcnZlcjtcbiAgICB0aGlzLnRhcmdldCA9IGZvcmNlU2VydmVyID8gbnVsbCA6IHRhcmdldDtcbiAgICB0aGlzLnRhZ01hcCA9IHt9O1xuICAgIHRoaXMuZGVmZXJyZWQgPSB7fTtcbiAgICB0aGlzLnJlaHlkcmF0ZWROYW1lcyA9IHt9O1xuICAgIHRoaXMuaWdub3JlUmVoeWRyYXRlZE5hbWVzID0ge307XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG4gICAgdGhpcy5jbG9uZXMgPSBbXTtcbiAgfVxuXG4gIC8qIHJlaHlkcmF0ZSBhbGwgU1NSJ2Qgc3R5bGUgdGFncyAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUucmVoeWRyYXRlID0gZnVuY3Rpb24gcmVoeWRyYXRlJCQxKCkge1xuICAgIGlmICghSVNfQlJPV1NFUiB8fCB0aGlzLmZvcmNlU2VydmVyKSByZXR1cm4gdGhpcztcblxuICAgIHZhciBlbHMgPSBbXTtcbiAgICB2YXIgZXh0cmFjdGVkID0gW107XG4gICAgdmFyIGlzU3RyZWFtZWQgPSBmYWxzZTtcblxuICAgIC8qIHJldHJpZXZlIGFsbCBvZiBvdXIgU1NSIHN0eWxlIGVsZW1lbnRzIGZyb20gdGhlIERPTSAqL1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlWycgKyBTQ19BVFRSICsgJ11bJyArIFNDX1ZFUlNJT05fQVRUUiArICc9XCInICsgXCI0LjEuMVwiICsgJ1wiXScpO1xuXG4gICAgdmFyIG5vZGVzU2l6ZSA9IG5vZGVzLmxlbmd0aDtcblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vIHByZXZpb3VzIHN0eWxlIHRhZ3Mgd2VyZSBmb3VuZCAqL1xuICAgIGlmICghbm9kZXNTaXplKSByZXR1cm4gdGhpcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXNTaXplOyBpICs9IDEpIHtcbiAgICAgIHZhciBlbCA9IG5vZGVzW2ldO1xuXG4gICAgICAvKiBjaGVjayBpZiBzdHlsZSB0YWcgaXMgYSBzdHJlYW1lZCB0YWcgKi9cbiAgICAgIGlmICghaXNTdHJlYW1lZCkgaXNTdHJlYW1lZCA9ICEhZWwuZ2V0QXR0cmlidXRlKFNDX1NUUkVBTV9BVFRSKTtcblxuICAgICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBuYW1lcyAqL1xuICAgICAgdmFyIGVsTmFtZXMgPSAoZWwuZ2V0QXR0cmlidXRlKFNDX0FUVFIpIHx8ICcnKS50cmltKCkuc3BsaXQoU1BMSVRfUkVHRVgpO1xuICAgICAgdmFyIGVsTmFtZXNTaXplID0gZWxOYW1lcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbmFtZTsgaiA8IGVsTmFtZXNTaXplOyBqICs9IDEpIHtcbiAgICAgICAgbmFtZSA9IGVsTmFtZXNbal07XG4gICAgICAgIC8qIGFkZCByZWh5ZHJhdGVkIG5hbWUgdG8gc2hlZXQgdG8gYXZvaWQgcmUtYWRkaW5nIHN0eWxlcyAqL1xuICAgICAgICB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8qIGV4dHJhY3QgYWxsIGNvbXBvbmVudHMgYW5kIHRoZWlyIENTUyAqL1xuICAgICAgZXh0cmFjdGVkLnB1c2guYXBwbHkoZXh0cmFjdGVkLCBleHRyYWN0Q29tcHMoZWwudGV4dENvbnRlbnQpKTtcblxuICAgICAgLyogc3RvcmUgb3JpZ2luYWwgSFRNTFN0eWxlRWxlbWVudCAqL1xuICAgICAgZWxzLnB1c2goZWwpO1xuICAgIH1cblxuICAgIC8qIGFib3J0IHJlaHlkcmF0aW9uIGlmIG5vdGhpbmcgd2FzIGV4dHJhY3RlZCAqL1xuICAgIHZhciBleHRyYWN0ZWRTaXplID0gZXh0cmFjdGVkLmxlbmd0aDtcbiAgICBpZiAoIWV4dHJhY3RlZFNpemUpIHJldHVybiB0aGlzO1xuXG4gICAgLyogY3JlYXRlIGEgdGFnIHRvIGJlIHVzZWQgZm9yIHJlaHlkcmF0aW9uICovXG4gICAgdmFyIHRhZyA9IHRoaXMubWFrZVRhZyhudWxsKTtcblxuICAgIHJlaHlkcmF0ZSh0YWcsIGVscywgZXh0cmFjdGVkKTtcblxuICAgIC8qIHJlc2V0IGNhcGFjaXR5IGFuZCBhZGp1c3QgTUFYX1NJWkUgYnkgdGhlIGluaXRpYWwgc2l6ZSBvZiB0aGUgcmVoeWRyYXRpb24gKi9cbiAgICB0aGlzLmNhcGFjaXR5ID0gTWF0aC5tYXgoMSwgTUFYX1NJWkUgLSBleHRyYWN0ZWRTaXplKTtcbiAgICB0aGlzLnRhZ3MucHVzaCh0YWcpO1xuXG4gICAgLyogcmV0cmlldmUgYWxsIGNvbXBvbmVudCBpZHMgKi9cbiAgICBmb3IgKHZhciBfaiA9IDA7IF9qIDwgZXh0cmFjdGVkU2l6ZTsgX2ogKz0gMSkge1xuICAgICAgdGhpcy50YWdNYXBbZXh0cmFjdGVkW19qXS5jb21wb25lbnRJZF0gPSB0YWc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyogcmV0cmlldmUgYSBcIm1hc3RlclwiIGluc3RhbmNlIG9mIFN0eWxlU2hlZXQgd2hpY2ggaXMgdHlwaWNhbGx5IHVzZWQgd2hlbiBubyBvdGhlciBpcyBhdmFpbGFibGVcbiAgICogVGhlIG1hc3RlciBTdHlsZVNoZWV0IGlzIHRhcmdldGVkIGJ5IGNyZWF0ZUdsb2JhbFN0eWxlLCBrZXlmcmFtZXMsIGFuZCBjb21wb25lbnRzIG91dHNpZGUgb2YgYW55XG4gICAgKiBTdHlsZVNoZWV0TWFuYWdlcidzIGNvbnRleHQgKi9cblxuXG4gIC8qIHJlc2V0IHRoZSBpbnRlcm5hbCBcIm1hc3RlclwiIGluc3RhbmNlICovXG4gIFN0eWxlU2hlZXQucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB2YXIgZm9yY2VTZXJ2ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgbWFzdGVyID0gbmV3IFN0eWxlU2hlZXQodW5kZWZpbmVkLCBmb3JjZVNlcnZlcikucmVoeWRyYXRlKCk7XG4gIH07XG5cbiAgLyogYWRkcyBcImNoaWxkcmVuXCIgdG8gdGhlIFN0eWxlU2hlZXQgdGhhdCBpbmhlcml0IGFsbCBvZiB0aGUgcGFyZW50cycgcnVsZXNcbiAgICogd2hpbGUgdGhlaXIgb3duIHJ1bGVzIGRvIG5vdCBhZmZlY3QgdGhlIHBhcmVudCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgc2hlZXQgPSBuZXcgU3R5bGVTaGVldCh0aGlzLnRhcmdldCwgdGhpcy5mb3JjZVNlcnZlcik7XG5cbiAgICAvKiBhZGQgdG8gY2xvbmUgYXJyYXkgKi9cbiAgICB0aGlzLmNsb25lcy5wdXNoKHNoZWV0KTtcblxuICAgIC8qIGNsb25lIGFsbCB0YWdzICovXG4gICAgc2hlZXQudGFncyA9IHRoaXMudGFncy5tYXAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgdmFyIGlkcyA9IHRhZy5nZXRJZHMoKTtcbiAgICAgIHZhciBuZXdUYWcgPSB0YWcuY2xvbmUoKTtcblxuICAgICAgLyogcmVjb25zdHJ1Y3QgdGFnTWFwICovXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzaGVldC50YWdNYXBbaWRzW2ldXSA9IG5ld1RhZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1RhZztcbiAgICB9KTtcblxuICAgIC8qIGNsb25lIG90aGVyIG1hcHMgKi9cbiAgICBzaGVldC5yZWh5ZHJhdGVkTmFtZXMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5yZWh5ZHJhdGVkTmFtZXMpO1xuICAgIHNoZWV0LmRlZmVycmVkID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmZXJyZWQpO1xuXG4gICAgcmV0dXJuIHNoZWV0O1xuICB9O1xuXG4gIC8qIGZvcmNlIFN0eWxlU2hlZXQgdG8gY3JlYXRlIGEgbmV3IHRhZyBvbiB0aGUgbmV4dCBpbmplY3Rpb24gKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnNlYWxBbGxUYWdzID0gZnVuY3Rpb24gc2VhbEFsbFRhZ3MoKSB7XG4gICAgdGhpcy5jYXBhY2l0eSA9IDE7XG5cbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIHRhZy5zZWFsZWQgPSB0cnVlO1xuICAgIH0pO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLm1ha2VUYWcgPSBmdW5jdGlvbiBtYWtlVGFnJCQxKHRhZykge1xuICAgIHZhciBsYXN0RWwgPSB0YWcgPyB0YWcuc3R5bGVUYWcgOiBudWxsO1xuICAgIHZhciBpbnNlcnRCZWZvcmUgPSBmYWxzZTtcblxuICAgIHJldHVybiBtYWtlVGFnKHRoaXMudGFyZ2V0LCBsYXN0RWwsIHRoaXMuZm9yY2VTZXJ2ZXIsIGluc2VydEJlZm9yZSwgdGhpcy5nZXRJbXBvcnRSdWxlVGFnKTtcbiAgfTtcblxuICAvKiBnZXQgYSB0YWcgZm9yIGEgZ2l2ZW4gY29tcG9uZW50SWQsIGFzc2lnbiB0aGUgY29tcG9uZW50SWQgdG8gb25lLCBvciBzaGFyZCAqL1xuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRUYWdGb3JJZCA9IGZ1bmN0aW9uIGdldFRhZ0ZvcklkKGlkKSB7XG4gICAgLyogc2ltcGx5IHJldHVybiBhIHRhZywgd2hlbiB0aGUgY29tcG9uZW50SWQgd2FzIGFscmVhZHkgYXNzaWduZWQgb25lICovXG4gICAgdmFyIHByZXYgPSB0aGlzLnRhZ01hcFtpZF07XG4gICAgaWYgKHByZXYgIT09IHVuZGVmaW5lZCAmJiAhcHJldi5zZWFsZWQpIHtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgLyogc2hhcmQgKGNyZWF0ZSBhIG5ldyB0YWcpIGlmIHRoZSB0YWcgaXMgZXhoYXVzdGVkIChTZWUgTUFYX1NJWkUpICovXG4gICAgdGhpcy5jYXBhY2l0eSAtPSAxO1xuXG4gICAgaWYgKHRoaXMuY2FwYWNpdHkgPT09IDApIHtcbiAgICAgIHRoaXMuY2FwYWNpdHkgPSBNQVhfU0laRTtcbiAgICAgIHRhZyA9IHRoaXMubWFrZVRhZyh0YWcpO1xuICAgICAgdGhpcy50YWdzLnB1c2godGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50YWdNYXBbaWRdID0gdGFnO1xuICB9O1xuXG4gIC8qIG1haW5seSBmb3IgY3JlYXRlR2xvYmFsU3R5bGUgdG8gY2hlY2sgZm9yIGl0cyBpZCAqL1xuXG5cbiAgU3R5bGVTaGVldC5wcm90b3R5cGUuaGFzSWQgPSBmdW5jdGlvbiBoYXNJZChpZCkge1xuICAgIHJldHVybiB0aGlzLnRhZ01hcFtpZF0gIT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICAvKiBjYWNoaW5nIGxheWVyIGNoZWNraW5nIGlkK25hbWUgdG8gYWxyZWFkeSBoYXZlIGEgY29ycmVzcG9uZGluZyB0YWcgYW5kIGluamVjdGVkIHJ1bGVzICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5oYXNOYW1lRm9ySWQgPSBmdW5jdGlvbiBoYXNOYW1lRm9ySWQoaWQsIG5hbWUpIHtcbiAgICAvKiBleGNlcHRpb24gZm9yIHJlaHlkcmF0ZWQgbmFtZXMgd2hpY2ggYXJlIGNoZWNrZWQgc2VwYXJhdGVseSAqL1xuICAgIGlmICh0aGlzLmlnbm9yZVJlaHlkcmF0ZWROYW1lc1tpZF0gPT09IHVuZGVmaW5lZCAmJiB0aGlzLnJlaHlkcmF0ZWROYW1lc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMudGFnTWFwW2lkXTtcbiAgICByZXR1cm4gdGFnICE9PSB1bmRlZmluZWQgJiYgdGFnLmhhc05hbWVGb3JJZChpZCwgbmFtZSk7XG4gIH07XG5cbiAgLyogcmVnaXN0ZXJzIGEgY29tcG9uZW50SWQgYW5kIHJlZ2lzdGVycyBpdCBvbiBpdHMgdGFnICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5kZWZlcnJlZEluamVjdCA9IGZ1bmN0aW9uIGRlZmVycmVkSW5qZWN0KGlkLCBjc3NSdWxlcykge1xuICAgIC8qIGRvbid0IGluamVjdCB3aGVuIHRoZSBpZCBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgKi9cbiAgICBpZiAodGhpcy50YWdNYXBbaWRdICE9PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIHZhciBjbG9uZXMgPSB0aGlzLmNsb25lcztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uZGVmZXJyZWRJbmplY3QoaWQsIGNzc1J1bGVzKTtcbiAgICB9XG5cbiAgICB0aGlzLmdldFRhZ0ZvcklkKGlkKS5pbnNlcnRNYXJrZXIoaWQpO1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gY3NzUnVsZXM7XG4gIH07XG5cbiAgLyogaW5qZWN0cyBydWxlcyBmb3IgYSBnaXZlbiBpZCB3aXRoIGEgbmFtZSB0aGF0IHdpbGwgbmVlZCB0byBiZSBjYWNoZWQgKi9cblxuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLmluamVjdCA9IGZ1bmN0aW9uIGluamVjdChpZCwgY3NzUnVsZXMsIG5hbWUpIHtcbiAgICB2YXIgY2xvbmVzID0gdGhpcy5jbG9uZXM7XG5cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjbG9uZXNbaV0uaW5qZWN0KGlkLCBjc3NSdWxlcywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHRhZyA9IHRoaXMuZ2V0VGFnRm9ySWQoaWQpO1xuXG4gICAgLyogYWRkIGRlZmVycmVkIHJ1bGVzIGZvciBjb21wb25lbnQgKi9cbiAgICBpZiAodGhpcy5kZWZlcnJlZFtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ29tYmluZSBwYXNzZWQgY3NzUnVsZXMgd2l0aCBwcmV2aW91c2x5IGRlZmVycmVkIENTUyBydWxlc1xuICAgICAgLy8gTk9URTogV2UgY2Fubm90IG11dGF0ZSB0aGUgZGVmZXJyZWQgYXJyYXkgaXRzZWxmIGFzIGFsbCBjbG9uZXNcbiAgICAgIC8vIGRvIHRoZSBzYW1lIChzZWUgY2xvbmVzW2ldLmluamVjdClcbiAgICAgIHZhciBydWxlcyA9IHRoaXMuZGVmZXJyZWRbaWRdLmNvbmNhdChjc3NSdWxlcyk7XG4gICAgICB0YWcuaW5zZXJ0UnVsZXMoaWQsIHJ1bGVzLCBuYW1lKTtcblxuICAgICAgdGhpcy5kZWZlcnJlZFtpZF0gPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhZy5pbnNlcnRSdWxlcyhpZCwgY3NzUnVsZXMsIG5hbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKiByZW1vdmVzIGFsbCBydWxlcyBmb3IgYSBnaXZlbiBpZCwgd2hpY2ggZG9lc24ndCByZW1vdmUgaXRzIG1hcmtlciBidXQgcmVzZXRzIGl0ICovXG5cblxuICBTdHlsZVNoZWV0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoaWQpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWdNYXBbaWRdO1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgdmFyIGNsb25lcyA9IHRoaXMuY2xvbmVzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNsb25lc1tpXS5yZW1vdmUoaWQpO1xuICAgIH1cblxuICAgIC8qIHJlbW92ZSBhbGwgcnVsZXMgZnJvbSB0aGUgdGFnICovXG4gICAgdGFnLnJlbW92ZVJ1bGVzKGlkKTtcblxuICAgIC8qIGlnbm9yZSBwb3NzaWJsZSByZWh5ZHJhdGVkIG5hbWVzICovXG4gICAgdGhpcy5pZ25vcmVSZWh5ZHJhdGVkTmFtZXNbaWRdID0gdHJ1ZTtcblxuICAgIC8qIGRlbGV0ZSBwb3NzaWJsZSBkZWZlcnJlZCBydWxlcyAqL1xuICAgIHRoaXMuZGVmZXJyZWRbaWRdID0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvSFRNTCA9IGZ1bmN0aW9uIHRvSFRNTCgpIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnRvSFRNTCgpO1xuICAgIH0pLmpvaW4oJycpO1xuICB9O1xuXG4gIFN0eWxlU2hlZXQucHJvdG90eXBlLnRvUmVhY3RFbGVtZW50cyA9IGZ1bmN0aW9uIHRvUmVhY3RFbGVtZW50cygpIHtcbiAgICB2YXIgaWQgPSB0aGlzLmlkO1xuXG5cbiAgICByZXR1cm4gdGhpcy50YWdzLm1hcChmdW5jdGlvbiAodGFnLCBpKSB7XG4gICAgICB2YXIga2V5ID0gJ3NjLScgKyBpZCArICctJyArIGk7XG4gICAgICByZXR1cm4gY2xvbmVFbGVtZW50KHRhZy50b0VsZW1lbnQoKSwgeyBrZXk6IGtleSB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBjcmVhdGVDbGFzcyhTdHlsZVNoZWV0LCBudWxsLCBbe1xuICAgIGtleTogJ21hc3RlcicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gbWFzdGVyIHx8IChtYXN0ZXIgPSBuZXcgU3R5bGVTaGVldCgpLnJlaHlkcmF0ZSgpKTtcbiAgICB9XG5cbiAgICAvKiBOT1RFOiBUaGlzIGlzIGp1c3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggamVzdC1zdHlsZWQtY29tcG9uZW50cyAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkJDEoKSB7XG4gICAgICByZXR1cm4gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG4vLyBcblxudmFyIEtleWZyYW1lcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5ZnJhbWVzKG5hbWUsIHJ1bGVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEtleWZyYW1lcyk7XG5cbiAgICB0aGlzLmluamVjdCA9IGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICBpZiAoIXN0eWxlU2hlZXQuaGFzTmFtZUZvcklkKF90aGlzLmlkLCBfdGhpcy5uYW1lKSkge1xuICAgICAgICBzdHlsZVNoZWV0LmluamVjdChfdGhpcy5pZCwgX3RoaXMucnVsZXMsIF90aGlzLm5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigxMiwgU3RyaW5nKF90aGlzLm5hbWUpKTtcbiAgICB9O1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG5cbiAgICB0aGlzLmlkID0gJ3NjLWtleWZyYW1lcy0nICsgbmFtZTtcbiAgfVxuXG4gIEtleWZyYW1lcy5wcm90b3R5cGUuZ2V0TmFtZSA9IGZ1bmN0aW9uIGdldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVzO1xufSgpO1xuXG4vLyBcblxuLyoqXG4gKiBpbmxpbmVkIHZlcnNpb24gb2ZcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvaHlwaGVuYXRlU3R5bGVOYW1lLmpzXG4gKi9cblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcblxuLyoqXG4gKiBIeXBoZW5hdGVzIGEgY2FtZWxjYXNlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnTW96VHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbW96LXRyYW5zaXRpb25cIlxuICogICA+IGh5cGhlbmF0ZVN0eWxlTmFtZSgnbXNUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tcy10cmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBNb2Rlcm5penIgc3VnZ2VzdHMgKGh0dHA6Ly9tb2Rlcm5penIuY29tL2RvY3MvI3ByZWZpeGVkKSwgYW4gYG1zYCBwcmVmaXhcbiAqIGlzIGNvbnZlcnRlZCB0byBgLW1zLWAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZSh1cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxuLy8gXG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYjg3YWFiZGZlMWI3NDYxZTczMzFhYmIzNjAxZDllNmJiMjc1NDRiYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzXG5mdW5jdGlvbiBhZGRVbml0SWZOZWVkZWQobmFtZSwgdmFsdWUpIHtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtaWxhamFjay9lc2xpbnQtcGx1Z2luLWZsb3d0eXBlLWVycm9ycy9pc3N1ZXMvMTMzXG4gIC8vICRGbG93Rml4TWVcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShuYW1lIGluIHVuaXRsZXNzKSkge1xuICAgIHJldHVybiB2YWx1ZSArICdweCc7IC8vIFByZXN1bWVzIGltcGxpY2l0ICdweCcgc3VmZml4IGZvciB1bml0bGVzcyBudW1iZXJzXG4gIH1cblxuICByZXR1cm4gU3RyaW5nKHZhbHVlKS50cmltKCk7XG59XG5cbi8vIFxuXG4vKipcbiAqIEl0J3MgZmFsc2lzaCBub3QgZmFsc3kgYmVjYXVzZSAwIGlzIGFsbG93ZWQuXG4gKi9cbnZhciBpc0ZhbHNpc2ggPSBmdW5jdGlvbiBpc0ZhbHNpc2goY2h1bmspIHtcbiAgcmV0dXJuIGNodW5rID09PSB1bmRlZmluZWQgfHwgY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IGZhbHNlIHx8IGNodW5rID09PSAnJztcbn07XG5cbnZhciBvYmpUb0NzcyA9IGZ1bmN0aW9uIG9ialRvQ3NzKG9iaiwgcHJldktleSkge1xuICB2YXIgY3NzID0gT2JqZWN0LmtleXMob2JqKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhaXNGYWxzaXNoKG9ialtrZXldKTtcbiAgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChvYmpba2V5XSkpIHJldHVybiBvYmpUb0NzcyhvYmpba2V5XSwga2V5KTtcbiAgICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKGtleSkgKyAnOiAnICsgYWRkVW5pdElmTmVlZGVkKGtleSwgb2JqW2tleV0pICsgJzsnO1xuICB9KS5qb2luKCcgJyk7XG4gIHJldHVybiBwcmV2S2V5ID8gcHJldktleSArICcge1xcbiAgJyArIGNzcyArICdcXG59JyA6IGNzcztcbn07XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oY2h1bmssIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2h1bmspKSB7XG4gICAgdmFyIHJ1bGVTZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaHVuay5sZW5ndGgsIHJlc3VsdDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICByZXN1bHQgPSBmbGF0dGVuKGNodW5rW2ldLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgY29udGludWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSBydWxlU2V0LnB1c2guYXBwbHkocnVsZVNldCwgcmVzdWx0KTtlbHNlIHJ1bGVTZXQucHVzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIHJldHVybiBydWxlU2V0O1xuICB9XG5cbiAgaWYgKGlzRmFsc2lzaChjaHVuaykpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIEhhbmRsZSBvdGhlciBjb21wb25lbnRzICovXG4gIGlmIChpc1N0eWxlZENvbXBvbmVudChjaHVuaykpIHtcbiAgICByZXR1cm4gJy4nICsgY2h1bmsuc3R5bGVkQ29tcG9uZW50SWQ7XG4gIH1cblxuICAvKiBFaXRoZXIgZXhlY3V0ZSBvciBkZWZlciB0aGUgZnVuY3Rpb24gKi9cbiAgaWYgKGlzRnVuY3Rpb24oY2h1bmspKSB7XG4gICAgaWYgKGV4ZWN1dGlvbkNvbnRleHQpIHtcbiAgICAgIHZhciBzaG91bGRUaHJvdyA9IGZhbHNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgICBpZiAoaXNFbGVtZW50KG5ldyBjaHVuayhleGVjdXRpb25Db250ZXh0KSkpIHtcbiAgICAgICAgICBzaG91bGRUaHJvdyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogKi9cbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMTMsIGdldENvbXBvbmVudE5hbWUoY2h1bmspKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZsYXR0ZW4oY2h1bmsoZXhlY3V0aW9uQ29udGV4dCksIGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpO1xuICAgIH0gZWxzZSByZXR1cm4gY2h1bms7XG4gIH1cblxuICBpZiAoY2h1bmsgaW5zdGFuY2VvZiBLZXlmcmFtZXMpIHtcbiAgICBpZiAoc3R5bGVTaGVldCkge1xuICAgICAgY2h1bmsuaW5qZWN0KHN0eWxlU2hlZXQpO1xuICAgICAgcmV0dXJuIGNodW5rLmdldE5hbWUoKTtcbiAgICB9IGVsc2UgcmV0dXJuIGNodW5rO1xuICB9XG5cbiAgLyogSGFuZGxlIG9iamVjdHMgKi9cbiAgcmV0dXJuIGlzUGxhaW5PYmplY3QoY2h1bmspID8gb2JqVG9Dc3MoY2h1bmspIDogY2h1bmsudG9TdHJpbmcoKTtcbn1cblxuLy8gXG5cbmZ1bmN0aW9uIGNzcyhzdHlsZXMpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGludGVycG9sYXRpb25zID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChpc0Z1bmN0aW9uKHN0eWxlcykgfHwgaXNQbGFpbk9iamVjdChzdHlsZXMpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBmbGF0dGVuKGludGVybGVhdmUoRU1QVFlfQVJSQVksIFtzdHlsZXNdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpKTtcbiAgfVxuXG4gIC8vICRGbG93Rml4TWVcbiAgcmV0dXJuIGZsYXR0ZW4oaW50ZXJsZWF2ZShzdHlsZXMsIGludGVycG9sYXRpb25zKSk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RXaXRoT3B0aW9ucyhjb21wb25lbnRDb25zdHJ1Y3RvciwgdGFnKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBFTVBUWV9PQkpFQ1Q7XG5cbiAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodGFnKSkge1xuICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMSwgU3RyaW5nKHRhZykpO1xuICB9XG5cbiAgLyogVGhpcyBpcyBjYWxsYWJsZSBkaXJlY3RseSBhcyBhIHRlbXBsYXRlIGZ1bmN0aW9uICovXG4gIC8vICRGbG93Rml4TWU6IE5vdCB0eXBlZCB0byBhdm9pZCBkZXN0cnVjdHVyaW5nIGFyZ3VtZW50c1xuICB2YXIgdGVtcGxhdGVGdW5jdGlvbiA9IGZ1bmN0aW9uIHRlbXBsYXRlRnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudENvbnN0cnVjdG9yKHRhZywgb3B0aW9ucywgY3NzLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgLyogSWYgY29uZmlnIG1ldGhvZHMgYXJlIGNhbGxlZCwgd3JhcCB1cCBhIG5ldyB0ZW1wbGF0ZSBmdW5jdGlvbiBhbmQgbWVyZ2Ugb3B0aW9ucyAqL1xuICB0ZW1wbGF0ZUZ1bmN0aW9uLndpdGhDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdFdpdGhPcHRpb25zKGNvbXBvbmVudENvbnN0cnVjdG9yLCB0YWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBjb25maWcpKTtcbiAgfTtcblxuICAvKiBNb2RpZnkvaW5qZWN0IG5ldyBwcm9wcyBhdCBydW50aW1lICovXG4gIHRlbXBsYXRlRnVuY3Rpb24uYXR0cnMgPSBmdW5jdGlvbiAoYXR0cnMpIHtcbiAgICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY29tcG9uZW50Q29uc3RydWN0b3IsIHRhZywgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGF0dHJzOiBBcnJheS5wcm90b3R5cGUuY29uY2F0KG9wdGlvbnMuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbilcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIHRlbXBsYXRlRnVuY3Rpb247XG59XG5cbi8vIFxuLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanMvYmxvYi9tYXN0ZXIvbXVybXVyaGFzaDJfZ2MuanNcbmZ1bmN0aW9uIG11cm11cmhhc2goYykge1xuICBmb3IgKHZhciBlID0gYy5sZW5ndGggfCAwLCBhID0gZSB8IDAsIGQgPSAwLCBiOyBlID49IDQ7KSB7XG4gICAgYiA9IGMuY2hhckNvZGVBdChkKSAmIDI1NSB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgOCB8IChjLmNoYXJDb2RlQXQoKytkKSAmIDI1NSkgPDwgMTYgfCAoYy5jaGFyQ29kZUF0KCsrZCkgJiAyNTUpIDw8IDI0LCBiID0gMTU0MDQ4MzQ3NyAqIChiICYgNjU1MzUpICsgKCgxNTQwNDgzNDc3ICogKGIgPj4+IDE2KSAmIDY1NTM1KSA8PCAxNiksIGIgXj0gYiA+Pj4gMjQsIGIgPSAxNTQwNDgzNDc3ICogKGIgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYiA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpIF4gYiwgZSAtPSA0LCArK2Q7XG4gIH1cbiAgc3dpdGNoIChlKSB7XG4gICAgY2FzZSAzOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAyKSAmIDI1NSkgPDwgMTY7XG4gICAgY2FzZSAyOlxuICAgICAgYSBePSAoYy5jaGFyQ29kZUF0KGQgKyAxKSAmIDI1NSkgPDwgODtcbiAgICBjYXNlIDE6XG4gICAgICBhIF49IGMuY2hhckNvZGVBdChkKSAmIDI1NSwgYSA9IDE1NDA0ODM0NzcgKiAoYSAmIDY1NTM1KSArICgoMTU0MDQ4MzQ3NyAqIChhID4+PiAxNikgJiA2NTUzNSkgPDwgMTYpO1xuICB9XG4gIGEgXj0gYSA+Pj4gMTM7XG4gIGEgPSAxNTQwNDgzNDc3ICogKGEgJiA2NTUzNSkgKyAoKDE1NDA0ODM0NzcgKiAoYSA+Pj4gMTYpICYgNjU1MzUpIDw8IDE2KTtcbiAgcmV0dXJuIChhIF4gYSA+Pj4gMTUpID4+PiAwO1xufVxuXG4vLyBcbi8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cblxuLyogVGhpcyBpcyB0aGUgXCJjYXBhY2l0eVwiIG9mIG91ciBhbHBoYWJldCBpLmUuIDJ4MjYgZm9yIGFsbCBsZXR0ZXJzIHBsdXMgdGhlaXIgY2FwaXRhbGlzZWRcbiAqIGNvdW50ZXJwYXJ0cyAqL1xudmFyIGNoYXJzTGVuZ3RoID0gNTI7XG5cbi8qIHN0YXJ0IGF0IDc1IGZvciAnYScgdW50aWwgJ3onICgyNSkgYW5kIHRoZW4gc3RhcnQgYXQgNjUgZm9yIGNhcGl0YWxpc2VkIGxldHRlcnMgKi9cbnZhciBnZXRBbHBoYWJldGljQ2hhciA9IGZ1bmN0aW9uIGdldEFscGhhYmV0aWNDaGFyKGNvZGUpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSArIChjb2RlID4gMjUgPyAzOSA6IDk3KSk7XG59O1xuXG4vKiBpbnB1dCBhIG51bWJlciwgdXN1YWxseSBhIGhhc2ggYW5kIGNvbnZlcnQgaXQgdG8gYmFzZS01MiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShjb2RlKSB7XG4gIHZhciBuYW1lID0gJyc7XG4gIHZhciB4ID0gdm9pZCAwO1xuXG4gIC8qIGdldCBhIGNoYXIgYW5kIGRpdmlkZSBieSBhbHBoYWJldC1sZW5ndGggKi9cbiAgZm9yICh4ID0gY29kZTsgeCA+IGNoYXJzTGVuZ3RoOyB4ID0gTWF0aC5mbG9vcih4IC8gY2hhcnNMZW5ndGgpKSB7XG4gICAgbmFtZSA9IGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xuICB9XG5cbiAgcmV0dXJuIGdldEFscGhhYmV0aWNDaGFyKHggJSBjaGFyc0xlbmd0aCkgKyBuYW1lO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gaGFzRnVuY3Rpb25PYmplY3RLZXkob2JqKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW4sIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaXNGdW5jdGlvbihvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0aWNSdWxlcyhydWxlcywgYXR0cnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBydWxlID0gcnVsZXNbaV07XG5cbiAgICAvLyByZWN1cnNpdmUgY2FzZVxuICAgIGlmIChBcnJheS5pc0FycmF5KHJ1bGUpICYmICFpc1N0YXRpY1J1bGVzKHJ1bGUsIGF0dHJzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihydWxlKSAmJiAhaXNTdHlsZWRDb21wb25lbnQocnVsZSkpIHtcbiAgICAgIC8vIGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCB0byBiZSBzdGF0aWMgaWYgdGhleSdyZSBqdXN0IGJlaW5nXG4gICAgICAvLyB1c2VkIHRvIGdldCB0aGUgY2xhc3NuYW1lIG9mIGEgbmVzdGVkIHN0eWxlZCBjb21wb25lbnRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoYXR0cnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHgpIHx8IGhhc0Z1bmN0aW9uT2JqZWN0S2V5KHgpO1xuICB9KSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vLyBcblxudmFyIGlzSE1SRW5hYmxlZCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmhvdDtcblxuLyogY29tYmluZXMgaGFzaFN0ciAobXVybXVyaGFzaCkgYW5kIG5hbWVHZW5lcmF0b3IgZm9yIGNvbnZlbmllbmNlICovXG52YXIgaGFzaGVyID0gZnVuY3Rpb24gaGFzaGVyKHN0cikge1xuICByZXR1cm4gZ2VuZXJhdGVBbHBoYWJldGljTmFtZShtdXJtdXJoYXNoKHN0cikpO1xufTtcblxuLypcbiBDb21wb25lbnRTdHlsZSBpcyBhbGwgdGhlIENTUy1zcGVjaWZpYyBzdHVmZiwgbm90XG4gdGhlIFJlYWN0LXNwZWNpZmljIHN0dWZmLlxuICovXG5cbnZhciBDb21wb25lbnRTdHlsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29tcG9uZW50U3R5bGUocnVsZXMsIGF0dHJzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmlzU3RhdGljID0gIWlzSE1SRW5hYmxlZCAmJiBpc1N0YXRpY1J1bGVzKHJ1bGVzLCBhdHRycyk7XG4gICAgdGhpcy5jb21wb25lbnRJZCA9IGNvbXBvbmVudElkO1xuXG4gICAgaWYgKCFTdHlsZVNoZWV0Lm1hc3Rlci5oYXNJZChjb21wb25lbnRJZCkpIHtcbiAgICAgIFN0eWxlU2hlZXQubWFzdGVyLmRlZmVycmVkSW5qZWN0KGNvbXBvbmVudElkLCBbXSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICAgKiBGbGF0dGVucyBhIHJ1bGUgc2V0IGludG8gdmFsaWQgQ1NTXG4gICAgICogSGFzaGVzIGl0LCB3cmFwcyB0aGUgd2hvbGUgY2h1bmsgaW4gYSAuaGFzaDEyMzQge31cbiAgICAgKiBSZXR1cm5zIHRoZSBoYXNoIHRvIGJlIGluamVjdGVkIG9uIHJlbmRlcigpXG4gICAgICogKi9cblxuXG4gIENvbXBvbmVudFN0eWxlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgaXNTdGF0aWMgPSB0aGlzLmlzU3RhdGljLFxuICAgICAgICBjb21wb25lbnRJZCA9IHRoaXMuY29tcG9uZW50SWQsXG4gICAgICAgIGxhc3RDbGFzc05hbWUgPSB0aGlzLmxhc3RDbGFzc05hbWU7XG5cbiAgICBpZiAoSVNfQlJPV1NFUiAmJiBpc1N0YXRpYyAmJiB0eXBlb2YgbGFzdENsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIGxhc3RDbGFzc05hbWUpKSB7XG4gICAgICByZXR1cm4gbGFzdENsYXNzTmFtZTtcbiAgICB9XG5cbiAgICB2YXIgZmxhdENTUyA9IGZsYXR0ZW4odGhpcy5ydWxlcywgZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCk7XG4gICAgdmFyIG5hbWUgPSBoYXNoZXIodGhpcy5jb21wb25lbnRJZCArIGZsYXRDU1Muam9pbignJykpO1xuICAgIGlmICghc3R5bGVTaGVldC5oYXNOYW1lRm9ySWQoY29tcG9uZW50SWQsIG5hbWUpKSB7XG4gICAgICBzdHlsZVNoZWV0LmluamVjdCh0aGlzLmNvbXBvbmVudElkLCBzdHJpbmdpZnlSdWxlcyhmbGF0Q1NTLCAnLicgKyBuYW1lLCB1bmRlZmluZWQsIGNvbXBvbmVudElkKSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0Q2xhc3NOYW1lID0gbmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfTtcblxuICBDb21wb25lbnRTdHlsZS5nZW5lcmF0ZU5hbWUgPSBmdW5jdGlvbiBnZW5lcmF0ZU5hbWUoc3RyKSB7XG4gICAgcmV0dXJuIGhhc2hlcihzdHIpO1xuICB9O1xuXG4gIHJldHVybiBDb21wb25lbnRTdHlsZTtcbn0oKTtcblxuLy8gXG5cbnZhciBMSU1JVCA9IDIwMDtcblxudmFyIGNyZWF0ZVdhcm5Ub29NYW55Q2xhc3NlcyA9IChmdW5jdGlvbiAoZGlzcGxheU5hbWUpIHtcbiAgdmFyIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgdmFyIHdhcm5pbmdTZWVuID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAoIXdhcm5pbmdTZWVuKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc2VzW2NsYXNzTmFtZV0gPSB0cnVlO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKGdlbmVyYXRlZENsYXNzZXMpLmxlbmd0aCA+PSBMSU1JVCkge1xuICAgICAgICAvLyBVbmFibGUgdG8gZmluZCBsYXRlc3RSdWxlIGluIHRlc3QgZW52aXJvbm1lbnQuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUsIHByZWZlci10ZW1wbGF0ZSAqL1xuICAgICAgICBjb25zb2xlLndhcm4oJ092ZXIgJyArIExJTUlUICsgJyBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgJyArIGRpc3BsYXlOYW1lICsgJy4gXFxuJyArICdDb25zaWRlciB1c2luZyB0aGUgYXR0cnMgbWV0aG9kLCB0b2dldGhlciB3aXRoIGEgc3R5bGUgb2JqZWN0IGZvciBmcmVxdWVudGx5IGNoYW5nZWQgc3R5bGVzLlxcbicgKyAnRXhhbXBsZTpcXG4nICsgJyAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XFxuJyArICcgICAgc3R5bGU6ICh7IGJhY2tncm91bmQgfSkgPT4gKHtcXG4nICsgJyAgICAgIGJhY2tncm91bmQsXFxuJyArICcgICAgfSksXFxuJyArICcgIH0pYHdpZHRoOiAxMDAlO2BcXG5cXG4nICsgJyAgPENvbXBvbmVudCAvPicpO1xuICAgICAgICB3YXJuaW5nU2VlbiA9IHRydWU7XG4gICAgICAgIGdlbmVyYXRlZENsYXNzZXMgPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KTtcblxuLy8gXG5cbnZhciBkZXRlcm1pbmVUaGVtZSA9IChmdW5jdGlvbiAocHJvcHMsIGZhbGxiYWNrVGhlbWUpIHtcbiAgdmFyIGRlZmF1bHRQcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogRU1QVFlfT0JKRUNUO1xuXG4gIC8vIFByb3BzIHNob3VsZCB0YWtlIHByZWNlZGVuY2Ugb3ZlciBUaGVtZVByb3ZpZGVyLCB3aGljaCBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXJcbiAgLy8gZGVmYXVsdFByb3BzLCBidXQgUmVhY3QgYXV0b21hdGljYWxseSBwdXRzIGRlZmF1bHRQcm9wcyBvbiBwcm9wcy5cblxuICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcm9wLXR5cGVzLCBmbG93dHlwZS1lcnJvcnMvc2hvdy1lcnJvcnMgKi9cbiAgdmFyIGlzRGVmYXVsdFRoZW1lID0gZGVmYXVsdFByb3BzID8gcHJvcHMudGhlbWUgPT09IGRlZmF1bHRQcm9wcy50aGVtZSA6IGZhbHNlO1xuICB2YXIgdGhlbWUgPSBwcm9wcy50aGVtZSAmJiAhaXNEZWZhdWx0VGhlbWUgPyBwcm9wcy50aGVtZSA6IGZhbGxiYWNrVGhlbWUgfHwgZGVmYXVsdFByb3BzLnRoZW1lO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG5cbiAgcmV0dXJuIHRoZW1lO1xufSk7XG5cbi8vIFxudmFyIGVzY2FwZVJlZ2V4ID0gL1tbXFxdLiMqJD48K349fF46KCksXCInYC1dKy9nO1xudmFyIGRhc2hlc0F0RW5kcyA9IC8oXi18LSQpL2c7XG5cbi8qKlxuICogVE9ETzogRXhwbG9yZSB1c2luZyBDU1MuZXNjYXBlIHdoZW4gaXQgYmVjb21lcyBtb3JlIGF2YWlsYWJsZVxuICogaW4gZXZlcmdyZWVuIGJyb3dzZXJzLlxuICovXG5mdW5jdGlvbiBlc2NhcGUoc3RyKSB7XG4gIHJldHVybiBzdHJcbiAgLy8gUmVwbGFjZSBhbGwgcG9zc2libGUgQ1NTIHNlbGVjdG9yc1xuICAucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKVxuXG4gIC8vIFJlbW92ZSBleHRyYW5lb3VzIGh5cGhlbnMgYXQgdGhlIHN0YXJ0IGFuZCBlbmRcbiAgLnJlcGxhY2UoZGFzaGVzQXRFbmRzLCAnJyk7XG59XG5cbi8vIFxuXG5mdW5jdGlvbiBpc1RhZyh0YXJnZXQpIC8qIDogJWNoZWNrcyAqL3tcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnO1xufVxuXG4vLyBcblxuZnVuY3Rpb24gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0YXJnZXQpIHtcbiAgcmV0dXJuIGlzVGFnKHRhcmdldCkgPyAnc3R5bGVkLicgKyB0YXJnZXQgOiAnU3R5bGVkKCcgKyBnZXRDb21wb25lbnROYW1lKHRhcmdldCkgKyAnKSc7XG59XG5cbnZhciBfVFlQRV9TVEFUSUNTO1xuXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG5cbnZhciBUWVBFX1NUQVRJQ1MgPSAoX1RZUEVfU1RBVElDUyA9IHt9LCBfVFlQRV9TVEFUSUNTW0ZvcndhcmRSZWZdID0ge1xuICAkJHR5cGVvZjogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlXG59LCBfVFlQRV9TVEFUSUNTKTtcblxudmFyIGRlZmluZVByb3BlcnR5JDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksXG4gICAgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAgIF9PYmplY3QkZ2V0T3duUHJvcGVydCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gX09iamVjdCRnZXRPd25Qcm9wZXJ0ID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn0gOiBfT2JqZWN0JGdldE93blByb3BlcnQsXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG5cbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcblxuICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBhcnJheVByb3RvdHlwZS5jb25jYXQoZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpLFxuICAgIC8vICRGbG93Rml4TWVcbiAgICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IFRZUEVfU1RBVElDU1t0YXJnZXRDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnQuJCR0eXBlb2ZdIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBkZXNjcmlwdG9yID0gdm9pZCAwO1xuICAgIHZhciBrZXkgPSB2b2lkIDA7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGx1c3BsdXNcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAhS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJlxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3IpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkkMSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogZmFpbCBzaWxlbnRseSAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG4vLyBcbmZ1bmN0aW9uIGlzRGVyaXZlZFJlYWN0Q29tcG9uZW50KGZuKSB7XG4gIHJldHVybiAhIShmbiAmJiBmbi5wcm90b3R5cGUgJiYgZm4ucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuXG4vLyBcbi8vIEhlbHBlciB0byBjYWxsIGEgZ2l2ZW4gZnVuY3Rpb24sIG9ubHkgb25jZVxudmFyIG9uY2UgPSAoZnVuY3Rpb24gKGNiKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2IuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG4vLyBcblxudmFyIFRoZW1lQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcblxudmFyIFRoZW1lQ29uc3VtZXIgPSBUaGVtZUNvbnRleHQuQ29uc3VtZXI7XG5cbi8qKlxuICogUHJvdmlkZSBhIHRoZW1lIHRvIGFuIGVudGlyZSByZWFjdCBjb21wb25lbnQgdHJlZSB2aWEgY29udGV4dFxuICovXG5cbnZhciBUaGVtZVByb3ZpZGVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoVGhlbWVQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFRoZW1lUHJvdmlkZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQuYmluZChfdGhpcykpO1xuICAgIF90aGlzLnJlbmRlcklubmVyID0gX3RoaXMucmVuZGVySW5uZXIuYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVGhlbWVQcm92aWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5jaGlsZHJlbikgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFRoZW1lQ29udGV4dC5Db25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnJlbmRlcklubmVyXG4gICAgKTtcbiAgfTtcblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXJJbm5lciA9IGZ1bmN0aW9uIHJlbmRlcklubmVyKG91dGVyVGhlbWUpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dCh0aGlzLnByb3BzLnRoZW1lLCBvdXRlclRoZW1lKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb250ZXh0LlByb3ZpZGVyLFxuICAgICAgeyB2YWx1ZTogY29udGV4dCB9LFxuICAgICAgUmVhY3QuQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdGhlbWUgZnJvbSB0aGUgcHJvcHMsIHN1cHBvcnRpbmcgYm90aCAob3V0ZXJUaGVtZSkgPT4ge31cbiAgICogYXMgd2VsbCBhcyBvYmplY3Qgbm90YXRpb25cbiAgICovXG5cblxuICBUaGVtZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRUaGVtZSA9IGZ1bmN0aW9uIGdldFRoZW1lKHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGhlbWUpKSB7XG4gICAgICB2YXIgbWVyZ2VkVGhlbWUgPSB0aGVtZShvdXRlclRoZW1lKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkobWVyZ2VkVGhlbWUpIHx8ICh0eXBlb2YgbWVyZ2VkVGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG1lcmdlZFRoZW1lKSkgIT09ICdvYmplY3QnKSkge1xuICAgICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gICAgfVxuXG4gICAgaWYgKHRoZW1lID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkodGhlbWUpIHx8ICh0eXBlb2YgdGhlbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRoZW1lKSkgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDgpO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xuICB9O1xuXG4gIFRoZW1lUHJvdmlkZXIucHJvdG90eXBlLmdldENvbnRleHQgPSBmdW5jdGlvbiBnZXRDb250ZXh0KHRoZW1lLCBvdXRlclRoZW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGhlbWUodGhlbWUsIG91dGVyVGhlbWUpO1xuICB9O1xuXG4gIHJldHVybiBUaGVtZVByb3ZpZGVyO1xufShDb21wb25lbnQpO1xuXG4vLyBcblxudmFyIFNlcnZlclN0eWxlU2hlZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlcnZlclN0eWxlU2hlZXQoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2VydmVyU3R5bGVTaGVldCk7XG5cbiAgICAvKiBUaGUgbWFzdGVyIHNoZWV0IG1pZ2h0IGJlIHJlc2V0LCBzbyBrZWVwIGEgcmVmZXJlbmNlIGhlcmUgKi9cbiAgICB0aGlzLm1hc3RlclNoZWV0ID0gU3R5bGVTaGVldC5tYXN0ZXI7XG4gICAgdGhpcy5pbnN0YW5jZSA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmUoKTtcbiAgICB0aGlzLnNlYWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIFNlcnZlclN0eWxlU2hlZXQgYXMgYmVpbmcgZnVsbHkgZW1pdHRlZCBhbmQgbWFudWFsbHkgR0MgaXQgZnJvbSB0aGVcbiAgICogU3R5bGVTaGVldCBzaW5nbGV0b24uXG4gICAqL1xuXG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuc2VhbCA9IGZ1bmN0aW9uIHNlYWwoKSB7XG4gICAgaWYgKCF0aGlzLnNlYWxlZCkge1xuICAgICAgLyogUmVtb3ZlIHNlYWxlZCBTdHlsZVNoZWV0cyBmcm9tIHRoZSBtYXN0ZXIgc2hlZXQgKi9cbiAgICAgIHZhciBpbmRleCA9IHRoaXMubWFzdGVyU2hlZXQuY2xvbmVzLmluZGV4T2YodGhpcy5pbnN0YW5jZSk7XG4gICAgICB0aGlzLm1hc3RlclNoZWV0LmNsb25lcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5zZWFsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5jb2xsZWN0U3R5bGVzID0gZnVuY3Rpb24gY29sbGVjdFN0eWxlcyhjaGlsZHJlbikge1xuICAgIGlmICh0aGlzLnNlYWxlZCkge1xuICAgICAgdGhyb3cgbmV3IFN0eWxlZENvbXBvbmVudHNFcnJvcigyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFN0eWxlU2hlZXRNYW5hZ2VyLFxuICAgICAgeyBzaGVldDogdGhpcy5pbnN0YW5jZSB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9O1xuXG4gIFNlcnZlclN0eWxlU2hlZXQucHJvdG90eXBlLmdldFN0eWxlVGFncyA9IGZ1bmN0aW9uIGdldFN0eWxlVGFncygpIHtcbiAgICB0aGlzLnNlYWwoKTtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50b0hUTUwoKTtcbiAgfTtcblxuICBTZXJ2ZXJTdHlsZVNoZWV0LnByb3RvdHlwZS5nZXRTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiBnZXRTdHlsZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5zZWFsKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UudG9SZWFjdEVsZW1lbnRzKCk7XG4gIH07XG5cbiAgU2VydmVyU3R5bGVTaGVldC5wcm90b3R5cGUuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtID0gZnVuY3Rpb24gaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHtcbiAgICAgIHRocm93IG5ldyBTdHlsZWRDb21wb25lbnRzRXJyb3IoMyk7XG4gICAgfVxuXG4gICAgLyogdGhlIHRhZyBpbmRleCBrZWVwcyB0cmFjayBvZiB3aGljaCB0YWdzIGhhdmUgYWxyZWFkeSBiZWVuIGVtaXR0ZWQgKi9cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlO1xuXG4gICAgdmFyIGluc3RhbmNlVGFnSW5kZXggPSAwO1xuXG4gICAgdmFyIHN0cmVhbUF0dHIgPSBTQ19TVFJFQU1fQVRUUiArICc9XCJ0cnVlXCInO1xuXG4gICAgdmFyIHRyYW5zZm9ybWVyID0gbmV3IHN0cmVhbS5UcmFuc2Zvcm0oe1xuICAgICAgdHJhbnNmb3JtOiBmdW5jdGlvbiBhcHBlbmRTdHlsZUNodW5rcyhjaHVuaywgLyogZW5jb2RpbmcgKi9fLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgdGFncyA9IGluc3RhbmNlLnRhZ3M7XG5cbiAgICAgICAgdmFyIGh0bWwgPSAnJztcblxuICAgICAgICAvKiByZXRyaWV2ZSBodG1sIGZvciBlYWNoIG5ldyBzdHlsZSB0YWcgKi9cbiAgICAgICAgZm9yICg7IGluc3RhbmNlVGFnSW5kZXggPCB0YWdzLmxlbmd0aDsgaW5zdGFuY2VUYWdJbmRleCArPSAxKSB7XG4gICAgICAgICAgdmFyIHRhZyA9IHRhZ3NbaW5zdGFuY2VUYWdJbmRleF07XG4gICAgICAgICAgaHRtbCArPSB0YWcudG9IVE1MKHN0cmVhbUF0dHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogZm9yY2Ugb3VyIFN0eWxlU2hlZXRzIHRvIGVtaXQgZW50aXJlbHkgbmV3IHRhZ3MgKi9cbiAgICAgICAgaW5zdGFuY2Uuc2VhbEFsbFRhZ3MoKTtcblxuICAgICAgICAvKiBwcmVwZW5kIHN0eWxlIGh0bWwgdG8gY2h1bmsgKi9cbiAgICAgICAgdGhpcy5wdXNoKGh0bWwgKyBjaHVuayk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZVN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnNlYWwoKTtcbiAgICB9KTtcbiAgICByZWFkYWJsZVN0cmVhbS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBfdGhpcy5zZWFsKCk7XG5cbiAgICAgIC8vIGZvcndhcmQgdGhlIGVycm9yIHRvIHRoZSB0cmFuc2Zvcm0gc3RyZWFtXG4gICAgICB0cmFuc2Zvcm1lci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVhZGFibGVTdHJlYW0ucGlwZSh0cmFuc2Zvcm1lcik7XG4gIH07XG5cbiAgcmV0dXJuIFNlcnZlclN0eWxlU2hlZXQ7XG59KCk7XG5cbi8vIFxuXG52YXIgU3R5bGVTaGVldENvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5cbnZhciBTdHlsZVNoZWV0Q29uc3VtZXIgPSBTdHlsZVNoZWV0Q29udGV4dC5Db25zdW1lcjtcblxudmFyIFN0eWxlU2hlZXRNYW5hZ2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgaW5oZXJpdHMoU3R5bGVTaGVldE1hbmFnZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXRNYW5hZ2VyKHByb3BzKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3R5bGVTaGVldE1hbmFnZXIpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpKTtcblxuICAgIF90aGlzLmdldENvbnRleHQgPSBtZW1vaXplKF90aGlzLmdldENvbnRleHQpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlU2hlZXRNYW5hZ2VyLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChzaGVldCwgdGFyZ2V0KSB7XG4gICAgaWYgKHNoZWV0KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBuZXcgU3R5bGVTaGVldCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgU3R5bGVkQ29tcG9uZW50c0Vycm9yKDQpO1xuICAgIH1cbiAgfTtcblxuICBTdHlsZVNoZWV0TWFuYWdlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgc2hlZXQgPSBfcHJvcHMuc2hlZXQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcy50YXJnZXQ7XG5cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnRleHQuUHJvdmlkZXIsXG4gICAgICB7IHZhbHVlOiB0aGlzLmdldENvbnRleHQoc2hlZXQsIHRhcmdldCkgfSxcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IGNoaWxkcmVuXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldE1hbmFnZXI7XG59KENvbXBvbmVudCk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZVNoZWV0TWFuYWdlci5wcm9wVHlwZXMgPSB7XG4gIHNoZWV0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuaW5zdGFuY2VPZihTdHlsZVNoZWV0KSwgUHJvcFR5cGVzLmluc3RhbmNlT2YoU2VydmVyU3R5bGVTaGVldCldKSxcblxuICB0YXJnZXQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZW5kQ2hpbGQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSlcbn0gOiB2b2lkIDA7XG5cbi8vIFxuXG52YXIgZGlkV2FybkFib3V0Q2xhc3NOYW1lVXNhZ2UgPSBuZXcgU2V0KCk7XG5cbnZhciBjbGFzc05hbWVVc2FnZUNoZWNrSW5qZWN0b3IgPSAoZnVuY3Rpb24gKHRhcmdldCkge1xuICB2YXIgZWxlbWVudENsYXNzTmFtZSA9ICcnO1xuXG4gIHZhciB0YXJnZXRDRE0gPSB0YXJnZXQuY29tcG9uZW50RGlkTW91bnQ7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIHRhcmdldC5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0Q0RNID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0YXJnZXRDRE0uY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgZm9yd2FyZFRhcmdldCA9IHRoaXMucHJvcHMuZm9yd2FyZGVkQ2xhc3MudGFyZ2V0O1xuXG4gICAgaWYgKHRhcmdldC5wcm9wcyAmJiB0YXJnZXQucHJvcHMuc3VwcHJlc3NDbGFzc05hbWVXYXJuaW5nIHx8IHRhcmdldC5hdHRycyAmJiB0YXJnZXQuYXR0cnMuc3VwcHJlc3NDbGFzc05hbWVXYXJuaW5nIHx8IGRpZFdhcm5BYm91dENsYXNzTmFtZVVzYWdlLmhhcyhmb3J3YXJkVGFyZ2V0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRpZFdhcm5BYm91dENsYXNzTmFtZVVzYWdlLmFkZChmb3J3YXJkVGFyZ2V0KTtcblxuICAgIHZhciBjbGFzc05hbWVzID0gZWxlbWVudENsYXNzTmFtZS5yZXBsYWNlKC8gKy9nLCAnICcpLnRyaW0oKS5zcGxpdCgnICcpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1maW5kLWRvbS1ub2RlXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBjbGFzc05hbWVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuICcuJyArIHM7XG4gICAgfSkuam9pbignJyk7XG5cbiAgICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID09PSAxICYmICFjbGFzc05hbWVzLmV2ZXJ5KGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdCAmJiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH0pICYmICFub2RlLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0l0IGxvb2tzIGxpa2UgeW91XFwndmUgd3JhcHBlZCBzdHlsZWQoKSBhcm91bmQgeW91ciBSZWFjdCBjb21wb25lbnQgKCcgKyBnZXRDb21wb25lbnROYW1lKGZvcndhcmRUYXJnZXQpICsgJyksIGJ1dCB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGJlaW5nIHBhc3NlZCBkb3duIHRvIGEgY2hpbGQuIE5vIHN0eWxlcyB3aWxsIGJlIHJlbmRlcmVkIHVubGVzcyBjbGFzc05hbWUgaXMgY29tcG9zZWQgd2l0aGluIHlvdXIgUmVhY3QgY29tcG9uZW50LicpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcHJldlJlbmRlcklubmVyID0gdGFyZ2V0LnJlbmRlcklubmVyO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICB0YXJnZXQucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IHByZXZSZW5kZXJJbm5lci5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgIGVsZW1lbnRDbGFzc05hbWUgPSBlbGVtZW50LnByb3BzLmNsYXNzTmFtZTtcblxuICAgIHJldHVybiBlbGVtZW50O1xuICB9O1xufSk7XG5cbi8vIFxuXG52YXIgaWRlbnRpZmllcnMgPSB7fTtcblxuLyogV2UgZGVwZW5kIG9uIGNvbXBvbmVudHMgaGF2aW5nIHVuaXF1ZSBJRHMgKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSWQoX0NvbXBvbmVudFN0eWxlLCBfZGlzcGxheU5hbWUsIHBhcmVudENvbXBvbmVudElkKSB7XG4gIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiBfZGlzcGxheU5hbWUgIT09ICdzdHJpbmcnID8gJ3NjJyA6IGVzY2FwZShfZGlzcGxheU5hbWUpO1xuXG4gIC8qKlxuICAgKiBUaGlzIGVuc3VyZXMgdW5pcXVlbmVzcyBpZiB0d28gY29tcG9uZW50cyBoYXBwZW4gdG8gc2hhcmVcbiAgICogdGhlIHNhbWUgZGlzcGxheU5hbWUuXG4gICAqL1xuICB2YXIgbnIgPSAoaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdIHx8IDApICsgMTtcbiAgaWRlbnRpZmllcnNbZGlzcGxheU5hbWVdID0gbnI7XG5cbiAgdmFyIGNvbXBvbmVudElkID0gZGlzcGxheU5hbWUgKyAnLScgKyBfQ29tcG9uZW50U3R5bGUuZ2VuZXJhdGVOYW1lKGRpc3BsYXlOYW1lICsgbnIpO1xuXG4gIHJldHVybiBwYXJlbnRDb21wb25lbnRJZCA/IHBhcmVudENvbXBvbmVudElkICsgJy0nICsgY29tcG9uZW50SWQgOiBjb21wb25lbnRJZDtcbn1cblxudmFyIHdhcm5Jbm5lclJlZiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdUaGUgXCJpbm5lclJlZlwiIEFQSSBoYXMgYmVlbiByZW1vdmVkIGluIHN0eWxlZC1jb21wb25lbnRzIHY0IGluIGZhdm9yIG9mIFJlYWN0IDE2IHJlZiBmb3J3YXJkaW5nLCB1c2UgXCJyZWZcIiBpbnN0ZWFkIGxpa2UgYSB0eXBpY2FsIGNvbXBvbmVudC4nKVxuICApO1xufSk7XG5cbnZhciB3YXJuQXR0cnNGbk9iamVjdEtleURlcHJlY2F0ZWQgPSBvbmNlKGZ1bmN0aW9uIChrZXksIGRpc3BsYXlOYW1lKSB7XG4gIHJldHVybiAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oJ0Z1bmN0aW9ucyBhcyBvYmplY3QtZm9ybSBhdHRycyh7fSkga2V5cyBhcmUgbm93IGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIHN0eWxlZC1jb21wb25lbnRzLiBTd2l0Y2ggdG8gdGhlIG5ldyBhdHRycyhwcm9wcyA9PiAoe30pKSBzeW50YXggaW5zdGVhZCBmb3IgZWFzaWVyIGFuZCBtb3JlIHBvd2VyZnVsIGNvbXBvc2l0aW9uLiBUaGUgYXR0cnMga2V5IGluIHF1ZXN0aW9uIGlzIFwiJyArIGtleSArICdcIiBvbiBjb21wb25lbnQgXCInICsgZGlzcGxheU5hbWUgKyAnXCIuJylcbiAgKTtcbn0pO1xuXG52YXIgd2Fybk5vblN0eWxlZENvbXBvbmVudEF0dHJzT2JqZWN0S2V5ID0gb25jZShmdW5jdGlvbiAoa2V5LCBkaXNwbGF5TmFtZSkge1xuICByZXR1cm4gKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS53YXJuKCdJdCBsb29rcyBsaWtlIHlvdVxcJ3ZlIHVzZWQgYSBub24gc3R5bGVkLWNvbXBvbmVudCBhcyB0aGUgdmFsdWUgZm9yIHRoZSBcIicgKyBrZXkgKyAnXCIgcHJvcCBpbiBhbiBvYmplY3QtZm9ybSBhdHRycyBjb25zdHJ1Y3RvciBvZiBcIicgKyBkaXNwbGF5TmFtZSArICdcIi5cXG4nICsgJ1lvdSBzaG91bGQgdXNlIHRoZSBuZXcgZnVuY3Rpb24tZm9ybSBhdHRycyBjb25zdHJ1Y3RvciB3aGljaCBhdm9pZHMgdGhpcyBpc3N1ZTogYXR0cnMocHJvcHMgPT4gKHsgeW91clN0dWZmIH0pKVxcbicgKyBcIlRvIGNvbnRpbnVlIHVzaW5nIHRoZSBkZXByZWNhdGVkIG9iamVjdCBzeW50YXgsIHlvdSdsbCBuZWVkIHRvIHdyYXAgeW91ciBjb21wb25lbnQgcHJvcCBpbiBhIGZ1bmN0aW9uIHRvIG1ha2UgaXQgYXZhaWxhYmxlIGluc2lkZSB0aGUgc3R5bGVkIGNvbXBvbmVudCAoeW91J2xsIHN0aWxsIGdldCB0aGUgZGVwcmVjYXRpb24gd2FybmluZyB0aG91Z2guKVxcblwiICsgKCdGb3IgZXhhbXBsZSwgeyAnICsga2V5ICsgJzogKCkgPT4gSW5uZXJDb21wb25lbnQgfSBpbnN0ZWFkIG9mIHsgJyArIGtleSArICc6IElubmVyQ29tcG9uZW50IH0nKSlcbiAgKTtcbn0pO1xuXG4vLyAkRmxvd0ZpeE1lXG5cbnZhciBTdHlsZWRDb21wb25lbnQgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBpbmhlcml0cyhTdHlsZWRDb21wb25lbnQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0eWxlZENvbXBvbmVudCgpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZWRDb21wb25lbnQpO1xuXG4gICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMuYXR0cnMgPSB7fTtcblxuICAgIF90aGlzLnJlbmRlck91dGVyID0gX3RoaXMucmVuZGVyT3V0ZXIuYmluZChfdGhpcyk7XG4gICAgX3RoaXMucmVuZGVySW5uZXIgPSBfdGhpcy5yZW5kZXJJbm5lci5iaW5kKF90aGlzKTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIElTX0JST1dTRVIpIHtcbiAgICAgIGNsYXNzTmFtZVVzYWdlQ2hlY2tJbmplY3RvcihfdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgU3R5bGVTaGVldENvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVyT3V0ZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyT3V0ZXIgPSBmdW5jdGlvbiByZW5kZXJPdXRlcihzdHlsZVNoZWV0KSB7XG4gICAgdGhpcy5zdHlsZVNoZWV0ID0gc3R5bGVTaGVldDtcbiAgICB2YXIgY29tcG9uZW50U3R5bGUgPSB0aGlzLnByb3BzLmZvcndhcmRlZENsYXNzLmNvbXBvbmVudFN0eWxlO1xuXG4gICAgLy8gTm8gbmVlZCB0byBzdWJzY3JpYmUgYSBzdGF0aWMgY29tcG9uZW50IHRvIHRoZW1lIGNoYW5nZXMsIGl0IHdvbid0IGNoYW5nZSBhbnl0aGluZ1xuXG4gICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSByZXR1cm4gdGhpcy5yZW5kZXJJbm5lcigpO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucmVuZGVySW5uZXJcbiAgICApO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVySW5uZXIgPSBmdW5jdGlvbiByZW5kZXJJbm5lcih0aGVtZSkge1xuICAgIHZhciBfcHJvcHMkZm9yd2FyZGVkQ2xhc3MgPSB0aGlzLnByb3BzLmZvcndhcmRlZENsYXNzLFxuICAgICAgICBjb21wb25lbnRTdHlsZSA9IF9wcm9wcyRmb3J3YXJkZWRDbGFzcy5jb21wb25lbnRTdHlsZSxcbiAgICAgICAgZGVmYXVsdFByb3BzID0gX3Byb3BzJGZvcndhcmRlZENsYXNzLmRlZmF1bHRQcm9wcyxcbiAgICAgICAgc3R5bGVkQ29tcG9uZW50SWQgPSBfcHJvcHMkZm9yd2FyZGVkQ2xhc3Muc3R5bGVkQ29tcG9uZW50SWQsXG4gICAgICAgIHRhcmdldCA9IF9wcm9wcyRmb3J3YXJkZWRDbGFzcy50YXJnZXQ7XG5cblxuICAgIHZhciBnZW5lcmF0ZWRDbGFzc05hbWUgPSB2b2lkIDA7XG4gICAgaWYgKGNvbXBvbmVudFN0eWxlLmlzU3RhdGljKSB7XG4gICAgICBnZW5lcmF0ZWRDbGFzc05hbWUgPSB0aGlzLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgdGhpcy5wcm9wcywgdGhpcy5zdHlsZVNoZWV0KTtcbiAgICB9IGVsc2UgaWYgKHRoZW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZGV0ZXJtaW5lVGhlbWUodGhpcy5wcm9wcywgdGhlbWUsIGRlZmF1bHRQcm9wcyksIHRoaXMucHJvcHMsIHRoaXMuc3R5bGVTaGVldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbmVyYXRlZENsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXModGhpcy5wcm9wcy50aGVtZSB8fCBFTVBUWV9PQkpFQ1QsIHRoaXMucHJvcHMsIHRoaXMuc3R5bGVTaGVldCk7XG4gICAgfVxuICAgIHZhciBlbGVtZW50VG9CZUNyZWF0ZWQgPSB0aGlzLnByb3BzLmFzIHx8IHRoaXMuYXR0cnMuYXMgfHwgdGFyZ2V0O1xuICAgIHZhciBpc1RhcmdldFRhZyA9IGlzVGFnKGVsZW1lbnRUb0JlQ3JlYXRlZCk7XG5cbiAgICB2YXIgcHJvcHNGb3JFbGVtZW50ID0ge307XG4gICAgdmFyIGNvbXB1dGVkUHJvcHMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5hdHRycywgdGhpcy5wcm9wcyk7XG5cbiAgICB2YXIga2V5ID0gdm9pZCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBndWFyZC1mb3ItaW5cbiAgICBmb3IgKGtleSBpbiBjb21wdXRlZFByb3BzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgPT09ICdpbm5lclJlZicpIHtcbiAgICAgICAgd2FybklubmVyUmVmKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXkgPT09ICdmb3J3YXJkZWRDbGFzcycgfHwga2V5ID09PSAnYXMnKSBjb250aW51ZTtlbHNlIGlmIChrZXkgPT09ICdmb3J3YXJkZWRSZWYnKSBwcm9wc0ZvckVsZW1lbnQucmVmID0gY29tcHV0ZWRQcm9wc1trZXldO2Vsc2UgaWYgKCFpc1RhcmdldFRhZyB8fCB2YWxpZEF0dHIoa2V5KSkge1xuICAgICAgICAvLyBEb24ndCBwYXNzIHRocm91Z2ggbm9uIEhUTUwgdGFncyB0aHJvdWdoIHRvIEhUTUwgZWxlbWVudHNcbiAgICAgICAgcHJvcHNGb3JFbGVtZW50W2tleV0gPSBjb21wdXRlZFByb3BzW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuc3R5bGUgJiYgdGhpcy5hdHRycy5zdHlsZSkge1xuICAgICAgcHJvcHNGb3JFbGVtZW50LnN0eWxlID0gX2V4dGVuZHMoe30sIHRoaXMuYXR0cnMuc3R5bGUsIHRoaXMucHJvcHMuc3R5bGUpO1xuICAgIH1cblxuICAgIHByb3BzRm9yRWxlbWVudC5jbGFzc05hbWUgPSBbdGhpcy5wcm9wcy5jbGFzc05hbWUsIHN0eWxlZENvbXBvbmVudElkLCB0aGlzLmF0dHJzLmNsYXNzTmFtZSwgZ2VuZXJhdGVkQ2xhc3NOYW1lXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoZWxlbWVudFRvQmVDcmVhdGVkLCBwcm9wc0ZvckVsZW1lbnQpO1xuICB9O1xuXG4gIFN0eWxlZENvbXBvbmVudC5wcm90b3R5cGUuYnVpbGRFeGVjdXRpb25Db250ZXh0ID0gZnVuY3Rpb24gYnVpbGRFeGVjdXRpb25Db250ZXh0KHRoZW1lLCBwcm9wcywgYXR0cnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIHByb3BzLCB7IHRoZW1lOiB0aGVtZSB9KTtcblxuICAgIGlmICghYXR0cnMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcblxuICAgIHRoaXMuYXR0cnMgPSB7fTtcblxuICAgIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJEZWYpIHtcbiAgICAgIHZhciByZXNvbHZlZEF0dHJEZWYgPSBhdHRyRGVmO1xuICAgICAgdmFyIGF0dHJEZWZXYXNGbiA9IGZhbHNlO1xuICAgICAgdmFyIGF0dHIgPSB2b2lkIDA7XG4gICAgICB2YXIga2V5ID0gdm9pZCAwO1xuXG4gICAgICBpZiAoaXNGdW5jdGlvbihyZXNvbHZlZEF0dHJEZWYpKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgcmVzb2x2ZWRBdHRyRGVmID0gcmVzb2x2ZWRBdHRyRGVmKHByb3BzKTtcbiAgICAgICAgYXR0ckRlZldhc0ZuID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBmb3IgKGtleSBpbiByZXNvbHZlZEF0dHJEZWYpIHtcbiAgICAgICAgYXR0ciA9IHJlc29sdmVkQXR0ckRlZltrZXldO1xuXG4gICAgICAgIGlmICghYXR0ckRlZldhc0ZuKSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXR0cikgJiYgIWlzRGVyaXZlZFJlYWN0Q29tcG9uZW50KGF0dHIpICYmICFpc1N0eWxlZENvbXBvbmVudChhdHRyKSkge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybkF0dHJzRm5PYmplY3RLZXlEZXByZWNhdGVkKSB7XG4gICAgICAgICAgICAgIHdhcm5BdHRyc0ZuT2JqZWN0S2V5RGVwcmVjYXRlZChrZXksIHByb3BzLmZvcndhcmRlZENsYXNzLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXR0ciA9IGF0dHIoY29udGV4dCk7XG5cbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGF0dHIpICYmIHdhcm5Ob25TdHlsZWRDb21wb25lbnRBdHRyc09iamVjdEtleSkge1xuICAgICAgICAgICAgICB3YXJuTm9uU3R5bGVkQ29tcG9uZW50QXR0cnNPYmplY3RLZXkoa2V5LCBwcm9wcy5mb3J3YXJkZWRDbGFzcy5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmF0dHJzW2tleV0gPSBhdHRyO1xuICAgICAgICBjb250ZXh0W2tleV0gPSBhdHRyO1xuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH07XG5cbiAgU3R5bGVkQ29tcG9uZW50LnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoZW1lLCBwcm9wcykge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBTdHlsZVNoZWV0Lm1hc3RlcjtcbiAgICB2YXIgX3Byb3BzJGZvcndhcmRlZENsYXNzMiA9IHByb3BzLmZvcndhcmRlZENsYXNzLFxuICAgICAgICBhdHRycyA9IF9wcm9wcyRmb3J3YXJkZWRDbGFzczIuYXR0cnMsXG4gICAgICAgIGNvbXBvbmVudFN0eWxlID0gX3Byb3BzJGZvcndhcmRlZENsYXNzMi5jb21wb25lbnRTdHlsZSxcbiAgICAgICAgd2FyblRvb01hbnlDbGFzc2VzID0gX3Byb3BzJGZvcndhcmRlZENsYXNzMi53YXJuVG9vTWFueUNsYXNzZXM7XG5cbiAgICAvLyBzdGF0aWNhbGx5IHN0eWxlZC1jb21wb25lbnRzIGRvbid0IG5lZWQgdG8gYnVpbGQgYW4gZXhlY3V0aW9uIGNvbnRleHQgb2JqZWN0LFxuICAgIC8vIGFuZCBzaG91bGRuJ3QgYmUgaW5jcmVhc2luZyB0aGUgbnVtYmVyIG9mIGNsYXNzIG5hbWVzXG5cbiAgICBpZiAoY29tcG9uZW50U3R5bGUuaXNTdGF0aWMgJiYgIWF0dHJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEVNUFRZX09CSkVDVCwgc3R5bGVTaGVldCk7XG4gICAgfVxuXG4gICAgdmFyIGNsYXNzTmFtZSA9IGNvbXBvbmVudFN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKHRoaXMuYnVpbGRFeGVjdXRpb25Db250ZXh0KHRoZW1lLCBwcm9wcywgYXR0cnMpLCBzdHlsZVNoZWV0KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5Ub29NYW55Q2xhc3Nlcykgd2FyblRvb01hbnlDbGFzc2VzKGNsYXNzTmFtZSk7XG5cbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9O1xuXG4gIHJldHVybiBTdHlsZWRDb21wb25lbnQ7XG59KENvbXBvbmVudCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlZENvbXBvbmVudCh0YXJnZXQsIG9wdGlvbnMsIHJ1bGVzKSB7XG4gIHZhciBpc1RhcmdldFN0eWxlZENvbXAgPSBpc1N0eWxlZENvbXBvbmVudCh0YXJnZXQpO1xuICB2YXIgaXNDbGFzcyA9ICFpc1RhZyh0YXJnZXQpO1xuXG4gIHZhciBfb3B0aW9ucyRkaXNwbGF5TmFtZSA9IG9wdGlvbnMuZGlzcGxheU5hbWUsXG4gICAgICBkaXNwbGF5TmFtZSA9IF9vcHRpb25zJGRpc3BsYXlOYW1lID09PSB1bmRlZmluZWQgPyBnZW5lcmF0ZURpc3BsYXlOYW1lKHRhcmdldCkgOiBfb3B0aW9ucyRkaXNwbGF5TmFtZSxcbiAgICAgIF9vcHRpb25zJGNvbXBvbmVudElkID0gb3B0aW9ucy5jb21wb25lbnRJZCxcbiAgICAgIGNvbXBvbmVudElkID0gX29wdGlvbnMkY29tcG9uZW50SWQgPT09IHVuZGVmaW5lZCA/IGdlbmVyYXRlSWQoQ29tcG9uZW50U3R5bGUsIG9wdGlvbnMuZGlzcGxheU5hbWUsIG9wdGlvbnMucGFyZW50Q29tcG9uZW50SWQpIDogX29wdGlvbnMkY29tcG9uZW50SWQsXG4gICAgICBfb3B0aW9ucyRQYXJlbnRDb21wb24gPSBvcHRpb25zLlBhcmVudENvbXBvbmVudCxcbiAgICAgIFBhcmVudENvbXBvbmVudCA9IF9vcHRpb25zJFBhcmVudENvbXBvbiA9PT0gdW5kZWZpbmVkID8gU3R5bGVkQ29tcG9uZW50IDogX29wdGlvbnMkUGFyZW50Q29tcG9uLFxuICAgICAgX29wdGlvbnMkYXR0cnMgPSBvcHRpb25zLmF0dHJzLFxuICAgICAgYXR0cnMgPSBfb3B0aW9ucyRhdHRycyA9PT0gdW5kZWZpbmVkID8gRU1QVFlfQVJSQVkgOiBfb3B0aW9ucyRhdHRycztcblxuXG4gIHZhciBzdHlsZWRDb21wb25lbnRJZCA9IG9wdGlvbnMuZGlzcGxheU5hbWUgJiYgb3B0aW9ucy5jb21wb25lbnRJZCA/IGVzY2FwZShvcHRpb25zLmRpc3BsYXlOYW1lKSArICctJyArIG9wdGlvbnMuY29tcG9uZW50SWQgOiBvcHRpb25zLmNvbXBvbmVudElkIHx8IGNvbXBvbmVudElkO1xuXG4gIC8vIGZvbGQgdGhlIHVuZGVybHlpbmcgU3R5bGVkQ29tcG9uZW50IGF0dHJzIHVwIChpbXBsaWNpdCBleHRlbmQpXG4gIHZhciBmaW5hbEF0dHJzID1cbiAgLy8gJEZsb3dGaXhNZVxuICBpc1RhcmdldFN0eWxlZENvbXAgJiYgdGFyZ2V0LmF0dHJzID8gQXJyYXkucHJvdG90eXBlLmNvbmNhdCh0YXJnZXQuYXR0cnMsIGF0dHJzKS5maWx0ZXIoQm9vbGVhbikgOiBhdHRycztcblxuICB2YXIgY29tcG9uZW50U3R5bGUgPSBuZXcgQ29tcG9uZW50U3R5bGUoaXNUYXJnZXRTdHlsZWRDb21wID8gLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgcnVsZXMgdXAgKGltcGxpY2l0IGV4dGVuZClcbiAgLy8gJEZsb3dGaXhNZVxuICB0YXJnZXQuY29tcG9uZW50U3R5bGUucnVsZXMuY29uY2F0KHJ1bGVzKSA6IHJ1bGVzLCBmaW5hbEF0dHJzLCBzdHlsZWRDb21wb25lbnRJZCk7XG5cbiAgLyoqXG4gICAqIGZvcndhcmRSZWYgY3JlYXRlcyBhIG5ldyBpbnRlcmltIGNvbXBvbmVudCwgd2hpY2ggd2UnbGwgdGFrZSBhZHZhbnRhZ2Ugb2ZcbiAgICogaW5zdGVhZCBvZiBleHRlbmRpbmcgUGFyZW50Q29tcG9uZW50IHRvIGNyZWF0ZSBfYW5vdGhlcl8gaW50ZXJpbSBjbGFzc1xuICAgKi9cbiAgdmFyIFdyYXBwZWRTdHlsZWRDb21wb25lbnQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIChwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFyZW50Q29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgZm9yd2FyZGVkQ2xhc3M6IFdyYXBwZWRTdHlsZWRDb21wb25lbnQsIGZvcndhcmRlZFJlZjogcmVmIH0pKTtcbiAgfSk7XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmF0dHJzID0gZmluYWxBdHRycztcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LmNvbXBvbmVudFN0eWxlID0gY29tcG9uZW50U3R5bGU7XG4gIFdyYXBwZWRTdHlsZWRDb21wb25lbnQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkID0gc3R5bGVkQ29tcG9uZW50SWQ7XG5cbiAgLy8gZm9sZCB0aGUgdW5kZXJseWluZyBTdHlsZWRDb21wb25lbnQgdGFyZ2V0IHVwIHNpbmNlIHdlIGZvbGRlZCB0aGUgc3R5bGVzXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC50YXJnZXQgPSBpc1RhcmdldFN0eWxlZENvbXAgPyB0YXJnZXQudGFyZ2V0IDogdGFyZ2V0O1xuXG4gIC8vICRGbG93Rml4TWVcbiAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gd2l0aENvbXBvbmVudCh0YWcpIHtcbiAgICB2YXIgcHJldmlvdXNDb21wb25lbnRJZCA9IG9wdGlvbnMuY29tcG9uZW50SWQsXG4gICAgICAgIG9wdGlvbnNUb0NvcHkgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBbJ2NvbXBvbmVudElkJ10pO1xuXG5cbiAgICB2YXIgbmV3Q29tcG9uZW50SWQgPSBwcmV2aW91c0NvbXBvbmVudElkICYmIHByZXZpb3VzQ29tcG9uZW50SWQgKyAnLScgKyAoaXNUYWcodGFnKSA/IHRhZyA6IGVzY2FwZShnZXRDb21wb25lbnROYW1lKHRhZykpKTtcblxuICAgIHZhciBuZXdPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnNUb0NvcHksIHtcbiAgICAgIGF0dHJzOiBmaW5hbEF0dHJzLFxuICAgICAgY29tcG9uZW50SWQ6IG5ld0NvbXBvbmVudElkLFxuICAgICAgUGFyZW50Q29tcG9uZW50OiBQYXJlbnRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHJldHVybiBjcmVhdGVTdHlsZWRDb21wb25lbnQodGFnLCBuZXdPcHRpb25zLCBydWxlcyk7XG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgV3JhcHBlZFN0eWxlZENvbXBvbmVudC53YXJuVG9vTWFueUNsYXNzZXMgPSBjcmVhdGVXYXJuVG9vTWFueUNsYXNzZXMoZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgLy8gJEZsb3dGaXhNZVxuICBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnLicgKyBXcmFwcGVkU3R5bGVkQ29tcG9uZW50LnN0eWxlZENvbXBvbmVudElkO1xuICB9O1xuXG4gIGlmIChpc0NsYXNzKSB7XG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV3JhcHBlZFN0eWxlZENvbXBvbmVudCwgdGFyZ2V0LCB7XG4gICAgICAvLyBhbGwgU0Mtc3BlY2lmaWMgdGhpbmdzIHNob3VsZCBub3QgYmUgaG9pc3RlZFxuICAgICAgYXR0cnM6IHRydWUsXG4gICAgICBjb21wb25lbnRTdHlsZTogdHJ1ZSxcbiAgICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgICAgc3R5bGVkQ29tcG9uZW50SWQ6IHRydWUsXG4gICAgICB0YXJnZXQ6IHRydWUsXG4gICAgICB3aXRoQ29tcG9uZW50OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gV3JhcHBlZFN0eWxlZENvbXBvbmVudDtcbn1cblxuLy8gXG4vLyBUaGFua3MgdG8gUmVhY3RET01GYWN0b3JpZXMgZm9yIHRoaXMgaGFuZHkgbGlzdCFcblxudmFyIGRvbUVsZW1lbnRzID0gWydhJywgJ2FiYnInLCAnYWRkcmVzcycsICdhcmVhJywgJ2FydGljbGUnLCAnYXNpZGUnLCAnYXVkaW8nLCAnYicsICdiYXNlJywgJ2JkaScsICdiZG8nLCAnYmlnJywgJ2Jsb2NrcXVvdGUnLCAnYm9keScsICdicicsICdidXR0b24nLCAnY2FudmFzJywgJ2NhcHRpb24nLCAnY2l0ZScsICdjb2RlJywgJ2NvbCcsICdjb2xncm91cCcsICdkYXRhJywgJ2RhdGFsaXN0JywgJ2RkJywgJ2RlbCcsICdkZXRhaWxzJywgJ2RmbicsICdkaWFsb2cnLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtJywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2knLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpbnMnLCAna2JkJywgJ2tleWdlbicsICdsYWJlbCcsICdsZWdlbmQnLCAnbGknLCAnbGluaycsICdtYWluJywgJ21hcCcsICdtYXJrJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ21ldGVyJywgJ25hdicsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAnb3B0Z3JvdXAnLCAnb3B0aW9uJywgJ291dHB1dCcsICdwJywgJ3BhcmFtJywgJ3BpY3R1cmUnLCAncHJlJywgJ3Byb2dyZXNzJywgJ3EnLCAncnAnLCAncnQnLCAncnVieScsICdzJywgJ3NhbXAnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NtYWxsJywgJ3NvdXJjZScsICdzcGFuJywgJ3N0cm9uZycsICdzdHlsZScsICdzdWInLCAnc3VtbWFyeScsICdzdXAnLCAndGFibGUnLCAndGJvZHknLCAndGQnLCAndGV4dGFyZWEnLCAndGZvb3QnLCAndGgnLCAndGhlYWQnLCAndGltZScsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1JywgJ3VsJywgJ3ZhcicsICd2aWRlbycsICd3YnInLFxuXG4vLyBTVkdcbidjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3N2ZycsICd0ZXh0JywgJ3RzcGFuJ107XG5cbi8vIFxuXG52YXIgc3R5bGVkID0gZnVuY3Rpb24gc3R5bGVkKHRhZykge1xuICByZXR1cm4gY29uc3RydWN0V2l0aE9wdGlvbnMoY3JlYXRlU3R5bGVkQ29tcG9uZW50LCB0YWcpO1xufTtcblxuLy8gU2hvcnRoYW5kcyBmb3IgYWxsIHZhbGlkIEhUTUwgRWxlbWVudHNcbmRvbUVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUVsZW1lbnQpIHtcbiAgc3R5bGVkW2RvbUVsZW1lbnRdID0gc3R5bGVkKGRvbUVsZW1lbnQpO1xufSk7XG5cbi8vIFxuXG52YXIgR2xvYmFsU3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFN0eWxlKHJ1bGVzLCBjb21wb25lbnRJZCkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIEdsb2JhbFN0eWxlKTtcblxuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICB0aGlzLmNvbXBvbmVudElkID0gY29tcG9uZW50SWQ7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGlzU3RhdGljUnVsZXMocnVsZXMsIEVNUFRZX0FSUkFZKTtcblxuICAgIGlmICghU3R5bGVTaGVldC5tYXN0ZXIuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBTdHlsZVNoZWV0Lm1hc3Rlci5kZWZlcnJlZEluamVjdChjb21wb25lbnRJZCwgW10pO1xuICAgIH1cbiAgfVxuXG4gIEdsb2JhbFN0eWxlLnByb3RvdHlwZS5jcmVhdGVTdHlsZXMgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZXMoZXhlY3V0aW9uQ29udGV4dCwgc3R5bGVTaGVldCkge1xuICAgIHZhciBmbGF0Q1NTID0gZmxhdHRlbih0aGlzLnJ1bGVzLCBleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgICB2YXIgY3NzID0gc3RyaW5naWZ5UnVsZXMoZmxhdENTUywgJycpO1xuXG4gICAgc3R5bGVTaGVldC5pbmplY3QodGhpcy5jb21wb25lbnRJZCwgY3NzKTtcbiAgfTtcblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVtb3ZlU3R5bGVzID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVzKHN0eWxlU2hlZXQpIHtcbiAgICB2YXIgY29tcG9uZW50SWQgPSB0aGlzLmNvbXBvbmVudElkO1xuXG4gICAgaWYgKHN0eWxlU2hlZXQuaGFzSWQoY29tcG9uZW50SWQpKSB7XG4gICAgICBzdHlsZVNoZWV0LnJlbW92ZShjb21wb25lbnRJZCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRPRE86IG92ZXJ3cml0ZSBpbi1wbGFjZSBpbnN0ZWFkIG9mIHJlbW92ZStjcmVhdGU/XG5cblxuICBHbG9iYWxTdHlsZS5wcm90b3R5cGUucmVuZGVyU3R5bGVzID0gZnVuY3Rpb24gcmVuZGVyU3R5bGVzKGV4ZWN1dGlvbkNvbnRleHQsIHN0eWxlU2hlZXQpIHtcbiAgICB0aGlzLnJlbW92ZVN0eWxlcyhzdHlsZVNoZWV0KTtcbiAgICB0aGlzLmNyZWF0ZVN0eWxlcyhleGVjdXRpb25Db250ZXh0LCBzdHlsZVNoZWV0KTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsU3R5bGU7XG59KCk7XG5cbi8vIFxuXG4vLyBwbGFjZSBvdXIgY2FjaGUgaW50byBzaGFyZWQgY29udGV4dCBzbyBpdCdsbCBwZXJzaXN0IGJldHdlZW4gSE1Sc1xuaWYgKElTX0JST1dTRVIpIHtcbiAgd2luZG93LnNjQ0dTSE1SQ2FjaGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2xvYmFsU3R5bGUoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgaW50ZXJwb2xhdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJ1bGVzID0gY3NzLmFwcGx5KHVuZGVmaW5lZCwgW3N0cmluZ3NdLmNvbmNhdChpbnRlcnBvbGF0aW9ucykpO1xuICB2YXIgaWQgPSAnc2MtZ2xvYmFsLScgKyBtdXJtdXJoYXNoKEpTT04uc3RyaW5naWZ5KHJ1bGVzKSk7XG4gIHZhciBzdHlsZSA9IG5ldyBHbG9iYWxTdHlsZShydWxlcywgaWQpO1xuXG4gIHZhciBHbG9iYWxTdHlsZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoR2xvYmFsU3R5bGVDb21wb25lbnQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gR2xvYmFsU3R5bGVDb21wb25lbnQoKSB7XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBHbG9iYWxTdHlsZUNvbXBvbmVudCk7XG5cbiAgICAgIHZhciBfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMpKTtcblxuICAgICAgdmFyIF90aGlzJGNvbnN0cnVjdG9yID0gX3RoaXMuY29uc3RydWN0b3IsXG4gICAgICAgICAgZ2xvYmFsU3R5bGUgPSBfdGhpcyRjb25zdHJ1Y3Rvci5nbG9iYWxTdHlsZSxcbiAgICAgICAgICBzdHlsZWRDb21wb25lbnRJZCA9IF90aGlzJGNvbnN0cnVjdG9yLnN0eWxlZENvbXBvbmVudElkO1xuXG5cbiAgICAgIGlmIChJU19CUk9XU0VSKSB7XG4gICAgICAgIHdpbmRvdy5zY0NHU0hNUkNhY2hlW3N0eWxlZENvbXBvbmVudElkXSA9ICh3aW5kb3cuc2NDR1NITVJDYWNoZVtzdHlsZWRDb21wb25lbnRJZF0gfHwgMCkgKyAxO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgZml4ZXMgSE1SIGNvbXBhdGlibGlsaXR5LiBEb24ndCBhc2sgbWUgd2h5LCBidXQgdGhpcyBjb21iaW5hdGlvbiBvZlxuICAgICAgICogY2FjaGluZyB0aGUgY2xvc3VyZSB2YXJpYWJsZXMgdmlhIHN0YXRpY3MgYW5kIHRoZW4gcGVyc2lzdGluZyB0aGUgc3RhdGljcyBpblxuICAgICAgICogc3RhdGUgd29ya3MgYWNyb3NzIEhNUiB3aGVyZSBubyBvdGhlciBjb21iaW5hdGlvbiBkaWQuIMKvXFxfKOODhClfL8KvXG4gICAgICAgKi9cbiAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICBnbG9iYWxTdHlsZTogZ2xvYmFsU3R5bGUsXG4gICAgICAgIHN0eWxlZENvbXBvbmVudElkOiBzdHlsZWRDb21wb25lbnRJZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBHbG9iYWxTdHlsZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIElTX0JST1dTRVIgJiYgd2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0gPiAxICYmICF0aGlzLnByb3BzLnN1cHByZXNzTXVsdGlNb3VudFdhcm5pbmcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCAnICsgdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZCArICcgd2FzIGNvbXBvc2VkIGFuZCByZW5kZXJlZCBtdWx0aXBsZSB0aW1lcyBpbiB5b3VyIFJlYWN0IGNvbXBvbmVudCB0cmVlLiBPbmx5IHRoZSBsYXN0LXJlbmRlcmVkIGNvcHkgd2lsbCBoYXZlIGl0cyBzdHlsZXMgcmVtYWluIGluIDxoZWFkPiAob3IgeW91ciBTdHlsZVNoZWV0TWFuYWdlciB0YXJnZXQuKScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBHbG9iYWxTdHlsZUNvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh3aW5kb3cuc2NDR1NITVJDYWNoZVt0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkXSkge1xuICAgICAgICB3aW5kb3cuc2NDR1NITVJDYWNoZVt0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkXSAtPSAxO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBEZXBlbmRpbmcgb24gdGhlIG9yZGVyIFwicmVuZGVyXCIgaXMgY2FsbGVkIHRoaXMgY2FuIGNhdXNlIHRoZSBzdHlsZXMgdG8gYmUgbG9zdFxuICAgICAgICogdW50aWwgdGhlIG5leHQgcmVuZGVyIHBhc3Mgb2YgdGhlIHJlbWFpbmluZyBpbnN0YW5jZSwgd2hpY2ggbWF5XG4gICAgICAgKiBub3QgYmUgaW1tZWRpYXRlLlxuICAgICAgICovXG4gICAgICBpZiAod2luZG93LnNjQ0dTSE1SQ2FjaGVbdGhpcy5zdGF0ZS5zdHlsZWRDb21wb25lbnRJZF0gPT09IDApIHtcbiAgICAgICAgdGhpcy5zdGF0ZS5nbG9iYWxTdHlsZS5yZW1vdmVTdHlsZXModGhpcy5zdHlsZVNoZWV0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgR2xvYmFsU3R5bGVDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBSZWFjdC5DaGlsZHJlbi5jb3VudCh0aGlzLnByb3BzLmNoaWxkcmVuKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ1RoZSBnbG9iYWwgc3R5bGUgY29tcG9uZW50ICcgKyB0aGlzLnN0YXRlLnN0eWxlZENvbXBvbmVudElkICsgJyB3YXMgZ2l2ZW4gY2hpbGQgSlNYLiBjcmVhdGVHbG9iYWxTdHlsZSBkb2VzIG5vdCByZW5kZXIgY2hpbGRyZW4uJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBTdHlsZVNoZWV0Q29uc3VtZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZ1bmN0aW9uIChzdHlsZVNoZWV0KSB7XG4gICAgICAgICAgX3RoaXMyLnN0eWxlU2hlZXQgPSBzdHlsZVNoZWV0IHx8IFN0eWxlU2hlZXQubWFzdGVyO1xuXG4gICAgICAgICAgdmFyIGdsb2JhbFN0eWxlID0gX3RoaXMyLnN0YXRlLmdsb2JhbFN0eWxlO1xuXG5cbiAgICAgICAgICBpZiAoZ2xvYmFsU3R5bGUuaXNTdGF0aWMpIHtcbiAgICAgICAgICAgIGdsb2JhbFN0eWxlLnJlbmRlclN0eWxlcyhTVEFUSUNfRVhFQ1VUSU9OX0NPTlRFWFQsIF90aGlzMi5zdHlsZVNoZWV0KTtcblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBUaGVtZUNvbnN1bWVyLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gX3RoaXMyLmNvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcztcblxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfZXh0ZW5kcyh7fSwgX3RoaXMyLnByb3BzKTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICBjb250ZXh0LnRoZW1lID0gZGV0ZXJtaW5lVGhlbWUoX3RoaXMyLnByb3BzLCB0aGVtZSwgZGVmYXVsdFByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnbG9iYWxTdHlsZS5yZW5kZXJTdHlsZXMoY29udGV4dCwgX3RoaXMyLnN0eWxlU2hlZXQpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG5cbiAgICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KTtcblxuICBHbG9iYWxTdHlsZUNvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgc3VwcHJlc3NNdWx0aU1vdW50V2FybmluZzogZmFsc2VcbiAgfTtcbiAgR2xvYmFsU3R5bGVDb21wb25lbnQuZ2xvYmFsU3R5bGUgPSBzdHlsZTtcbiAgR2xvYmFsU3R5bGVDb21wb25lbnQuc3R5bGVkQ29tcG9uZW50SWQgPSBpZDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIHN1cHByZXNzTXVsdGlNb3VudFdhcm5pbmc6IFByb3BUeXBlcy5ib29sXG4gIH0gOiB2b2lkIDA7XG5cblxuICByZXR1cm4gR2xvYmFsU3R5bGVDb21wb25lbnQ7XG59XG5cbi8vIFxuXG52YXIgcmVwbGFjZVdoaXRlc3BhY2UgPSBmdW5jdGlvbiByZXBsYWNlV2hpdGVzcGFjZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHN8XFxcXG4vZywgJycpO1xufTtcblxuZnVuY3Rpb24ga2V5ZnJhbWVzKHN0cmluZ3MpIHtcbiAgLyogV2FybmluZyBpZiB5b3UndmUgdXNlZCBrZXlmcmFtZXMgb24gUmVhY3QgTmF0aXZlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgY29uc29sZS53YXJuKCdga2V5ZnJhbWVzYCBjYW5ub3QgYmUgdXNlZCBvbiBSZWFjdE5hdGl2ZSwgb25seSBvbiB0aGUgd2ViLiBUbyBkbyBhbmltYXRpb24gaW4gUmVhY3ROYXRpdmUgcGxlYXNlIHVzZSBBbmltYXRlZC4nKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBpbnRlcnBvbGF0aW9ucyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBpbnRlcnBvbGF0aW9uc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcnVsZXMgPSBjc3MuYXBwbHkodW5kZWZpbmVkLCBbc3RyaW5nc10uY29uY2F0KGludGVycG9sYXRpb25zKSk7XG5cbiAgdmFyIG5hbWUgPSBnZW5lcmF0ZUFscGhhYmV0aWNOYW1lKG11cm11cmhhc2gocmVwbGFjZVdoaXRlc3BhY2UoSlNPTi5zdHJpbmdpZnkocnVsZXMpKSkpO1xuXG4gIHJldHVybiBuZXcgS2V5ZnJhbWVzKG5hbWUsIHN0cmluZ2lmeVJ1bGVzKHJ1bGVzLCBuYW1lLCAnQGtleWZyYW1lcycpKTtcbn1cblxuLy8gXG5cbnZhciB3aXRoVGhlbWUgPSAoZnVuY3Rpb24gKENvbXBvbmVudCQkMSkge1xuICB2YXIgV2l0aFRoZW1lID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiAocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgVGhlbWVDb25zdW1lcixcbiAgICAgIG51bGwsXG4gICAgICBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50JCQxLmRlZmF1bHRQcm9wcztcblxuICAgICAgICB2YXIgdGhlbWVQcm9wID0gZGV0ZXJtaW5lVGhlbWUocHJvcHMsIHRoZW1lLCBkZWZhdWx0UHJvcHMpO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHRoZW1lUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJyArIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50JCQxKSArICdcIicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50JCQxLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgdGhlbWU6IHRoZW1lUHJvcCwgcmVmOiByZWYgfSkpO1xuICAgICAgfVxuICAgICk7XG4gIH0pO1xuXG4gIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50JCQxKTtcblxuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSAnV2l0aFRoZW1lKCcgKyBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCQkMSkgKyAnKSc7XG5cbiAgcmV0dXJuIFdpdGhUaGVtZTtcbn0pO1xuXG4vLyBcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbnZhciBfX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfSEFVTlRFRF9CWV9TUE9PS1lfR0hPU1RTID0ge1xuICBTdHlsZVNoZWV0OiBTdHlsZVNoZWV0XG59O1xuXG4vLyBcblxuLyogV2FybmluZyBpZiB5b3UndmUgaW1wb3J0ZWQgdGhpcyBmaWxlIG9uIFJlYWN0IE5hdGl2ZSAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuXCIgKyBcIlBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblwiICsgJ1JlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmUnKTtcbn1cblxuLyogV2FybmluZyBpZiB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2Ygc3R5bGVkLWNvbXBvbmVudHMgKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTm9kZS5qcycpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ2pzZG9tJykgPT09IC0xKSB7XG4gIHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSA9IHdpbmRvd1snX19zdHlsZWQtY29tcG9uZW50cy1pbml0X18nXSB8fCAwO1xuXG4gIGlmICh3aW5kb3dbJ19fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fJ10gPT09IDEpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgdGhlcmUgYXJlIHNldmVyYWwgaW5zdGFuY2VzIG9mICdzdHlsZWQtY29tcG9uZW50cycgaW5pdGlhbGl6ZWQgaW4gdGhpcyBhcHBsaWNhdGlvbi4gXCIgKyAnVGhpcyBtYXkgY2F1c2UgZHluYW1pYyBzdHlsZXMgbm90IHJlbmRlcmluZyBwcm9wZXJseSwgZXJyb3JzIGhhcHBlbmluZyBkdXJpbmcgcmVoeWRyYXRpb24gcHJvY2VzcyAnICsgJ2FuZCBtYWtlcyB5b3VyIGFwcGxpY2F0aW9uIGJpZ2dlciB3aXRob3V0IGEgZ29vZCByZWFzb24uXFxuXFxuJyArICdTZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLicpO1xuICB9XG5cbiAgd2luZG93WydfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfXyddICs9IDE7XG59XG5cbi8vXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlZDtcbmV4cG9ydCB7IGNzcywga2V5ZnJhbWVzLCBjcmVhdGVHbG9iYWxTdHlsZSwgaXNTdHlsZWRDb21wb25lbnQsIFRoZW1lQ29uc3VtZXIsIFRoZW1lQ29udGV4dCwgVGhlbWVQcm92aWRlciwgd2l0aFRoZW1lLCBTZXJ2ZXJTdHlsZVNoZWV0LCBTdHlsZVNoZWV0TWFuYWdlciwgX19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0hBVU5URURfQllfU1BPT0tZX0dIT1NUUyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgK1xuICAgICAgICAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJnc1thcmdJbmRleCsrXTsgfSlcbiAgICAgICk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcbiAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQ7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjUuNycgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmV4cG9ydCB2YXIgc3Vic2NyaXB0aW9uU2hhcGUgPSBQcm9wVHlwZXMuc2hhcGUoe1xuICB0cnlTdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHRyeVVuc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBub3RpZnlOZXN0ZWRTdWJzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBpc1N1YnNjcmliZWQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pO1xuZXhwb3J0IHZhciBzdG9yZVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn0pOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBzdG9yZVNoYXBlLCBzdWJzY3JpcHRpb25TaGFwZSB9IGZyb20gJy4uL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICcuLi91dGlscy93YXJuaW5nJztcbnZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuXG5mdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgaWYgKGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuICB3YXJuaW5nKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVkdXhqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvdmlkZXIoc3RvcmVLZXkpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleDtcblxuICBpZiAoc3RvcmVLZXkgPT09IHZvaWQgMCkge1xuICAgIHN0b3JlS2V5ID0gJ3N0b3JlJztcbiAgfVxuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArIFwiU3Vic2NyaXB0aW9uXCI7XG5cbiAgdmFyIFByb3ZpZGVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbc3RvcmVLZXldID0gdGhpc1tzdG9yZUtleV0sIF9yZWZbc3Vic2NyaXB0aW9uS2V5XSA9IG51bGwsIF9yZWY7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgICAgX3RoaXNbc3RvcmVLZXldID0gcHJvcHMuc3RvcmU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBDaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXNbc3RvcmVLZXldICE9PSBuZXh0UHJvcHMuc3RvcmUpIHtcbiAgICAgICAgd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdG9yZUtleV0gPSBzdG9yZVNoYXBlLmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleFtzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG4gIHJldHVybiBQcm92aWRlcjtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVByb3ZpZGVyKCk7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG52YXIgQ0xFQVJFRCA9IG51bGw7XG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fVxufTtcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICAvLyB0aGUgY3VycmVudC9uZXh0IHBhdHRlcm4gaXMgY29waWVkIGZyb20gcmVkdXgncyBjcmVhdGVTdG9yZSBjb2RlLlxuICAvLyBUT0RPOiByZWZhY3RvcitleHBvc2UgdGhhdCBjb2RlIHRvIGJlIHJldXNhYmxlIGhlcmU/XG4gIHZhciBjdXJyZW50ID0gW107XG4gIHZhciBuZXh0ID0gW107XG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbmV4dCA9IENMRUFSRUQ7XG4gICAgICBjdXJyZW50ID0gQ0xFQVJFRDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnQgPSBuZXh0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICBpZiAobmV4dCA9PT0gY3VycmVudCkgbmV4dCA9IGN1cnJlbnQuc2xpY2UoKTtcbiAgICAgIG5leHQucHVzaChsaXN0ZW5lcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGN1cnJlbnQgPT09IENMRUFSRUQpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGlmIChuZXh0ID09PSBjdXJyZW50KSBuZXh0ID0gY3VycmVudC5zbGljZSgpO1xuICAgICAgICBuZXh0LnNwbGljZShuZXh0LmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIsIG9uU3RhdGVDaGFuZ2UpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy5vblN0YXRlQ2hhbmdlID0gb25TdGF0ZUNoYW5nZTtcbiAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3Vic2NyaXB0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWRkTmVzdGVkU3ViID0gZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5TmVzdGVkU3VicyA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMubm90aWZ5KCk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMub25TdGF0ZUNoYW5nZSkgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLm9uU3RhdGVDaGFuZ2UpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IENvbXBvbmVudCwgY3JlYXRlRWxlbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHN0b3JlU2hhcGUsIHN1YnNjcmlwdGlvblNoYXBlIH0gZnJvbSAnLi4vdXRpbHMvUHJvcFR5cGVzJztcbnZhciBob3RSZWxvYWRpbmdWZXJzaW9uID0gMDtcbnZhciBkdW1teVN0YXRlID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBtYWtlU2VsZWN0b3JTdGF0ZWZ1bChzb3VyY2VTZWxlY3Rvciwgc3RvcmUpIHtcbiAgLy8gd3JhcCB0aGUgc2VsZWN0b3IgaW4gYW4gb2JqZWN0IHRoYXQgdHJhY2tzIGl0cyByZXN1bHRzIGJldHdlZW4gcnVucy5cbiAgdmFyIHNlbGVjdG9yID0ge1xuICAgIHJ1bjogZnVuY3Rpb24gcnVuQ29tcG9uZW50U2VsZWN0b3IocHJvcHMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBuZXh0UHJvcHMgPSBzb3VyY2VTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG5cbiAgICAgICAgaWYgKG5leHRQcm9wcyAhPT0gc2VsZWN0b3IucHJvcHMgfHwgc2VsZWN0b3IuZXJyb3IpIHtcbiAgICAgICAgICBzZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdG9yLnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIHNlbGVjdG9yLmVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgc2VsZWN0b3IuZXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XG4gICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxuICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxuICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICB2YXIgX2NvbnRleHRUeXBlcywgX2NoaWxkQ29udGV4dFR5cGVzO1xuXG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIl0pO1xuXG4gIHZhciBzdWJzY3JpcHRpb25LZXkgPSBzdG9yZUtleSArICdTdWJzY3JpcHRpb24nO1xuICB2YXIgdmVyc2lvbiA9IGhvdFJlbG9hZGluZ1ZlcnNpb24rKztcbiAgdmFyIGNvbnRleHRUeXBlcyA9IChfY29udGV4dFR5cGVzID0ge30sIF9jb250ZXh0VHlwZXNbc3RvcmVLZXldID0gc3RvcmVTaGFwZSwgX2NvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jb250ZXh0VHlwZXMpO1xuICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSAoX2NoaWxkQ29udGV4dFR5cGVzID0ge30sIF9jaGlsZENvbnRleHRUeXBlc1tzdWJzY3JpcHRpb25LZXldID0gc3Vic2NyaXB0aW9uU2hhcGUsIF9jaGlsZENvbnRleHRUeXBlcyk7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGludmFyaWFudChpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCksIFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgSlNPTi5zdHJpbmdpZnkoV3JhcHBlZENvbXBvbmVudCkpKTtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZSh3cmFwcGVkQ29tcG9uZW50TmFtZSk7XG5cbiAgICB2YXIgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25uZWN0T3B0aW9ucywge1xuICAgICAgZ2V0RGlzcGxheU5hbWU6IGdldERpc3BsYXlOYW1lLFxuICAgICAgbWV0aG9kTmFtZTogbWV0aG9kTmFtZSxcbiAgICAgIHJlbmRlckNvdW50UHJvcDogcmVuZGVyQ291bnRQcm9wLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzdG9yZUtleTogc3RvcmVLZXksXG4gICAgICB3aXRoUmVmOiB3aXRoUmVmLFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudCAvLyBUT0RPIEFjdHVhbGx5IGZpeCBvdXIgdXNlIG9mIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3Qvbm8tZGVwcmVjYXRlZCAqL1xuXG4gICAgfSk7XG5cbiAgICB2YXIgQ29ubmVjdCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShDb25uZWN0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXM7XG5cbiAgICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICBfdGhpcy5yZW5kZXJDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHNbc3RvcmVLZXldIHx8IGNvbnRleHRbc3RvcmVLZXldO1xuICAgICAgICBfdGhpcy5wcm9wc01vZGUgPSBCb29sZWFuKHByb3BzW3N0b3JlS2V5XSk7XG4gICAgICAgIF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZSA9IF90aGlzLnNldFdyYXBwZWRJbnN0YW5jZS5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpKTtcbiAgICAgICAgaW52YXJpYW50KF90aGlzLnN0b3JlLCBcIkNvdWxkIG5vdCBmaW5kIFxcXCJcIiArIHN0b3JlS2V5ICsgXCJcXFwiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciBwcm9wcyBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyAoXCJvciBleHBsaWNpdGx5IHBhc3MgXFxcIlwiICsgc3RvcmVLZXkgKyBcIlxcXCIgYXMgYSBwcm9wIHRvIFxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLlwiKSk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFNlbGVjdG9yKCk7XG5cbiAgICAgICAgX3RoaXMuaW5pdFN1YnNjcmlwdGlvbigpO1xuXG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm90byA9IENvbm5lY3QucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgICB2YXIgX3JlZjM7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgcmVjZWl2ZWQgc3RvcmUgZnJvbSBwcm9wcywgaXRzIHN1YnNjcmlwdGlvbiBzaG91bGQgYmUgdHJhbnNwYXJlbnRcbiAgICAgICAgLy8gdG8gYW55IGRlc2NlbmRhbnRzIHJlY2VpdmluZyBzdG9yZStzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0OyBpdCBwYXNzZXMgYWxvbmdcbiAgICAgICAgLy8gc3Vic2NyaXB0aW9uIHBhc3NlZCB0byBpdC4gT3RoZXJ3aXNlLCBpdCBzaGFkb3dzIHRoZSBwYXJlbnQgc3Vic2NyaXB0aW9uLCB3aGljaCBhbGxvd3NcbiAgICAgICAgLy8gQ29ubmVjdCB0byBjb250cm9sIG9yZGVyaW5nIG9mIG5vdGlmaWNhdGlvbnMgdG8gZmxvdyB0b3AtZG93bi5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHNNb2RlID8gbnVsbCA6IHRoaXMuc3Vic2NyaXB0aW9uO1xuICAgICAgICByZXR1cm4gX3JlZjMgPSB7fSwgX3JlZjNbc3Vic2NyaXB0aW9uS2V5XSA9IHN1YnNjcmlwdGlvbiB8fCB0aGlzLmNvbnRleHRbc3Vic2NyaXB0aW9uS2V5XSwgX3JlZjM7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gY29tcG9uZW50V2lsbE1vdW50IGZpcmVzIGR1cmluZyBzZXJ2ZXIgc2lkZSByZW5kZXJpbmcsIGJ1dCBjb21wb25lbnREaWRNb3VudCBhbmRcbiAgICAgICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQgZG8gbm90LiBCZWNhdXNlIG9mIHRoaXMsIHRyeVN1YnNjcmliZSBoYXBwZW5zIGR1cmluZyAuLi5kaWRNb3VudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB1bnN1YnNjcmlwdGlvbiB3b3VsZCBuZXZlciB0YWtlIHBsYWNlIGR1cmluZyBTU1IsIGNhdXNpbmcgYSBtZW1vcnkgbGVhay5cbiAgICAgICAgLy8gVG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgY2hpbGQgY29tcG9uZW50IG1heSBoYXZlIHRyaWdnZXJlZCBhIHN0YXRlIGNoYW5nZSBieVxuICAgICAgICAvLyBkaXNwYXRjaGluZyBhbiBhY3Rpb24gaW4gaXRzIGNvbXBvbmVudFdpbGxNb3VudCwgd2UgaGF2ZSB0byByZS1ydW4gdGhlIHNlbGVjdCBhbmQgbWF5YmVcbiAgICAgICAgLy8gcmUtcmVuZGVyLlxuXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0b3IucnVuKG5leHRQcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rvci5zaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB0aGlzLnN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicyA9IG5vb3A7XG4gICAgICAgIHRoaXMuc3RvcmUgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1biA9IG5vb3A7XG4gICAgICAgIHRoaXMuc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZ2V0V3JhcHBlZEluc3RhbmNlID0gZnVuY3Rpb24gZ2V0V3JhcHBlZEluc3RhbmNlKCkge1xuICAgICAgICBpbnZhcmlhbnQod2l0aFJlZiwgXCJUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHlvdSBuZWVkIHRvIHNwZWNpZnkgXCIgKyAoXCJ7IHdpdGhSZWY6IHRydWUgfSBpbiB0aGUgb3B0aW9ucyBhcmd1bWVudCBvZiB0aGUgXCIgKyBtZXRob2ROYW1lICsgXCIoKSBjYWxsLlwiKSk7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBzZXRXcmFwcGVkSW5zdGFuY2UocmVmKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZEluc3RhbmNlID0gcmVmO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmluaXRTZWxlY3RvciA9IGZ1bmN0aW9uIGluaXRTZWxlY3RvcigpIHtcbiAgICAgICAgdmFyIHNvdXJjZVNlbGVjdG9yID0gc2VsZWN0b3JGYWN0b3J5KHRoaXMuc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gbWFrZVNlbGVjdG9yU3RhdGVmdWwoc291cmNlU2VsZWN0b3IsIHRoaXMuc3RvcmUpO1xuICAgICAgICB0aGlzLnNlbGVjdG9yLnJ1bih0aGlzLnByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5pbml0U3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gaW5pdFN1YnNjcmlwdGlvbigpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gcGFyZW50U3ViJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgdmFyIHBhcmVudFN1YiA9ICh0aGlzLnByb3BzTW9kZSA/IHRoaXMucHJvcHMgOiB0aGlzLmNvbnRleHQpW3N1YnNjcmlwdGlvbktleV07XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbih0aGlzLnN0b3JlLCBwYXJlbnRTdWIsIHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMpKTsgLy8gYG5vdGlmeU5lc3RlZFN1YnNgIGlzIGR1cGxpY2F0ZWQgdG8gaGFuZGxlIHRoZSBjYXNlIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGluXG4gICAgICAgIC8vIHRoZSBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLCB3aGVyZSBgdGhpcy5zdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBBblxuICAgICAgICAvLyBleHRyYSBudWxsIGNoZWNrIGV2ZXJ5IGNoYW5nZSBjYW4gYmUgYXZvaWRlZCBieSBjb3B5aW5nIHRoZSBtZXRob2Qgb250byBgdGhpc2AgYW5kIHRoZW5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGl0IHdpdGggYSBuby1vcCBvbiB1bm1vdW50LiBUaGlzIGNhbiBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzXG4gICAgICAgIC8vIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVycyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlXG4gICAgICAgIC8vIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzID0gdGhpcy5zdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHRoaXMuc3Vic2NyaXB0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rvci5ydW4odGhpcy5wcm9wcyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNlbGVjdG9yLnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIHRoaXMubm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlID0gdGhpcy5ub3RpZnlOZXN0ZWRTdWJzT25Db21wb25lbnREaWRVcGRhdGU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZShkdW1teVN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnNPbkNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgICAgLy8gYGNvbXBvbmVudERpZFVwZGF0ZWAgaXMgY29uZGl0aW9uYWxseSBpbXBsZW1lbnRlZCB3aGVuIGBvblN0YXRlQ2hhbmdlYCBkZXRlcm1pbmVzIGl0XG4gICAgICAgIC8vIG5lZWRzIHRvIG5vdGlmeSBuZXN0ZWQgc3Vicy4gT25jZSBjYWxsZWQsIGl0IHVuaW1wbGVtZW50cyBpdHNlbGYgdW50aWwgZnVydGhlciBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VzIG9jY3VyLiBEb2luZyBpdCB0aGlzIHdheSB2cyBoYXZpbmcgYSBwZXJtYW5lbnQgYGNvbXBvbmVudERpZFVwZGF0ZWAgdGhhdCBkb2VzXG4gICAgICAgIC8vIGEgYm9vbGVhbiBjaGVjayBldmVyeSB0aW1lIGF2b2lkcyBhbiBleHRyYSBtZXRob2QgY2FsbCBtb3N0IG9mIHRoZSB0aW1lLCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gc29tZSBwZXJmIGJvb3N0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnN1YnNjcmlwdGlvbikgJiYgdGhpcy5zdWJzY3JpcHRpb24uaXNTdWJzY3JpYmVkKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uYWRkRXh0cmFQcm9wcyA9IGZ1bmN0aW9uIGFkZEV4dHJhUHJvcHMocHJvcHMpIHtcbiAgICAgICAgaWYgKCF3aXRoUmVmICYmICFyZW5kZXJDb3VudFByb3AgJiYgISh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikpIHJldHVybiBwcm9wczsgLy8gbWFrZSBhIHNoYWxsb3cgY29weSBzbyB0aGF0IGZpZWxkcyBhZGRlZCBkb24ndCBsZWFrIHRvIHRoZSBvcmlnaW5hbCBzZWxlY3Rvci5cbiAgICAgICAgLy8gdGhpcyBpcyBlc3BlY2lhbGx5IGltcG9ydGFudCBmb3IgJ3JlZicgc2luY2UgdGhhdCdzIGEgcmVmZXJlbmNlIGJhY2sgdG8gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpbnN0YW5jZS4gYSBzaW5nbGV0b24gbWVtb2l6ZWQgc2VsZWN0b3Igd291bGQgdGhlbiBiZSBob2xkaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgICAgICAvLyBpbnN0YW5jZSwgcHJldmVudGluZyB0aGUgaW5zdGFuY2UgZnJvbSBiZWluZyBnYXJiYWdlIGNvbGxlY3RlZCwgYW5kIHRoYXQgd291bGQgYmUgYmFkXG5cbiAgICAgICAgdmFyIHdpdGhFeHRyYXMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuXG4gICAgICAgIGlmICh3aXRoUmVmKSB3aXRoRXh0cmFzLnJlZiA9IHRoaXMuc2V0V3JhcHBlZEluc3RhbmNlO1xuICAgICAgICBpZiAocmVuZGVyQ291bnRQcm9wKSB3aXRoRXh0cmFzW3JlbmRlckNvdW50UHJvcF0gPSB0aGlzLnJlbmRlckNvdW50Kys7XG4gICAgICAgIGlmICh0aGlzLnByb3BzTW9kZSAmJiB0aGlzLnN1YnNjcmlwdGlvbikgd2l0aEV4dHJhc1tzdWJzY3JpcHRpb25LZXldID0gdGhpcy5zdWJzY3JpcHRpb247XG4gICAgICAgIHJldHVybiB3aXRoRXh0cmFzO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcjtcbiAgICAgICAgc2VsZWN0b3Iuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgc2VsZWN0b3IuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5hZGRFeHRyYVByb3BzKHNlbGVjdG9yLnByb3BzKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb25uZWN0O1xuICAgIH0oQ29tcG9uZW50KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0L25vLWRlcHJlY2F0ZWQgKi9cblxuXG4gICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICBDb25uZWN0LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgQ29ubmVjdC5jaGlsZENvbnRleHRUeXBlcyA9IGNoaWxkQ29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QuY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICAgIENvbm5lY3QucHJvcFR5cGVzID0gY29udGV4dFR5cGVzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAvLyBXZSBhcmUgaG90IHJlbG9hZGluZyFcbiAgICAgICAgaWYgKHRoaXMudmVyc2lvbiAhPT0gdmVyc2lvbikge1xuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy5pbml0U2VsZWN0b3IoKTsgLy8gSWYgYW55IGNvbm5lY3RlZCBkZXNjZW5kYW50cyBkb24ndCBob3QgcmVsb2FkIChhbmQgcmVzdWJzY3JpYmUgaW4gdGhlIHByb2Nlc3MpLCB0aGVpclxuICAgICAgICAgIC8vIGxpc3RlbmVycyB3aWxsIGJlIGxvc3Qgd2hlbiB3ZSB1bnN1YnNjcmliZS4gVW5mb3J0dW5hdGVseSwgYnkgY29weWluZyBvdmVyIGFsbFxuICAgICAgICAgIC8vIGxpc3RlbmVycywgdGhpcyBkb2VzIG1lYW4gdGhhdCB0aGUgb2xkIHZlcnNpb25zIG9mIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlXG4gICAgICAgICAgLy8gbm90aWZpZWQgb2Ygc3RhdGUgY2hhbmdlczsgaG93ZXZlciwgdGhlaXIgb25TdGF0ZUNoYW5nZSBmdW5jdGlvbiBpcyBhIG5vLW9wIHNvIHRoaXNcbiAgICAgICAgICAvLyBpc24ndCBhIGh1Z2UgZGVhbC5cblxuICAgICAgICAgIHZhciBvbGRMaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzID0gdGhpcy5zdWJzY3JpcHRpb24ubGlzdGVuZXJzLmdldCgpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmluaXRTdWJzY3JpcHRpb24oKTtcblxuICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgb2xkTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuc3Vic2NyaXB0aW9uLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwidmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy8gXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vIFxuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy8gICAgXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy8gICAgXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHZlcmlmeVN1YnNlbGVjdG9ycyBmcm9tICcuL3ZlcmlmeVN1YnNlbGVjdG9ycyc7XG5leHBvcnQgZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihzdGF0ZSwgb3duUHJvcHMpIHtcbiAgICByZXR1cm4gbWVyZ2VQcm9wcyhtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSwgbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyksIG93blByb3BzKTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIF9yZWYpIHtcbiAgdmFyIGFyZVN0YXRlc0VxdWFsID0gX3JlZi5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmLmFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmLmFyZVN0YXRlUHJvcHNFcXVhbDtcbiAgdmFyIGhhc1J1bkF0TGVhc3RPbmNlID0gZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgdmFyIG93blByb3BzO1xuICB2YXIgc3RhdGVQcm9wcztcbiAgdmFyIGRpc3BhdGNoUHJvcHM7XG4gIHZhciBtZXJnZWRQcm9wcztcblxuICBmdW5jdGlvbiBoYW5kbGVGaXJzdENhbGwoZmlyc3RTdGF0ZSwgZmlyc3RPd25Qcm9wcykge1xuICAgIHN0YXRlID0gZmlyc3RTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IGZpcnN0T3duUHJvcHM7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIGhhc1J1bkF0TGVhc3RPbmNlID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCkge1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdQcm9wcygpIHtcbiAgICBpZiAobWFwU3RhdGVUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3U3RhdGUoKSB7XG4gICAgdmFyIG5leHRTdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlUHJvcHNDaGFuZ2VkID0gIWFyZVN0YXRlUHJvcHNFcXVhbChuZXh0U3RhdGVQcm9wcywgc3RhdGVQcm9wcyk7XG4gICAgc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgIGlmIChzdGF0ZVByb3BzQ2hhbmdlZCkgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICB2YXIgcHJvcHNDaGFuZ2VkID0gIWFyZU93blByb3BzRXF1YWwobmV4dE93blByb3BzLCBvd25Qcm9wcyk7XG4gICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFhcmVTdGF0ZXNFcXVhbChuZXh0U3RhdGUsIHN0YXRlKTtcbiAgICBzdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICBvd25Qcm9wcyA9IG5leHRPd25Qcm9wcztcbiAgICBpZiAocHJvcHNDaGFuZ2VkICYmIHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKTtcbiAgICBpZiAocHJvcHNDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHMoKTtcbiAgICBpZiAoc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3U3RhdGUoKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvcihuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHJldHVybiBoYXNSdW5BdExlYXN0T25jZSA/IGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgOiBoYW5kbGVGaXJzdENhbGwobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpO1xuICB9O1xufSAvLyBUT0RPOiBBZGQgbW9yZSBjb21tZW50c1xuLy8gSWYgcHVyZSBpcyB0cnVlLCB0aGUgc2VsZWN0b3IgcmV0dXJuZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHdpbGwgbWVtb2l6ZSBpdHMgcmVzdWx0cyxcbi8vIGFsbG93aW5nIGNvbm5lY3RBZHZhbmNlZCdzIHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byByZXR1cm4gZmFsc2UgaWYgZmluYWxcbi8vIHByb3BzIGhhdmUgbm90IGNoYW5nZWQuIElmIGZhbHNlLCB0aGUgc2VsZWN0b3Igd2lsbCBhbHdheXMgcmV0dXJuIGEgbmV3XG4vLyBvYmplY3QgYW5kIHNob3VsZENvbXBvbmVudFVwZGF0ZSB3aWxsIGFsd2F5cyByZXR1cm4gdHJ1ZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeShkaXNwYXRjaCwgX3JlZjIpIHtcbiAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBfcmVmMi5pbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyA9IF9yZWYyLmluaXRNZXJnZVByb3BzLFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJpbml0TWFwU3RhdGVUb1Byb3BzXCIsIFwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wc1wiLCBcImluaXRNZXJnZVByb3BzXCJdKTtcblxuICB2YXIgbWFwU3RhdGVUb1Byb3BzID0gaW5pdE1hcFN0YXRlVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtYXBEaXNwYXRjaFRvUHJvcHMgPSBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1lcmdlUHJvcHMgPSBpbml0TWVyZ2VQcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2ZXJpZnlTdWJzZWxlY3RvcnMobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIG9wdGlvbnMuZGlzcGxheU5hbWUpO1xuICB9XG5cbiAgdmFyIHNlbGVjdG9yRmFjdG9yeSA9IG9wdGlvbnMucHVyZSA/IHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IDogaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeTtcbiAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgZGlzcGF0Y2gsIG9wdGlvbnMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4uL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIGZyb20gJy4vbWFwU3RhdGVUb1Byb3BzJztcbmltcG9ydCBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyBmcm9tICcuL21lcmdlUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi9zZWxlY3RvckZhY3RvcnknO1xuLypcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcblxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xuICBcbiAgY29ubmVjdCBwYXNzZXMgaXRzIGFyZ3MgdG8gY29ubmVjdEFkdmFuY2VkIGFzIG9wdGlvbnMsIHdoaWNoIHdpbGwgaW4gdHVybiBwYXNzIHRoZW0gdG9cbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXG5cbiAgc2VsZWN0b3JGYWN0b3J5IHJldHVybnMgYSBmaW5hbCBwcm9wcyBzZWxlY3RvciBmcm9tIGl0cyBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXG5cbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYXRjaChhcmcsIGZhY3RvcmllcywgbmFtZSkge1xuICBmb3IgKHZhciBpID0gZmFjdG9yaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHJlc3VsdCA9IGZhY3Rvcmllc1tpXShhcmcpO1xuICAgIGlmIChyZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBvZiB0eXBlIFwiICsgdHlwZW9mIGFyZyArIFwiIGZvciBcIiArIG5hbWUgKyBcIiBhcmd1bWVudCB3aGVuIGNvbm5lY3RpbmcgY29tcG9uZW50IFwiICsgb3B0aW9ucy53cmFwcGVkQ29tcG9uZW50TmFtZSArIFwiLlwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn0gLy8gY3JlYXRlQ29ubmVjdCB3aXRoIGRlZmF1bHQgYXJncyBidWlsZHMgdGhlICdvZmZpY2lhbCcgY29ubmVjdCBiZWhhdmlvci4gQ2FsbGluZyBpdCB3aXRoXG4vLyBkaWZmZXJlbnQgb3B0aW9ucyBvcGVucyB1cCBzb21lIHRlc3RpbmcgYW5kIGV4dGVuc2liaWxpdHkgc2NlbmFyaW9zXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3QoX3RlbXApIHtcbiAgdmFyIF9yZWYgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgIF9yZWYkY29ubmVjdEhPQyA9IF9yZWYuY29ubmVjdEhPQyxcbiAgICAgIGNvbm5lY3RIT0MgPSBfcmVmJGNvbm5lY3RIT0MgPT09IHZvaWQgMCA/IGNvbm5lY3RBZHZhbmNlZCA6IF9yZWYkY29ubmVjdEhPQyxcbiAgICAgIF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9IF9yZWYubWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBTdGF0ZVRvUHJvcHNGLFxuICAgICAgX3JlZiRtYXBEaXNwYXRjaFRvUHJvID0gX3JlZi5tYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcERpc3BhdGNoVG9Qcm8sXG4gICAgICBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPSBfcmVmLm1lcmdlUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtZXJnZVByb3BzRmFjdG9yaWVzID0gX3JlZiRtZXJnZVByb3BzRmFjdG9yID09PSB2b2lkIDAgPyBkZWZhdWx0TWVyZ2VQcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvcixcbiAgICAgIF9yZWYkc2VsZWN0b3JGYWN0b3J5ID0gX3JlZi5zZWxlY3RvckZhY3RvcnksXG4gICAgICBzZWxlY3RvckZhY3RvcnkgPSBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9PT0gdm9pZCAwID8gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSA6IF9yZWYkc2VsZWN0b3JGYWN0b3J5O1xuXG4gIHJldHVybiBmdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBfcmVmMikge1xuICAgIGlmIChfcmVmMiA9PT0gdm9pZCAwKSB7XG4gICAgICBfcmVmMiA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfcmVmMyA9IF9yZWYyLFxuICAgICAgICBfcmVmMyRwdXJlID0gX3JlZjMucHVyZSxcbiAgICAgICAgcHVyZSA9IF9yZWYzJHB1cmUgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMyRwdXJlLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlc0VxdWFsID09PSB2b2lkIDAgPyBzdHJpY3RFcXVhbCA6IF9yZWYzJGFyZVN0YXRlc0VxdWFsLFxuICAgICAgICBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPSBfcmVmMy5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZjMkYXJlT3duUHJvcHNFcXVhID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVPd25Qcm9wc0VxdWEsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9IF9yZWYzLmFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVQcm9wc0VxID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZVByb3BzRXEsXG4gICAgICAgIF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9IF9yZWYzLmFyZU1lcmdlZFByb3BzRXF1YWwsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU1lcmdlZFByb3BzRSxcbiAgICAgICAgZXh0cmFPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdKTtcblxuICAgIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gbWF0Y2gobWFwU3RhdGVUb1Byb3BzLCBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hdGNoKG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNZXJnZVByb3BzID0gbWF0Y2gobWVyZ2VQcm9wcywgbWVyZ2VQcm9wc0ZhY3RvcmllcywgJ21lcmdlUHJvcHMnKTtcbiAgICByZXR1cm4gY29ubmVjdEhPQyhzZWxlY3RvckZhY3RvcnksIF9leHRlbmRzKHtcbiAgICAgIC8vIHVzZWQgaW4gZXJyb3IgbWVzc2FnZXNcbiAgICAgIG1ldGhvZE5hbWU6ICdjb25uZWN0JyxcbiAgICAgIC8vIHVzZWQgdG8gY29tcHV0ZSBDb25uZWN0J3MgZGlzcGxheU5hbWUgZnJvbSB0aGUgd3JhcHBlZCBjb21wb25lbnQncyBkaXNwbGF5TmFtZS5cbiAgICAgIGdldERpc3BsYXlOYW1lOiBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShuYW1lKSB7XG4gICAgICAgIHJldHVybiBcIkNvbm5lY3QoXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9LFxuICAgICAgLy8gaWYgbWFwU3RhdGVUb1Byb3BzIGlzIGZhbHN5LCB0aGUgQ29ubmVjdCBjb21wb25lbnQgZG9lc24ndCBzdWJzY3JpYmUgdG8gc3RvcmUgc3RhdGUgY2hhbmdlc1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzOiBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyksXG4gICAgICAvLyBwYXNzZWQgdGhyb3VnaCB0byBzZWxlY3RvckZhY3RvcnlcbiAgICAgIGluaXRNYXBTdGF0ZVRvUHJvcHM6IGluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzOiBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHM6IGluaXRNZXJnZVByb3BzLFxuICAgICAgcHVyZTogcHVyZSxcbiAgICAgIGFyZVN0YXRlc0VxdWFsOiBhcmVTdGF0ZXNFcXVhbCxcbiAgICAgIGFyZU93blByb3BzRXF1YWw6IGFyZU93blByb3BzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWw6IGFyZVN0YXRlUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWw6IGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9LCBleHRyYU9wdGlvbnMpKTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgUHJvdmlkZXIsIHsgY3JlYXRlUHJvdmlkZXIgfSBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmV4cG9ydCB7IFByb3ZpZGVyLCBjcmVhdGVQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBjb25uZWN0IH07IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRobmFtZSkge1xuICByZXR1cm4gcGF0aG5hbWUuY2hhckF0KDApID09PSAnLyc7XG59XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSkge1xuICAgIGxpc3RbaV0gPSBsaXN0W2tdO1xuICB9XG5cbiAgbGlzdC5wb3AoKTtcbn1cblxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIG5vZGUncyB1cmwucGFyc2VcbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgdmFyIHRvUGFydHMgPSB0byAmJiB0by5zcGxpdCgnLycpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gZnJvbSAmJiBmcm9tLnNwbGl0KCcvJykgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IHZvaWQgMDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gIH1pZiAobXVzdEVuZEFicyAmJiBmcm9tUGFydHNbMF0gIT09ICcnICYmICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpKSBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiB2YWx1ZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShiKSAmJiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGl0ZW0sIGJbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhVHlwZSA9IHR5cGVvZiBhID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihhKTtcbiAgdmFyIGJUeXBlID0gdHlwZW9mIGIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGIpO1xuXG4gIGlmIChhVHlwZSAhPT0gYlR5cGUpIHJldHVybiBmYWxzZTtcblxuICBpZiAoYVR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIGFWYWx1ZSA9IGEudmFsdWVPZigpO1xuICAgIHZhciBiVmFsdWUgPSBiLnZhbHVlT2YoKTtcblxuICAgIGlmIChhVmFsdWUgIT09IGEgfHwgYlZhbHVlICE9PSBiKSByZXR1cm4gdmFsdWVFcXVhbChhVmFsdWUsIGJWYWx1ZSk7XG5cbiAgICB2YXIgYUtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuIGFLZXlzLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZUVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsdWVFcXVhbDsiLCJleHBvcnQgdmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxuZXhwb3J0IHZhciBjcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJpbXBvcnQgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IGZyb20gJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xuZXhwb3J0IHsgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5IGFzIGNyZWF0ZUJyb3dzZXJIaXN0b3J5IH07XG5pbXBvcnQgX2NyZWF0ZUhhc2hIaXN0b3J5IGZyb20gJy4vY3JlYXRlSGFzaEhpc3RvcnknO1xuZXhwb3J0IHsgX2NyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhhc2hIaXN0b3J5IH07XG5pbXBvcnQgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgZnJvbSAnLi9jcmVhdGVNZW1vcnlIaXN0b3J5JztcbmV4cG9ydCB7IF9jcmVhdGVNZW1vcnlIaXN0b3J5IGFzIGNyZWF0ZU1lbW9yeUhpc3RvcnkgfTtcblxuZXhwb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmV4cG9ydCB7IHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJzsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJpbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciByYW5kb21TdHJpbmcgPSBmdW5jdGlvbiByYW5kb21TdHJpbmcoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbn07XG5cbnZhciBBY3Rpb25UeXBlcyA9IHtcbiAgSU5JVDogXCJAQHJlZHV4L0lOSVRcIiArIHJhbmRvbVN0cmluZygpLFxuICBSRVBMQUNFOiBcIkBAcmVkdXgvUkVQTEFDRVwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFBST0JFX1VOS05PV05fQUNUSU9OOiBmdW5jdGlvbiBQUk9CRV9VTktOT1dOX0FDVElPTigpIHtcbiAgICByZXR1cm4gXCJAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXCIgKyByYW5kb21TdHJpbmcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gb2JqIFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBhcmd1bWVudCBhcHBlYXJzIHRvIGJlIGEgcGxhaW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIHZhciBwcm90byA9IG9iajtcblxuICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgYXJlIHBhc3Npbmcgc2V2ZXJhbCBzdG9yZSBlbmhhbmNlcnMgdG8gJyArICdjcmVhdGVTdG9yZSgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuIEluc3RlYWQsIGNvbXBvc2UgdGhlbSAnICsgJ3RvZ2V0aGVyIHRvIGEgc2luZ2xlIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IHByZWxvYWRlZFN0YXRlO1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlKGxpc3RlbmVyKSBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGktcmVmZXJlbmNlL3N0b3JlI3N1YnNjcmliZShsaXN0ZW5lcikgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYW4gYWN0aW9uLiBJdCBpcyB0aGUgb25seSB3YXkgdG8gdHJpZ2dlciBhIHN0YXRlIGNoYW5nZS5cbiAgICpcbiAgICogVGhlIGByZWR1Y2VyYCBmdW5jdGlvbiwgdXNlZCB0byBjcmVhdGUgdGhlIHN0b3JlLCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZVxuICAgKiBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBnaXZlbiBgYWN0aW9uYC4gSXRzIHJldHVybiB2YWx1ZSB3aWxsXG4gICAqIGJlIGNvbnNpZGVyZWQgdGhlICoqbmV4dCoqIHN0YXRlIG9mIHRoZSB0cmVlLCBhbmQgdGhlIGNoYW5nZSBsaXN0ZW5lcnNcbiAgICogd2lsbCBiZSBub3RpZmllZC5cbiAgICpcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb25seSBzdXBwb3J0cyBwbGFpbiBvYmplY3QgYWN0aW9ucy4gSWYgeW91IHdhbnQgdG9cbiAgICogZGlzcGF0Y2ggYSBQcm9taXNlLCBhbiBPYnNlcnZhYmxlLCBhIHRodW5rLCBvciBzb21ldGhpbmcgZWxzZSwgeW91IG5lZWQgdG9cbiAgICogd3JhcCB5b3VyIHN0b3JlIGNyZWF0aW5nIGZ1bmN0aW9uIGludG8gdGhlIGNvcnJlc3BvbmRpbmcgbWlkZGxld2FyZS4gRm9yXG4gICAqIGV4YW1wbGUsIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGByZWR1eC10aHVua2AgcGFja2FnZS4gRXZlbiB0aGVcbiAgICogbWlkZGxld2FyZSB3aWxsIGV2ZW50dWFsbHkgZGlzcGF0Y2ggcGxhaW4gb2JqZWN0IGFjdGlvbnMgdXNpbmcgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhY3Rpb24gQSBwbGFpbiBvYmplY3QgcmVwcmVzZW50aW5nIOKAnHdoYXQgY2hhbmdlZOKAnS4gSXQgaXNcbiAgICogYSBnb29kIGlkZWEgdG8ga2VlcCBhY3Rpb25zIHNlcmlhbGl6YWJsZSBzbyB5b3UgY2FuIHJlY29yZCBhbmQgcmVwbGF5IHVzZXJcbiAgICogc2Vzc2lvbnMsIG9yIHVzZSB0aGUgdGltZSB0cmF2ZWxsaW5nIGByZWR1eC1kZXZ0b29sc2AuIEFuIGFjdGlvbiBtdXN0IGhhdmVcbiAgICogYSBgdHlwZWAgcHJvcGVydHkgd2hpY2ggbWF5IG5vdCBiZSBgdW5kZWZpbmVkYC4gSXQgaXMgYSBnb29kIGlkZWEgdG8gdXNlXG4gICAqIHN0cmluZyBjb25zdGFudHMgZm9yIGFjdGlvbiB0eXBlcy5cbiAgICpcbiAgICogQHJldHVybnMge09iamVjdH0gRm9yIGNvbnZlbmllbmNlLCB0aGUgc2FtZSBhY3Rpb24gb2JqZWN0IHlvdSBkaXNwYXRjaGVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQsIGlmIHlvdSB1c2UgYSBjdXN0b20gbWlkZGxld2FyZSwgaXQgbWF5IHdyYXAgYGRpc3BhdGNoKClgIHRvXG4gICAqIHJldHVybiBzb21ldGhpbmcgZWxzZSAoZm9yIGV4YW1wbGUsIGEgUHJvbWlzZSB5b3UgY2FuIGF3YWl0KS5cbiAgICovXG5cblxuICBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7XG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgaW5zdGVhZCByZWNlaXZlZCBcIiArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyBcIi4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8qKlxuICogQ29tcG9zZXMgc2luZ2xlLWFyZ3VtZW50IGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuIFRoZSByaWdodG1vc3RcbiAqIGZ1bmN0aW9uIGNhbiB0YWtlIG11bHRpcGxlIGFyZ3VtZW50cyBhcyBpdCBwcm92aWRlcyB0aGUgc2lnbmF0dXJlIGZvclxuICogdGhlIHJlc3VsdGluZyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gZnVuY3MgVGhlIGZ1bmN0aW9ucyB0byBjb21wb3NlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIG9idGFpbmVkIGJ5IGNvbXBvc2luZyB0aGUgYXJndW1lbnQgZnVuY3Rpb25zXG4gKiBmcm9tIHJpZ2h0IHRvIGxlZnQuIEZvciBleGFtcGxlLCBjb21wb3NlKGYsIGcsIGgpIGlzIGlkZW50aWNhbCB0byBkb2luZ1xuICogKC4uLmFyZ3MpID0+IGYoZyhoKC4uLmFyZ3MpKSkuXG4gKi9cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzdG9yZSBlbmhhbmNlciB0aGF0IGFwcGxpZXMgbWlkZGxld2FyZSB0byB0aGUgZGlzcGF0Y2ggbWV0aG9kXG4gKiBvZiB0aGUgUmVkdXggc3RvcmUuIFRoaXMgaXMgaGFuZHkgZm9yIGEgdmFyaWV0eSBvZiB0YXNrcywgc3VjaCBhcyBleHByZXNzaW5nXG4gKiBhc3luY2hyb25vdXMgYWN0aW9ucyBpbiBhIGNvbmNpc2UgbWFubmVyLCBvciBsb2dnaW5nIGV2ZXJ5IGFjdGlvbiBwYXlsb2FkLlxuICpcbiAqIFNlZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UgYXMgYW4gZXhhbXBsZSBvZiB0aGUgUmVkdXggbWlkZGxld2FyZS5cbiAqXG4gKiBCZWNhdXNlIG1pZGRsZXdhcmUgaXMgcG90ZW50aWFsbHkgYXN5bmNocm9ub3VzLCB0aGlzIHNob3VsZCBiZSB0aGUgZmlyc3RcbiAqIHN0b3JlIGVuaGFuY2VyIGluIHRoZSBjb21wb3NpdGlvbiBjaGFpbi5cbiAqXG4gKiBOb3RlIHRoYXQgZWFjaCBtaWRkbGV3YXJlIHdpbGwgYmUgZ2l2ZW4gdGhlIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgZnVuY3Rpb25zXG4gKiBhcyBuYW1lZCBhcmd1bWVudHMuXG4gKlxuICogQHBhcmFtIHsuLi5GdW5jdGlvbn0gbWlkZGxld2FyZXMgVGhlIG1pZGRsZXdhcmUgY2hhaW4gdG8gYmUgYXBwbGllZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBzdG9yZSBlbmhhbmNlciBhcHBseWluZyB0aGUgbWlkZGxld2FyZS5cbiAqL1xuXG5mdW5jdGlvbiBhcHBseU1pZGRsZXdhcmUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBtaWRkbGV3YXJlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICB2YXIgX2Rpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuIFwiICsgXCJPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guXCIpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVN0b3JlLCBjb21iaW5lUmVkdWNlcnMsIGJpbmRBY3Rpb25DcmVhdG9ycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuZXhwb3J0cy5jb250YWlucyA9IGNvbnRhaW5zO1xuZXhwb3J0cy5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5jcmVhdGVDaGFpbmVkRnVuY3Rpb24gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb247XG5cbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgYSB0aGUgc2VudGVuY2UuXG4vLyBXZSBvbmx5IGhhbmRsZSB0aGUgZmlyc3Qgd29yZC5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogY2FwaXRhbGl6ZShzdHJpbmcpIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuJyk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhvYmosIHByZWQpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByZWQpLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IHByZWRba2V5XTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByZWQpIHtcbiAgdmFyIHByZWRUeXBlID0gKDAsIF90eXBlb2YyLmRlZmF1bHQpKHByZWQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHByZWRUeXBlID09PSAnZnVuY3Rpb24nICYmICEhcHJlZChhcnJbaV0sIGksIGFycikgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cblxuICAgIGlmIChwcmVkVHlwZSA9PT0gJ29iamVjdCcgJiYgY29udGFpbnMoYXJyW2ldLCBwcmVkKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgaWYgKFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ10uaW5kZXhPZihwcmVkVHlwZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLmluZGV4T2YocHJlZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBmaW5kKGFyciwgcHJlZCkge1xuICB2YXIgaW5kZXggPSBmaW5kSW5kZXgoYXJyLCBwcmVkKTtcbiAgcmV0dXJuIGluZGV4ID4gLTEgPyBhcnJbaW5kZXhdIDogdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb25cbiAqXG4gKiBXaWxsIG9ubHkgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIG5lZWRlZCxcbiAqIG90aGVyd2lzZSB3aWxsIHBhc3MgYmFjayBleGlzdGluZyBmdW5jdGlvbnMgb3IgbnVsbC5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jdGlvbnMgdG8gY2hhaW5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbnxudWxsfVxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZ1bmMpIHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJywgJ01hdGVyaWFsLVVJOiBpbnZhbGlkIEFyZ3VtZW50IFR5cGUsIG11c3Qgb25seSBwcm92aWRlIGZ1bmN0aW9ucywgdW5kZWZpbmVkLCBvciBudWxsLicpIDogdm9pZCAwO1xuICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBhY2MuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gIH0sIGZ1bmN0aW9uICgpIHt9KTtcbn0iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgSVNfV1JBUCA9IHR5cGUgJiAkZXhwb3J0Llc7XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXTtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBrZXksIG93biwgb3V0O1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChvd24gJiYgaGFzKGV4cG9ydHMsIGtleSkpIGNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24gKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBDKSB7XG4gICAgICAgICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQygpO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZiAoSVNfUFJPVE8pIHtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZiAodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSkgaGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQXV0aCA9IGV4cG9ydHMud2l0aEF1dGggPSBleHBvcnRzLlNlY3VyaXR5ID0gZXhwb3J0cy5TZWN1cmVSb3V0ZSA9IGV4cG9ydHMuSW1wbGljaXRDYWxsYmFjayA9IHVuZGVmaW5lZDtcblxudmFyIF9TZWN1cml0eSA9IHJlcXVpcmUoJy4vU2VjdXJpdHknKTtcblxudmFyIF9TZWN1cml0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TZWN1cml0eSk7XG5cbnZhciBfSW1wbGljaXRDYWxsYmFjayA9IHJlcXVpcmUoJy4vSW1wbGljaXRDYWxsYmFjaycpO1xuXG52YXIgX0ltcGxpY2l0Q2FsbGJhY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW1wbGljaXRDYWxsYmFjayk7XG5cbnZhciBfU2VjdXJlUm91dGUgPSByZXF1aXJlKCcuL1NlY3VyZVJvdXRlJyk7XG5cbnZhciBfU2VjdXJlUm91dGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2VjdXJlUm91dGUpO1xuXG52YXIgX3dpdGhBdXRoID0gcmVxdWlyZSgnLi93aXRoQXV0aCcpO1xuXG52YXIgX3dpdGhBdXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpdGhBdXRoKTtcblxudmFyIF9BdXRoID0gcmVxdWlyZSgnLi9BdXRoJyk7XG5cbnZhciBfQXV0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BdXRoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5JbXBsaWNpdENhbGxiYWNrID0gX0ltcGxpY2l0Q2FsbGJhY2syLmRlZmF1bHQ7XG5leHBvcnRzLlNlY3VyZVJvdXRlID0gX1NlY3VyZVJvdXRlMi5kZWZhdWx0O1xuZXhwb3J0cy5TZWN1cml0eSA9IF9TZWN1cml0eTIuZGVmYXVsdDtcbmV4cG9ydHMud2l0aEF1dGggPSBfd2l0aEF1dGgyLmRlZmF1bHQ7XG5leHBvcnRzLkF1dGggPSBfQXV0aDIuZGVmYXVsdDsgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgKGMpIDIwMTctUHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3JpZC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9HcmlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HcmlkXCIpKTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBAZmxvd1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgb2lkYzoge1xuICAgICAgICBjbGllbnRJZDogJzBvYWdyNThjNG5jc0M5Z3I3MGg3JyxcbiAgICAgICAgaXNzdWVyOiAnaHR0cHM6Ly9kZXYtMzk2MTgwLm9rdGFwcmV2aWV3LmNvbS9vYXV0aDIvZGVmYXVsdCcsXG4gICAgICAgIGF1ZGllbmNlOiAnYXBpOi8vZGVmYXVsdCcsXG4gICAgICAgIHJlZGlyZWN0VXJpOiBgJHt3aW5kb3cubG9jYXRpb24ucHJvdG9jb2x9Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZX0ke1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBvcnQgPyBgOiR7d2luZG93LmxvY2F0aW9uLnBvcnR9YCA6ICcnXG4gICAgICAgIH0vaW1wbGljaXQvY2FsbGJhY2tgLFxuICAgICAgICBzY29wZTogJ29wZW5pZCBwcm9maWxlIGVtYWlsJ1xuICAgIH0sXG4gICAgYmFzZUFwaTogJ2h0dHBzOi8vbG9jYWxob3N0OjYwMDEnLFxuICAgIHVpOiB7XG4gICAgICAgIHNpZGVCYXJXaWR0aDogMjQwXG4gICAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIvKiogQGxpY2Vuc2UgTWF0ZXJpYWwtVUkgdjMuMC4wLWFscGhhLjBcbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBleGFjdFByb3AgfSBmcm9tICcuL2V4YWN0UHJvcCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGdldERpc3BsYXlOYW1lIH0gZnJvbSAnLi9nZXREaXNwbGF5TmFtZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIHBvbnlmaWxsR2xvYmFsIH0gZnJvbSAnLi9wb255ZmlsbEdsb2JhbCc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVNdWlUaGVtZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlTXVpVGhlbWUuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJqc3NQcmVzZXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2pzc1ByZXNldC5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk11aVRoZW1lUHJvdmlkZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX011aVRoZW1lUHJvdmlkZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVTdHlsZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2NyZWF0ZVN0eWxlcy5kZWZhdWx0O1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIndpdGhTdHlsZXNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhTdHlsZXMuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoVGhlbWVcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3dpdGhUaGVtZS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlR2VuZXJhdGVDbGFzc05hbWVcIikpO1xuXG52YXIgX2NyZWF0ZU11aVRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNdWlUaGVtZVwiKSk7XG5cbnZhciBfanNzUHJlc2V0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9qc3NQcmVzZXRcIikpO1xuXG52YXIgX011aVRoZW1lUHJvdmlkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL011aVRoZW1lUHJvdmlkZXJcIikpO1xuXG52YXIgX2NyZWF0ZVN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlU3R5bGVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi93aXRoU3R5bGVzXCIpKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dpdGhUaGVtZVwiKSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZXNsaW50LWVudiBlczYgKi9cbnZhciB1dGlsID0gbW9kdWxlLmV4cG9ydHM7XG5cbnV0aWwuYmFzZTY0VXJsVG9CYXNlNjQgPSBmdW5jdGlvbihiNjR1KSB7XG4gIHJldHVybiBiNjR1LnJlcGxhY2UoL1xcLS9nLCAnKycpLnJlcGxhY2UoL18vZywgJy8nKTtcbn07XG5cbnV0aWwuYmFzZTY0VXJsVG9TdHJpbmcgPSBmdW5jdGlvbihiNjR1KSB7XG4gIHZhciBiNjQgPSB1dGlsLmJhc2U2NFVybFRvQmFzZTY0KGI2NHUpO1xuICBzd2l0Y2ggKGI2NC5sZW5ndGggJSA0KSB7XG4gICAgY2FzZSAwOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgYjY0ICs9ICc9PSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBiNjQgKz0gJz0nO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93ICdOb3QgYSB2YWxpZCBCYXNlNjRVcmwnO1xuICB9XG4gIHZhciB1dGY4ID0gYXRvYihiNjQpO1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHV0ZjgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1dGY4O1xuICB9XG59O1xuXG51dGlsLnN0cmluZ1RvQnVmZmVyID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBidWZmZXJbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gYnVmZmVyO1xufTtcblxudXRpbC5iYXNlNjRVcmxEZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIGF0b2IodXRpbC5iYXNlNjRVcmxUb0Jhc2U2NChzdHIpKTtcbn07XG5cbnV0aWwuYmluZCA9IGZ1bmN0aW9uKGZuLCBjdHgpIHtcbiAgdmFyIGFkZGl0aW9uYWxBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBhcmdzID0gYWRkaXRpb25hbEFyZ3MuY29uY2F0KGFyZ3MpO1xuICAgIHJldHVybiBmbi5hcHBseShjdHgsIGFyZ3MpO1xuICB9O1xufTtcblxudXRpbC5pc0Fic29sdXRlVXJsID0gZnVuY3Rpb24odXJsKSB7XG4gIHJldHVybiAvXig/OlthLXpdKzopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG5cbnV0aWwuaXNTdHJpbmcgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbnV0aWwuaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbnV0aWwuaXNOdW1iZXIgPSBmdW5jdGlvbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBOdW1iZXJdJztcbn07XG5cbnV0aWwuaXNBcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG51dGlsLmlzb1RvVVRDU3RyaW5nID0gZnVuY3Rpb24oc3RyKSB7XG4gIHZhciBwYXJ0cyA9IHN0ci5tYXRjaCgvXFxkKy9nKSxcbiAgICAgIGlzb1RpbWUgPSBEYXRlLlVUQyhwYXJ0c1swXSwgcGFydHNbMV0gLSAxLCBwYXJ0c1syXSwgcGFydHNbM10sIHBhcnRzWzRdLCBwYXJ0c1s1XSksXG4gICAgICBpc29EYXRlID0gbmV3IERhdGUoaXNvVGltZSk7XG5cbiAgcmV0dXJuIGlzb0RhdGUudG9VVENTdHJpbmcoKTtcbn07XG5cbnV0aWwudG9RdWVyeVBhcmFtcyA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgc3RyID0gW107XG4gIGlmIChvYmogIT09IG51bGwpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkgJiZcbiAgICAgICAgICBvYmpba2V5XSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgb2JqW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgc3RyLnB1c2goa2V5ICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtrZXldKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuICc/JyArIHN0ci5qb2luKCcmJyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG51dGlsLmdlblJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICB2YXIgcmFuZG9tQ2hhcnNldCA9ICdhYmNkZWZnaGlqa2xub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5JztcbiAgdmFyIHJhbmRvbSA9ICcnO1xuICBmb3IgKHZhciBjID0gMCwgY2wgPSByYW5kb21DaGFyc2V0Lmxlbmd0aDsgYyA8IGxlbmd0aDsgKytjKSB7XG4gICAgcmFuZG9tICs9IHJhbmRvbUNoYXJzZXRbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2wpXTtcbiAgfVxuICByZXR1cm4gcmFuZG9tO1xufTtcblxudXRpbC5leHRlbmQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG9iajEgPSBhcmd1bWVudHNbMF07XG4gIHZhciBvYmpBcnJheSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgb2JqQXJyYXkuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICBvYmoxW3Byb3BdID0gb2JqW3Byb3BdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG51dGlsLnJlbW92ZU5pbHMgPSBmdW5jdGlvbihvYmopIHtcbiAgdmFyIGNsZWFuZWQgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbcHJvcF07XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGVhbmVkW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjbGVhbmVkO1xufTtcblxudXRpbC5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgdmFyIHN0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgaWYgKHN0cikge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG5cbi8vIEFuYWxvZ291cyB0byBfLm9taXRcbnV0aWwub21pdCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcHJvcHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgbmV3b2JqID0ge307XG4gIGZvciAodmFyIHAgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwKSAmJiBwcm9wcy5pbmRleE9mKHApID09IC0xKSB7XG4gICAgICBuZXdvYmpbcF0gPSBvYmpbcF07XG4gICAgfVxuICB9XG4gIHJldHVybiB1dGlsLmNsb25lKG5ld29iaik7XG59O1xuXG51dGlsLmZpbmQgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBzZWFyY2hQYXJhbXMpIHtcbiAgdmFyIGMgPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgd2hpbGUgKGMtLSkge1xuICAgIHZhciBpdGVtID0gY29sbGVjdGlvbltjXTtcbiAgICB2YXIgZm91bmQgPSB0cnVlO1xuICAgIGZvciAodmFyIHByb3AgaW4gc2VhcmNoUGFyYW1zKSB7XG4gICAgICBpZiAoIXNlYXJjaFBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtW3Byb3BdICE9PSBzZWFyY2hQYXJhbXNbcHJvcF0pIHtcbiAgICAgICAgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9XG59O1xuXG51dGlsLmdldExpbmsgPSBmdW5jdGlvbihvYmosIGxpbmtOYW1lLCBhbHROYW1lKSB7XG4gIGlmICghb2JqIHx8ICFvYmouX2xpbmtzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxpbmsgPSB1dGlsLmNsb25lKG9iai5fbGlua3NbbGlua05hbWVdKTtcblxuICAvLyBJZiBhIGxpbmsgaGFzIGEgbmFtZSBhbmQgd2UgaGF2ZSBhbiBhbHROYW1lLCByZXR1cm4gaWYgdGhleSBtYXRjaFxuICBpZiAobGluayAmJiBsaW5rLm5hbWUgJiYgYWx0TmFtZSkge1xuICAgIGlmIChsaW5rLm5hbWUgPT09IGFsdE5hbWUpIHtcbiAgICAgIHJldHVybiBsaW5rO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGluaztcbiAgfVxufTtcblxudXRpbC5nZXROYXRpdmVDb25zb2xlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB3aW5kb3cuY29uc29sZTtcbn07XG5cbnV0aWwuZ2V0Q29uc29sZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmF0aXZlQ29uc29sZSA9IHV0aWwuZ2V0TmF0aXZlQ29uc29sZSgpO1xuICBpZiAobmF0aXZlQ29uc29sZSAmJiBuYXRpdmVDb25zb2xlLmxvZykge1xuICAgIHJldHVybiBuYXRpdmVDb25zb2xlO1xuICB9XG4gIHJldHVybiB7XG4gICAgbG9nOiBmdW5jdGlvbigpIHt9XG4gIH07XG59O1xuXG51dGlsLndhcm4gPSBmdW5jdGlvbih0ZXh0KSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgdXRpbC5nZXRDb25zb2xlKCkubG9nKCdbb2t0YS1hdXRoLXNka10gV0FSTjogJyArIHRleHQpO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG59O1xuXG51dGlsLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKHRleHQpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICB1dGlsLmdldENvbnNvbGUoKS5sb2coJ1tva3RhLWF1dGgtc2RrXSBERVBSRUNBVElPTjogJyArIHRleHQpO1xuICAvKiBlc2xpbnQtZW5hYmxlICovXG59O1xuXG51dGlsLmRlcHJlY2F0ZVdyYXAgPSBmdW5jdGlvbih0ZXh0LCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdXRpbC5kZXByZWNhdGUodGV4dCk7XG4gICAgcmV0dXJuIGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuXG51dGlsLnJlbW92ZVRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbihwYXRoKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICAvLyBSZW1vdmUgYW55IHdoaXRlc3BhY2UgYmVmb3JlIG9yIGFmdGVyIHN0cmluZ1xuICB2YXIgdHJpbW1lZCA9IHBhdGgucmVwbGFjZSgvXlxccyt8XFxzKyQvZ20sJycpO1xuICBpZiAodHJpbW1lZC5zbGljZSgtMSkgPT09ICcvJykge1xuICAgIHJldHVybiB0cmltbWVkLnNsaWNlKDAsIC0xKTtcbiAgfVxuICByZXR1cm4gdHJpbW1lZDtcbn07XG5cbnV0aWwuaXNJRTExT3JMZXNzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIWRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPD0gMTE7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIG93bmVyRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IG93bmVyRG9jdW1lbnQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlclwiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXlcbiAqIGZyb20gYSBzY3JlZW4gd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG52YXIgUHJvbXB0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFByb21wdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUHJvbXB0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQcm9tcHQpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBQcm9tcHQucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZShtZXNzYWdlKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykgdGhpcy51bmJsb2NrKCk7XG5cbiAgICB0aGlzLnVuYmxvY2sgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3RvcnkuYmxvY2sobWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB7XG4gICAgICB0aGlzLnVuYmxvY2soKTtcbiAgICAgIHRoaXMudW5ibG9jayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gXCJwYXRoLXRvLXJlZ2V4cFwiO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNvbXBpbGVHZW5lcmF0b3IocGF0dGVybikge1xuICB2YXIgY2FjaGVLZXkgPSBwYXR0ZXJuO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBjb21waWxlZEdlbmVyYXRvciA9IHBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdHRlcm4pO1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRHZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkR2VuZXJhdG9yO1xufTtcblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXR0ZXJuIGFuZCBwYXJhbWV0ZXJzLlxuICovXG52YXIgZ2VuZXJhdGVQYXRoID0gZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKCkge1xuICB2YXIgcGF0dGVybiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCIvXCI7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmIChwYXR0ZXJuID09PSBcIi9cIikge1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG4gIHZhciBnZW5lcmF0b3IgPSBjb21waWxlR2VuZXJhdG9yKHBhdHRlcm4pO1xuICByZXR1cm4gZ2VuZXJhdG9yKHBhcmFtcywgeyBwcmV0dHk6IHRydWUgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZW5lcmF0ZVBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IGdlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICBpZiAodGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgcHJldlRvID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICB2YXIgbmV4dFRvID0gY3JlYXRlTG9jYXRpb24odGhpcy5wcm9wcy50byk7XG5cbiAgICBpZiAobG9jYXRpb25zQXJlRXF1YWwocHJldlRvLCBuZXh0VG8pKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIllvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3UncmUgY3VycmVudGx5IG9uOiBcIiArIChcIlxcXCJcIiArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wdXRlVG8gPSBmdW5jdGlvbiBjb21wdXRlVG8oX3JlZikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICB0byA9IF9yZWYudG87XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkge1xuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRvLCB7XG4gICAgICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucGVyZm9ybSA9IGZ1bmN0aW9uIHBlcmZvcm0oKSB7XG4gICAgdmFyIGhpc3RvcnkgPSB0aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgdmFyIHB1c2ggPSB0aGlzLnByb3BzLnB1c2g7XG5cbiAgICB2YXIgdG8gPSB0aGlzLmNvbXB1dGVUbyh0aGlzLnByb3BzKTtcblxuICAgIGlmIChwdXNoKSB7XG4gICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgIH1cbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSZWRpcmVjdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpO1xuICB9O1xufTtcblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG52YXIgU3RhdGljUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN0YXRpY1JvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3RhdGljUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGljUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jcmVhdGVIcmVmID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goX3RoaXMucHJvcHMuYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgIH0sIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gXCJQVVNIXCI7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9IFwiUkVQTEFDRVwiO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6IFwiXCIsXG4gIGxvY2F0aW9uOiBcIi9cIlxufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsImltcG9ydCBfTWVtb3J5Um91dGVyIGZyb20gXCIuL01lbW9yeVJvdXRlclwiO1xuZXhwb3J0IHsgX01lbW9yeVJvdXRlciBhcyBNZW1vcnlSb3V0ZXIgfTtcbmltcG9ydCBfUHJvbXB0IGZyb20gXCIuL1Byb21wdFwiO1xuZXhwb3J0IHsgX1Byb21wdCBhcyBQcm9tcHQgfTtcbmltcG9ydCBfUmVkaXJlY3QgZnJvbSBcIi4vUmVkaXJlY3RcIjtcbmV4cG9ydCB7IF9SZWRpcmVjdCBhcyBSZWRpcmVjdCB9O1xuaW1wb3J0IF9Sb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuZXhwb3J0IHsgX1JvdXRlIGFzIFJvdXRlIH07XG5pbXBvcnQgX1JvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcbmV4cG9ydCB7IF9Sb3V0ZXIgYXMgUm91dGVyIH07XG5pbXBvcnQgX1N0YXRpY1JvdXRlciBmcm9tIFwiLi9TdGF0aWNSb3V0ZXJcIjtcbmV4cG9ydCB7IF9TdGF0aWNSb3V0ZXIgYXMgU3RhdGljUm91dGVyIH07XG5pbXBvcnQgX1N3aXRjaCBmcm9tIFwiLi9Td2l0Y2hcIjtcbmV4cG9ydCB7IF9Td2l0Y2ggYXMgU3dpdGNoIH07XG5pbXBvcnQgX2dlbmVyYXRlUGF0aCBmcm9tIFwiLi9nZW5lcmF0ZVBhdGhcIjtcbmV4cG9ydCB7IF9nZW5lcmF0ZVBhdGggYXMgZ2VuZXJhdGVQYXRoIH07XG5pbXBvcnQgX21hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcbmV4cG9ydCB7IF9tYXRjaFBhdGggYXMgbWF0Y2hQYXRoIH07XG5pbXBvcnQgX3dpdGhSb3V0ZXIgZnJvbSBcIi4vd2l0aFJvdXRlclwiO1xuZXhwb3J0IHsgX3dpdGhSb3V0ZXIgYXMgd2l0aFJvdXRlciB9OyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcGlNaWRkbGV3YXJlID0gZXhwb3J0cy5nZXRKU09OID0gZXhwb3J0cy5BcGlFcnJvciA9IGV4cG9ydHMuUmVxdWVzdEVycm9yID0gZXhwb3J0cy5JbnRlcm5hbEVycm9yID0gZXhwb3J0cy5JbnZhbGlkUlNBQSA9IGV4cG9ydHMuaXNWYWxpZFJTQUEgPSBleHBvcnRzLnZhbGlkYXRlUlNBQSA9IGV4cG9ydHMuaXNSU0FBID0gZXhwb3J0cy5SU0FBID0gZXhwb3J0cy5DQUxMX0FQSSA9IHVuZGVmaW5lZDtcblxudmFyIF9SU0FBID0gcmVxdWlyZSgnLi9SU0FBJyk7XG5cbnZhciBfUlNBQTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SU0FBKTtcblxudmFyIF92YWxpZGF0aW9uID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxudmFyIF91dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbnZhciBfbWlkZGxld2FyZSA9IHJlcXVpcmUoJy4vbWlkZGxld2FyZScpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLkNBTExfQVBJID0gX1JTQUEyLmRlZmF1bHQ7XG5leHBvcnRzLlJTQUEgPSBfUlNBQTIuZGVmYXVsdDtcbmV4cG9ydHMuaXNSU0FBID0gX3ZhbGlkYXRpb24uaXNSU0FBO1xuZXhwb3J0cy52YWxpZGF0ZVJTQUEgPSBfdmFsaWRhdGlvbi52YWxpZGF0ZVJTQUE7XG5leHBvcnRzLmlzVmFsaWRSU0FBID0gX3ZhbGlkYXRpb24uaXNWYWxpZFJTQUE7XG5leHBvcnRzLkludmFsaWRSU0FBID0gX2Vycm9ycy5JbnZhbGlkUlNBQTtcbmV4cG9ydHMuSW50ZXJuYWxFcnJvciA9IF9lcnJvcnMuSW50ZXJuYWxFcnJvcjtcbmV4cG9ydHMuUmVxdWVzdEVycm9yID0gX2Vycm9ycy5SZXF1ZXN0RXJyb3I7XG5leHBvcnRzLkFwaUVycm9yID0gX2Vycm9ycy5BcGlFcnJvcjtcbmV4cG9ydHMuZ2V0SlNPTiA9IF91dGlsLmdldEpTT047XG5leHBvcnRzLmFwaU1pZGRsZXdhcmUgPSBfbWlkZGxld2FyZS5hcGlNaWRkbGV3YXJlOyAvKipcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFJlZHV4IG1pZGRsZXdhcmUgZm9yIGNhbGxpbmcgYW4gQVBJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAbW9kdWxlIHJlZHV4LWFwaS1taWRkbGV3YXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcmVxdWlyZXMgbG9kYXNoLmlzcGxhaW5vYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleHBvcnRzIHtzdHJpbmd9IFJTQUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleHBvcnRzIHtzdHJpbmd9IENBTExfQVBJIC0gYWxpYXMgb2YgUlNBQSwgdG8gYmUgZGVwcmVjYXRlZCBpbiB2M1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGV4cG9ydHMge2Z1bmN0aW9ufSBpc1JTQUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleHBvcnRzIHtmdW5jdGlvbn0gdmFsaWRhdGVSU0FBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhwb3J0cyB7ZnVuY3Rpb259IGlzVmFsaWRSU0FBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhwb3J0cyB7ZXJyb3J9IEludmFsaWRSU0FBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhwb3J0cyB7ZXJyb3J9IEludGVybmFsRXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleHBvcnRzIHtlcnJvcn0gUmVxdWVzdEVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhwb3J0cyB7ZXJyb3J9IEFwaUVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhwb3J0cyB7ZnVuY3Rpb259IGdldEpTT05cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleHBvcnRzIHtSZWR1eE1pZGRsZVdhcmV9IGFwaU1pZGRsZXdhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbn0gUmVkdXhNaWRkbGV3YXJlXG4gKiBAcGFyYW0ge29iamVjdH0gc3RvcmVcbiAqIEByZXR1cm5zIHtSZWR1eE5leHRIYW5kbGVyfVxuICpcbiAqIEB0eXBlZGVmIHtmdW5jdGlvbn0gUmVkdXhOZXh0SGFuZGxlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gbmV4dFxuICogQHJldHVybnMge1JlZHV4QWN0aW9uSGFuZGxlcn1cbiAqXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb259IFJlZHV4QWN0aW9uSGFuZGxlclxuICogQHBhcmFtIHtvYmplY3R9IGFjdGlvblxuICogQHJldHVybnMgdW5kZWZpbmVkXG4gKi8iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwiLy8gQGZsb3dcbmltcG9ydCB0eXBlIHsgQXBwbGljYXRpb24gfSBmcm9tICdAL3N0YXRlL2NvbnRleHQvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgRElSRUNUT1JZX0lEID0gJ0RJUkVDVE9SWSc7XG5leHBvcnQgY29uc3QgTUVNQkVSX0lEID0gJ01FTUJFUic7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0FQUExJQ0FUSU9OX0lEID0gRElSRUNUT1JZX0lEO1xuXG5jb25zdCBjcmVhdGVBcHBsaWNhdGlvbiA9IChcbiAgICBpZCxcbiAgICBuYW1lLFxuICAgIGNvbG9yLFxuICAgIHJlbGF0aXZlUGF0aCxcbiAgICBpY29uXG4pOiBBcHBsaWNhdGlvbiA9PiAoe1xuICAgIGlkLFxuICAgIG5hbWUsXG4gICAgY29sb3IsXG4gICAgcmVsYXRpdmVQYXRoLFxuICAgIGljb24sXG4gICAgaXNDdXJyZW50OiBmYWxzZVxufSk7XG5cbmV4cG9ydCBjb25zdCBhcHBsaWNhdGlvbnM6IEFwcGxpY2F0aW9uW10gPSBbXG4gICAgY3JlYXRlQXBwbGljYXRpb24oXG4gICAgICAgIERJUkVDVE9SWV9JRCxcbiAgICAgICAgJ0RpcmVjdG9yeScsXG4gICAgICAgICcjNjA3RDhCJyxcbiAgICAgICAgJy9kaXJlY3RvcnknLFxuICAgICAgICAnc2VjdXJpdHknXG4gICAgKSxcbiAgICBjcmVhdGVBcHBsaWNhdGlvbihcbiAgICAgICAgTUVNQkVSX0lELFxuICAgICAgICAnTWVtYmVyJyxcbiAgICAgICAgJyMyOTYyRkYnLFxuICAgICAgICAnL21lbWJlcicsXG4gICAgICAgICdhY2NvdW50X2NpcmNsZSdcbiAgICApXG5dO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlQ2VsbC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UYWJsZUNlbGwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RhYmxlQ2VsbFwiKSk7IiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIEF1dGhTZGtFcnJvcihtc2csIHhocikge1xuICB0aGlzLm5hbWUgPSAnQXV0aFNka0Vycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gbXNnO1xuXG4gIHRoaXMuZXJyb3JDb2RlID0gJ0lOVEVSTkFMJztcbiAgdGhpcy5lcnJvclN1bW1hcnkgPSBtc2c7XG4gIHRoaXMuZXJyb3JMaW5rID0gJ0lOVEVSTkFMJztcbiAgdGhpcy5lcnJvcklkID0gJ0lOVEVSTkFMJztcbiAgdGhpcy5lcnJvckNhdXNlcyA9IFtdO1xuICBpZiAoeGhyKSB7XG4gICAgdGhpcy54aHIgPSB4aHI7XG4gIH1cbn1cbkF1dGhTZGtFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRoU2RrRXJyb3I7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJTVEFURV9UT0tFTl9DT09LSUVfTkFNRVwiOiBcIm9rdGFTdGF0ZVRva2VuXCIsXG4gIFwiREVGQVVMVF9QT0xMSU5HX0RFTEFZXCI6IDUwMCxcbiAgXCJERUZBVUxUX01BWF9DTE9DS19TS0VXXCI6IDMwMCxcbiAgXCJERUZBVUxUX0NBQ0hFX0RVUkFUSU9OXCI6IDg2NDAwLFxuICBcIkZSQU1FX0lEXCI6IFwib2t0YS1vYXV0aC1oZWxwZXItZnJhbWVcIixcbiAgXCJSRURJUkVDVF9PQVVUSF9QQVJBTVNfQ09PS0lFX05BTUVcIjogXCJva3RhLW9hdXRoLXJlZGlyZWN0LXBhcmFtc1wiLFxuICBcIlJFRElSRUNUX1NUQVRFX0NPT0tJRV9OQU1FXCI6IFwib2t0YS1vYXV0aC1zdGF0ZVwiLFxuICBcIlJFRElSRUNUX05PTkNFX0NPT0tJRV9OQU1FXCI6IFwib2t0YS1vYXV0aC1ub25jZVwiLFxuICBcIlRPS0VOX1NUT1JBR0VfTkFNRVwiOiBcIm9rdGEtdG9rZW4tc3RvcmFnZVwiLFxuICBcIkNBQ0hFX1NUT1JBR0VfTkFNRVwiOiBcIm9rdGEtY2FjaGUtc3RvcmFnZVwiLFxuICBcIlNES19WRVJTSU9OXCI6IFwiMi4wLjFcIlxufTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF90b0NzcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzJyk7XG5cbnZhciBfdG9Dc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3MpO1xuXG52YXIgX3RvQ3NzVmFsdWUgPSByZXF1aXJlKCcuLi91dGlscy90b0Nzc1ZhbHVlJyk7XG5cbnZhciBfdG9Dc3NWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgU3R5bGVSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdHlsZVJ1bGUpO1xuXG4gICAgdGhpcy50eXBlID0gJ3N0eWxlJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdmFyIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3I7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICBpZiAoc2VsZWN0b3IpIHRoaXMuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3I7XG4gICAgdGhpcy5yZW5kZXJlciA9IHNoZWV0ID8gc2hlZXQucmVuZGVyZXIgOiBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgKiBBdHRlbnRpb246IHVzZSB0aGlzIHdpdGggY2F1dGlvbi4gTW9zdCBicm93c2VycyBkaWRuJ3QgaW1wbGVtZW50XG4gICAqIHNlbGVjdG9yVGV4dCBzZXR0ZXIsIHNvIHRoaXMgbWF5IHJlc3VsdCBpbiByZXJlbmRlcmluZyBvZiBlbnRpcmUgU3R5bGUgU2hlZXQuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFN0eWxlUnVsZSwgW3tcbiAgICBrZXk6ICdwcm9wJyxcblxuXG4gICAgLyoqXG4gICAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9wKG5hbWUsIHZhbHVlKSB7XG4gICAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLnN0eWxlW25hbWVdO1xuXG4gICAgICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiB0aGUgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLlxuICAgICAgaWYgKHRoaXMuc3R5bGVbbmFtZV0gPT09IHZhbHVlKSByZXR1cm4gdGhpcztcblxuICAgICAgdmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG5cbiAgICAgIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gZmFsc2U7XG4gICAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlO1xuXG4gICAgICAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuICAgICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCkgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIFdlIGFyZSBnb2luZyB0byByZW1vdmUgdGhpcyB2YWx1ZS5cbiAgICAgIHZhciByZW1vdmUgPSBpc0VtcHR5ICYmIGlzRGVmaW5lZDtcblxuICAgICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gdmFsdWU7XG5cbiAgICAgIC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cbiAgICAgIGlmICh0aGlzLnJlbmRlcmFibGUpIHtcbiAgICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgICAgaWYgKHNoZWV0ICYmIHNoZWV0LmF0dGFjaGVkKSB7XG4gICAgICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoZmFsc2UsICdSdWxlIGlzIG5vdCBsaW5rZWQuIE1pc3Npbmcgc2hlZXQgb3B0aW9uIFwibGluazogdHJ1ZVwiLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgcnVsZSB0byBhbiBlbGVtZW50IGlubGluZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlUbycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5VG8ocmVuZGVyYWJsZSkge1xuICAgICAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBqc29uKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkocmVuZGVyYWJsZSwgcHJvcCwganNvbltwcm9wXSk7XG4gICAgICB9cmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBydWxlLlxuICAgICAqIEZhbGxiYWNrcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgKiBVc2VmdWwgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvSlNPTicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHZhciBqc29uID0ge307XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdHlsZVtwcm9wXTtcbiAgICAgICAgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgIT09ICdvYmplY3QnKSBqc29uW3Byb3BdID0gdmFsdWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIGpzb25bcHJvcF0gPSAoMCwgX3RvQ3NzVmFsdWUyWydkZWZhdWx0J10pKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBqc29uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5vcHRpb25zLnNoZWV0O1xuXG4gICAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgICB2YXIgb3B0cyA9IGxpbmsgPyBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBhbGxvd0VtcHR5OiB0cnVlIH0pIDogb3B0aW9ucztcbiAgICAgIHJldHVybiAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLnNlbGVjdG9yLCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZWxlY3RvcicsXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciA9PT0gdGhpcy5zZWxlY3RvclRleHQpIHJldHVybjtcblxuICAgICAgdGhpcy5zZWxlY3RvclRleHQgPSBzZWxlY3RvcjtcblxuICAgICAgaWYgKCF0aGlzLnJlbmRlcmFibGUpIHJldHVybjtcblxuICAgICAgdmFyIGhhc0NoYW5nZWQgPSB0aGlzLnJlbmRlcmVyLnNldFNlbGVjdG9yKHRoaXMucmVuZGVyYWJsZSwgc2VsZWN0b3IpO1xuXG4gICAgICAvLyBJZiBzZWxlY3RvciBzZXR0ZXIgaXMgbm90IGltcGxlbWVudGVkLCByZXJlbmRlciB0aGUgcnVsZS5cbiAgICAgIGlmICghaGFzQ2hhbmdlZCAmJiB0aGlzLnJlbmRlcmFibGUpIHtcbiAgICAgICAgdmFyIHJlbmRlcmFibGUgPSB0aGlzLnJlbmRlcmVyLnJlcGxhY2VSdWxlKHRoaXMucmVuZGVyYWJsZSwgdGhpcyk7XG4gICAgICAgIGlmIChyZW5kZXJhYmxlKSB0aGlzLnJlbmRlcmFibGUgPSByZW5kZXJhYmxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBzZWxlY3RvciBzdHJpbmcuXG4gICAgICovXG4gICAgLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JUZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVJ1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFN0eWxlUnVsZTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUgPSBjbG9uZUVsZW1lbnRXaXRoQ2xhc3NOYW1lO1xuZXhwb3J0cy5jbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZSA9IGNsb25lQ2hpbGRyZW5XaXRoQ2xhc3NOYW1lO1xuZXhwb3J0cy5pc011aUVsZW1lbnQgPSBpc011aUVsZW1lbnQ7XG5leHBvcnRzLnNldFJlZiA9IHNldFJlZjtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmZ1bmN0aW9uIGNsb25lRWxlbWVudFdpdGhDbGFzc05hbWUoY2hpbGQsIGNsYXNzTmFtZSkge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2hpbGQucHJvcHMuY2xhc3NOYW1lLCBjbGFzc05hbWUpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNoaWxkcmVuV2l0aENsYXNzTmFtZShjaGlsZHJlbiwgY2xhc3NOYW1lKSB7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2xvbmVFbGVtZW50V2l0aENsYXNzTmFtZShjaGlsZCwgY2xhc3NOYW1lKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZm9ybUNvbnRyb2xTdGF0ZSA9IGZvcm1Db250cm9sU3RhdGU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbnZhciBfVGV4dGFyZWEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RleHRhcmVhXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzLCBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGxpZ2h0ID0gdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnO1xuICB2YXIgcGxhY2Vob2xkZXIgPSB7XG4gICAgY29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgIG9wYWNpdHk6IGxpZ2h0ID8gMC40MiA6IDAuNSxcbiAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB7XG4gICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgIH0pXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlckhpZGRlbiA9IHtcbiAgICBvcGFjaXR5OiAwXG4gIH07XG4gIHZhciBwbGFjZWhvbGRlclZpc2libGUgPSB7XG4gICAgb3BhY2l0eTogbGlnaHQgPyAwLjQyIDogMC41XG4gIH07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICAvLyBNaW1pY3MgdGhlIGRlZmF1bHQgaW5wdXQgZGlzcGxheSBwcm9wZXJ0eSB1c2VkIGJ5IGJyb3dzZXJzIGZvciBhbiBpbnB1dC5cbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTYpLFxuICAgICAgbGluZUhlaWdodDogJzEuMTg3NWVtJyxcbiAgICAgIC8vIFJlc2V0ICgxOXB4KSwgbWF0Y2ggdGhlIG5hdGl2ZSBpbnB1dCBsaW5lLWhlaWdodFxuICAgICAgY3Vyc29yOiAndGV4dCcsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZCxcbiAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZFN0YXJ0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIG1hcmdpbkRlbnNlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogXCJcIi5jb25jYXQoOCAtIDIsIFwicHggMCBcIikuY29uY2F0KDggLSAxLCBcInB4XCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge1xuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBjb2xvcjogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdCg4IC0gMiwgXCJweCAwIFwiKS5jb25jYXQoOCAtIDEsIFwicHhcIiksXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBib3hTaXppbmc6ICdjb250ZW50LWJveCcsXG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAvLyBSZXNldCBmb3IgU2FmYXJpXG4gICAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIC8vIE1ha2UgdGhlIGZsZXggaXRlbSBzaHJpbmsgd2l0aCBGaXJlZm94XG4gICAgICBtaW5XaWR0aDogMCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBGaXggSUUgMTEgd2lkdGggaXNzdWVcbiAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXIsXG4gICAgICAnJjo6LW1vei1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gRmlyZWZveCAxOStcbiAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyLFxuICAgICAgLy8gSUUgMTFcbiAgICAgICcmOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlcixcbiAgICAgIC8vIEVkZ2VcbiAgICAgICcmOmZvY3VzJzoge1xuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9LFxuICAgICAgLy8gUmVzZXQgRmlyZWZveCBpbnZhbGlkIHJlcXVpcmVkIGlucHV0IHN0eWxlXG4gICAgICAnJjppbnZhbGlkJzoge1xuICAgICAgICBib3hTaGFkb3c6ICdub25lJ1xuICAgICAgfSxcbiAgICAgICcmOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uJzoge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIHBhZGRpbmcgd2hlbiB0eXBlPXNlYXJjaC5cbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJ1xuICAgICAgfSxcbiAgICAgIC8vIFNob3cgYW5kIGhpZGUgdGhlIHBsYWNlaG9sZGVyIGxvZ2ljXG4gICAgICAnbGFiZWxbZGF0YS1zaHJpbms9ZmFsc2VdICsgJGZvcm1Db250cm9sICYnOiB7XG4gICAgICAgICcmOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgICcmOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEZpcmVmb3ggMTkrXG4gICAgICAgICcmOi1tcy1pbnB1dC1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVySGlkZGVuLFxuICAgICAgICAvLyBJRSAxMVxuICAgICAgICAnJjo6LW1zLWlucHV0LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJIaWRkZW4sXG4gICAgICAgIC8vIEVkZ2VcbiAgICAgICAgJyY6Zm9jdXM6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgICcmOmZvY3VzOjotbW96LXBsYWNlaG9sZGVyJzogcGxhY2Vob2xkZXJWaXNpYmxlLFxuICAgICAgICAvLyBGaXJlZm94IDE5K1xuICAgICAgICAnJjpmb2N1czotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUsXG4gICAgICAgIC8vIElFIDExXG4gICAgICAgICcmOmZvY3VzOjotbXMtaW5wdXQtcGxhY2Vob2xkZXInOiBwbGFjZWhvbGRlclZpc2libGUgLy8gRWRnZVxuXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIG9wYWNpdHk6IDEgLy8gUmVzZXQgaU9TIG9wYWNpdHlcblxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBpbnB1dE1hcmdpbkRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA0IC0gMVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcmVzaXplOiAnbm9uZScsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYHR5cGVgIGlzIG5vdCBcInRleHRcImAuICovXG4gICAgaW5wdXRUeXBlOiB7XG4gICAgICAvLyB0eXBlPVwiZGF0ZVwiIG9yIHR5cGU9XCJ0aW1lXCIsIGV0Yy4gaGF2ZSBzcGVjaWZpYyBzdHlsZXMgd2UgbmVlZCB0byByZXNldC5cbiAgICAgIGhlaWdodDogJzEuMTg3NWVtJyAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGB0eXBlPVwic2VhcmNoXCJgLiAqL1xuICAgIGlucHV0VHlwZVNlYXJjaDoge1xuICAgICAgLy8gSW1wcm92ZSB0eXBlIHNlYXJjaCBzdHlsZS5cbiAgICAgICctbW96LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJyxcbiAgICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAndGV4dGZpZWxkJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgZW5kQWRvcm5tZW50YCBpcyBwcm92aWRlZC4gKi9cbiAgICBpbnB1dEFkb3JuZWRFbmQ6IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gZm9ybUNvbnRyb2xTdGF0ZShfcmVmKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBzdGF0ZXMgPSBfcmVmLnN0YXRlcyxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQ7XG4gIHJldHVybiBzdGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0YXRlKSB7XG4gICAgYWNjW3N0YXRlXSA9IHByb3BzW3N0YXRlXTtcblxuICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQubXVpRm9ybUNvbnRyb2wpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbc3RhdGVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBhY2Nbc3RhdGVdID0gY29udGV4dC5tdWlGb3JtQ29udHJvbFtzdGF0ZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuLyoqXG4gKiBgSW5wdXRCYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYW4gaW5wdXQuXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgc3RhdGUgbG9naWMuXG4gKi9cblxuXG52YXIgSW5wdXRCYXNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKElucHV0QmFzZSwgX1JlYWN0JENvbXBvbmVudCk7XG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKElucHV0QmFzZSwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAgIC8vIFRoZSBibHVyIHdvbid0IGZpcmUgd2hlbiB0aGUgZGlzYWJsZWQgc3RhdGUgaXMgc2V0IG9uIGEgZm9jdXNlZCBpbnB1dC5cbiAgICAgIC8vIFdlIG5lZWQgdG8gYm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlIG1hbnVhbGx5LlxuICAgICAgaWYgKHByb3BzLmRpc2FibGVkICYmIHN0YXRlLmZvY3VzZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmb2N1c2VkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBJbnB1dEJhc2UocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBJbnB1dEJhc2UpO1xuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShJbnB1dEJhc2UpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBGaXggYSBidWcgd2l0aCBJRSAxMSB3aGVyZSB0aGUgZm9jdXMvYmx1ciBldmVudHMgYXJlIHRyaWdnZXJlZFxuICAgICAgLy8gd2hpbGUgdGhlIGlucHV0IGlzIGRpc2FibGVkLlxuICAgICAgaWYgKGZvcm1Db250cm9sU3RhdGUoe1xuICAgICAgICBwcm9wczogX3RoaXMucHJvcHMsXG4gICAgICAgIGNvbnRleHQ6IF90aGlzLmNvbnRleHQsXG4gICAgICAgIHN0YXRlczogWydkaXNhYmxlZCddXG4gICAgICB9KS5kaXNhYmxlZCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1cykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkZvY3VzKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11aUZvcm1Db250cm9sID0gX3RoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcblxuICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRm9jdXMpIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2wub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25CbHVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQmx1cihldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IF90aGlzLmNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG5cbiAgICAgIGlmIChtdWlGb3JtQ29udHJvbCAmJiBtdWlGb3JtQ29udHJvbC5vbkJsdXIpIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2wub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgX3RoaXMuY2hlY2tEaXJ0eShfdGhpcy5pbnB1dFJlZik7XG4gICAgICB9IC8vIFBlcmZvcm0gaW4gdGhlIHdpbGxVcGRhdGVcblxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DaGFuZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzJHByb3BzO1xuXG4gICAgICAgIChfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzKS5vbkNoYW5nZS5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVmSW5wdXQgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5pbnB1dFJlZiA9IHJlZjtcbiAgICAgIHZhciByZWZQcm9wO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuaW5wdXRSZWYpIHtcbiAgICAgICAgcmVmUHJvcCA9IF90aGlzLnByb3BzLmlucHV0UmVmO1xuICAgICAgfSBlbHNlIGlmIChfdGhpcy5wcm9wcy5pbnB1dFByb3BzICYmIF90aGlzLnByb3BzLmlucHV0UHJvcHMucmVmKSB7XG4gICAgICAgIHJlZlByb3AgPSBfdGhpcy5wcm9wcy5pbnB1dFByb3BzLnJlZjtcbiAgICAgIH1cblxuICAgICAgKDAsIF9yZWFjdEhlbHBlcnMuc2V0UmVmKShyZWZQcm9wLCByZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLmlucHV0UmVmICYmIGV2ZW50LmN1cnJlbnRUYXJnZXQgPT09IGV2ZW50LnRhcmdldCkge1xuICAgICAgICBfdGhpcy5pbnB1dFJlZi5mb2N1cygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaXNDb250cm9sbGVkID0gcHJvcHMudmFsdWUgIT0gbnVsbDtcblxuICAgIGlmIChfdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgIF90aGlzLmNoZWNrRGlydHkocHJvcHMpO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKElucHV0QmFzZSwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIC8vIFdlIGFyZSBjb25zdW1pbmcgdGhlIHBhcmVudCBtdWlGb3JtQ29udHJvbCBjb250ZXh0LlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBhIGNoaWxkIHRvIGNvbnN1bWUgaXQgYSBzZWNvbmQgdGltZS5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG11aUZvcm1Db250cm9sOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICghdGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgdGhpcy5jaGVja0RpcnR5KHRoaXMuaW5wdXRSZWYpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgLy8gQm9vayBrZWVwIHRoZSBmb2N1c2VkIHN0YXRlLlxuICAgICAgaWYgKCFwcmV2UHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICB2YXIgbXVpRm9ybUNvbnRyb2wgPSB0aGlzLmNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG5cbiAgICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uQmx1cikge1xuICAgICAgICAgIG11aUZvcm1Db250cm9sLm9uQmx1cigpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgICB0aGlzLmNoZWNrRGlydHkodGhpcy5wcm9wcyk7XG4gICAgICB9IC8vIGVsc2UgcGVyZm9ybWVkIGluIHRoZSBvbkNoYW5nZVxuXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNoZWNrRGlydHlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tEaXJ0eShvYmopIHtcbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IHRoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNGaWxsZWQpKG9iaikpIHtcbiAgICAgICAgaWYgKG11aUZvcm1Db250cm9sICYmIG11aUZvcm1Db250cm9sLm9uRmlsbGVkKSB7XG4gICAgICAgICAgbXVpRm9ybUNvbnRyb2wub25GaWxsZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uRmlsbGVkKSB7XG4gICAgICAgICAgdGhpcy5wcm9wcy5vbkZpbGxlZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobXVpRm9ybUNvbnRyb2wgJiYgbXVpRm9ybUNvbnRyb2wub25FbXB0eSkge1xuICAgICAgICBtdWlGb3JtQ29udHJvbC5vbkVtcHR5KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm9uRW1wdHkpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkVtcHR5KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXV0b0NvbXBsZXRlID0gX3RoaXMkcHJvcHMyLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXMgPSBfdGhpcyRwcm9wczIuYXV0b0ZvY3VzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczIuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gX3RoaXMkcHJvcHMyLmNsYXNzTmFtZSxcbiAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBfdGhpcyRwcm9wczIuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHMyLmRpc2FibGVkLFxuICAgICAgICAgIGVuZEFkb3JubWVudCA9IF90aGlzJHByb3BzMi5lbmRBZG9ybm1lbnQsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wczIuZXJyb3IsXG4gICAgICAgICAgZnVsbFdpZHRoID0gX3RoaXMkcHJvcHMyLmZ1bGxXaWR0aCxcbiAgICAgICAgICBpZCA9IF90aGlzJHByb3BzMi5pZCxcbiAgICAgICAgICBpbnB1dENvbXBvbmVudCA9IF90aGlzJHByb3BzMi5pbnB1dENvbXBvbmVudCxcbiAgICAgICAgICBfdGhpcyRwcm9wczIkaW5wdXRQcm8gPSBfdGhpcyRwcm9wczIuaW5wdXRQcm9wcztcbiAgICAgIF90aGlzJHByb3BzMiRpbnB1dFBybyA9IF90aGlzJHByb3BzMiRpbnB1dFBybyA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkaW5wdXRQcm87XG4gICAgICB2YXIgaW5wdXRQcm9wc0NsYXNzTmFtZSA9IF90aGlzJHByb3BzMiRpbnB1dFByby5jbGFzc05hbWUsXG4gICAgICAgICAgaW5wdXRQcm9wc1Byb3AgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wczIkaW5wdXRQcm8sIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICAgICAgaW5wdXRSZWYgPSBfdGhpcyRwcm9wczIuaW5wdXRSZWYsXG4gICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMyLm1hcmdpbixcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfdGhpcyRwcm9wczIubXVsdGlsaW5lLFxuICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczIubmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczIub25CbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uQ2hhbmdlLFxuICAgICAgICAgIG9uQ2xpY2sgPSBfdGhpcyRwcm9wczIub25DbGljayxcbiAgICAgICAgICBvbkVtcHR5ID0gX3RoaXMkcHJvcHMyLm9uRW1wdHksXG4gICAgICAgICAgb25GaWxsZWQgPSBfdGhpcyRwcm9wczIub25GaWxsZWQsXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJHByb3BzMi5vbkZvY3VzLFxuICAgICAgICAgIG9uS2V5RG93biA9IF90aGlzJHByb3BzMi5vbktleURvd24sXG4gICAgICAgICAgb25LZXlVcCA9IF90aGlzJHByb3BzMi5vbktleVVwLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3RoaXMkcHJvcHMyLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMyLnJlYWRPbmx5LFxuICAgICAgICAgIHJlbmRlclByZWZpeCA9IF90aGlzJHByb3BzMi5yZW5kZXJQcmVmaXgsXG4gICAgICAgICAgcm93cyA9IF90aGlzJHByb3BzMi5yb3dzLFxuICAgICAgICAgIHJvd3NNYXggPSBfdGhpcyRwcm9wczIucm93c01heCxcbiAgICAgICAgICBzdGFydEFkb3JubWVudCA9IF90aGlzJHByb3BzMi5zdGFydEFkb3JubWVudCxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMyLnR5cGUsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczIudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wczIsIFtcImF1dG9Db21wbGV0ZVwiLCBcImF1dG9Gb2N1c1wiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJkaXNhYmxlZFwiLCBcImVuZEFkb3JubWVudFwiLCBcImVycm9yXCIsIFwiZnVsbFdpZHRoXCIsIFwiaWRcIiwgXCJpbnB1dENvbXBvbmVudFwiLCBcImlucHV0UHJvcHNcIiwgXCJpbnB1dFJlZlwiLCBcIm1hcmdpblwiLCBcIm11bHRpbGluZVwiLCBcIm5hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkNoYW5nZVwiLCBcIm9uQ2xpY2tcIiwgXCJvbkVtcHR5XCIsIFwib25GaWxsZWRcIiwgXCJvbkZvY3VzXCIsIFwib25LZXlEb3duXCIsIFwib25LZXlVcFwiLCBcInBsYWNlaG9sZGVyXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJQcmVmaXhcIiwgXCJyb3dzXCIsIFwicm93c01heFwiLCBcInN0YXJ0QWRvcm5tZW50XCIsIFwidHlwZVwiLCBcInZhbHVlXCJdKTtcbiAgICAgIHZhciBtdWlGb3JtQ29udHJvbCA9IHRoaXMuY29udGV4dC5tdWlGb3JtQ29udHJvbDtcbiAgICAgIHZhciBmY3MgPSBmb3JtQ29udHJvbFN0YXRlKHtcbiAgICAgICAgcHJvcHM6IHRoaXMucHJvcHMsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgICAgc3RhdGVzOiBbJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ21hcmdpbicsICdyZXF1aXJlZCcsICdmaWxsZWQnXVxuICAgICAgfSk7XG4gICAgICB2YXIgZm9jdXNlZCA9IG11aUZvcm1Db250cm9sID8gbXVpRm9ybUNvbnRyb2wuZm9jdXNlZCA6IHRoaXMuc3RhdGUuZm9jdXNlZDtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5kaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmVycm9yLCBmY3MuZXJyb3IpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mdWxsV2lkdGgsIGZ1bGxXaWR0aCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZvY3VzZWQsIGZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb3JtQ29udHJvbCwgbXVpRm9ybUNvbnRyb2wpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm11bHRpbGluZSwgbXVsdGlsaW5lKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuYWRvcm5lZFN0YXJ0LCBzdGFydEFkb3JubWVudCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmFkb3JuZWRFbmQsIGVuZEFkb3JubWVudCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gICAgICB2YXIgaW5wdXRDbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5pbnB1dCwgKF9jbGFzc05hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuZGlzYWJsZWQsIGZjcy5kaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dFR5cGUsIHR5cGUgIT09ICd0ZXh0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dFR5cGVTZWFyY2gsIHR5cGUgPT09ICdzZWFyY2gnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmlucHV0TXVsdGlsaW5lLCBtdWx0aWxpbmUpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRNYXJnaW5EZW5zZSwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5pbnB1dEFkb3JuZWRTdGFydCwgc3RhcnRBZG9ybm1lbnQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuaW5wdXRBZG9ybmVkRW5kLCBlbmRBZG9ybm1lbnQpLCBfY2xhc3NOYW1lczIpLCBpbnB1dFByb3BzQ2xhc3NOYW1lKTtcbiAgICAgIHZhciBJbnB1dENvbXBvbmVudCA9IGlucHV0Q29tcG9uZW50O1xuICAgICAgdmFyIGlucHV0UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBpbnB1dFByb3BzUHJvcCwge1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlUmVmSW5wdXRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIElucHV0Q29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpbnB1dFByb3BzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgLy8gUmVuYW1lIHJlZiB0byBpbnB1dFJlZiBhcyB3ZSBkb24ndCBrbm93IHRoZVxuICAgICAgICAgIC8vIHByb3ZpZGVkIGBpbnB1dENvbXBvbmVudGAgc3RydWN0dXJlLlxuICAgICAgICAgIGlucHV0UmVmOiB0aGlzLmhhbmRsZVJlZklucHV0LFxuICAgICAgICAgIHR5cGU6IHR5cGVcbiAgICAgICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgICAgIHJlZjogbnVsbFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobXVsdGlsaW5lKSB7XG4gICAgICAgIGlmIChyb3dzICYmICFyb3dzTWF4KSB7XG4gICAgICAgICAgSW5wdXRDb21wb25lbnQgPSAndGV4dGFyZWEnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlucHV0UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIHJvd3NNYXg6IHJvd3NNYXgsXG4gICAgICAgICAgICB0ZXh0YXJlYVJlZjogdGhpcy5oYW5kbGVSZWZJbnB1dFxuICAgICAgICAgIH0sIGlucHV0UHJvcHMsIHtcbiAgICAgICAgICAgIHJlZjogbnVsbFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIElucHV0Q29tcG9uZW50ID0gX1RleHRhcmVhLmRlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICB0eXBlOiB0eXBlXG4gICAgICAgIH0sIGlucHV0UHJvcHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2tcbiAgICAgIH0sIG90aGVyKSwgcmVuZGVyUHJlZml4ID8gcmVuZGVyUHJlZml4KCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGZjcywge1xuICAgICAgICBzdGFydEFkb3JubWVudDogc3RhcnRBZG9ybm1lbnQsXG4gICAgICAgIGZvY3VzZWQ6IGZvY3VzZWRcbiAgICAgIH0pKSA6IG51bGwsIHN0YXJ0QWRvcm5tZW50LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgXCJhcmlhLWludmFsaWRcIjogZmNzLmVycm9yLFxuICAgICAgICBhdXRvQ29tcGxldGU6IGF1dG9Db21wbGV0ZSxcbiAgICAgICAgYXV0b0ZvY3VzOiBhdXRvRm9jdXMsXG4gICAgICAgIGNsYXNzTmFtZTogaW5wdXRDbGFzc05hbWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICBkaXNhYmxlZDogZmNzLmRpc2FibGVkLFxuICAgICAgICBpZDogaWQsXG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uRm9jdXM6IHRoaXMuaGFuZGxlRm9jdXMsXG4gICAgICAgIG9uS2V5RG93bjogb25LZXlEb3duLFxuICAgICAgICBvbktleVVwOiBvbktleVVwLFxuICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgICAgcmVxdWlyZWQ6IGZjcy5yZXF1aXJlZCxcbiAgICAgICAgcm93czogcm93cyxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9LCBpbnB1dFByb3BzKSksIGVuZEFkb3JubWVudCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJbnB1dEJhc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbklucHV0QmFzZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IGhlcmU6XG4gICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgaW5wdXQgdmFsdWUsIHVzZWZ1bCB3aGVuIG5vdCBjb250cm9sbGluZyB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBuYXRpdmUgaW5wdXQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgbXVsdGlsaW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FbXB0eTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRmlsbGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVuZGVyUHJlZml4OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBpbnB1dCBlbGVtZW50LiBJdCBzaG91bGQgYmUgYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xdKSldKVxufSA6IHt9O1xuSW5wdXRCYXNlLmRlZmF1bHRQcm9wcyA9IHtcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgaW5wdXRDb21wb25lbnQ6ICdpbnB1dCcsXG4gIG11bHRpbGluZTogZmFsc2UsXG4gIHR5cGU6ICd0ZXh0J1xufTtcbklucHV0QmFzZS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aUZvcm1Db250cm9sOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuSW5wdXRCYXNlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSW5wdXRCYXNlJ1xufSkoSW5wdXRCYXNlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVQYXRoID0gZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzWzJdO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cblxuICBpZiAocGF0aCA9PSBudWxsKSByZXR1cm4gcGFyZW50O1xuXG4gIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aChwYXRoLCB7IGVuZDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSxcbiAgICAgIHJlID0gX2NvbXBpbGVQYXRoLnJlLFxuICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuXG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuXG4gIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCwgLy8gdGhlIHBhdGggcGF0dGVybiB1c2VkIHRvIG1hdGNoXG4gICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgaXNFeGFjdDogaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVHlwb2dyYXBoeS5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UeXBvZ3JhcGh5XCIpKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLl9fUmV3aXJlQVBJX18gPSBleHBvcnRzLl9fUmVzZXREZXBlbmRlbmN5X18gPSBleHBvcnRzLl9fc2V0X18gPSBleHBvcnRzLl9fUmV3aXJlX18gPSBleHBvcnRzLl9fR2V0RGVwZW5kZW5jeV9fID0gZXhwb3J0cy5fX2dldF9fID0gZXhwb3J0cy5jcmVhdGVNYXRjaFNlbGVjdG9yID0gZXhwb3J0cy5nZXRBY3Rpb24gPSBleHBvcnRzLmdldExvY2F0aW9uID0gZXhwb3J0cy5yb3V0ZXJNaWRkbGV3YXJlID0gZXhwb3J0cy5jb25uZWN0Um91dGVyID0gZXhwb3J0cy5Db25uZWN0ZWRSb3V0ZXIgPSBleHBvcnRzLnJvdXRlckFjdGlvbnMgPSBleHBvcnRzLmdvRm9yd2FyZCA9IGV4cG9ydHMuZ29CYWNrID0gZXhwb3J0cy5nbyA9IGV4cG9ydHMucmVwbGFjZSA9IGV4cG9ydHMucHVzaCA9IGV4cG9ydHMuQ0FMTF9ISVNUT1JZX01FVEhPRCA9IGV4cG9ydHMuTE9DQVRJT05fQ0hBTkdFID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQWxsID0gcmVxdWlyZSgnLi9jcmVhdGVBbGwnKTtcblxudmFyIF9jcmVhdGVBbGwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQWxsKTtcblxudmFyIF9wbGFpbiA9IHJlcXVpcmUoJy4vc3RydWN0dXJlL3BsYWluJyk7XG5cbnZhciBfcGxhaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxhaW4pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgX2dldF9fMiA9IF9nZXRfXygnY3JlYXRlQWxsJykoX2dldF9fKCdwbGFpblN0cnVjdHVyZScpKTtcblxudmFyIExPQ0FUSU9OX0NIQU5HRSA9IF9nZXRfXzIuTE9DQVRJT05fQ0hBTkdFLFxuICAgIENBTExfSElTVE9SWV9NRVRIT0QgPSBfZ2V0X18yLkNBTExfSElTVE9SWV9NRVRIT0QsXG4gICAgcHVzaCA9IF9nZXRfXzIucHVzaCxcbiAgICByZXBsYWNlID0gX2dldF9fMi5yZXBsYWNlLFxuICAgIGdvID0gX2dldF9fMi5nbyxcbiAgICBnb0JhY2sgPSBfZ2V0X18yLmdvQmFjayxcbiAgICBnb0ZvcndhcmQgPSBfZ2V0X18yLmdvRm9yd2FyZCxcbiAgICByb3V0ZXJBY3Rpb25zID0gX2dldF9fMi5yb3V0ZXJBY3Rpb25zLFxuICAgIENvbm5lY3RlZFJvdXRlciA9IF9nZXRfXzIuQ29ubmVjdGVkUm91dGVyLFxuICAgIGNvbm5lY3RSb3V0ZXIgPSBfZ2V0X18yLmNvbm5lY3RSb3V0ZXIsXG4gICAgcm91dGVyTWlkZGxld2FyZSA9IF9nZXRfXzIucm91dGVyTWlkZGxld2FyZSxcbiAgICBnZXRMb2NhdGlvbiA9IF9nZXRfXzIuZ2V0TG9jYXRpb24sXG4gICAgZ2V0QWN0aW9uID0gX2dldF9fMi5nZXRBY3Rpb24sXG4gICAgY3JlYXRlTWF0Y2hTZWxlY3RvciA9IF9nZXRfXzIuY3JlYXRlTWF0Y2hTZWxlY3RvcjtcbmV4cG9ydHMuTE9DQVRJT05fQ0hBTkdFID0gTE9DQVRJT05fQ0hBTkdFO1xuZXhwb3J0cy5DQUxMX0hJU1RPUllfTUVUSE9EID0gQ0FMTF9ISVNUT1JZX01FVEhPRDtcbmV4cG9ydHMucHVzaCA9IHB1c2g7XG5leHBvcnRzLnJlcGxhY2UgPSByZXBsYWNlO1xuZXhwb3J0cy5nbyA9IGdvO1xuZXhwb3J0cy5nb0JhY2sgPSBnb0JhY2s7XG5leHBvcnRzLmdvRm9yd2FyZCA9IGdvRm9yd2FyZDtcbmV4cG9ydHMucm91dGVyQWN0aW9ucyA9IHJvdXRlckFjdGlvbnM7XG5leHBvcnRzLkNvbm5lY3RlZFJvdXRlciA9IENvbm5lY3RlZFJvdXRlcjtcbmV4cG9ydHMuY29ubmVjdFJvdXRlciA9IGNvbm5lY3RSb3V0ZXI7XG5leHBvcnRzLnJvdXRlck1pZGRsZXdhcmUgPSByb3V0ZXJNaWRkbGV3YXJlO1xuZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGdldExvY2F0aW9uO1xuZXhwb3J0cy5nZXRBY3Rpb24gPSBnZXRBY3Rpb247XG5leHBvcnRzLmNyZWF0ZU1hdGNoU2VsZWN0b3IgPSBjcmVhdGVNYXRjaFNlbGVjdG9yO1xuXG5mdW5jdGlvbiBfZ2V0R2xvYmFsT2JqZWN0KCkge1xuICB0cnkge1xuICAgIGlmICghIWdsb2JhbCkge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCEhd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG59XG5cbjtcbnZhciBfUmV3aXJlTW9kdWxlSWRfXyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVNb2R1bGVJZF9fKCkge1xuICBpZiAoX1Jld2lyZU1vZHVsZUlkX18gPT09IG51bGwpIHtcbiAgICB2YXIgZ2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgICBpZiAoIWdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18pIHtcbiAgICAgIGdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18gPSAwO1xuICAgIH1cblxuICAgIF9SZXdpcmVNb2R1bGVJZF9fID0gX18kJEdMT0JBTF9SRVdJUkVfTkVYVF9NT0RVTEVfSURfXysrO1xuICB9XG5cbiAgcmV0dXJuIF9SZXdpcmVNb2R1bGVJZF9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXykge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIF9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX187XG59XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVkRGF0YV9fKCkge1xuICB2YXIgbW9kdWxlSWQgPSBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpO1xuXG4gIHZhciByZWdpc3RyeSA9IF9nZXRSZXdpcmVSZWdpc3RyeV9fKCk7XG5cbiAgdmFyIHJld2lyZURhdGEgPSByZWdpc3RyeVttb2R1bGVJZF07XG5cbiAgaWYgKCFyZXdpcmVEYXRhKSB7XG4gICAgcmVnaXN0cnlbbW9kdWxlSWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuICB9XG5cbiAgcmV0dXJuIHJld2lyZURhdGE7XG59XG5cbihmdW5jdGlvbiByZWdpc3RlclJlc2V0QWxsKCkge1xuICB2YXIgdGhlR2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgaWYgKCF0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSkge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlWydfX3Jld2lyZV9yZXNldF9hbGxfXyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxudmFyIElOVEVOVElPTkFMX1VOREVGSU5FRCA9ICdfX0lOVEVOVElPTkFMX1VOREVGSU5FRF9fJztcbnZhciBfUmV3aXJlQVBJX18gPSB7fTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0FQSU9iamVjdChuYW1lLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfUmV3aXJlQVBJX18sIG5hbWUsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19HZXREZXBlbmRlbmN5X18nLCBfZ2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fcmVzZXRfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX193aXRoX18nLCBfd2l0aF9fKTtcbn0pKCk7XG5cbmZ1bmN0aW9uIF9nZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmIChyZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFsdWUgPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgICBpZiAodmFsdWUgPT09IElOVEVOVElPTkFMX1VOREVGSU5FRCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7XG4gICAgY2FzZSAnY3JlYXRlQWxsJzpcbiAgICAgIHJldHVybiBfY3JlYXRlQWxsMi5kZWZhdWx0O1xuXG4gICAgY2FzZSAncGxhaW5TdHJ1Y3R1cmUnOlxuICAgICAgcmV0dXJuIF9wbGFpbjIuZGVmYXVsdDtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NpZ25fXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfc2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lLCBfdmFsdWUpIHtcbiAgc3dpdGNoICh2YXJpYWJsZU5hbWUpIHt9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3VwZGF0ZV9vcGVyYXRpb25fXyhvcGVyYXRpb24sIHZhcmlhYmxlTmFtZSwgcHJlZml4KSB7XG4gIHZhciBvbGRWYWx1ZSA9IF9nZXRfXyh2YXJpYWJsZU5hbWUpO1xuXG4gIHZhciBuZXdWYWx1ZSA9IG9wZXJhdGlvbiA9PT0gJysrJyA/IG9sZFZhbHVlICsgMSA6IG9sZFZhbHVlIC0gMTtcblxuICBfYXNzaWduX18odmFyaWFibGVOYW1lLCBuZXdWYWx1ZSk7XG5cbiAgcmV0dXJuIHByZWZpeCA/IG5ld1ZhbHVlIDogb2xkVmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9zZXRfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAoKHR5cGVvZiB2YXJpYWJsZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhcmlhYmxlTmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlTmFtZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVtuYW1lXSA9IHZhcmlhYmxlTmFtZVtuYW1lXTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gSU5URU5USU9OQUxfVU5ERUZJTkVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3Jlc2V0X18odmFyaWFibGVOYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNldF9fKHZhcmlhYmxlTmFtZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgZGVsZXRlIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcblxuICBpZiAoT2JqZWN0LmtleXMocmV3aXJlRGF0YSkubGVuZ3RoID09IDApIHtcbiAgICBkZWxldGUgX2dldFJld2lyZVJlZ2lzdHJ5X18oKVtfZ2V0UmV3aXJlTW9kdWxlSWRfX107XG4gIH1cblxuICA7XG59XG5cbmZ1bmN0aW9uIF93aXRoX18ob2JqZWN0KSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICB2YXIgcmV3aXJlZFZhcmlhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgcHJldmlvdXNWYWx1ZXMgPSB7fTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gb2JqZWN0W3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG5cbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlc3VsdC50aGVuKHJlc2V0KS5jYXRjaChyZXNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0cy5fX2dldF9fID0gX2dldF9fO1xuZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19SZXdpcmVfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19zZXRfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IF9yZXNldF9fO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gX1Jld2lyZUFQSV9fO1xuZXhwb3J0cy5kZWZhdWx0ID0gX1Jld2lyZUFQSV9fOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0FwcEJhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9BcHBCYXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FwcEJhclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVG9vbGJhci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Ub29sYmFyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub29sYmFyXCIpKTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpOyIsIi8vIHZpbTp0cz00OnN0cz00OnN3PTQ6XG4vKiFcbiAqXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDEyIEtyaXMgS293YWwgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBNSVRcbiAqIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvcmF3L21hc3Rlci9MSUNFTlNFXG4gKlxuICogV2l0aCBwYXJ0cyBieSBUeWxlciBDbG9zZVxuICogQ29weXJpZ2h0IDIwMDctMjAwOSBUeWxlciBDbG9zZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBYIGxpY2Vuc2UgZm91bmRcbiAqIGF0IGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UuaHRtbFxuICogRm9ya2VkIGF0IHJlZl9zZW5kLmpzIHZlcnNpb246IDIwMDktMDUtMTFcbiAqXG4gKiBXaXRoIHBhcnRzIGJ5IE1hcmsgTWlsbGVyXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTEgR29vZ2xlIEluYy5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICAvLyBUaGlzIGZpbGUgd2lsbCBmdW5jdGlvbiBwcm9wZXJseSBhcyBhIDxzY3JpcHQ+IHRhZywgb3IgYSBtb2R1bGVcbiAgICAvLyB1c2luZyBDb21tb25KUyBhbmQgTm9kZUpTIG9yIFJlcXVpcmVKUyBtb2R1bGUgZm9ybWF0cy4gIEluXG4gICAgLy8gQ29tbW9uL05vZGUvUmVxdWlyZUpTLCB0aGUgbW9kdWxlIGV4cG9ydHMgdGhlIFEgQVBJIGFuZCB3aGVuXG4gICAgLy8gZXhlY3V0ZWQgYXMgYSBzaW1wbGUgPHNjcmlwdD4sIGl0IGNyZWF0ZXMgYSBRIGdsb2JhbCBpbnN0ZWFkLlxuXG4gICAgLy8gTW9udGFnZSBSZXF1aXJlXG4gICAgaWYgKHR5cGVvZiBib290c3RyYXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBib290c3RyYXAoXCJwcm9taXNlXCIsIGRlZmluaXRpb24pO1xuXG4gICAgLy8gQ29tbW9uSlNcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7XG5cbiAgICAvLyBSZXF1aXJlSlNcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShkZWZpbml0aW9uKTtcblxuICAgIC8vIFNFUyAoU2VjdXJlIEVjbWFTY3JpcHQpXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICghc2VzLm9rKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlcy5tYWtlUSA9IGRlZmluaXRpb247XG4gICAgICAgIH1cblxuICAgIC8vIDxzY3JpcHQ+XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIC8vIFByZWZlciB3aW5kb3cgb3ZlciBzZWxmIGZvciBhZGQtb24gc2NyaXB0cy4gVXNlIHNlbGYgZm9yXG4gICAgICAgIC8vIG5vbi13aW5kb3dlZCBjb250ZXh0cy5cbiAgICAgICAgdmFyIGdsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiBzZWxmO1xuXG4gICAgICAgIC8vIEdldCB0aGUgYHdpbmRvd2Agb2JqZWN0LCBzYXZlIHRoZSBwcmV2aW91cyBRIGdsb2JhbFxuICAgICAgICAvLyBhbmQgaW5pdGlhbGl6ZSBRIGFzIGEgZ2xvYmFsLlxuICAgICAgICB2YXIgcHJldmlvdXNRID0gZ2xvYmFsLlE7XG4gICAgICAgIGdsb2JhbC5RID0gZGVmaW5pdGlvbigpO1xuXG4gICAgICAgIC8vIEFkZCBhIG5vQ29uZmxpY3QgZnVuY3Rpb24gc28gUSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZVxuICAgICAgICAvLyBnbG9iYWwgbmFtZXNwYWNlLlxuICAgICAgICBnbG9iYWwuUS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsLlEgPSBwcmV2aW91c1E7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgZW52aXJvbm1lbnQgd2FzIG5vdCBhbnRpY2lwYXRlZCBieSBRLiBQbGVhc2UgZmlsZSBhIGJ1Zy5cIik7XG4gICAgfVxuXG59KShmdW5jdGlvbiAoKSB7XG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGhhc1N0YWNrcyA9IGZhbHNlO1xudHJ5IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbn0gY2F0Y2ggKGUpIHtcbiAgICBoYXNTdGFja3MgPSAhIWUuc3RhY2s7XG59XG5cbi8vIEFsbCBjb2RlIGFmdGVyIHRoaXMgcG9pbnQgd2lsbCBiZSBmaWx0ZXJlZCBmcm9tIHN0YWNrIHRyYWNlcyByZXBvcnRlZFxuLy8gYnkgUS5cbnZhciBxU3RhcnRpbmdMaW5lID0gY2FwdHVyZUxpbmUoKTtcbnZhciBxRmlsZU5hbWU7XG5cbi8vIHNoaW1zXG5cbi8vIHVzZWQgZm9yIGZhbGxiYWNrIGluIFwiYWxsUmVzb2x2ZWRcIlxudmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gVXNlIHRoZSBmYXN0ZXN0IHBvc3NpYmxlIG1lYW5zIHRvIGV4ZWN1dGUgYSB0YXNrIGluIGEgZnV0dXJlIHR1cm5cbi8vIG9mIHRoZSBldmVudCBsb29wLlxudmFyIG5leHRUaWNrID0oZnVuY3Rpb24gKCkge1xuICAgIC8vIGxpbmtlZCBsaXN0IG9mIHRhc2tzIChzaW5nbGUsIHdpdGggaGVhZCBub2RlKVxuICAgIHZhciBoZWFkID0ge3Rhc2s6IHZvaWQgMCwgbmV4dDogbnVsbH07XG4gICAgdmFyIHRhaWwgPSBoZWFkO1xuICAgIHZhciBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHZhciByZXF1ZXN0VGljayA9IHZvaWQgMDtcbiAgICB2YXIgaXNOb2RlSlMgPSBmYWxzZTtcbiAgICAvLyBxdWV1ZSBmb3IgbGF0ZSB0YXNrcywgdXNlZCBieSB1bmhhbmRsZWQgcmVqZWN0aW9uIHRyYWNraW5nXG4gICAgdmFyIGxhdGVyUXVldWUgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICAvKiBqc2hpbnQgbG9vcGZ1bmM6IHRydWUgKi9cbiAgICAgICAgdmFyIHRhc2ssIGRvbWFpbjtcblxuICAgICAgICB3aGlsZSAoaGVhZC5uZXh0KSB7XG4gICAgICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgICAgICAgdGFzayA9IGhlYWQudGFzaztcbiAgICAgICAgICAgIGhlYWQudGFzayA9IHZvaWQgMDtcbiAgICAgICAgICAgIGRvbWFpbiA9IGhlYWQuZG9tYWluO1xuXG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgaGVhZC5kb21haW4gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBydW5TaW5nbGUodGFzaywgZG9tYWluKTtcblxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsYXRlclF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdGFzayA9IGxhdGVyUXVldWUucG9wKCk7XG4gICAgICAgICAgICBydW5TaW5nbGUodGFzayk7XG4gICAgICAgIH1cbiAgICAgICAgZmx1c2hpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgLy8gcnVucyBhIHNpbmdsZSBmdW5jdGlvbiBpbiB0aGUgYXN5bmMgcXVldWVcbiAgICBmdW5jdGlvbiBydW5TaW5nbGUodGFzaywgZG9tYWluKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0YXNrKCk7XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGlzTm9kZUpTKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gbm9kZSwgdW5jYXVnaHQgZXhjZXB0aW9ucyBhcmUgY29uc2lkZXJlZCBmYXRhbCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgLy8gUmUtdGhyb3cgdGhlbSBzeW5jaHJvbm91c2x5IHRvIGludGVycnVwdCBmbHVzaGluZyFcblxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSBjb250aW51YXRpb24gaWYgdGhlIHVuY2F1Z2h0IGV4Y2VwdGlvbiBpcyBzdXBwcmVzc2VkXG4gICAgICAgICAgICAgICAgLy8gbGlzdGVuaW5nIFwidW5jYXVnaHRFeGNlcHRpb25cIiBldmVudHMgKGFzIGRvbWFpbnMgZG9lcykuXG4gICAgICAgICAgICAgICAgLy8gQ29udGludWUgaW4gbmV4dCBldmVudCB0byBhdm9pZCB0aWNrIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZmx1c2gsIDApO1xuICAgICAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJbiBicm93c2VycywgdW5jYXVnaHQgZXhjZXB0aW9ucyBhcmUgbm90IGZhdGFsLlxuICAgICAgICAgICAgICAgIC8vIFJlLXRocm93IHRoZW0gYXN5bmNocm9ub3VzbHkgdG8gYXZvaWQgc2xvdy1kb3ducy5cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0VGljayA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHRhaWwgPSB0YWlsLm5leHQgPSB7XG4gICAgICAgICAgICB0YXNrOiB0YXNrLFxuICAgICAgICAgICAgZG9tYWluOiBpc05vZGVKUyAmJiBwcm9jZXNzLmRvbWFpbixcbiAgICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICAgICAgICBmbHVzaGluZyA9IHRydWU7XG4gICAgICAgICAgICByZXF1ZXN0VGljaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBwcm9jZXNzLnRvU3RyaW5nKCkgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiICYmIHByb2Nlc3MubmV4dFRpY2spIHtcbiAgICAgICAgLy8gRW5zdXJlIFEgaXMgaW4gYSByZWFsIE5vZGUgZW52aXJvbm1lbnQsIHdpdGggYSBgcHJvY2Vzcy5uZXh0VGlja2AuXG4gICAgICAgIC8vIFRvIHNlZSB0aHJvdWdoIGZha2UgTm9kZSBlbnZpcm9ubWVudHM6XG4gICAgICAgIC8vICogTW9jaGEgdGVzdCBydW5uZXIgLSBleHBvc2VzIGEgYHByb2Nlc3NgIGdsb2JhbCB3aXRob3V0IGEgYG5leHRUaWNrYFxuICAgICAgICAvLyAqIEJyb3dzZXJpZnkgLSBleHBvc2VzIGEgYHByb2Nlc3MubmV4VGlja2AgZnVuY3Rpb24gdGhhdCB1c2VzXG4gICAgICAgIC8vICAgYHNldFRpbWVvdXRgLiBJbiB0aGlzIGNhc2UgYHNldEltbWVkaWF0ZWAgaXMgcHJlZmVycmVkIGJlY2F1c2VcbiAgICAgICAgLy8gICAgaXQgaXMgZmFzdGVyLiBCcm93c2VyaWZ5J3MgYHByb2Nlc3MudG9TdHJpbmcoKWAgeWllbGRzXG4gICAgICAgIC8vICAgXCJbb2JqZWN0IE9iamVjdF1cIiwgd2hpbGUgaW4gYSByZWFsIE5vZGUgZW52aXJvbm1lbnRcbiAgICAgICAgLy8gICBgcHJvY2Vzcy5uZXh0VGljaygpYCB5aWVsZHMgXCJbb2JqZWN0IHByb2Nlc3NdXCIuXG4gICAgICAgIGlzTm9kZUpTID0gdHJ1ZTtcblxuICAgICAgICByZXF1ZXN0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgLy8gSW4gSUUxMCwgTm9kZS5qcyAwLjkrLCBvciBodHRwczovL2dpdGh1Yi5jb20vTm9ibGVKUy9zZXRJbW1lZGlhdGVcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJlcXVlc3RUaWNrID0gc2V0SW1tZWRpYXRlLmJpbmQod2luZG93LCBmbHVzaCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXF1ZXN0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZXRJbW1lZGlhdGUoZmx1c2gpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgLy8gbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIC8vIGh0dHA6Ly93d3cubm9uYmxvY2tpbmcuaW8vMjAxMS8wNi93aW5kb3duZXh0dGljay5odG1sXG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIC8vIEF0IGxlYXN0IFNhZmFyaSBWZXJzaW9uIDYuMC41ICg4NTM2LjMwLjEpIGludGVybWl0dGVudGx5IGNhbm5vdCBjcmVhdGVcbiAgICAgICAgLy8gd29ya2luZyBtZXNzYWdlIHBvcnRzIHRoZSBmaXJzdCB0aW1lIGEgcGFnZSBsb2Fkcy5cbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXF1ZXN0VGljayA9IHJlcXVlc3RQb3J0VGljaztcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZmx1c2g7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVxdWVzdFBvcnRUaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gT3BlcmEgcmVxdWlyZXMgdXMgdG8gcHJvdmlkZSBhIG1lc3NhZ2UgcGF5bG9hZCwgcmVnYXJkbGVzcyBvZlxuICAgICAgICAgICAgLy8gd2hldGhlciB3ZSB1c2UgaXQuXG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0VGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZmx1c2gsIDApO1xuICAgICAgICAgICAgcmVxdWVzdFBvcnRUaWNrKCk7XG4gICAgICAgIH07XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvbGQgYnJvd3NlcnNcbiAgICAgICAgcmVxdWVzdFRpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZsdXNoLCAwKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gcnVucyBhIHRhc2sgYWZ0ZXIgYWxsIG90aGVyIHRhc2tzIGhhdmUgYmVlbiBydW5cbiAgICAvLyB0aGlzIGlzIHVzZWZ1bCBmb3IgdW5oYW5kbGVkIHJlamVjdGlvbiB0cmFja2luZyB0aGF0IG5lZWRzIHRvIGhhcHBlblxuICAgIC8vIGFmdGVyIGFsbCBgdGhlbmBkIHRhc2tzIGhhdmUgYmVlbiBydW4uXG4gICAgbmV4dFRpY2sucnVuQWZ0ZXIgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICBsYXRlclF1ZXVlLnB1c2godGFzayk7XG4gICAgICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgICAgICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlcXVlc3RUaWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBuZXh0VGljaztcbn0pKCk7XG5cbi8vIEF0dGVtcHQgdG8gbWFrZSBnZW5lcmljcyBzYWZlIGluIHRoZSBmYWNlIG9mIGRvd25zdHJlYW1cbi8vIG1vZGlmaWNhdGlvbnMuXG4vLyBUaGVyZSBpcyBubyBzaXR1YXRpb24gd2hlcmUgdGhpcyBpcyBuZWNlc3NhcnkuXG4vLyBJZiB5b3UgbmVlZCBhIHNlY3VyaXR5IGd1YXJhbnRlZSwgdGhlc2UgcHJpbW9yZGlhbHMgbmVlZCB0byBiZVxuLy8gZGVlcGx5IGZyb3plbiBhbnl3YXksIGFuZCBpZiB5b3UgZG9u4oCZdCBuZWVkIGEgc2VjdXJpdHkgZ3VhcmFudGVlLFxuLy8gdGhpcyBpcyBqdXN0IHBsYWluIHBhcmFub2lkLlxuLy8gSG93ZXZlciwgdGhpcyAqKm1pZ2h0KiogaGF2ZSB0aGUgbmljZSBzaWRlLWVmZmVjdCBvZiByZWR1Y2luZyB0aGUgc2l6ZSBvZlxuLy8gdGhlIG1pbmlmaWVkIGNvZGUgYnkgcmVkdWNpbmcgeC5jYWxsKCkgdG8gbWVyZWx5IHgoKVxuLy8gU2VlIE1hcmsgTWlsbGVy4oCZcyBleHBsYW5hdGlvbiBvZiB3aGF0IHRoaXMgZG9lcy5cbi8vIGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWNvbnZlbnRpb25zOnNhZmVfbWV0YV9wcm9ncmFtbWluZ1xudmFyIGNhbGwgPSBGdW5jdGlvbi5jYWxsO1xuZnVuY3Rpb24gdW5jdXJyeVRoaXMoZikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjYWxsLmFwcGx5KGYsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cbi8vIFRoaXMgaXMgZXF1aXZhbGVudCwgYnV0IHNsb3dlcjpcbi8vIHVuY3VycnlUaGlzID0gRnVuY3Rpb25fYmluZC5iaW5kKEZ1bmN0aW9uX2JpbmQuY2FsbCk7XG4vLyBodHRwOi8vanNwZXJmLmNvbS91bmN1cnJ5dGhpc1xuXG52YXIgYXJyYXlfc2xpY2UgPSB1bmN1cnJ5VGhpcyhBcnJheS5wcm90b3R5cGUuc2xpY2UpO1xuXG52YXIgYXJyYXlfcmVkdWNlID0gdW5jdXJyeVRoaXMoXG4gICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSB8fCBmdW5jdGlvbiAoY2FsbGJhY2ssIGJhc2lzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgLy8gY29uY2VybmluZyB0aGUgaW5pdGlhbCB2YWx1ZSwgaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gc2VlayB0byB0aGUgZmlyc3QgdmFsdWUgaW4gdGhlIGFycmF5LCBhY2NvdW50aW5nXG4gICAgICAgICAgICAvLyBmb3IgdGhlIHBvc3NpYmlsaXR5IHRoYXQgaXMgaXMgYSBzcGFyc2UgYXJyYXlcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggaW4gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICBiYXNpcyA9IHRoaXNbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKytpbmRleCA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKDEpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlZHVjZVxuICAgICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIC8vIGFjY291bnQgZm9yIHRoZSBwb3NzaWJpbGl0eSB0aGF0IHRoZSBhcnJheSBpcyBzcGFyc2VcbiAgICAgICAgICAgIGlmIChpbmRleCBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgICAgYmFzaXMgPSBjYWxsYmFjayhiYXNpcywgdGhpc1tpbmRleF0sIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzaXM7XG4gICAgfVxuKTtcblxudmFyIGFycmF5X2luZGV4T2YgPSB1bmN1cnJ5VGhpcyhcbiAgICBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gbm90IGEgdmVyeSBnb29kIHNoaW0sIGJ1dCBnb29kIGVub3VnaCBmb3Igb3VyIG9uZSB1c2Ugb2YgaXRcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuKTtcblxudmFyIGFycmF5X21hcCA9IHVuY3VycnlUaGlzKFxuICAgIEFycmF5LnByb3RvdHlwZS5tYXAgfHwgZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzcCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjb2xsZWN0ID0gW107XG4gICAgICAgIGFycmF5X3JlZHVjZShzZWxmLCBmdW5jdGlvbiAodW5kZWZpbmVkLCB2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGNvbGxlY3QucHVzaChjYWxsYmFjay5jYWxsKHRoaXNwLCB2YWx1ZSwgaW5kZXgsIHNlbGYpKTtcbiAgICAgICAgfSwgdm9pZCAwKTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Q7XG4gICAgfVxuKTtcblxudmFyIG9iamVjdF9jcmVhdGUgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIChwcm90b3R5cGUpIHtcbiAgICBmdW5jdGlvbiBUeXBlKCkgeyB9XG4gICAgVHlwZS5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgcmV0dXJuIG5ldyBUeXBlKCk7XG59O1xuXG52YXIgb2JqZWN0X2hhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG5cbnZhciBvYmplY3Rfa2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdF9oYXNPd25Qcm9wZXJ0eShvYmplY3QsIGtleSkpIHtcbiAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufTtcblxudmFyIG9iamVjdF90b1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gT2JqZWN0KHZhbHVlKTtcbn1cblxuLy8gZ2VuZXJhdG9yIHJlbGF0ZWQgc2hpbXNcblxuLy8gRklYTUU6IFJlbW92ZSB0aGlzIGZ1bmN0aW9uIG9uY2UgRVM2IGdlbmVyYXRvcnMgYXJlIGluIFNwaWRlck1vbmtleS5cbmZ1bmN0aW9uIGlzU3RvcEl0ZXJhdGlvbihleGNlcHRpb24pIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBvYmplY3RfdG9TdHJpbmcoZXhjZXB0aW9uKSA9PT0gXCJbb2JqZWN0IFN0b3BJdGVyYXRpb25dXCIgfHxcbiAgICAgICAgZXhjZXB0aW9uIGluc3RhbmNlb2YgUVJldHVyblZhbHVlXG4gICAgKTtcbn1cblxuLy8gRklYTUU6IFJlbW92ZSB0aGlzIGhlbHBlciBhbmQgUS5yZXR1cm4gb25jZSBFUzYgZ2VuZXJhdG9ycyBhcmUgaW5cbi8vIFNwaWRlck1vbmtleS5cbnZhciBRUmV0dXJuVmFsdWU7XG5pZiAodHlwZW9mIFJldHVyblZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgUVJldHVyblZhbHVlID0gUmV0dXJuVmFsdWU7XG59IGVsc2Uge1xuICAgIFFSZXR1cm5WYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfTtcbn1cblxuLy8gbG9uZyBzdGFjayB0cmFjZXNcblxudmFyIFNUQUNLX0pVTVBfU0VQQVJBVE9SID0gXCJGcm9tIHByZXZpb3VzIGV2ZW50OlwiO1xuXG5mdW5jdGlvbiBtYWtlU3RhY2tUcmFjZUxvbmcoZXJyb3IsIHByb21pc2UpIHtcbiAgICAvLyBJZiBwb3NzaWJsZSwgdHJhbnNmb3JtIHRoZSBlcnJvciBzdGFjayB0cmFjZSBieSByZW1vdmluZyBOb2RlIGFuZCBRXG4gICAgLy8gY3J1ZnQsIHRoZW4gY29uY2F0ZW5hdGluZyB3aXRoIHRoZSBzdGFjayB0cmFjZSBvZiBgcHJvbWlzZWAuIFNlZSAjNTcuXG4gICAgaWYgKGhhc1N0YWNrcyAmJlxuICAgICAgICBwcm9taXNlLnN0YWNrICYmXG4gICAgICAgIHR5cGVvZiBlcnJvciA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBlcnJvciAhPT0gbnVsbCAmJlxuICAgICAgICBlcnJvci5zdGFjayAmJlxuICAgICAgICBlcnJvci5zdGFjay5pbmRleE9mKFNUQUNLX0pVTVBfU0VQQVJBVE9SKSA9PT0gLTFcbiAgICApIHtcbiAgICAgICAgdmFyIHN0YWNrcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBwID0gcHJvbWlzZTsgISFwOyBwID0gcC5zb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChwLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnVuc2hpZnQocC5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2tzLnVuc2hpZnQoZXJyb3Iuc3RhY2spO1xuXG4gICAgICAgIHZhciBjb25jYXRlZFN0YWNrcyA9IHN0YWNrcy5qb2luKFwiXFxuXCIgKyBTVEFDS19KVU1QX1NFUEFSQVRPUiArIFwiXFxuXCIpO1xuICAgICAgICBlcnJvci5zdGFjayA9IGZpbHRlclN0YWNrU3RyaW5nKGNvbmNhdGVkU3RhY2tzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlclN0YWNrU3RyaW5nKHN0YWNrU3RyaW5nKSB7XG4gICAgdmFyIGxpbmVzID0gc3RhY2tTdHJpbmcuc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIGRlc2lyZWRMaW5lcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcblxuICAgICAgICBpZiAoIWlzSW50ZXJuYWxGcmFtZShsaW5lKSAmJiAhaXNOb2RlRnJhbWUobGluZSkgJiYgbGluZSkge1xuICAgICAgICAgICAgZGVzaXJlZExpbmVzLnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc2lyZWRMaW5lcy5qb2luKFwiXFxuXCIpO1xufVxuXG5mdW5jdGlvbiBpc05vZGVGcmFtZShzdGFja0xpbmUpIHtcbiAgICByZXR1cm4gc3RhY2tMaW5lLmluZGV4T2YoXCIobW9kdWxlLmpzOlwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgc3RhY2tMaW5lLmluZGV4T2YoXCIobm9kZS5qczpcIikgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBnZXRGaWxlTmFtZUFuZExpbmVOdW1iZXIoc3RhY2tMaW5lKSB7XG4gICAgLy8gTmFtZWQgZnVuY3Rpb25zOiBcImF0IGZ1bmN0aW9uTmFtZSAoZmlsZW5hbWU6bGluZU51bWJlcjpjb2x1bW5OdW1iZXIpXCJcbiAgICAvLyBJbiBJRTEwIGZ1bmN0aW9uIG5hbWUgY2FuIGhhdmUgc3BhY2VzIChcIkFub255bW91cyBmdW5jdGlvblwiKSBPX29cbiAgICB2YXIgYXR0ZW1wdDEgPSAvYXQgLisgXFwoKC4rKTooXFxkKyk6KD86XFxkKylcXCkkLy5leGVjKHN0YWNrTGluZSk7XG4gICAgaWYgKGF0dGVtcHQxKSB7XG4gICAgICAgIHJldHVybiBbYXR0ZW1wdDFbMV0sIE51bWJlcihhdHRlbXB0MVsyXSldO1xuICAgIH1cblxuICAgIC8vIEFub255bW91cyBmdW5jdGlvbnM6IFwiYXQgZmlsZW5hbWU6bGluZU51bWJlcjpjb2x1bW5OdW1iZXJcIlxuICAgIHZhciBhdHRlbXB0MiA9IC9hdCAoW14gXSspOihcXGQrKTooPzpcXGQrKSQvLmV4ZWMoc3RhY2tMaW5lKTtcbiAgICBpZiAoYXR0ZW1wdDIpIHtcbiAgICAgICAgcmV0dXJuIFthdHRlbXB0MlsxXSwgTnVtYmVyKGF0dGVtcHQyWzJdKV07XG4gICAgfVxuXG4gICAgLy8gRmlyZWZveCBzdHlsZTogXCJmdW5jdGlvbkBmaWxlbmFtZTpsaW5lTnVtYmVyIG9yIEBmaWxlbmFtZTpsaW5lTnVtYmVyXCJcbiAgICB2YXIgYXR0ZW1wdDMgPSAvLipAKC4rKTooXFxkKykkLy5leGVjKHN0YWNrTGluZSk7XG4gICAgaWYgKGF0dGVtcHQzKSB7XG4gICAgICAgIHJldHVybiBbYXR0ZW1wdDNbMV0sIE51bWJlcihhdHRlbXB0M1syXSldO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNJbnRlcm5hbEZyYW1lKHN0YWNrTGluZSkge1xuICAgIHZhciBmaWxlTmFtZUFuZExpbmVOdW1iZXIgPSBnZXRGaWxlTmFtZUFuZExpbmVOdW1iZXIoc3RhY2tMaW5lKTtcblxuICAgIGlmICghZmlsZU5hbWVBbmRMaW5lTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlsZU5hbWUgPSBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMF07XG4gICAgdmFyIGxpbmVOdW1iZXIgPSBmaWxlTmFtZUFuZExpbmVOdW1iZXJbMV07XG5cbiAgICByZXR1cm4gZmlsZU5hbWUgPT09IHFGaWxlTmFtZSAmJlxuICAgICAgICBsaW5lTnVtYmVyID49IHFTdGFydGluZ0xpbmUgJiZcbiAgICAgICAgbGluZU51bWJlciA8PSBxRW5kaW5nTGluZTtcbn1cblxuLy8gZGlzY292ZXIgb3duIGZpbGUgbmFtZSBhbmQgbGluZSBudW1iZXIgcmFuZ2UgZm9yIGZpbHRlcmluZyBzdGFja1xuLy8gdHJhY2VzXG5mdW5jdGlvbiBjYXB0dXJlTGluZSgpIHtcbiAgICBpZiAoIWhhc1N0YWNrcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgbGluZXMgPSBlLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICB2YXIgZmlyc3RMaW5lID0gbGluZXNbMF0uaW5kZXhPZihcIkBcIikgPiAwID8gbGluZXNbMV0gOiBsaW5lc1syXTtcbiAgICAgICAgdmFyIGZpbGVOYW1lQW5kTGluZU51bWJlciA9IGdldEZpbGVOYW1lQW5kTGluZU51bWJlcihmaXJzdExpbmUpO1xuICAgICAgICBpZiAoIWZpbGVOYW1lQW5kTGluZU51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcUZpbGVOYW1lID0gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzBdO1xuICAgICAgICByZXR1cm4gZmlsZU5hbWVBbmRMaW5lTnVtYmVyWzFdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKGNhbGxiYWNrLCBuYW1lLCBhbHRlcm5hdGl2ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUud2FybiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4obmFtZSArIFwiIGlzIGRlcHJlY2F0ZWQsIHVzZSBcIiArIGFsdGVybmF0aXZlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIiBpbnN0ZWFkLlwiLCBuZXcgRXJyb3IoXCJcIikuc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseShjYWxsYmFjaywgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vLyBlbmQgb2Ygc2hpbXNcbi8vIGJlZ2lubmluZyBvZiByZWFsIHdvcmtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgcHJvbWlzZSBmb3IgYW4gaW1tZWRpYXRlIHJlZmVyZW5jZSwgcGFzc2VzIHByb21pc2VzIHRocm91Z2gsIG9yXG4gKiBjb2VyY2VzIHByb21pc2VzIGZyb20gZGlmZmVyZW50IHN5c3RlbXMuXG4gKiBAcGFyYW0gdmFsdWUgaW1tZWRpYXRlIHJlZmVyZW5jZSBvciBwcm9taXNlXG4gKi9cbmZ1bmN0aW9uIFEodmFsdWUpIHtcbiAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgYSBQcm9taXNlLCByZXR1cm4gaXQgZGlyZWN0bHkuICBUaGlzIGVuYWJsZXNcbiAgICAvLyB0aGUgcmVzb2x2ZSBmdW5jdGlvbiB0byBib3RoIGJlIHVzZWQgdG8gY3JlYXRlZCByZWZlcmVuY2VzIGZyb20gb2JqZWN0cyxcbiAgICAvLyBidXQgdG8gdG9sZXJhYmx5IGNvZXJjZSBub24tcHJvbWlzZXMgdG8gcHJvbWlzZXMuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYXNzaW1pbGF0ZSB0aGVuYWJsZXNcbiAgICBpZiAoaXNQcm9taXNlQWxpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBjb2VyY2UodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdWxmaWxsKHZhbHVlKTtcbiAgICB9XG59XG5RLnJlc29sdmUgPSBRO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgdGFzayBpbiBhIGZ1dHVyZSB0dXJuIG9mIHRoZSBldmVudCBsb29wLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdGFza1xuICovXG5RLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbi8qKlxuICogQ29udHJvbHMgd2hldGhlciBvciBub3QgbG9uZyBzdGFjayB0cmFjZXMgd2lsbCBiZSBvblxuICovXG5RLmxvbmdTdGFja1N1cHBvcnQgPSBmYWxzZTtcblxuLy8gZW5hYmxlIGxvbmcgc3RhY2tzIGlmIFFfREVCVUcgaXMgc2V0XG5pZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2VzcyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5RX0RFQlVHKSB7XG4gICAgUS5sb25nU3RhY2tTdXBwb3J0ID0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEge3Byb21pc2UsIHJlc29sdmUsIHJlamVjdH0gb2JqZWN0LlxuICpcbiAqIGByZXNvbHZlYCBpcyBhIGNhbGxiYWNrIHRvIGludm9rZSB3aXRoIGEgbW9yZSByZXNvbHZlZCB2YWx1ZSBmb3IgdGhlXG4gKiBwcm9taXNlLiBUbyBmdWxmaWxsIHRoZSBwcm9taXNlLCBpbnZva2UgYHJlc29sdmVgIHdpdGggYW55IHZhbHVlIHRoYXQgaXNcbiAqIG5vdCBhIHRoZW5hYmxlLiBUbyByZWplY3QgdGhlIHByb21pc2UsIGludm9rZSBgcmVzb2x2ZWAgd2l0aCBhIHJlamVjdGVkXG4gKiB0aGVuYWJsZSwgb3IgaW52b2tlIGByZWplY3RgIHdpdGggdGhlIHJlYXNvbiBkaXJlY3RseS4gVG8gcmVzb2x2ZSB0aGVcbiAqIHByb21pc2UgdG8gYW5vdGhlciB0aGVuYWJsZSwgdGh1cyBwdXR0aW5nIGl0IGluIHRoZSBzYW1lIHN0YXRlLCBpbnZva2VcbiAqIGByZXNvbHZlYCB3aXRoIHRoYXQgb3RoZXIgdGhlbmFibGUuXG4gKi9cblEuZGVmZXIgPSBkZWZlcjtcbmZ1bmN0aW9uIGRlZmVyKCkge1xuICAgIC8vIGlmIFwibWVzc2FnZXNcIiBpcyBhbiBcIkFycmF5XCIsIHRoYXQgaW5kaWNhdGVzIHRoYXQgdGhlIHByb21pc2UgaGFzIG5vdCB5ZXRcbiAgICAvLyBiZWVuIHJlc29sdmVkLiAgSWYgaXQgaXMgXCJ1bmRlZmluZWRcIiwgaXQgaGFzIGJlZW4gcmVzb2x2ZWQuICBFYWNoXG4gICAgLy8gZWxlbWVudCBvZiB0aGUgbWVzc2FnZXMgYXJyYXkgaXMgaXRzZWxmIGFuIGFycmF5IG9mIGNvbXBsZXRlIGFyZ3VtZW50cyB0b1xuICAgIC8vIGZvcndhcmQgdG8gdGhlIHJlc29sdmVkIHByb21pc2UuICBXZSBjb2VyY2UgdGhlIHJlc29sdXRpb24gdmFsdWUgdG8gYVxuICAgIC8vIHByb21pc2UgdXNpbmcgdGhlIGByZXNvbHZlYCBmdW5jdGlvbiBiZWNhdXNlIGl0IGhhbmRsZXMgYm90aCBmdWxseVxuICAgIC8vIG5vbi10aGVuYWJsZSB2YWx1ZXMgYW5kIG90aGVyIHRoZW5hYmxlcyBncmFjZWZ1bGx5LlxuICAgIHZhciBtZXNzYWdlcyA9IFtdLCBwcm9ncmVzc0xpc3RlbmVycyA9IFtdLCByZXNvbHZlZFByb21pc2U7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBvYmplY3RfY3JlYXRlKGRlZmVyLnByb3RvdHlwZSk7XG4gICAgdmFyIHByb21pc2UgPSBvYmplY3RfY3JlYXRlKFByb21pc2UucHJvdG90eXBlKTtcblxuICAgIHByb21pc2UucHJvbWlzZURpc3BhdGNoID0gZnVuY3Rpb24gKHJlc29sdmUsIG9wLCBvcGVyYW5kcykge1xuICAgICAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChtZXNzYWdlcykge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaChhcmdzKTtcbiAgICAgICAgICAgIGlmIChvcCA9PT0gXCJ3aGVuXCIgJiYgb3BlcmFuZHNbMV0pIHsgLy8gcHJvZ3Jlc3Mgb3BlcmFuZFxuICAgICAgICAgICAgICAgIHByb2dyZXNzTGlzdGVuZXJzLnB1c2gob3BlcmFuZHNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgUS5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRQcm9taXNlLnByb21pc2VEaXNwYXRjaC5hcHBseShyZXNvbHZlZFByb21pc2UsIGFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gWFhYIGRlcHJlY2F0ZWRcbiAgICBwcm9taXNlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChtZXNzYWdlcykge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5lYXJlclZhbHVlID0gbmVhcmVyKHJlc29sdmVkUHJvbWlzZSk7XG4gICAgICAgIGlmIChpc1Byb21pc2UobmVhcmVyVmFsdWUpKSB7XG4gICAgICAgICAgICByZXNvbHZlZFByb21pc2UgPSBuZWFyZXJWYWx1ZTsgLy8gc2hvcnRlbiBjaGFpblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZWFyZXJWYWx1ZTtcbiAgICB9O1xuXG4gICAgcHJvbWlzZS5pbnNwZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdGU6IFwicGVuZGluZ1wiIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc29sdmVkUHJvbWlzZS5pbnNwZWN0KCk7XG4gICAgfTtcblxuICAgIGlmIChRLmxvbmdTdGFja1N1cHBvcnQgJiYgaGFzU3RhY2tzKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gTk9URTogZG9uJ3QgdHJ5IHRvIHVzZSBgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2VgIG9yIHRyYW5zZmVyIHRoZVxuICAgICAgICAgICAgLy8gYWNjZXNzb3IgYXJvdW5kOyB0aGF0IGNhdXNlcyBtZW1vcnkgbGVha3MgYXMgcGVyIEdILTExMS4gSnVzdFxuICAgICAgICAgICAgLy8gcmVpZnkgdGhlIHN0YWNrIHRyYWNlIGFzIGEgc3RyaW5nIEFTQVAuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gQXQgdGhlIHNhbWUgdGltZSwgY3V0IG9mZiB0aGUgZmlyc3QgbGluZTsgaXQncyBhbHdheXMganVzdFxuICAgICAgICAgICAgLy8gXCJbb2JqZWN0IFByb21pc2VdXFxuXCIsIGFzIHBlciB0aGUgYHRvU3RyaW5nYC5cbiAgICAgICAgICAgIHByb21pc2Uuc3RhY2sgPSBlLnN0YWNrLnN1YnN0cmluZyhlLnN0YWNrLmluZGV4T2YoXCJcXG5cIikgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5PVEU6IHdlIGRvIHRoZSBjaGVja3MgZm9yIGByZXNvbHZlZFByb21pc2VgIGluIGVhY2ggbWV0aG9kLCBpbnN0ZWFkIG9mXG4gICAgLy8gY29uc29saWRhdGluZyB0aGVtIGludG8gYGJlY29tZWAsIHNpbmNlIG90aGVyd2lzZSB3ZSdkIGNyZWF0ZSBuZXdcbiAgICAvLyBwcm9taXNlcyB3aXRoIHRoZSBsaW5lcyBgYmVjb21lKHdoYXRldmVyKHZhbHVlKSlgLiBTZWUgZS5nLiBHSC0yNTIuXG5cbiAgICBmdW5jdGlvbiBiZWNvbWUobmV3UHJvbWlzZSkge1xuICAgICAgICByZXNvbHZlZFByb21pc2UgPSBuZXdQcm9taXNlO1xuICAgICAgICBwcm9taXNlLnNvdXJjZSA9IG5ld1Byb21pc2U7XG5cbiAgICAgICAgYXJyYXlfcmVkdWNlKG1lc3NhZ2VzLCBmdW5jdGlvbiAodW5kZWZpbmVkLCBtZXNzYWdlKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBuZXdQcm9taXNlLnByb21pc2VEaXNwYXRjaC5hcHBseShuZXdQcm9taXNlLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCB2b2lkIDApO1xuXG4gICAgICAgIG1lc3NhZ2VzID0gdm9pZCAwO1xuICAgICAgICBwcm9ncmVzc0xpc3RlbmVycyA9IHZvaWQgMDtcbiAgICB9XG5cbiAgICBkZWZlcnJlZC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJlY29tZShRKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIGRlZmVycmVkLmZ1bGZpbGwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKGZ1bGZpbGwodmFsdWUpKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgaWYgKHJlc29sdmVkUHJvbWlzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYmVjb21lKHJlamVjdChyZWFzb24pKTtcbiAgICB9O1xuICAgIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uIChwcm9ncmVzcykge1xuICAgICAgICBpZiAocmVzb2x2ZWRQcm9taXNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhcnJheV9yZWR1Y2UocHJvZ3Jlc3NMaXN0ZW5lcnMsIGZ1bmN0aW9uICh1bmRlZmluZWQsIHByb2dyZXNzTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzTGlzdGVuZXIocHJvZ3Jlc3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIHZvaWQgMCk7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZlcnJlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgTm9kZS1zdHlsZSBjYWxsYmFjayB0aGF0IHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIGRlZmVycmVkXG4gKiBwcm9taXNlLlxuICogQHJldHVybnMgYSBub2RlYmFja1xuICovXG5kZWZlci5wcm90b3R5cGUubWFrZU5vZGVSZXNvbHZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZWxmLnJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZShhcnJheV9zbGljZShhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXG4gKiBAcGFyYW0gcmVzb2x2ZXIge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBub3RoaW5nIGFuZCBhY2NlcHRzXG4gKiB0aGUgcmVzb2x2ZSwgcmVqZWN0LCBhbmQgbm90aWZ5IGZ1bmN0aW9ucyBmb3IgYSBkZWZlcnJlZC5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IG1heSBiZSByZXNvbHZlZCB3aXRoIHRoZSBnaXZlbiByZXNvbHZlIGFuZCByZWplY3RcbiAqIGZ1bmN0aW9ucywgb3IgcmVqZWN0ZWQgYnkgYSB0aHJvd24gZXhjZXB0aW9uIGluIHJlc29sdmVyXG4gKi9cblEuUHJvbWlzZSA9IHByb21pc2U7IC8vIEVTNlxuUS5wcm9taXNlID0gcHJvbWlzZTtcbmZ1bmN0aW9uIHByb21pc2UocmVzb2x2ZXIpIHtcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XG4gICAgfVxuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZXIoZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0LCBkZWZlcnJlZC5ub3RpZnkpO1xuICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbnByb21pc2UucmFjZSA9IHJhY2U7IC8vIEVTNlxucHJvbWlzZS5hbGwgPSBhbGw7IC8vIEVTNlxucHJvbWlzZS5yZWplY3QgPSByZWplY3Q7IC8vIEVTNlxucHJvbWlzZS5yZXNvbHZlID0gUTsgLy8gRVM2XG5cbi8vIFhYWCBleHBlcmltZW50YWwuICBUaGlzIG1ldGhvZCBpcyBhIHdheSB0byBkZW5vdGUgdGhhdCBhIGxvY2FsIHZhbHVlIGlzXG4vLyBzZXJpYWxpemFibGUgYW5kIHNob3VsZCBiZSBpbW1lZGlhdGVseSBkaXNwYXRjaGVkIHRvIGEgcmVtb3RlIHVwb24gcmVxdWVzdCxcbi8vIGluc3RlYWQgb2YgcGFzc2luZyBhIHJlZmVyZW5jZS5cblEucGFzc0J5Q29weSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAvL2ZyZWV6ZShvYmplY3QpO1xuICAgIC8vcGFzc0J5Q29waWVzLnNldChvYmplY3QsIHRydWUpO1xuICAgIHJldHVybiBvYmplY3Q7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5wYXNzQnlDb3B5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vZnJlZXplKG9iamVjdCk7XG4gICAgLy9wYXNzQnlDb3BpZXMuc2V0KG9iamVjdCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIElmIHR3byBwcm9taXNlcyBldmVudHVhbGx5IGZ1bGZpbGwgdG8gdGhlIHNhbWUgdmFsdWUsIHByb21pc2VzIHRoYXQgdmFsdWUsXG4gKiBidXQgb3RoZXJ3aXNlIHJlamVjdHMuXG4gKiBAcGFyYW0geCB7QW55Kn1cbiAqIEBwYXJhbSB5IHtBbnkqfVxuICogQHJldHVybnMge0FueSp9IGEgcHJvbWlzZSBmb3IgeCBhbmQgeSBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgYnV0IGEgcmVqZWN0aW9uXG4gKiBvdGhlcndpc2UuXG4gKlxuICovXG5RLmpvaW4gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIHJldHVybiBRKHgpLmpvaW4oeSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgICByZXR1cm4gUShbdGhpcywgdGhhdF0pLnNwcmVhZChmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAgICAgLy8gVE9ETzogXCI9PT1cIiBzaG91bGQgYmUgT2JqZWN0LmlzIG9yIGVxdWl2XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGpvaW46IG5vdCB0aGUgc2FtZTogXCIgKyB4ICsgXCIgXCIgKyB5KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIGZpcnN0IG9mIGFuIGFycmF5IG9mIHByb21pc2VzIHRvIGJlY29tZSBzZXR0bGVkLlxuICogQHBhcmFtIGFuc3dlcnMge0FycmF5W0FueSpdfSBwcm9taXNlcyB0byByYWNlXG4gKiBAcmV0dXJucyB7QW55Kn0gdGhlIGZpcnN0IHByb21pc2UgdG8gYmUgc2V0dGxlZFxuICovXG5RLnJhY2UgPSByYWNlO1xuZnVuY3Rpb24gcmFjZShhbnN3ZXJQcykge1xuICAgIHJldHVybiBwcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHRoaXMgb25jZSB3ZSBjYW4gYXNzdW1lIGF0IGxlYXN0IEVTNVxuICAgICAgICAvLyBhbnN3ZXJQcy5mb3JFYWNoKGZ1bmN0aW9uIChhbnN3ZXJQKSB7XG4gICAgICAgIC8vICAgICBRKGFuc3dlclApLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIFVzZSB0aGlzIGluIHRoZSBtZWFudGltZVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYW5zd2VyUHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIFEoYW5zd2VyUHNbaV0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5yYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oUS5yYWNlKTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIFByb21pc2Ugd2l0aCBhIHByb21pc2UgZGVzY3JpcHRvciBvYmplY3QgYW5kIG9wdGlvbmFsIGZhbGxiYWNrXG4gKiBmdW5jdGlvbi4gIFRoZSBkZXNjcmlwdG9yIGNvbnRhaW5zIG1ldGhvZHMgbGlrZSB3aGVuKHJlamVjdGVkKSwgZ2V0KG5hbWUpLFxuICogc2V0KG5hbWUsIHZhbHVlKSwgcG9zdChuYW1lLCBhcmdzKSwgYW5kIGRlbGV0ZShuYW1lKSwgd2hpY2ggYWxsXG4gKiByZXR1cm4gZWl0aGVyIGEgdmFsdWUsIGEgcHJvbWlzZSBmb3IgYSB2YWx1ZSwgb3IgYSByZWplY3Rpb24uICBUaGUgZmFsbGJhY2tcbiAqIGFjY2VwdHMgdGhlIG9wZXJhdGlvbiBuYW1lLCBhIHJlc29sdmVyLCBhbmQgYW55IGZ1cnRoZXIgYXJndW1lbnRzIHRoYXQgd291bGRcbiAqIGhhdmUgYmVlbiBmb3J3YXJkZWQgdG8gdGhlIGFwcHJvcHJpYXRlIG1ldGhvZCBhYm92ZSBoYWQgYSBtZXRob2QgYmVlblxuICogcHJvdmlkZWQgd2l0aCB0aGUgcHJvcGVyIG5hbWUuICBUaGUgQVBJIG1ha2VzIG5vIGd1YXJhbnRlZXMgYWJvdXQgdGhlIG5hdHVyZVxuICogb2YgdGhlIHJldHVybmVkIG9iamVjdCwgYXBhcnQgZnJvbSB0aGF0IGl0IGlzIHVzYWJsZSB3aGVyZWV2ZXIgcHJvbWlzZXMgYXJlXG4gKiBib3VnaHQgYW5kIHNvbGQuXG4gKi9cblEubWFrZVByb21pc2UgPSBQcm9taXNlO1xuZnVuY3Rpb24gUHJvbWlzZShkZXNjcmlwdG9yLCBmYWxsYmFjaywgaW5zcGVjdCkge1xuICAgIGlmIChmYWxsYmFjayA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGZhbGxiYWNrID0gZnVuY3Rpb24gKG9wKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIlByb21pc2UgZG9lcyBub3Qgc3VwcG9ydCBvcGVyYXRpb246IFwiICsgb3BcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5zcGVjdCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGluc3BlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge3N0YXRlOiBcInVua25vd25cIn07XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2UgPSBvYmplY3RfY3JlYXRlKFByb21pc2UucHJvdG90eXBlKTtcblxuICAgIHByb21pc2UucHJvbWlzZURpc3BhdGNoID0gZnVuY3Rpb24gKHJlc29sdmUsIG9wLCBhcmdzKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRvcltvcF0pIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBkZXNjcmlwdG9yW29wXS5hcHBseShwcm9taXNlLCBhcmdzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZmFsbGJhY2suY2FsbChwcm9taXNlLCBvcCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwcm9taXNlLmluc3BlY3QgPSBpbnNwZWN0O1xuXG4gICAgLy8gWFhYIGRlcHJlY2F0ZWQgYHZhbHVlT2ZgIGFuZCBgZXhjZXB0aW9uYCBzdXBwb3J0XG4gICAgaWYgKGluc3BlY3QpIHtcbiAgICAgICAgdmFyIGluc3BlY3RlZCA9IGluc3BlY3QoKTtcbiAgICAgICAgaWYgKGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiKSB7XG4gICAgICAgICAgICBwcm9taXNlLmV4Y2VwdGlvbiA9IGluc3BlY3RlZC5yZWFzb247XG4gICAgICAgIH1cblxuICAgICAgICBwcm9taXNlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW5zcGVjdGVkID0gaW5zcGVjdCgpO1xuICAgICAgICAgICAgaWYgKGluc3BlY3RlZC5zdGF0ZSA9PT0gXCJwZW5kaW5nXCIgfHxcbiAgICAgICAgICAgICAgICBpbnNwZWN0ZWQuc3RhdGUgPT09IFwicmVqZWN0ZWRcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RlZC52YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBQcm9taXNlXVwiO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzc2VkKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIGRvbmUgPSBmYWxzZTsgICAvLyBlbnN1cmUgdGhlIHVudHJ1c3RlZCBwcm9taXNlIG1ha2VzIGF0IG1vc3QgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2luZ2xlIGNhbGwgdG8gb25lIG9mIHRoZSBjYWxsYmFja3NcblxuICAgIGZ1bmN0aW9uIF9mdWxmaWxsZWQodmFsdWUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZnVsZmlsbGVkID09PSBcImZ1bmN0aW9uXCIgPyBmdWxmaWxsZWQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChleGNlcHRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3JlamVjdGVkKGV4Y2VwdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIHJlamVjdGVkID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIG1ha2VTdGFja1RyYWNlTG9uZyhleGNlcHRpb24sIHNlbGYpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0ZWQoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKG5ld0V4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobmV3RXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gX3Byb2dyZXNzZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwcm9ncmVzc2VkID09PSBcImZ1bmN0aW9uXCIgPyBwcm9ncmVzc2VkKHZhbHVlKSA6IHZhbHVlO1xuICAgIH1cblxuICAgIFEubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLnByb21pc2VEaXNwYXRjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoX2Z1bGZpbGxlZCh2YWx1ZSkpO1xuICAgICAgICB9LCBcIndoZW5cIiwgW2Z1bmN0aW9uIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoX3JlamVjdGVkKGV4Y2VwdGlvbikpO1xuICAgICAgICB9XSk7XG4gICAgfSk7XG5cbiAgICAvLyBQcm9ncmVzcyBwcm9wYWdhdG9yIG5lZWQgdG8gYmUgYXR0YWNoZWQgaW4gdGhlIGN1cnJlbnQgdGljay5cbiAgICBzZWxmLnByb21pc2VEaXNwYXRjaCh2b2lkIDAsIFwid2hlblwiLCBbdm9pZCAwLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlO1xuICAgICAgICB2YXIgdGhyZXcgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gX3Byb2dyZXNzZWQodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJldyA9IHRydWU7XG4gICAgICAgICAgICBpZiAoUS5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgUS5vbmVycm9yKGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aHJldykge1xuICAgICAgICAgICAgZGVmZXJyZWQubm90aWZ5KG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuUS50YXAgPSBmdW5jdGlvbiAocHJvbWlzZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gUShwcm9taXNlKS50YXAoY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBXb3JrcyBhbG1vc3QgbGlrZSBcImZpbmFsbHlcIiwgYnV0IG5vdCBjYWxsZWQgZm9yIHJlamVjdGlvbnMuXG4gKiBPcmlnaW5hbCByZXNvbHV0aW9uIHZhbHVlIGlzIHBhc3NlZCB0aHJvdWdoIGNhbGxiYWNrIHVuYWZmZWN0ZWQuXG4gKiBDYWxsYmFjayBtYXkgcmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgYXdhaXRlZCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge1EuUHJvbWlzZX1cbiAqIEBleGFtcGxlXG4gKiBkb1NvbWV0aGluZygpXG4gKiAgIC50aGVuKC4uLilcbiAqICAgLnRhcChjb25zb2xlLmxvZylcbiAqICAgLnRoZW4oLi4uKTtcbiAqL1xuUHJvbWlzZS5wcm90b3R5cGUudGFwID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sgPSBRKGNhbGxiYWNrKTtcblxuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5mY2FsbCh2YWx1ZSkudGhlblJlc29sdmUodmFsdWUpO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlcnMgYW4gb2JzZXJ2ZXIgb24gYSBwcm9taXNlLlxuICpcbiAqIEd1YXJhbnRlZXM6XG4gKlxuICogMS4gdGhhdCBmdWxmaWxsZWQgYW5kIHJlamVjdGVkIHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZS5cbiAqIDIuIHRoYXQgZWl0aGVyIHRoZSBmdWxmaWxsZWQgY2FsbGJhY2sgb3IgdGhlIHJlamVjdGVkIGNhbGxiYWNrIHdpbGwgYmVcbiAqICAgIGNhbGxlZCwgYnV0IG5vdCBib3RoLlxuICogMy4gdGhhdCBmdWxmaWxsZWQgYW5kIHJlamVjdGVkIHdpbGwgbm90IGJlIGNhbGxlZCBpbiB0aGlzIHR1cm4uXG4gKlxuICogQHBhcmFtIHZhbHVlICAgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIHRvIG9ic2VydmVcbiAqIEBwYXJhbSBmdWxmaWxsZWQgIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBmdWxmaWxsZWQgdmFsdWVcbiAqIEBwYXJhbSByZWplY3RlZCAgIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSByZWplY3Rpb24gZXhjZXB0aW9uXG4gKiBAcGFyYW0gcHJvZ3Jlc3NlZCBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gYW55IHByb2dyZXNzIG5vdGlmaWNhdGlvbnNcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZSBmcm9tIHRoZSBpbnZva2VkIGNhbGxiYWNrXG4gKi9cblEud2hlbiA9IHdoZW47XG5mdW5jdGlvbiB3aGVuKHZhbHVlLCBmdWxmaWxsZWQsIHJlamVjdGVkLCBwcm9ncmVzc2VkKSB7XG4gICAgcmV0dXJuIFEodmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3NlZCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLnRoZW5SZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZTsgfSk7XG59O1xuXG5RLnRoZW5SZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHZhbHVlKSB7XG4gICAgcmV0dXJuIFEocHJvbWlzZSkudGhlblJlc29sdmUodmFsdWUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlblJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgcmVhc29uOyB9KTtcbn07XG5cblEudGhlblJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCByZWFzb24pIHtcbiAgICByZXR1cm4gUShwcm9taXNlKS50aGVuUmVqZWN0KHJlYXNvbik7XG59O1xuXG4vKipcbiAqIElmIGFuIG9iamVjdCBpcyBub3QgYSBwcm9taXNlLCBpdCBpcyBhcyBcIm5lYXJcIiBhcyBwb3NzaWJsZS5cbiAqIElmIGEgcHJvbWlzZSBpcyByZWplY3RlZCwgaXQgaXMgYXMgXCJuZWFyXCIgYXMgcG9zc2libGUgdG9vLlxuICogSWYgaXTigJlzIGEgZnVsZmlsbGVkIHByb21pc2UsIHRoZSBmdWxmaWxsbWVudCB2YWx1ZSBpcyBuZWFyZXIuXG4gKiBJZiBpdOKAmXMgYSBkZWZlcnJlZCBwcm9taXNlIGFuZCB0aGUgZGVmZXJyZWQgaGFzIGJlZW4gcmVzb2x2ZWQsIHRoZVxuICogcmVzb2x1dGlvbiBpcyBcIm5lYXJlclwiLlxuICogQHBhcmFtIG9iamVjdFxuICogQHJldHVybnMgbW9zdCByZXNvbHZlZCAobmVhcmVzdCkgZm9ybSBvZiB0aGUgb2JqZWN0XG4gKi9cblxuLy8gWFhYIHNob3VsZCB3ZSByZS1kbyB0aGlzP1xuUS5uZWFyZXIgPSBuZWFyZXI7XG5mdW5jdGlvbiBuZWFyZXIodmFsdWUpIHtcbiAgICBpZiAoaXNQcm9taXNlKHZhbHVlKSkge1xuICAgICAgICB2YXIgaW5zcGVjdGVkID0gdmFsdWUuaW5zcGVjdCgpO1xuICAgICAgICBpZiAoaW5zcGVjdGVkLnN0YXRlID09PSBcImZ1bGZpbGxlZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5zcGVjdGVkLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSBwcm9taXNlLlxuICogT3RoZXJ3aXNlIGl0IGlzIGEgZnVsZmlsbGVkIHZhbHVlLlxuICovXG5RLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbmZ1bmN0aW9uIGlzUHJvbWlzZShvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgUHJvbWlzZTtcbn1cblxuUS5pc1Byb21pc2VBbGlrZSA9IGlzUHJvbWlzZUFsaWtlO1xuZnVuY3Rpb24gaXNQcm9taXNlQWxpa2Uob2JqZWN0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KG9iamVjdCkgJiYgdHlwZW9mIG9iamVjdC50aGVuID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbi8qKlxuICogQHJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcGVuZGluZyBwcm9taXNlLCBtZWFuaW5nIG5vdFxuICogZnVsZmlsbGVkIG9yIHJlamVjdGVkLlxuICovXG5RLmlzUGVuZGluZyA9IGlzUGVuZGluZztcbmZ1bmN0aW9uIGlzUGVuZGluZyhvYmplY3QpIHtcbiAgICByZXR1cm4gaXNQcm9taXNlKG9iamVjdCkgJiYgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJwZW5kaW5nXCI7XG59XG5cblByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNwZWN0KCkuc3RhdGUgPT09IFwicGVuZGluZ1wiO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSB2YWx1ZSBvciBmdWxmaWxsZWRcbiAqIHByb21pc2UuXG4gKi9cblEuaXNGdWxmaWxsZWQgPSBpc0Z1bGZpbGxlZDtcbmZ1bmN0aW9uIGlzRnVsZmlsbGVkKG9iamVjdCkge1xuICAgIHJldHVybiAhaXNQcm9taXNlKG9iamVjdCkgfHwgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIjtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpLnN0YXRlID09PSBcImZ1bGZpbGxlZFwiO1xufTtcblxuLyoqXG4gKiBAcmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBvYmplY3QgaXMgYSByZWplY3RlZCBwcm9taXNlLlxuICovXG5RLmlzUmVqZWN0ZWQgPSBpc1JlamVjdGVkO1xuZnVuY3Rpb24gaXNSZWplY3RlZChvYmplY3QpIHtcbiAgICByZXR1cm4gaXNQcm9taXNlKG9iamVjdCkgJiYgb2JqZWN0Lmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1JlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmluc3BlY3QoKS5zdGF0ZSA9PT0gXCJyZWplY3RlZFwiO1xufTtcblxuLy8vLyBCRUdJTiBVTkhBTkRMRUQgUkVKRUNUSU9OIFRSQUNLSU5HXG5cbi8vIFRoaXMgcHJvbWlzZSBsaWJyYXJ5IGNvbnN1bWVzIGV4Y2VwdGlvbnMgdGhyb3duIGluIGhhbmRsZXJzIHNvIHRoZXkgY2FuIGJlXG4vLyBoYW5kbGVkIGJ5IGEgc3Vic2VxdWVudCBwcm9taXNlLiAgVGhlIGV4Y2VwdGlvbnMgZ2V0IGFkZGVkIHRvIHRoaXMgYXJyYXkgd2hlblxuLy8gdGhleSBhcmUgY3JlYXRlZCwgYW5kIHJlbW92ZWQgd2hlbiB0aGV5IGFyZSBoYW5kbGVkLiAgTm90ZSB0aGF0IGluIEVTNiBvclxuLy8gc2hpbW1lZCBlbnZpcm9ubWVudHMsIHRoaXMgd291bGQgbmF0dXJhbGx5IGJlIGEgYFNldGAuXG52YXIgdW5oYW5kbGVkUmVhc29ucyA9IFtdO1xudmFyIHVuaGFuZGxlZFJlamVjdGlvbnMgPSBbXTtcbnZhciByZXBvcnRlZFVuaGFuZGxlZFJlamVjdGlvbnMgPSBbXTtcbnZhciB0cmFja1VuaGFuZGxlZFJlamVjdGlvbnMgPSB0cnVlO1xuXG5mdW5jdGlvbiByZXNldFVuaGFuZGxlZFJlamVjdGlvbnMoKSB7XG4gICAgdW5oYW5kbGVkUmVhc29ucy5sZW5ndGggPSAwO1xuICAgIHVuaGFuZGxlZFJlamVjdGlvbnMubGVuZ3RoID0gMDtcblxuICAgIGlmICghdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zKSB7XG4gICAgICAgIHRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0cmFja1JlamVjdGlvbihwcm9taXNlLCByZWFzb24pIHtcbiAgICBpZiAoIXRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcHJvY2Vzcy5lbWl0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgUS5uZXh0VGljay5ydW5BZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoYXJyYXlfaW5kZXhPZih1bmhhbmRsZWRSZWplY3Rpb25zLCBwcm9taXNlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVtaXQoXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgcmVhc29uLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICByZXBvcnRlZFVuaGFuZGxlZFJlamVjdGlvbnMucHVzaChwcm9taXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdW5oYW5kbGVkUmVqZWN0aW9ucy5wdXNoKHByb21pc2UpO1xuICAgIGlmIChyZWFzb24gJiYgdHlwZW9mIHJlYXNvbi5zdGFjayAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICB1bmhhbmRsZWRSZWFzb25zLnB1c2gocmVhc29uLnN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB1bmhhbmRsZWRSZWFzb25zLnB1c2goXCIobm8gc3RhY2spIFwiICsgcmVhc29uKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVudHJhY2tSZWplY3Rpb24ocHJvbWlzZSkge1xuICAgIGlmICghdHJhY2tVbmhhbmRsZWRSZWplY3Rpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYXQgPSBhcnJheV9pbmRleE9mKHVuaGFuZGxlZFJlamVjdGlvbnMsIHByb21pc2UpO1xuICAgIGlmIChhdCAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBwcm9jZXNzLmVtaXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgUS5uZXh0VGljay5ydW5BZnRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0UmVwb3J0ID0gYXJyYXlfaW5kZXhPZihyZXBvcnRlZFVuaGFuZGxlZFJlamVjdGlvbnMsIHByb21pc2UpO1xuICAgICAgICAgICAgICAgIGlmIChhdFJlcG9ydCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KFwicmVqZWN0aW9uSGFuZGxlZFwiLCB1bmhhbmRsZWRSZWFzb25zW2F0XSwgcHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydGVkVW5oYW5kbGVkUmVqZWN0aW9ucy5zcGxpY2UoYXRSZXBvcnQsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHVuaGFuZGxlZFJlamVjdGlvbnMuc3BsaWNlKGF0LCAxKTtcbiAgICAgICAgdW5oYW5kbGVkUmVhc29ucy5zcGxpY2UoYXQsIDEpO1xuICAgIH1cbn1cblxuUS5yZXNldFVuaGFuZGxlZFJlamVjdGlvbnMgPSByZXNldFVuaGFuZGxlZFJlamVjdGlvbnM7XG5cblEuZ2V0VW5oYW5kbGVkUmVhc29ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBNYWtlIGEgY29weSBzbyB0aGF0IGNvbnN1bWVycyBjYW4ndCBpbnRlcmZlcmUgd2l0aCBvdXIgaW50ZXJuYWwgc3RhdGUuXG4gICAgcmV0dXJuIHVuaGFuZGxlZFJlYXNvbnMuc2xpY2UoKTtcbn07XG5cblEuc3RvcFVuaGFuZGxlZFJlamVjdGlvblRyYWNraW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0VW5oYW5kbGVkUmVqZWN0aW9ucygpO1xuICAgIHRyYWNrVW5oYW5kbGVkUmVqZWN0aW9ucyA9IGZhbHNlO1xufTtcblxucmVzZXRVbmhhbmRsZWRSZWplY3Rpb25zKCk7XG5cbi8vLy8gRU5EIFVOSEFORExFRCBSRUpFQ1RJT04gVFJBQ0tJTkdcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgcmVqZWN0ZWQgcHJvbWlzZS5cbiAqIEBwYXJhbSByZWFzb24gdmFsdWUgZGVzY3JpYmluZyB0aGUgZmFpbHVyZVxuICovXG5RLnJlamVjdCA9IHJlamVjdDtcbmZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcmVqZWN0aW9uID0gUHJvbWlzZSh7XG4gICAgICAgIFwid2hlblwiOiBmdW5jdGlvbiAocmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIG5vdGUgdGhhdCB0aGUgZXJyb3IgaGFzIGJlZW4gaGFuZGxlZFxuICAgICAgICAgICAgaWYgKHJlamVjdGVkKSB7XG4gICAgICAgICAgICAgICAgdW50cmFja1JlamVjdGlvbih0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWplY3RlZCA/IHJlamVjdGVkKHJlYXNvbikgOiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwgZnVuY3Rpb24gZmFsbGJhY2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXRlOiBcInJlamVjdGVkXCIsIHJlYXNvbjogcmVhc29uIH07XG4gICAgfSk7XG5cbiAgICAvLyBOb3RlIHRoYXQgdGhlIHJlYXNvbiBoYXMgbm90IGJlZW4gaGFuZGxlZC5cbiAgICB0cmFja1JlamVjdGlvbihyZWplY3Rpb24sIHJlYXNvbik7XG5cbiAgICByZXR1cm4gcmVqZWN0aW9uO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBmdWxmaWxsZWQgcHJvbWlzZSBmb3IgYW4gaW1tZWRpYXRlIHJlZmVyZW5jZS5cbiAqIEBwYXJhbSB2YWx1ZSBpbW1lZGlhdGUgcmVmZXJlbmNlXG4gKi9cblEuZnVsZmlsbCA9IGZ1bGZpbGw7XG5mdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7XG4gICAgcmV0dXJuIFByb21pc2Uoe1xuICAgICAgICBcIndoZW5cIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBcImdldFwiOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlW25hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBcInNldFwiOiBmdW5jdGlvbiAobmFtZSwgcmhzKSB7XG4gICAgICAgICAgICB2YWx1ZVtuYW1lXSA9IHJocztcbiAgICAgICAgfSxcbiAgICAgICAgXCJkZWxldGVcIjogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtuYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJwb3N0XCI6IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgICAgICAgICAvLyBNYXJrIE1pbGxlciBwcm9wb3NlcyB0aGF0IHBvc3Qgd2l0aCBubyBuYW1lIHNob3VsZCBhcHBseSBhXG4gICAgICAgICAgICAvLyBwcm9taXNlZCBmdW5jdGlvbi5cbiAgICAgICAgICAgIGlmIChuYW1lID09PSBudWxsIHx8IG5hbWUgPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVbbmFtZV0uYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImFwcGx5XCI6IGZ1bmN0aW9uICh0aGlzcCwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KHRoaXNwLCBhcmdzKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJrZXlzXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Rfa2V5cyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LCB2b2lkIDAsIGZ1bmN0aW9uIGluc3BlY3QoKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXRlOiBcImZ1bGZpbGxlZFwiLCB2YWx1ZTogdmFsdWUgfTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGVuYWJsZXMgdG8gUSBwcm9taXNlcy5cbiAqIEBwYXJhbSBwcm9taXNlIHRoZW5hYmxlIHByb21pc2VcbiAqIEByZXR1cm5zIGEgUSBwcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNvZXJjZShwcm9taXNlKSB7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2UudGhlbihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QsIGRlZmVycmVkLm5vdGlmeSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn1cblxuLyoqXG4gKiBBbm5vdGF0ZXMgYW4gb2JqZWN0IHN1Y2ggdGhhdCBpdCB3aWxsIG5ldmVyIGJlXG4gKiB0cmFuc2ZlcnJlZCBhd2F5IGZyb20gdGhpcyBwcm9jZXNzIG92ZXIgYW55IHByb21pc2VcbiAqIGNvbW11bmljYXRpb24gY2hhbm5lbC5cbiAqIEBwYXJhbSBvYmplY3RcbiAqIEByZXR1cm5zIHByb21pc2UgYSB3cmFwcGluZyBvZiB0aGF0IG9iamVjdCB0aGF0XG4gKiBhZGRpdGlvbmFsbHkgcmVzcG9uZHMgdG8gdGhlIFwiaXNEZWZcIiBtZXNzYWdlXG4gKiB3aXRob3V0IGEgcmVqZWN0aW9uLlxuICovXG5RLm1hc3RlciA9IG1hc3RlcjtcbmZ1bmN0aW9uIG1hc3RlcihvYmplY3QpIHtcbiAgICByZXR1cm4gUHJvbWlzZSh7XG4gICAgICAgIFwiaXNEZWZcIjogZnVuY3Rpb24gKCkge31cbiAgICB9LCBmdW5jdGlvbiBmYWxsYmFjayhvcCwgYXJncykge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2gob2JqZWN0LCBvcCwgYXJncyk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUShvYmplY3QpLmluc3BlY3QoKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBTcHJlYWRzIHRoZSB2YWx1ZXMgb2YgYSBwcm9taXNlZCBhcnJheSBvZiBhcmd1bWVudHMgaW50byB0aGVcbiAqIGZ1bGZpbGxtZW50IGNhbGxiYWNrLlxuICogQHBhcmFtIGZ1bGZpbGxlZCBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIHZhcmlhZGljIGFyZ3VtZW50cyBmcm9tIHRoZVxuICogcHJvbWlzZWQgYXJyYXlcbiAqIEBwYXJhbSByZWplY3RlZCBjYWxsYmFjayB0aGF0IHJlY2VpdmVzIHRoZSBleGNlcHRpb24gaWYgdGhlIHByb21pc2VcbiAqIGlzIHJlamVjdGVkLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlIG9yIHRocm93biBleGNlcHRpb24gb2ZcbiAqIGVpdGhlciBjYWxsYmFjay5cbiAqL1xuUS5zcHJlYWQgPSBzcHJlYWQ7XG5mdW5jdGlvbiBzcHJlYWQodmFsdWUsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gUSh2YWx1ZSkuc3ByZWFkKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5zcHJlYWQgPSBmdW5jdGlvbiAoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLmFsbCgpLnRoZW4oZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBmdWxmaWxsZWQuYXBwbHkodm9pZCAwLCBhcnJheSk7XG4gICAgfSwgcmVqZWN0ZWQpO1xufTtcblxuLyoqXG4gKiBUaGUgYXN5bmMgZnVuY3Rpb24gaXMgYSBkZWNvcmF0b3IgZm9yIGdlbmVyYXRvciBmdW5jdGlvbnMsIHR1cm5pbmdcbiAqIHRoZW0gaW50byBhc3luY2hyb25vdXMgZ2VuZXJhdG9ycy4gIEFsdGhvdWdoIGdlbmVyYXRvcnMgYXJlIG9ubHkgcGFydFxuICogb2YgdGhlIG5ld2VzdCBFQ01BU2NyaXB0IDYgZHJhZnRzLCB0aGlzIGNvZGUgZG9lcyBub3QgY2F1c2Ugc3ludGF4XG4gKiBlcnJvcnMgaW4gb2xkZXIgZW5naW5lcy4gIFRoaXMgY29kZSBzaG91bGQgY29udGludWUgdG8gd29yayBhbmQgd2lsbFxuICogaW4gZmFjdCBpbXByb3ZlIG92ZXIgdGltZSBhcyB0aGUgbGFuZ3VhZ2UgaW1wcm92ZXMuXG4gKlxuICogRVM2IGdlbmVyYXRvcnMgYXJlIGN1cnJlbnRseSBwYXJ0IG9mIFY4IHZlcnNpb24gMy4xOSB3aXRoIHRoZVxuICogLS1oYXJtb255LWdlbmVyYXRvcnMgcnVudGltZSBmbGFnIGVuYWJsZWQuICBTcGlkZXJNb25rZXkgaGFzIGhhZCB0aGVtXG4gKiBmb3IgbG9uZ2VyLCBidXQgdW5kZXIgYW4gb2xkZXIgUHl0aG9uLWluc3BpcmVkIGZvcm0uICBUaGlzIGZ1bmN0aW9uXG4gKiB3b3JrcyBvbiBib3RoIGtpbmRzIG9mIGdlbmVyYXRvcnMuXG4gKlxuICogRGVjb3JhdGVzIGEgZ2VuZXJhdG9yIGZ1bmN0aW9uIHN1Y2ggdGhhdDpcbiAqICAtIGl0IG1heSB5aWVsZCBwcm9taXNlc1xuICogIC0gZXhlY3V0aW9uIHdpbGwgY29udGludWUgd2hlbiB0aGF0IHByb21pc2UgaXMgZnVsZmlsbGVkXG4gKiAgLSB0aGUgdmFsdWUgb2YgdGhlIHlpZWxkIGV4cHJlc3Npb24gd2lsbCBiZSB0aGUgZnVsZmlsbGVkIHZhbHVlXG4gKiAgLSBpdCByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZSAod2hlbiB0aGUgZ2VuZXJhdG9yXG4gKiAgICBzdG9wcyBpdGVyYXRpbmcpXG4gKiAgLSB0aGUgZGVjb3JhdGVkIGZ1bmN0aW9uIHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKiAgICBvZiB0aGUgZ2VuZXJhdG9yIG9yIHRoZSBmaXJzdCByZWplY3RlZCBwcm9taXNlIGFtb25nIHRob3NlXG4gKiAgICB5aWVsZGVkLlxuICogIC0gaWYgYW4gZXJyb3IgaXMgdGhyb3duIGluIHRoZSBnZW5lcmF0b3IsIGl0IHByb3BhZ2F0ZXMgdGhyb3VnaFxuICogICAgZXZlcnkgZm9sbG93aW5nIHlpZWxkIHVudGlsIGl0IGlzIGNhdWdodCwgb3IgdW50aWwgaXQgZXNjYXBlc1xuICogICAgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBhbHRvZ2V0aGVyLCBhbmQgaXMgdHJhbnNsYXRlZCBpbnRvIGFcbiAqICAgIHJlamVjdGlvbiBmb3IgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGRlY29yYXRlZCBnZW5lcmF0b3IuXG4gKi9cblEuYXN5bmMgPSBhc3luYztcbmZ1bmN0aW9uIGFzeW5jKG1ha2VHZW5lcmF0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyB3aGVuIHZlcmIgaXMgXCJzZW5kXCIsIGFyZyBpcyBhIHZhbHVlXG4gICAgICAgIC8vIHdoZW4gdmVyYiBpcyBcInRocm93XCIsIGFyZyBpcyBhbiBleGNlcHRpb25cbiAgICAgICAgZnVuY3Rpb24gY29udGludWVyKHZlcmIsIGFyZykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgICAgICAgLy8gVW50aWwgVjggMy4xOSAvIENocm9taXVtIDI5IGlzIHJlbGVhc2VkLCBTcGlkZXJNb25rZXkgaXMgdGhlIG9ubHlcbiAgICAgICAgICAgIC8vIGVuZ2luZSB0aGF0IGhhcyBhIGRlcGxveWVkIGJhc2Ugb2YgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IGdlbmVyYXRvcnMuXG4gICAgICAgICAgICAvLyBIb3dldmVyLCBTTSdzIGdlbmVyYXRvcnMgdXNlIHRoZSBQeXRob24taW5zcGlyZWQgc2VtYW50aWNzIG9mXG4gICAgICAgICAgICAvLyBvdXRkYXRlZCBFUzYgZHJhZnRzLiAgV2Ugd291bGQgbGlrZSB0byBzdXBwb3J0IEVTNiwgYnV0IHdlJ2QgYWxzb1xuICAgICAgICAgICAgLy8gbGlrZSB0byBtYWtlIGl0IHBvc3NpYmxlIHRvIHVzZSBnZW5lcmF0b3JzIGluIGRlcGxveWVkIGJyb3dzZXJzLCBzb1xuICAgICAgICAgICAgLy8gd2UgYWxzbyBzdXBwb3J0IFB5dGhvbi1zdHlsZSBnZW5lcmF0b3JzLiAgQXQgc29tZSBwb2ludCB3ZSBjYW4gcmVtb3ZlXG4gICAgICAgICAgICAvLyB0aGlzIGJsb2NrLlxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIFN0b3BJdGVyYXRpb24gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBFUzYgR2VuZXJhdG9yc1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdlbmVyYXRvclt2ZXJiXShhcmcpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUShyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aGVuKHJlc3VsdC52YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3BpZGVyTW9ua2V5IEdlbmVyYXRvcnNcbiAgICAgICAgICAgICAgICAvLyBGSVhNRTogUmVtb3ZlIHRoaXMgY2FzZSB3aGVuIFNNIGRvZXMgRVM2IGdlbmVyYXRvcnMuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2VuZXJhdG9yW3ZlcmJdKGFyZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1N0b3BJdGVyYXRpb24oZXhjZXB0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFEoZXhjZXB0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXhjZXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gd2hlbihyZXN1bHQsIGNhbGxiYWNrLCBlcnJiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2VuZXJhdG9yID0gbWFrZUdlbmVyYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjb250aW51ZXIuYmluZChjb250aW51ZXIsIFwibmV4dFwiKTtcbiAgICAgICAgdmFyIGVycmJhY2sgPSBjb250aW51ZXIuYmluZChjb250aW51ZXIsIFwidGhyb3dcIik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG59XG5cbi8qKlxuICogVGhlIHNwYXduIGZ1bmN0aW9uIGlzIGEgc21hbGwgd3JhcHBlciBhcm91bmQgYXN5bmMgdGhhdCBpbW1lZGlhdGVseVxuICogY2FsbHMgdGhlIGdlbmVyYXRvciBhbmQgYWxzbyBlbmRzIHRoZSBwcm9taXNlIGNoYWluLCBzbyB0aGF0IGFueVxuICogdW5oYW5kbGVkIGVycm9ycyBhcmUgdGhyb3duIGluc3RlYWQgb2YgZm9yd2FyZGVkIHRvIHRoZSBlcnJvclxuICogaGFuZGxlci4gVGhpcyBpcyB1c2VmdWwgYmVjYXVzZSBpdCdzIGV4dHJlbWVseSBjb21tb24gdG8gcnVuXG4gKiBnZW5lcmF0b3JzIGF0IHRoZSB0b3AtbGV2ZWwgdG8gd29yayB3aXRoIGxpYnJhcmllcy5cbiAqL1xuUS5zcGF3biA9IHNwYXduO1xuZnVuY3Rpb24gc3Bhd24obWFrZUdlbmVyYXRvcikge1xuICAgIFEuZG9uZShRLmFzeW5jKG1ha2VHZW5lcmF0b3IpKCkpO1xufVxuXG4vLyBGSVhNRTogUmVtb3ZlIHRoaXMgaW50ZXJmYWNlIG9uY2UgRVM2IGdlbmVyYXRvcnMgYXJlIGluIFNwaWRlck1vbmtleS5cbi8qKlxuICogVGhyb3dzIGEgUmV0dXJuVmFsdWUgZXhjZXB0aW9uIHRvIHN0b3AgYW4gYXN5bmNocm9ub3VzIGdlbmVyYXRvci5cbiAqXG4gKiBUaGlzIGludGVyZmFjZSBpcyBhIHN0b3AtZ2FwIG1lYXN1cmUgdG8gc3VwcG9ydCBnZW5lcmF0b3IgcmV0dXJuXG4gKiB2YWx1ZXMgaW4gb2xkZXIgRmlyZWZveC9TcGlkZXJNb25rZXkuICBJbiBicm93c2VycyB0aGF0IHN1cHBvcnQgRVM2XG4gKiBnZW5lcmF0b3JzIGxpa2UgQ2hyb21pdW0gMjksIGp1c3QgdXNlIFwicmV0dXJuXCIgaW4geW91ciBnZW5lcmF0b3JcbiAqIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHJldHVybiB2YWx1ZSBmb3IgdGhlIHN1cnJvdW5kaW5nIGdlbmVyYXRvclxuICogQHRocm93cyBSZXR1cm5WYWx1ZSBleGNlcHRpb24gd2l0aCB0aGUgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICogLy8gRVM2IHN0eWxlXG4gKiBRLmFzeW5jKGZ1bmN0aW9uKiAoKSB7XG4gKiAgICAgIHZhciBmb28gPSB5aWVsZCBnZXRGb29Qcm9taXNlKCk7XG4gKiAgICAgIHZhciBiYXIgPSB5aWVsZCBnZXRCYXJQcm9taXNlKCk7XG4gKiAgICAgIHJldHVybiBmb28gKyBiYXI7XG4gKiB9KVxuICogLy8gT2xkZXIgU3BpZGVyTW9ua2V5IHN0eWxlXG4gKiBRLmFzeW5jKGZ1bmN0aW9uICgpIHtcbiAqICAgICAgdmFyIGZvbyA9IHlpZWxkIGdldEZvb1Byb21pc2UoKTtcbiAqICAgICAgdmFyIGJhciA9IHlpZWxkIGdldEJhclByb21pc2UoKTtcbiAqICAgICAgUS5yZXR1cm4oZm9vICsgYmFyKTtcbiAqIH0pXG4gKi9cblFbXCJyZXR1cm5cIl0gPSBfcmV0dXJuO1xuZnVuY3Rpb24gX3JldHVybih2YWx1ZSkge1xuICAgIHRocm93IG5ldyBRUmV0dXJuVmFsdWUodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBwcm9taXNlZCBmdW5jdGlvbiBkZWNvcmF0b3IgZW5zdXJlcyB0aGF0IGFueSBwcm9taXNlIGFyZ3VtZW50c1xuICogYXJlIHNldHRsZWQgYW5kIHBhc3NlZCBhcyB2YWx1ZXMgKGB0aGlzYCBpcyBhbHNvIHNldHRsZWQgYW5kIHBhc3NlZFxuICogYXMgYSB2YWx1ZSkuICBJdCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhlIHJlc3VsdCBvZiBhIGZ1bmN0aW9uIGlzXG4gKiBhbHdheXMgYSBwcm9taXNlLlxuICpcbiAqIEBleGFtcGxlXG4gKiB2YXIgYWRkID0gUS5wcm9taXNlZChmdW5jdGlvbiAoYSwgYikge1xuICogICAgIHJldHVybiBhICsgYjtcbiAqIH0pO1xuICogYWRkKFEoYSksIFEoQikpO1xuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBkZWNvcmF0ZVxuICogQHJldHVybnMge2Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHRoYXQgaGFzIGJlZW4gZGVjb3JhdGVkLlxuICovXG5RLnByb21pc2VkID0gcHJvbWlzZWQ7XG5mdW5jdGlvbiBwcm9taXNlZChjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzcHJlYWQoW3RoaXMsIGFsbChhcmd1bWVudHMpXSwgZnVuY3Rpb24gKHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBzZW5kcyBhIG1lc3NhZ2UgdG8gYSB2YWx1ZSBpbiBhIGZ1dHVyZSB0dXJuXG4gKiBAcGFyYW0gb2JqZWN0KiB0aGUgcmVjaXBpZW50XG4gKiBAcGFyYW0gb3AgdGhlIG5hbWUgb2YgdGhlIG1lc3NhZ2Ugb3BlcmF0aW9uLCBlLmcuLCBcIndoZW5cIixcbiAqIEBwYXJhbSBhcmdzIGZ1cnRoZXIgYXJndW1lbnRzIHRvIGJlIGZvcndhcmRlZCB0byB0aGUgb3BlcmF0aW9uXG4gKiBAcmV0dXJucyByZXN1bHQge1Byb21pc2V9IGEgcHJvbWlzZSBmb3IgdGhlIHJlc3VsdCBvZiB0aGUgb3BlcmF0aW9uXG4gKi9cblEuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcbmZ1bmN0aW9uIGRpc3BhdGNoKG9iamVjdCwgb3AsIGFyZ3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKG9wLCBhcmdzKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAob3AsIGFyZ3MpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5wcm9taXNlRGlzcGF0Y2goZGVmZXJyZWQucmVzb2x2ZSwgb3AsIGFyZ3MpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBvZiBhIHByb3BlcnR5IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIHByb3BlcnR5IHRvIGdldFxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcHJvcGVydHkgdmFsdWVcbiAqL1xuUS5nZXQgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXkpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLmRpc3BhdGNoKFwiZ2V0XCIsIFtrZXldKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcImdldFwiLCBba2V5XSk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciBvYmplY3Qgb2JqZWN0XG4gKiBAcGFyYW0gbmFtZSAgICAgIG5hbWUgb2YgcHJvcGVydHkgdG8gc2V0XG4gKiBAcGFyYW0gdmFsdWUgICAgIG5ldyB2YWx1ZSBvZiBwcm9wZXJ0eVxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cblEuc2V0ID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJzZXRcIiwgW2tleSwgdmFsdWVdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJzZXRcIiwgW2tleSwgdmFsdWVdKTtcbn07XG5cbi8qKlxuICogRGVsZXRlcyBhIHByb3BlcnR5IGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIHByb3BlcnR5IHRvIGRlbGV0ZVxuICogQHJldHVybiBwcm9taXNlIGZvciB0aGUgcmV0dXJuIHZhbHVlXG4gKi9cblEuZGVsID0gLy8gWFhYIGxlZ2FjeVxuUVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJkZWxldGVcIiwgW2tleV0pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZGVsID0gLy8gWFhYIGxlZ2FjeVxuUHJvbWlzZS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJkZWxldGVcIiwgW2tleV0pO1xufTtcblxuLyoqXG4gKiBJbnZva2VzIGEgbWV0aG9kIGluIGEgZnV0dXJlIHR1cm4uXG4gKiBAcGFyYW0gb2JqZWN0ICAgIHByb21pc2Ugb3IgaW1tZWRpYXRlIHJlZmVyZW5jZSBmb3IgdGFyZ2V0IG9iamVjdFxuICogQHBhcmFtIG5hbWUgICAgICBuYW1lIG9mIG1ldGhvZCB0byBpbnZva2VcbiAqIEBwYXJhbSB2YWx1ZSAgICAgYSB2YWx1ZSB0byBwb3N0LCB0eXBpY2FsbHkgYW4gYXJyYXkgb2ZcbiAqICAgICAgICAgICAgICAgICAgaW52b2NhdGlvbiBhcmd1bWVudHMgZm9yIHByb21pc2VzIHRoYXRcbiAqICAgICAgICAgICAgICAgICAgYXJlIHVsdGltYXRlbHkgYmFja2VkIHdpdGggYHJlc29sdmVgIHZhbHVlcyxcbiAqICAgICAgICAgICAgICAgICAgYXMgb3Bwb3NlZCB0byB0aG9zZSBiYWNrZWQgd2l0aCBVUkxzXG4gKiAgICAgICAgICAgICAgICAgIHdoZXJlaW4gdGhlIHBvc3RlZCB2YWx1ZSBjYW4gYmUgYW55XG4gKiAgICAgICAgICAgICAgICAgIEpTT04gc2VyaWFsaXphYmxlIG9iamVjdC5cbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZVxuICovXG4vLyBib3VuZCBsb2NhbGx5IGJlY2F1c2UgaXQgaXMgdXNlZCBieSBvdGhlciBtZXRob2RzXG5RLm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5RLnBvc3QgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBhcmdzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFyZ3NdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5Qcm9taXNlLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFyZ3NdKTtcbn07XG5cbi8qKlxuICogSW52b2tlcyBhIG1ldGhvZCBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEBwYXJhbSBuYW1lICAgICAgbmFtZSBvZiBtZXRob2QgdG8gaW52b2tlXG4gKiBAcGFyYW0gLi4uYXJncyAgIGFycmF5IG9mIGludm9jYXRpb24gYXJndW1lbnRzXG4gKiBAcmV0dXJuIHByb21pc2UgZm9yIHRoZSByZXR1cm4gdmFsdWVcbiAqL1xuUS5zZW5kID0gLy8gWFhYIE1hcmsgTWlsbGVyJ3MgcHJvcG9zZWQgcGFybGFuY2VcblEubWNhbGwgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUS5pbnZva2UgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMildKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNlbmQgPSAvLyBYWFggTWFyayBNaWxsZXIncyBwcm9wb3NlZCBwYXJsYW5jZVxuUHJvbWlzZS5wcm90b3R5cGUubWNhbGwgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUHJvbWlzZS5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICByZXR1cm4gdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSldKTtcbn07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgcHJvbWlzZWQgZnVuY3Rpb24gaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgZnVuY3Rpb25cbiAqIEBwYXJhbSBhcmdzICAgICAgYXJyYXkgb2YgYXBwbGljYXRpb24gYXJndW1lbnRzXG4gKi9cblEuZmFwcGx5ID0gZnVuY3Rpb24gKG9iamVjdCwgYXJncykge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcmdzXSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mYXBwbHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKFwiYXBwbHlcIiwgW3ZvaWQgMCwgYXJnc10pO1xufTtcblxuLyoqXG4gKiBDYWxscyB0aGUgcHJvbWlzZWQgZnVuY3Rpb24gaW4gYSBmdXR1cmUgdHVybi5cbiAqIEBwYXJhbSBvYmplY3QgICAgcHJvbWlzZSBvciBpbW1lZGlhdGUgcmVmZXJlbmNlIGZvciB0YXJnZXQgZnVuY3Rpb25cbiAqIEBwYXJhbSAuLi5hcmdzICAgYXJyYXkgb2YgYXBwbGljYXRpb24gYXJndW1lbnRzXG4gKi9cblFbXCJ0cnlcIl0gPVxuUS5mY2FsbCA9IGZ1bmN0aW9uIChvYmplY3QgLyogLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kaXNwYXRjaChcImFwcGx5XCIsIFt2b2lkIDAsIGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSldKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmZjYWxsID0gZnVuY3Rpb24gKC8qLi4uYXJncyovKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJhcHBseVwiLCBbdm9pZCAwLCBhcnJheV9zbGljZShhcmd1bWVudHMpXSk7XG59O1xuXG4vKipcbiAqIEJpbmRzIHRoZSBwcm9taXNlZCBmdW5jdGlvbiwgdHJhbnNmb3JtaW5nIHJldHVybiB2YWx1ZXMgaW50byBhIGZ1bGZpbGxlZFxuICogcHJvbWlzZSBhbmQgdGhyb3duIGVycm9ycyBpbnRvIGEgcmVqZWN0ZWQgb25lLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBmdW5jdGlvblxuICogQHBhcmFtIC4uLmFyZ3MgICBhcnJheSBvZiBhcHBsaWNhdGlvbiBhcmd1bWVudHNcbiAqL1xuUS5mYmluZCA9IGZ1bmN0aW9uIChvYmplY3QgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgcHJvbWlzZSA9IFEob2JqZWN0KTtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZib3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuZGlzcGF0Y2goXCJhcHBseVwiLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSlcbiAgICAgICAgXSk7XG4gICAgfTtcbn07XG5Qcm9taXNlLnByb3RvdHlwZS5mYmluZCA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZib3VuZCgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UuZGlzcGF0Y2goXCJhcHBseVwiLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UoYXJndW1lbnRzKSlcbiAgICAgICAgXSk7XG4gICAgfTtcbn07XG5cbi8qKlxuICogUmVxdWVzdHMgdGhlIG5hbWVzIG9mIHRoZSBvd25lZCBwcm9wZXJ0aWVzIG9mIGEgcHJvbWlzZWRcbiAqIG9iamVjdCBpbiBhIGZ1dHVyZSB0dXJuLlxuICogQHBhcmFtIG9iamVjdCAgICBwcm9taXNlIG9yIGltbWVkaWF0ZSByZWZlcmVuY2UgZm9yIHRhcmdldCBvYmplY3RcbiAqIEByZXR1cm4gcHJvbWlzZSBmb3IgdGhlIGtleXMgb2YgdGhlIGV2ZW50dWFsbHkgc2V0dGxlZCBvYmplY3RcbiAqL1xuUS5rZXlzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBRKG9iamVjdCkuZGlzcGF0Y2goXCJrZXlzXCIsIFtdKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goXCJrZXlzXCIsIFtdKTtcbn07XG5cbi8qKlxuICogVHVybnMgYW4gYXJyYXkgb2YgcHJvbWlzZXMgaW50byBhIHByb21pc2UgZm9yIGFuIGFycmF5LiAgSWYgYW55IG9mXG4gKiB0aGUgcHJvbWlzZXMgZ2V0cyByZWplY3RlZCwgdGhlIHdob2xlIGFycmF5IGlzIHJlamVjdGVkIGltbWVkaWF0ZWx5LlxuICogQHBhcmFtIHtBcnJheSp9IGFuIGFycmF5IChvciBwcm9taXNlIGZvciBhbiBhcnJheSkgb2YgdmFsdWVzIChvclxuICogcHJvbWlzZXMgZm9yIHZhbHVlcylcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgYW4gYXJyYXkgb2YgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzXG4gKi9cbi8vIEJ5IE1hcmsgTWlsbGVyXG4vLyBodHRwOi8vd2lraS5lY21hc2NyaXB0Lm9yZy9kb2t1LnBocD9pZD1zdHJhd21hbjpjb25jdXJyZW5jeSZyZXY9MTMwODc3NjUyMSNhbGxmdWxmaWxsZWRcblEuYWxsID0gYWxsO1xuZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHdoZW4ocHJvbWlzZXMsIGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgICAgICB2YXIgcGVuZGluZ0NvdW50ID0gMDtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgYXJyYXlfcmVkdWNlKHByb21pc2VzLCBmdW5jdGlvbiAodW5kZWZpbmVkLCBwcm9taXNlLCBpbmRleCkge1xuICAgICAgICAgICAgdmFyIHNuYXBzaG90O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGlzUHJvbWlzZShwcm9taXNlKSAmJlxuICAgICAgICAgICAgICAgIChzbmFwc2hvdCA9IHByb21pc2UuaW5zcGVjdCgpKS5zdGF0ZSA9PT0gXCJmdWxmaWxsZWRcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXNbaW5kZXhdID0gc25hcHNob3QudmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICsrcGVuZGluZ0NvdW50O1xuICAgICAgICAgICAgICAgIHdoZW4oXG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UsXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLS1wZW5kaW5nQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHByb21pc2VzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAocHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLm5vdGlmeSh7IGluZGV4OiBpbmRleCwgdmFsdWU6IHByb2dyZXNzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdm9pZCAwKTtcbiAgICAgICAgaWYgKHBlbmRpbmdDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShwcm9taXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfSk7XG59XG5cblByb21pc2UucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYWxsKHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCByZXNvbHZlZCBwcm9taXNlIG9mIGFuIGFycmF5LiBQcmlvciByZWplY3RlZCBwcm9taXNlcyBhcmVcbiAqIGlnbm9yZWQuICBSZWplY3RzIG9ubHkgaWYgYWxsIHByb21pc2VzIGFyZSByZWplY3RlZC5cbiAqIEBwYXJhbSB7QXJyYXkqfSBhbiBhcnJheSBjb250YWluaW5nIHZhbHVlcyBvciBwcm9taXNlcyBmb3IgdmFsdWVzXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZnVsZmlsbGVkIHdpdGggdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCByZXNvbHZlZCBwcm9taXNlLFxuICogb3IgYSByZWplY3RlZCBwcm9taXNlIGlmIGFsbCBwcm9taXNlcyBhcmUgcmVqZWN0ZWQuXG4gKi9cblEuYW55ID0gYW55O1xuXG5mdW5jdGlvbiBhbnkocHJvbWlzZXMpIHtcbiAgICBpZiAocHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBRLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gICAgdmFyIHBlbmRpbmdDb3VudCA9IDA7XG4gICAgYXJyYXlfcmVkdWNlKHByb21pc2VzLCBmdW5jdGlvbiAocHJldiwgY3VycmVudCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSBwcm9taXNlc1tpbmRleF07XG5cbiAgICAgICAgcGVuZGluZ0NvdW50Kys7XG5cbiAgICAgICAgd2hlbihwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyk7XG4gICAgICAgIGZ1bmN0aW9uIG9uRnVsZmlsbGVkKHJlc3VsdCkge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0ZWQoKSB7XG4gICAgICAgICAgICBwZW5kaW5nQ291bnQtLTtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QobmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBcIkNhbid0IGdldCBmdWxmaWxsbWVudCB2YWx1ZSBmcm9tIGFueSBwcm9taXNlLCBhbGwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcInByb21pc2VzIHdlcmUgcmVqZWN0ZWQuXCJcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvblByb2dyZXNzKHByb2dyZXNzKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5ub3RpZnkoe1xuICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvZ3Jlc3NcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwgdW5kZWZpbmVkKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGFueSh0aGlzKTtcbn07XG5cbi8qKlxuICogV2FpdHMgZm9yIGFsbCBwcm9taXNlcyB0byBiZSBzZXR0bGVkLCBlaXRoZXIgZnVsZmlsbGVkIG9yXG4gKiByZWplY3RlZC4gIFRoaXMgaXMgZGlzdGluY3QgZnJvbSBgYWxsYCBzaW5jZSB0aGF0IHdvdWxkIHN0b3BcbiAqIHdhaXRpbmcgYXQgdGhlIGZpcnN0IHJlamVjdGlvbi4gIFRoZSBwcm9taXNlIHJldHVybmVkIGJ5XG4gKiBgYWxsUmVzb2x2ZWRgIHdpbGwgbmV2ZXIgYmUgcmVqZWN0ZWQuXG4gKiBAcGFyYW0gcHJvbWlzZXMgYSBwcm9taXNlIGZvciBhbiBhcnJheSAob3IgYW4gYXJyYXkpIG9mIHByb21pc2VzXG4gKiAob3IgdmFsdWVzKVxuICogQHJldHVybiBhIHByb21pc2UgZm9yIGFuIGFycmF5IG9mIHByb21pc2VzXG4gKi9cblEuYWxsUmVzb2x2ZWQgPSBkZXByZWNhdGUoYWxsUmVzb2x2ZWQsIFwiYWxsUmVzb2x2ZWRcIiwgXCJhbGxTZXR0bGVkXCIpO1xuZnVuY3Rpb24gYWxsUmVzb2x2ZWQocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gd2hlbihwcm9taXNlcywgZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgICAgIHByb21pc2VzID0gYXJyYXlfbWFwKHByb21pc2VzLCBRKTtcbiAgICAgICAgcmV0dXJuIHdoZW4oYWxsKGFycmF5X21hcChwcm9taXNlcywgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgICAgIHJldHVybiB3aGVuKHByb21pc2UsIG5vb3AsIG5vb3ApO1xuICAgICAgICB9KSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlcztcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cblByb21pc2UucHJvdG90eXBlLmFsbFJlc29sdmVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhbGxSZXNvbHZlZCh0aGlzKTtcbn07XG5cbi8qKlxuICogQHNlZSBQcm9taXNlI2FsbFNldHRsZWRcbiAqL1xuUS5hbGxTZXR0bGVkID0gYWxsU2V0dGxlZDtcbmZ1bmN0aW9uIGFsbFNldHRsZWQocHJvbWlzZXMpIHtcbiAgICByZXR1cm4gUShwcm9taXNlcykuYWxsU2V0dGxlZCgpO1xufVxuXG4vKipcbiAqIFR1cm5zIGFuIGFycmF5IG9mIHByb21pc2VzIGludG8gYSBwcm9taXNlIGZvciBhbiBhcnJheSBvZiB0aGVpciBzdGF0ZXMgKGFzXG4gKiByZXR1cm5lZCBieSBgaW5zcGVjdGApIHdoZW4gdGhleSBoYXZlIGFsbCBzZXR0bGVkLlxuICogQHBhcmFtIHtBcnJheVtBbnkqXX0gdmFsdWVzIGFuIGFycmF5IChvciBwcm9taXNlIGZvciBhbiBhcnJheSkgb2YgdmFsdWVzIChvclxuICogcHJvbWlzZXMgZm9yIHZhbHVlcylcbiAqIEByZXR1cm5zIHtBcnJheVtTdGF0ZV19IGFuIGFycmF5IG9mIHN0YXRlcyBmb3IgdGhlIHJlc3BlY3RpdmUgdmFsdWVzLlxuICovXG5Qcm9taXNlLnByb3RvdHlwZS5hbGxTZXR0bGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgICAgIHJldHVybiBhbGwoYXJyYXlfbWFwKHByb21pc2VzLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAgICAgcHJvbWlzZSA9IFEocHJvbWlzZSk7XG4gICAgICAgICAgICBmdW5jdGlvbiByZWdhcmRsZXNzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlLmluc3BlY3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4ocmVnYXJkbGVzcywgcmVnYXJkbGVzcyk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQ2FwdHVyZXMgdGhlIGZhaWx1cmUgb2YgYSBwcm9taXNlLCBnaXZpbmcgYW4gb3BvcnR1bml0eSB0byByZWNvdmVyXG4gKiB3aXRoIGEgY2FsbGJhY2suICBJZiB0aGUgZ2l2ZW4gcHJvbWlzZSBpcyBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICogcHJvbWlzZSBpcyBmdWxmaWxsZWQuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2UgZm9yIHNvbWV0aGluZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdG8gZnVsZmlsbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpZiB0aGVcbiAqIGdpdmVuIHByb21pc2UgaXMgcmVqZWN0ZWRcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgY2FsbGJhY2tcbiAqL1xuUS5mYWlsID0gLy8gWFhYIGxlZ2FjeVxuUVtcImNhdGNoXCJdID0gZnVuY3Rpb24gKG9iamVjdCwgcmVqZWN0ZWQpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLnRoZW4odm9pZCAwLCByZWplY3RlZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5mYWlsID0gLy8gWFhYIGxlZ2FjeVxuUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXSA9IGZ1bmN0aW9uIChyZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCByZWplY3RlZCk7XG59O1xuXG4vKipcbiAqIEF0dGFjaGVzIGEgbGlzdGVuZXIgdGhhdCBjYW4gcmVzcG9uZCB0byBwcm9ncmVzcyBub3RpZmljYXRpb25zIGZyb20gYVxuICogcHJvbWlzZSdzIG9yaWdpbmF0aW5nIGRlZmVycmVkLiBUaGlzIGxpc3RlbmVyIHJlY2VpdmVzIHRoZSBleGFjdCBhcmd1bWVudHNcbiAqIHBhc3NlZCB0byBgYGRlZmVycmVkLm5vdGlmeWBgLlxuICogQHBhcmFtIHtBbnkqfSBwcm9taXNlIGZvciBzb21ldGhpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRvIHJlY2VpdmUgYW55IHByb2dyZXNzIG5vdGlmaWNhdGlvbnNcbiAqIEByZXR1cm5zIHRoZSBnaXZlbiBwcm9taXNlLCB1bmNoYW5nZWRcbiAqL1xuUS5wcm9ncmVzcyA9IHByb2dyZXNzO1xuZnVuY3Rpb24gcHJvZ3Jlc3Mob2JqZWN0LCBwcm9ncmVzc2VkKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS50aGVuKHZvaWQgMCwgdm9pZCAwLCBwcm9ncmVzc2VkKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUucHJvZ3Jlc3MgPSBmdW5jdGlvbiAocHJvZ3Jlc3NlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odm9pZCAwLCB2b2lkIDAsIHByb2dyZXNzZWQpO1xufTtcblxuLyoqXG4gKiBQcm92aWRlcyBhbiBvcHBvcnR1bml0eSB0byBvYnNlcnZlIHRoZSBzZXR0bGluZyBvZiBhIHByb21pc2UsXG4gKiByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIHByb21pc2UgaXMgZnVsZmlsbGVkIG9yIHJlamVjdGVkLiAgRm9yd2FyZHNcbiAqIHRoZSByZXNvbHV0aW9uIHRvIHRoZSByZXR1cm5lZCBwcm9taXNlIHdoZW4gdGhlIGNhbGxiYWNrIGlzIGRvbmUuXG4gKiBUaGUgY2FsbGJhY2sgY2FuIHJldHVybiBhIHByb21pc2UgdG8gZGVmZXIgY29tcGxldGlvbi5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgdG8gb2JzZXJ2ZSB0aGUgcmVzb2x1dGlvbiBvZiB0aGUgZ2l2ZW5cbiAqIHByb21pc2UsIHRha2VzIG5vIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuIHByb21pc2Ugd2hlblxuICogYGBmaW5gYCBpcyBkb25lLlxuICovXG5RLmZpbiA9IC8vIFhYWCBsZWdhY3lcblFbXCJmaW5hbGx5XCJdID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gUShvYmplY3QpW1wiZmluYWxseVwiXShjYWxsYmFjayk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5maW4gPSAvLyBYWFggbGVnYWN5XG5Qcm9taXNlLnByb3RvdHlwZVtcImZpbmFsbHlcIl0gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IFEoY2FsbGJhY2spO1xuICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5mY2FsbCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIFRPRE8gYXR0ZW1wdCB0byByZWN5Y2xlIHRoZSByZWplY3Rpb24gd2l0aCBcInRoaXNcIi5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmZjYWxsKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBUZXJtaW5hdGVzIGEgY2hhaW4gb2YgcHJvbWlzZXMsIGZvcmNpbmcgcmVqZWN0aW9ucyB0byBiZVxuICogdGhyb3duIGFzIGV4Y2VwdGlvbnMuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2UgYXQgdGhlIGVuZCBvZiBhIGNoYWluIG9mIHByb21pc2VzXG4gKiBAcmV0dXJucyBub3RoaW5nXG4gKi9cblEuZG9uZSA9IGZ1bmN0aW9uIChvYmplY3QsIGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5kb25lKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIHByb2dyZXNzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbiAoZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIHtcbiAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAvLyBmb3J3YXJkIHRvIGEgZnV0dXJlIHR1cm4gc28gdGhhdCBgYHdoZW5gYFxuICAgICAgICAvLyBkb2VzIG5vdCBjYXRjaCBpdCBhbmQgdHVybiBpdCBpbnRvIGEgcmVqZWN0aW9uLlxuICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIG1ha2VTdGFja1RyYWNlTG9uZyhlcnJvciwgcHJvbWlzZSk7XG4gICAgICAgICAgICBpZiAoUS5vbmVycm9yKSB7XG4gICAgICAgICAgICAgICAgUS5vbmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBgbmV4dFRpY2tgaW5nIHZpYSBhbiB1bm5lY2Vzc2FyeSBgd2hlbmAuXG4gICAgdmFyIHByb21pc2UgPSBmdWxmaWxsZWQgfHwgcmVqZWN0ZWQgfHwgcHJvZ3Jlc3MgP1xuICAgICAgICB0aGlzLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCwgcHJvZ3Jlc3MpIDpcbiAgICAgICAgdGhpcztcblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzICYmIHByb2Nlc3MuZG9tYWluKSB7XG4gICAgICAgIG9uVW5oYW5kbGVkRXJyb3IgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKG9uVW5oYW5kbGVkRXJyb3IpO1xuICAgIH1cblxuICAgIHByb21pc2UudGhlbih2b2lkIDAsIG9uVW5oYW5kbGVkRXJyb3IpO1xufTtcblxuLyoqXG4gKiBDYXVzZXMgYSBwcm9taXNlIHRvIGJlIHJlamVjdGVkIGlmIGl0IGRvZXMgbm90IGdldCBmdWxmaWxsZWQgYmVmb3JlXG4gKiBzb21lIG1pbGxpc2Vjb25kcyB0aW1lIG91dC5cbiAqIEBwYXJhbSB7QW55Kn0gcHJvbWlzZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbGxpc2Vjb25kcyB0aW1lb3V0XG4gKiBAcGFyYW0ge0FueSp9IGN1c3RvbSBlcnJvciBtZXNzYWdlIG9yIEVycm9yIG9iamVjdCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlIGlmIGl0IGlzXG4gKiBmdWxmaWxsZWQgYmVmb3JlIHRoZSB0aW1lb3V0LCBvdGhlcndpc2UgcmVqZWN0ZWQuXG4gKi9cblEudGltZW91dCA9IGZ1bmN0aW9uIChvYmplY3QsIG1zLCBlcnJvcikge1xuICAgIHJldHVybiBRKG9iamVjdCkudGltZW91dChtcywgZXJyb3IpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uIChtcywgZXJyb3IpIHtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIHZhciB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFlcnJvciB8fCBcInN0cmluZ1wiID09PSB0eXBlb2YgZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKGVycm9yIHx8IFwiVGltZWQgb3V0IGFmdGVyIFwiICsgbXMgKyBcIiBtc1wiKTtcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSBcIkVUSU1FRE9VVFwiO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChlcnJvcik7XG4gICAgfSwgbXMpO1xuXG4gICAgdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gKGV4Y2VwdGlvbikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgZGVmZXJyZWQucmVqZWN0KGV4Y2VwdGlvbik7XG4gICAgfSwgZGVmZXJyZWQubm90aWZ5KTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIGdpdmVuIHZhbHVlIChvciBwcm9taXNlZCB2YWx1ZSksIHNvbWVcbiAqIG1pbGxpc2Vjb25kcyBhZnRlciBpdCByZXNvbHZlZC4gUGFzc2VzIHJlamVjdGlvbnMgaW1tZWRpYXRlbHkuXG4gKiBAcGFyYW0ge0FueSp9IHByb21pc2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBtaWxsaXNlY29uZHNcbiAqIEByZXR1cm5zIGEgcHJvbWlzZSBmb3IgdGhlIHJlc29sdXRpb24gb2YgdGhlIGdpdmVuIHByb21pc2UgYWZ0ZXIgbWlsbGlzZWNvbmRzXG4gKiB0aW1lIGhhcyBlbGFwc2VkIHNpbmNlIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBnaXZlbiBwcm9taXNlLlxuICogSWYgdGhlIGdpdmVuIHByb21pc2UgcmVqZWN0cywgdGhhdCBpcyBwYXNzZWQgaW1tZWRpYXRlbHkuXG4gKi9cblEuZGVsYXkgPSBmdW5jdGlvbiAob2JqZWN0LCB0aW1lb3V0KSB7XG4gICAgaWYgKHRpbWVvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICB0aW1lb3V0ID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBRKG9iamVjdCkuZGVsYXkodGltZW91dCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBQYXNzZXMgYSBjb250aW51YXRpb24gdG8gYSBOb2RlIGZ1bmN0aW9uLCB3aGljaCBpcyBjYWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAqIGFyZ3VtZW50cyBwcm92aWRlZCBhcyBhbiBhcnJheSwgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICpcbiAqICAgICAgUS5uZmFwcGx5KEZTLnJlYWRGaWxlLCBbX19maWxlbmFtZV0pXG4gKiAgICAgIC50aGVuKGZ1bmN0aW9uIChjb250ZW50KSB7XG4gKiAgICAgIH0pXG4gKlxuICovXG5RLm5mYXBwbHkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFyZ3MpIHtcbiAgICByZXR1cm4gUShjYWxsYmFjaykubmZhcHBseShhcmdzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mYXBwbHkgPSBmdW5jdGlvbiAoYXJncykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJncyk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIHRoaXMuZmFwcGx5KG5vZGVBcmdzKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIFBhc3NlcyBhIGNvbnRpbnVhdGlvbiB0byBhIE5vZGUgZnVuY3Rpb24sIHdoaWNoIGlzIGNhbGxlZCB3aXRoIHRoZSBnaXZlblxuICogYXJndW1lbnRzIHByb3ZpZGVkIGluZGl2aWR1YWxseSwgYW5kIHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIFEubmZjYWxsKEZTLnJlYWRGaWxlLCBfX2ZpbGVuYW1lKVxuICogLnRoZW4oZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAqIH0pXG4gKlxuICovXG5RLm5mY2FsbCA9IGZ1bmN0aW9uIChjYWxsYmFjayAvKi4uLmFyZ3MqLykge1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gUShjYWxsYmFjaykubmZhcHBseShhcmdzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mY2FsbCA9IGZ1bmN0aW9uICgvKi4uLmFyZ3MqLykge1xuICAgIHZhciBub2RlQXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbn07XG5cbi8qKlxuICogV3JhcHMgYSBOb2RlSlMgY29udGludWF0aW9uIHBhc3NpbmcgZnVuY3Rpb24gYW5kIHJldHVybnMgYW4gZXF1aXZhbGVudFxuICogdmVyc2lvbiB0aGF0IHJldHVybnMgYSBwcm9taXNlLlxuICogQGV4YW1wbGVcbiAqIFEubmZiaW5kKEZTLnJlYWRGaWxlLCBfX2ZpbGVuYW1lKShcInV0Zi04XCIpXG4gKiAudGhlbihjb25zb2xlLmxvZylcbiAqIC5kb25lKClcbiAqL1xuUS5uZmJpbmQgPVxuUS5kZW5vZGVpZnkgPSBmdW5jdGlvbiAoY2FsbGJhY2sgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYmFzZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlQXJncyA9IGJhc2VBcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKTtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgICAgICBRKGNhbGxiYWNrKS5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5mYmluZCA9XG5Qcm9taXNlLnByb3RvdHlwZS5kZW5vZGVpZnkgPSBmdW5jdGlvbiAoLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYXJncyA9IGFycmF5X3NsaWNlKGFyZ3VtZW50cyk7XG4gICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgIHJldHVybiBRLmRlbm9kZWlmeS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xufTtcblxuUS5uYmluZCA9IGZ1bmN0aW9uIChjYWxsYmFjaywgdGhpc3AgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgYmFzZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBub2RlQXJncyA9IGJhc2VBcmdzLmNvbmNhdChhcnJheV9zbGljZShhcmd1bWVudHMpKTtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICAgICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgICAgICBmdW5jdGlvbiBib3VuZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzcCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBRKGJvdW5kKS5mYXBwbHkobm9kZUFyZ3MpLmZhaWwoZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLm5iaW5kID0gZnVuY3Rpb24gKC8qdGhpc3AsIC4uLmFyZ3MqLykge1xuICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAwKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgcmV0dXJuIFEubmJpbmQuYXBwbHkodm9pZCAwLCBhcmdzKTtcbn07XG5cbi8qKlxuICogQ2FsbHMgYSBtZXRob2Qgb2YgYSBOb2RlLXN0eWxlIG9iamVjdCB0aGF0IGFjY2VwdHMgYSBOb2RlLXN0eWxlXG4gKiBjYWxsYmFjayB3aXRoIGEgZ2l2ZW4gYXJyYXkgb2YgYXJndW1lbnRzLCBwbHVzIGEgcHJvdmlkZWQgY2FsbGJhY2suXG4gKiBAcGFyYW0gb2JqZWN0IGFuIG9iamVjdCB0aGF0IGhhcyB0aGUgbmFtZWQgbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBtZXRob2Qgb2Ygb2JqZWN0XG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBtZXRob2Q7IHRoZSBjYWxsYmFja1xuICogd2lsbCBiZSBwcm92aWRlZCBieSBRIGFuZCBhcHBlbmRlZCB0byB0aGVzZSBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyBhIHByb21pc2UgZm9yIHRoZSB2YWx1ZSBvciBlcnJvclxuICovXG5RLm5tYXBwbHkgPSAvLyBYWFggQXMgcHJvcG9zZWQgYnkgXCJSZWRzYW5kcm9cIlxuUS5ucG9zdCA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIGFyZ3MpIHtcbiAgICByZXR1cm4gUShvYmplY3QpLm5wb3N0KG5hbWUsIGFyZ3MpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubm1hcHBseSA9IC8vIFhYWCBBcyBwcm9wb3NlZCBieSBcIlJlZHNhbmRyb1wiXG5Qcm9taXNlLnByb3RvdHlwZS5ucG9zdCA9IGZ1bmN0aW9uIChuYW1lLCBhcmdzKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJncyB8fCBbXSk7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcbiAgICBub2RlQXJncy5wdXNoKGRlZmVycmVkLm1ha2VOb2RlUmVzb2x2ZXIoKSk7XG4gICAgdGhpcy5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIG5vZGVBcmdzXSkuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuLyoqXG4gKiBDYWxscyBhIG1ldGhvZCBvZiBhIE5vZGUtc3R5bGUgb2JqZWN0IHRoYXQgYWNjZXB0cyBhIE5vZGUtc3R5bGVcbiAqIGNhbGxiYWNrLCBmb3J3YXJkaW5nIHRoZSBnaXZlbiB2YXJpYWRpYyBhcmd1bWVudHMsIHBsdXMgYSBwcm92aWRlZFxuICogY2FsbGJhY2sgYXJndW1lbnQuXG4gKiBAcGFyYW0gb2JqZWN0IGFuIG9iamVjdCB0aGF0IGhhcyB0aGUgbmFtZWQgbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBtZXRob2Qgb2Ygb2JqZWN0XG4gKiBAcGFyYW0gLi4uYXJncyBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgbWV0aG9kOyB0aGUgY2FsbGJhY2sgd2lsbFxuICogYmUgcHJvdmlkZWQgYnkgUSBhbmQgYXBwZW5kZWQgdG8gdGhlc2UgYXJndW1lbnRzLlxuICogQHJldHVybnMgYSBwcm9taXNlIGZvciB0aGUgdmFsdWUgb3IgZXJyb3JcbiAqL1xuUS5uc2VuZCA9IC8vIFhYWCBCYXNlZCBvbiBNYXJrIE1pbGxlcidzIHByb3Bvc2VkIFwic2VuZFwiXG5RLm5tY2FsbCA9IC8vIFhYWCBCYXNlZCBvbiBcIlJlZHNhbmRybydzXCIgcHJvcG9zYWxcblEubmludm9rZSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUgLyouLi5hcmdzKi8pIHtcbiAgICB2YXIgbm9kZUFyZ3MgPSBhcnJheV9zbGljZShhcmd1bWVudHMsIDIpO1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgbm9kZUFyZ3MucHVzaChkZWZlcnJlZC5tYWtlTm9kZVJlc29sdmVyKCkpO1xuICAgIFEob2JqZWN0KS5kaXNwYXRjaChcInBvc3RcIiwgW25hbWUsIG5vZGVBcmdzXSkuZmFpbChkZWZlcnJlZC5yZWplY3QpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUubnNlbmQgPSAvLyBYWFggQmFzZWQgb24gTWFyayBNaWxsZXIncyBwcm9wb3NlZCBcInNlbmRcIlxuUHJvbWlzZS5wcm90b3R5cGUubm1jYWxsID0gLy8gWFhYIEJhc2VkIG9uIFwiUmVkc2FuZHJvJ3NcIiBwcm9wb3NhbFxuUHJvbWlzZS5wcm90b3R5cGUubmludm9rZSA9IGZ1bmN0aW9uIChuYW1lIC8qLi4uYXJncyovKSB7XG4gICAgdmFyIG5vZGVBcmdzID0gYXJyYXlfc2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuICAgIG5vZGVBcmdzLnB1c2goZGVmZXJyZWQubWFrZU5vZGVSZXNvbHZlcigpKTtcbiAgICB0aGlzLmRpc3BhdGNoKFwicG9zdFwiLCBbbmFtZSwgbm9kZUFyZ3NdKS5mYWlsKGRlZmVycmVkLnJlamVjdCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59O1xuXG4vKipcbiAqIElmIGEgZnVuY3Rpb24gd291bGQgbGlrZSB0byBzdXBwb3J0IGJvdGggTm9kZSBjb250aW51YXRpb24tcGFzc2luZy1zdHlsZSBhbmRcbiAqIHByb21pc2UtcmV0dXJuaW5nLXN0eWxlLCBpdCBjYW4gZW5kIGl0cyBpbnRlcm5hbCBwcm9taXNlIGNoYWluIHdpdGhcbiAqIGBub2RlaWZ5KG5vZGViYWNrKWAsIGZvcndhcmRpbmcgdGhlIG9wdGlvbmFsIG5vZGViYWNrIGFyZ3VtZW50LiAgSWYgdGhlIHVzZXJcbiAqIGVsZWN0cyB0byB1c2UgYSBub2RlYmFjaywgdGhlIHJlc3VsdCB3aWxsIGJlIHNlbnQgdGhlcmUuICBJZiB0aGV5IGRvIG5vdFxuICogcGFzcyBhIG5vZGViYWNrLCB0aGV5IHdpbGwgcmVjZWl2ZSB0aGUgcmVzdWx0IHByb21pc2UuXG4gKiBAcGFyYW0gb2JqZWN0IGEgcmVzdWx0IChvciBhIHByb21pc2UgZm9yIGEgcmVzdWx0KVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbm9kZWJhY2sgYSBOb2RlLmpzLXN0eWxlIGNhbGxiYWNrXG4gKiBAcmV0dXJucyBlaXRoZXIgdGhlIHByb21pc2Ugb3Igbm90aGluZ1xuICovXG5RLm5vZGVpZnkgPSBub2RlaWZ5O1xuZnVuY3Rpb24gbm9kZWlmeShvYmplY3QsIG5vZGViYWNrKSB7XG4gICAgcmV0dXJuIFEob2JqZWN0KS5ub2RlaWZ5KG5vZGViYWNrKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUubm9kZWlmeSA9IGZ1bmN0aW9uIChub2RlYmFjaykge1xuICAgIGlmIChub2RlYmFjaykge1xuICAgICAgICB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlYmFjayhudWxsLCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBRLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBub2RlYmFjayhlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxuUS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUS5ub0NvbmZsaWN0IG9ubHkgd29ya3Mgd2hlbiBRIGlzIHVzZWQgYXMgYSBnbG9iYWxcIik7XG59O1xuXG4vLyBBbGwgY29kZSBiZWZvcmUgdGhpcyBwb2ludCB3aWxsIGJlIGZpbHRlcmVkIGZyb20gc3RhY2sgdHJhY2VzLlxudmFyIHFFbmRpbmdMaW5lID0gY2FwdHVyZUxpbmUoKTtcblxucmV0dXJuIFE7XG5cbn0pO1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuL2Nvb2tpZXMnKTtcbnZhciBzdG9yYWdlVXRpbCA9IHJlcXVpcmUoJy4vc3RvcmFnZVV0aWwnKTtcbnZhciBRID0gcmVxdWlyZSgncScpO1xudmFyIEF1dGhBcGlFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL0F1dGhBcGlFcnJvcicpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5cbmZ1bmN0aW9uIGh0dHBSZXF1ZXN0KHNkaywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHVybCA9IG9wdGlvbnMudXJsLFxuICAgICAgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QsXG4gICAgICBhcmdzID0gb3B0aW9ucy5hcmdzLFxuICAgICAgc2F2ZUF1dGhuU3RhdGUgPSBvcHRpb25zLnNhdmVBdXRoblN0YXRlLFxuICAgICAgYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuLFxuICAgICAgaHR0cENhY2hlID0gc3RvcmFnZVV0aWwuZ2V0SHR0cENhY2hlKCk7XG5cbiAgaWYgKG9wdGlvbnMuY2FjaGVSZXNwb25zZSkge1xuICAgIHZhciBjYWNoZUNvbnRlbnRzID0gaHR0cENhY2hlLmdldFN0b3JhZ2UoKTtcbiAgICB2YXIgY2FjaGVkUmVzcG9uc2UgPSBjYWNoZUNvbnRlbnRzW3VybF07XG4gICAgaWYgKGNhY2hlZFJlc3BvbnNlICYmIERhdGUubm93KCkvMTAwMCA8IGNhY2hlZFJlc3BvbnNlLmV4cGlyZXNBdCkge1xuICAgICAgcmV0dXJuIFEucmVzb2x2ZShjYWNoZWRSZXNwb25zZS5yZXNwb25zZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhlYWRlcnMgPSB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdYLU9rdGEtVXNlci1BZ2VudC1FeHRlbmRlZCc6IHNkay51c2VyQWdlbnRcbiAgfTtcbiAgdXRpbC5leHRlbmQoaGVhZGVycywgc2RrLm9wdGlvbnMuaGVhZGVycywgb3B0aW9ucy5oZWFkZXJzKTtcblxuICBpZiAoYWNjZXNzVG9rZW4gJiYgdXRpbC5pc1N0cmluZyhhY2Nlc3NUb2tlbikpIHtcbiAgICBoZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSAnQmVhcmVyICcgKyBhY2Nlc3NUb2tlbjtcbiAgfVxuXG4gIHZhciBhamF4T3B0aW9ucyA9IHtcbiAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgIGRhdGE6IGFyZ3MgfHwgdW5kZWZpbmVkXG4gIH07XG5cbiAgdmFyIGVyciwgcmVzO1xuICByZXR1cm4gbmV3IFEoc2RrLm9wdGlvbnMuYWpheFJlcXVlc3QobWV0aG9kLCB1cmwsIGFqYXhPcHRpb25zKSlcbiAgICAudGhlbihmdW5jdGlvbihyZXNwKSB7XG4gICAgICByZXMgPSByZXNwLnJlc3BvbnNlVGV4dDtcbiAgICAgIGlmIChyZXMgJiYgdXRpbC5pc1N0cmluZyhyZXMpKSB7XG4gICAgICAgIHJlcyA9IEpTT04ucGFyc2UocmVzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNhdmVBdXRoblN0YXRlKSB7XG4gICAgICAgIGlmICghcmVzLnN0YXRlVG9rZW4pIHtcbiAgICAgICAgICBjb29raWVzLmRlbGV0ZUNvb2tpZShjb25maWcuU1RBVEVfVE9LRU5fQ09PS0lFX05BTUUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXMgJiYgcmVzLnN0YXRlVG9rZW4gJiYgcmVzLmV4cGlyZXNBdCkge1xuICAgICAgICBjb29raWVzLnNldENvb2tpZShjb25maWcuU1RBVEVfVE9LRU5fQ09PS0lFX05BTUUsIHJlcy5zdGF0ZVRva2VuLCByZXMuZXhwaXJlc0F0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlcyAmJiBvcHRpb25zLmNhY2hlUmVzcG9uc2UpIHtcbiAgICAgICAgaHR0cENhY2hlLnVwZGF0ZVN0b3JhZ2UodXJsLCB7XG4gICAgICAgICAgZXhwaXJlc0F0OiBNYXRoLmZsb29yKERhdGUubm93KCkvMTAwMCkgKyBjb25maWcuREVGQVVMVF9DQUNIRV9EVVJBVElPTixcbiAgICAgICAgICByZXNwb25zZTogcmVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pXG4gICAgLmZhaWwoZnVuY3Rpb24ocmVzcCkge1xuICAgICAgdmFyIHNlcnZlckVyciA9IHJlc3AucmVzcG9uc2VUZXh0IHx8IHt9O1xuICAgICAgaWYgKHV0aWwuaXNTdHJpbmcoc2VydmVyRXJyKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHNlcnZlckVyciA9IEpTT04ucGFyc2Uoc2VydmVyRXJyKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHNlcnZlckVyciA9IHtcbiAgICAgICAgICAgIGVycm9yU3VtbWFyeTogJ1Vua25vd24gZXJyb3InXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmVzcC5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgIHNlcnZlckVyci5lcnJvclN1bW1hcnkgPSAnVW5rbm93biBlcnJvcic7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZGsub3B0aW9ucy50cmFuc2Zvcm1FcnJvclhIUikge1xuICAgICAgICByZXNwID0gc2RrLm9wdGlvbnMudHJhbnNmb3JtRXJyb3JYSFIodXRpbC5jbG9uZShyZXNwKSk7XG4gICAgICB9XG5cbiAgICAgIGVyciA9IG5ldyBBdXRoQXBpRXJyb3Ioc2VydmVyRXJyLCByZXNwKTtcblxuICAgICAgaWYgKGVyci5lcnJvckNvZGUgPT09ICdFMDAwMDAxMScpIHtcbiAgICAgICAgY29va2llcy5kZWxldGVDb29raWUoY29uZmlnLlNUQVRFX1RPS0VOX0NPT0tJRV9OQU1FKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXQoc2RrLCB1cmwsIG9wdGlvbnMpIHtcbiAgdXJsID0gdXRpbC5pc0Fic29sdXRlVXJsKHVybCkgPyB1cmwgOiBzZGsub3B0aW9ucy51cmwgKyB1cmw7XG4gIHZhciBnZXRPcHRpb25zID0ge1xuICAgIHVybDogdXJsLFxuICAgIG1ldGhvZDogJ0dFVCdcbiAgfTtcbiAgdXRpbC5leHRlbmQoZ2V0T3B0aW9ucywgb3B0aW9ucyk7XG4gIHJldHVybiBodHRwUmVxdWVzdChzZGssIGdldE9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBwb3N0KHNkaywgdXJsLCBhcmdzLCBvcHRpb25zKSB7XG4gIHVybCA9IHV0aWwuaXNBYnNvbHV0ZVVybCh1cmwpID8gdXJsIDogc2RrLm9wdGlvbnMudXJsICsgdXJsO1xuICB2YXIgcG9zdE9wdGlvbnMgPSB7XG4gICAgdXJsOiB1cmwsXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgYXJnczogYXJncyxcbiAgICBzYXZlQXV0aG5TdGF0ZTogdHJ1ZVxuICB9O1xuICB1dGlsLmV4dGVuZChwb3N0T3B0aW9ucywgb3B0aW9ucyk7XG4gIHJldHVybiBodHRwUmVxdWVzdChzZGssIHBvc3RPcHRpb25zKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldDogZ2V0LFxuICBwb3N0OiBwb3N0LFxuICBodHRwUmVxdWVzdDogaHR0cFJlcXVlc3Rcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfY3JlYXRlUnVsZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlUnVsZScpO1xuXG52YXIgX2NyZWF0ZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUnVsZSk7XG5cbnZhciBfbGlua1J1bGUgPSByZXF1aXJlKCcuL3V0aWxzL2xpbmtSdWxlJyk7XG5cbnZhciBfbGlua1J1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbGlua1J1bGUpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfZXNjYXBlID0gcmVxdWlyZSgnLi91dGlscy9lc2NhcGUnKTtcblxudmFyIF9lc2NhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXNjYXBlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICogSXMgdXNlZCBmb3IgZS5nLiBieSBgU3R5bGVTaGVldGAgb3IgYENvbmRpdGlvbmFsUnVsZWAuXG4gKi9cbnZhciBSdWxlTGlzdCA9IGZ1bmN0aW9uICgpIHtcblxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSdWxlTGlzdCk7XG5cbiAgICB0aGlzLm1hcCA9IHt9O1xuICAgIHRoaXMucmF3ID0ge307XG4gICAgdGhpcy5pbmRleCA9IFtdO1xuXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICAgICAgdmFyIF9vcHRpb25zID0gX3RoaXMub3B0aW9ucyxcbiAgICAgICAgICBwbHVnaW5zID0gX29wdGlvbnMuanNzLnBsdWdpbnMsXG4gICAgICAgICAgc2hlZXQgPSBfb3B0aW9ucy5zaGVldDtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIF90aGlzLmdldChuYW1lKSwgc2hlZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IF90aGlzLmluZGV4Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHBsdWdpbnMub25VcGRhdGUobmFtZSwgX3RoaXMuaW5kZXhbaW5kZXhdLCBzaGVldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIC8vIFVzZWQgdG8gZW5zdXJlIGNvcnJlY3QgcnVsZXMgb3JkZXIuXG5cbiAgLy8gUnVsZXMgcmVnaXN0cnkgZm9yIGFjY2VzcyBieSAuZ2V0KCkgbWV0aG9kLlxuICAvLyBJdCBjb250YWlucyB0aGUgc2FtZSBydWxlIHJlZ2lzdGVyZWQgYnkgbmFtZSBhbmQgYnkgc2VsZWN0b3IuXG5cblxuICBfY3JlYXRlQ2xhc3MoUnVsZUxpc3QsIFt7XG4gICAga2V5OiAnYWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBfb3B0aW9uczIgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgcGFyZW50ID0gX29wdGlvbnMyLnBhcmVudCxcbiAgICAgICAgICBzaGVldCA9IF9vcHRpb25zMi5zaGVldCxcbiAgICAgICAgICBqc3MgPSBfb3B0aW9uczIuanNzLFxuICAgICAgICAgIFJlbmRlcmVyID0gX29wdGlvbnMyLlJlbmRlcmVyLFxuICAgICAgICAgIGdlbmVyYXRlQ2xhc3NOYW1lID0gX29wdGlvbnMyLmdlbmVyYXRlQ2xhc3NOYW1lO1xuXG5cbiAgICAgIG9wdGlvbnMgPSBfZXh0ZW5kcyh7XG4gICAgICAgIGNsYXNzZXM6IHRoaXMuY2xhc3NlcyxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIHNoZWV0OiBzaGVldCxcbiAgICAgICAganNzOiBqc3MsXG4gICAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgICAgZ2VuZXJhdGVDbGFzc05hbWU6IGdlbmVyYXRlQ2xhc3NOYW1lXG4gICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgaWYgKCFvcHRpb25zLnNlbGVjdG9yICYmIHRoaXMuY2xhc3Nlc1tuYW1lXSkge1xuICAgICAgICBvcHRpb25zLnNlbGVjdG9yID0gJy4nICsgKDAsIF9lc2NhcGUyWydkZWZhdWx0J10pKHRoaXMuY2xhc3Nlc1tuYW1lXSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmF3W25hbWVdID0gZGVjbDtcblxuICAgICAgdmFyIHJ1bGUgPSAoMCwgX2NyZWF0ZVJ1bGUyWydkZWZhdWx0J10pKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gdm9pZCAwO1xuXG4gICAgICBpZiAoIW9wdGlvbnMuc2VsZWN0b3IgJiYgcnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pIHtcbiAgICAgICAgY2xhc3NOYW1lID0gZ2VuZXJhdGVDbGFzc05hbWUocnVsZSwgc2hlZXQpO1xuICAgICAgICBydWxlLnNlbGVjdG9yID0gJy4nICsgKDAsIF9lc2NhcGUyWydkZWZhdWx0J10pKGNsYXNzTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVnaXN0ZXIocnVsZSwgY2xhc3NOYW1lKTtcblxuICAgICAgdmFyIGluZGV4ID0gb3B0aW9ucy5pbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5pbmRleC5sZW5ndGggOiBvcHRpb25zLmluZGV4O1xuICAgICAgdGhpcy5pbmRleC5zcGxpY2UoaW5kZXgsIDAsIHJ1bGUpO1xuXG4gICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZShydWxlKSB7XG4gICAgICB0aGlzLnVucmVnaXN0ZXIocnVsZSk7XG4gICAgICB0aGlzLmluZGV4LnNwbGljZSh0aGlzLmluZGV4T2YocnVsZSksIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmluZGV4LmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUnVuIGBvblByb2Nlc3NSdWxlKClgIHBsdWdpbnMgb24gZXZlcnkgcnVsZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncHJvY2VzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucztcbiAgICAgIC8vIFdlIG5lZWQgdG8gY2xvbmUgYXJyYXkgYmVjYXVzZSBpZiB3ZSBtb2RpZnkgdGhlIGluZGV4IHNvbWV3aGVyZSBlbHNlIGR1cmluZyBhIGxvb3BcbiAgICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgICAgdGhpcy5pbmRleC5zbGljZSgwKS5mb3JFYWNoKHBsdWdpbnMub25Qcm9jZXNzUnVsZSwgcGx1Z2lucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBydWxlIGluIGAubWFwYCBhbmQgYC5jbGFzc2VzYCBtYXBzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZWdpc3RlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyKHJ1bGUsIGNsYXNzTmFtZSkge1xuICAgICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcbiAgICAgIGlmIChydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkge1xuICAgICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICAgIGlmIChjbGFzc05hbWUpIHRoaXMuY2xhc3Nlc1tydWxlLmtleV0gPSBjbGFzc05hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlciBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VucmVnaXN0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyKHJ1bGUpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG4gICAgICBpZiAocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgICBkZWxldGUgdGhpcy5jbGFzc2VzW3J1bGUua2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xpbmsnLFxuXG5cbiAgICAvKipcbiAgICAgKiBMaW5rIHJlbmRlcmFibGUgcnVsZXMgd2l0aCBDU1NSdWxlTGlzdC5cbiAgICAgKi9cbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluayhjc3NSdWxlcykge1xuICAgICAgdmFyIG1hcCA9IHRoaXMub3B0aW9ucy5zaGVldC5yZW5kZXJlci5nZXRVbmVzY2FwZWRLZXlzTWFwKHRoaXMuaW5kZXgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzc1J1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjc3NSdWxlID0gY3NzUnVsZXNbaV07XG4gICAgICAgIHZhciBfa2V5ID0gdGhpcy5vcHRpb25zLnNoZWV0LnJlbmRlcmVyLmdldEtleShjc3NSdWxlKTtcbiAgICAgICAgaWYgKG1hcFtfa2V5XSkgX2tleSA9IG1hcFtfa2V5XTtcbiAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLm1hcFtfa2V5XTtcbiAgICAgICAgaWYgKHJ1bGUpICgwLCBfbGlua1J1bGUyWydkZWZhdWx0J10pKHJ1bGUsIGNzc1J1bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgICAgdmFyIGxpbmsgPSBzaGVldCA/IHNoZWV0Lm9wdGlvbnMubGluayA6IGZhbHNlO1xuXG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLmluZGV4W2luZGV4XTtcbiAgICAgICAgdmFyIGNzcyA9IHJ1bGUudG9TdHJpbmcob3B0aW9ucyk7XG5cbiAgICAgICAgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cbiAgICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmIChzdHIpIHN0ciArPSAnXFxuJztcbiAgICAgICAgc3RyICs9IGNzcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUnVsZUxpc3Q7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFJ1bGVMaXN0OyIsIi8vIFNvdXJjZTogaHR0cDovL2pzZmlkZGxlLm5ldC92V3g4Vi9cbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTYwMzE5NS9mdWxsLWxpc3Qtb2YtamF2YXNjcmlwdC1rZXljb2Rlc1xuXG4vKipcbiAqIENvbmVuaWVuY2UgbWV0aG9kIHJldHVybnMgY29ycmVzcG9uZGluZyB2YWx1ZSBmb3IgZ2l2ZW4ga2V5TmFtZSBvciBrZXlDb2RlLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGtleUNvZGUge051bWJlcn0gb3Iga2V5TmFtZSB7U3RyaW5nfVxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGtleUNvZGUoc2VhcmNoSW5wdXQpIHtcbiAgLy8gS2V5Ym9hcmQgRXZlbnRzXG4gIGlmIChzZWFyY2hJbnB1dCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIHNlYXJjaElucHV0KSB7XG4gICAgdmFyIGhhc0tleUNvZGUgPSBzZWFyY2hJbnB1dC53aGljaCB8fCBzZWFyY2hJbnB1dC5rZXlDb2RlIHx8IHNlYXJjaElucHV0LmNoYXJDb2RlXG4gICAgaWYgKGhhc0tleUNvZGUpIHNlYXJjaElucHV0ID0gaGFzS2V5Q29kZVxuICB9XG5cbiAgLy8gTnVtYmVyc1xuICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBzZWFyY2hJbnB1dCkgcmV0dXJuIG5hbWVzW3NlYXJjaElucHV0XVxuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSAoY2FzdCB0byBzdHJpbmcpXG4gIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoSW5wdXQpXG5cbiAgLy8gY2hlY2sgY29kZXNcbiAgdmFyIGZvdW5kTmFtZWRLZXkgPSBjb2Rlc1tzZWFyY2gudG9Mb3dlckNhc2UoKV1cbiAgaWYgKGZvdW5kTmFtZWRLZXkpIHJldHVybiBmb3VuZE5hbWVkS2V5XG5cbiAgLy8gY2hlY2sgYWxpYXNlc1xuICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbc2VhcmNoLnRvTG93ZXJDYXNlKCldXG4gIGlmIChmb3VuZE5hbWVkS2V5KSByZXR1cm4gZm91bmROYW1lZEtleVxuXG4gIC8vIHdlaXJkIGNoYXJhY3Rlcj9cbiAgaWYgKHNlYXJjaC5sZW5ndGggPT09IDEpIHJldHVybiBzZWFyY2guY2hhckNvZGVBdCgwKVxuXG4gIHJldHVybiB1bmRlZmluZWRcbn1cblxuLyoqXG4gKiBDb21wYXJlcyBhIGtleWJvYXJkIGV2ZW50IHdpdGggYSBnaXZlbiBrZXlDb2RlIG9yIGtleU5hbWUuXG4gKlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgS2V5Ym9hcmQgZXZlbnQgdGhhdCBzaG91bGQgYmUgdGVzdGVkXG4gKiBAcGFyYW0ge01peGVkfSBrZXlDb2RlIHtOdW1iZXJ9IG9yIGtleU5hbWUge1N0cmluZ31cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5rZXlDb2RlLmlzRXZlbnRLZXkgPSBmdW5jdGlvbiBpc0V2ZW50S2V5KGV2ZW50LCBuYW1lT3JDb2RlKSB7XG4gIGlmIChldmVudCAmJiAnb2JqZWN0JyA9PT0gdHlwZW9mIGV2ZW50KSB7XG4gICAgdmFyIGtleUNvZGUgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlXG4gICAgaWYgKGtleUNvZGUgPT09IG51bGwgfHwga2V5Q29kZSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgbmFtZU9yQ29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGNoZWNrIGNvZGVzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGNvZGVzW25hbWVPckNvZGUudG9Mb3dlckNhc2UoKV1cbiAgICAgIGlmIChmb3VuZE5hbWVkS2V5KSB7IHJldHVybiBmb3VuZE5hbWVkS2V5ID09PSBrZXlDb2RlOyB9XG4gICAgXG4gICAgICAvLyBjaGVjayBhbGlhc2VzXG4gICAgICB2YXIgZm91bmROYW1lZEtleSA9IGFsaWFzZXNbbmFtZU9yQ29kZS50b0xvd2VyQ2FzZSgpXVxuICAgICAgaWYgKGZvdW5kTmFtZWRLZXkpIHsgcmV0dXJuIGZvdW5kTmFtZWRLZXkgPT09IGtleUNvZGU7IH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYW1lT3JDb2RlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5hbWVPckNvZGUgPT09IGtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBrZXlDb2RlO1xuXG4vKipcbiAqIEdldCBieSBuYW1lXG4gKlxuICogICBleHBvcnRzLmNvZGVbJ2VudGVyJ10gLy8gPT4gMTNcbiAqL1xuXG52YXIgY29kZXMgPSBleHBvcnRzLmNvZGUgPSBleHBvcnRzLmNvZGVzID0ge1xuICAnYmFja3NwYWNlJzogOCxcbiAgJ3RhYic6IDksXG4gICdlbnRlcic6IDEzLFxuICAnc2hpZnQnOiAxNixcbiAgJ2N0cmwnOiAxNyxcbiAgJ2FsdCc6IDE4LFxuICAncGF1c2UvYnJlYWsnOiAxOSxcbiAgJ2NhcHMgbG9jayc6IDIwLFxuICAnZXNjJzogMjcsXG4gICdzcGFjZSc6IDMyLFxuICAncGFnZSB1cCc6IDMzLFxuICAncGFnZSBkb3duJzogMzQsXG4gICdlbmQnOiAzNSxcbiAgJ2hvbWUnOiAzNixcbiAgJ2xlZnQnOiAzNyxcbiAgJ3VwJzogMzgsXG4gICdyaWdodCc6IDM5LFxuICAnZG93bic6IDQwLFxuICAnaW5zZXJ0JzogNDUsXG4gICdkZWxldGUnOiA0NixcbiAgJ2NvbW1hbmQnOiA5MSxcbiAgJ2xlZnQgY29tbWFuZCc6IDkxLFxuICAncmlnaHQgY29tbWFuZCc6IDkzLFxuICAnbnVtcGFkIConOiAxMDYsXG4gICdudW1wYWQgKyc6IDEwNyxcbiAgJ251bXBhZCAtJzogMTA5LFxuICAnbnVtcGFkIC4nOiAxMTAsXG4gICdudW1wYWQgLyc6IDExMSxcbiAgJ251bSBsb2NrJzogMTQ0LFxuICAnc2Nyb2xsIGxvY2snOiAxNDUsXG4gICdteSBjb21wdXRlcic6IDE4MixcbiAgJ215IGNhbGN1bGF0b3InOiAxODMsXG4gICc7JzogMTg2LFxuICAnPSc6IDE4NyxcbiAgJywnOiAxODgsXG4gICctJzogMTg5LFxuICAnLic6IDE5MCxcbiAgJy8nOiAxOTEsXG4gICdgJzogMTkyLFxuICAnWyc6IDIxOSxcbiAgJ1xcXFwnOiAyMjAsXG4gICddJzogMjIxLFxuICBcIidcIjogMjIyXG59XG5cbi8vIEhlbHBlciBhbGlhc2VzXG5cbnZhciBhbGlhc2VzID0gZXhwb3J0cy5hbGlhc2VzID0ge1xuICAnd2luZG93cyc6IDkxLFxuICAn4oenJzogMTYsXG4gICfijKUnOiAxOCxcbiAgJ+KMgyc6IDE3LFxuICAn4oyYJzogOTEsXG4gICdjdGwnOiAxNyxcbiAgJ2NvbnRyb2wnOiAxNyxcbiAgJ29wdGlvbic6IDE4LFxuICAncGF1c2UnOiAxOSxcbiAgJ2JyZWFrJzogMTksXG4gICdjYXBzJzogMjAsXG4gICdyZXR1cm4nOiAxMyxcbiAgJ2VzY2FwZSc6IDI3LFxuICAnc3BjJzogMzIsXG4gICdzcGFjZWJhcic6IDMyLFxuICAncGd1cCc6IDMzLFxuICAncGdkbic6IDM0LFxuICAnaW5zJzogNDUsXG4gICdkZWwnOiA0NixcbiAgJ2NtZCc6IDkxXG59XG5cbi8qIVxuICogUHJvZ3JhbWF0aWNhbGx5IGFkZCB0aGUgZm9sbG93aW5nXG4gKi9cblxuLy8gbG93ZXIgY2FzZSBjaGFyc1xuZm9yIChpID0gOTc7IGkgPCAxMjM7IGkrKykgY29kZXNbU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpIC0gMzJcblxuLy8gbnVtYmVyc1xuZm9yICh2YXIgaSA9IDQ4OyBpIDwgNTg7IGkrKykgY29kZXNbaSAtIDQ4XSA9IGlcblxuLy8gZnVuY3Rpb24ga2V5c1xuZm9yIChpID0gMTsgaSA8IDEzOyBpKyspIGNvZGVzWydmJytpXSA9IGkgKyAxMTFcblxuLy8gbnVtcGFkIGtleXNcbmZvciAoaSA9IDA7IGkgPCAxMDsgaSsrKSBjb2Rlc1snbnVtcGFkICcraV0gPSBpICsgOTZcblxuLyoqXG4gKiBHZXQgYnkgY29kZVxuICpcbiAqICAgZXhwb3J0cy5uYW1lWzEzXSAvLyA9PiAnRW50ZXInXG4gKi9cblxudmFyIG5hbWVzID0gZXhwb3J0cy5uYW1lcyA9IGV4cG9ydHMudGl0bGUgPSB7fSAvLyB0aXRsZSBmb3IgYmFja3dhcmQgY29tcGF0XG5cbi8vIENyZWF0ZSByZXZlcnNlIG1hcHBpbmdcbmZvciAoaSBpbiBjb2RlcykgbmFtZXNbY29kZXNbaV1dID0gaVxuXG4vLyBBZGQgYWxpYXNlc1xuZm9yICh2YXIgYWxpYXMgaW4gYWxpYXNlcykge1xuICBjb2Rlc1thbGlhc10gPSBhbGlhc2VzW2FsaWFzXVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0ICogYXMgdHlwZXMgZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zJztcblxuZXhwb3J0IHR5cGUgU3RhdGUgPSB7XG4gICAgK2l0ZW1zOiBVc2VyW10sXG4gICAgK2ZldGNoaW5nOiBib29sZWFuLFxuICAgICtlcnJvcjogYm9vbGVhblxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XG4gICAgaXRlbXM6IFtdLFxuICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICBlcnJvcjogZmFsc2Vcbn07XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyID0gKHN0YXRlOiBTdGF0ZSA9IGRlZmF1bHRTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1VTRVJTX0xJU1RfUkVDRUlWRSc6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnVVNFUlNfTElTVF9GRVRDSElORyc6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgZmV0Y2hpbmc6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnVVNFUlNfTElTVF9GRVRDSElOR19FUlJPUic6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHR5cGUgeyBVc2VyIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gfSBmcm9tICcuL2FjdGlvbnMnO1xuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHtcbiAgICArdXNlcjogP1VzZXIsXG4gICAgK2ZldGNoaW5nOiBib29sZWFuLFxuICAgICtlcnJvcjogYm9vbGVhblxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRTdGF0ZTogU3RhdGUgPSB7XG4gICAgdXNlcjogbnVsbCxcbiAgICBmZXRjaGluZzogZmFsc2UsXG4gICAgZXJyb3I6IGZhbHNlXG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZTogU3RhdGUgPSBkZWZhdWx0U3RhdGUsIGFjdGlvbjogQWN0aW9uKSA9PiB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdVU0VSU19VU0VSX1JFQ0VJVkUnOiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHVzZXI6IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgICAgIGZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnVVNFUlNfVVNFUl9GRVRDSElORyc6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgZmV0Y2hpbmc6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnVVNFUlNfVVNFUl9GRVRDSElOR19FUlJPUic6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgdXNlcjogbnVsbCxcbiAgICAgICAgICAgICAgICBmZXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHR5cGUgeyBDb21iaW5lZFJlZHVjZXIgfSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCB7IHJlZHVjZXIgYXMgbGlzdFJlZHVjZXIgfSBmcm9tICcuL2xpc3QvcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIExpc3RTdGF0ZSB9IGZyb20gJy4vbGlzdC9yZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uIGFzIExpc3RBY3Rpb24gfSBmcm9tICcuL2xpc3QvYWN0aW9ucyc7XG5cbmltcG9ydCB7IHJlZHVjZXIgYXMgdXNlclJlZHVjZXIgfSBmcm9tICcuL3VzZXIvcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFVzZXJTdGF0ZSB9IGZyb20gJy4vdXNlci9yZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uIGFzIFVzZXJBY3Rpb24gfSBmcm9tICcuL3VzZXIvYWN0aW9ucyc7XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9IExpc3RBY3Rpb24gfCBVc2VyQWN0aW9uO1xuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHtcbiAgICBsaXN0OiBMaXN0U3RhdGUsXG4gICAgdXNlcjogVXNlclN0YXRlXG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlcjogQ29tYmluZWRSZWR1Y2VyPFN0YXRlLCBBY3Rpb24+ID0gY29tYmluZVJlZHVjZXJzKHtcbiAgICBsaXN0OiBsaXN0UmVkdWNlcixcbiAgICB1c2VyOiB1c2VyUmVkdWNlclxufSk7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjb21iaW5lUmVkdWNlcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgdHlwZSB7IENvbWJpbmVkUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcblxuaW1wb3J0IHsgcmVkdWNlciBhcyB1c2VycyB9IGZyb20gJy4vdXNlcnMvcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFVzZXJzU3RhdGUsIEFjdGlvbiBhcyBVc2Vyc0FjdGlvbiB9IGZyb20gJy4vdXNlcnMvcmVkdWNlcic7XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9IFxuICB8IFVzZXJzQWN0aW9uXG5cbmV4cG9ydCB0eXBlIFN0YXRlID0ge1xuICB1c2VyczogVXNlcnNTdGF0ZVxufVxuXG5leHBvcnQgY29uc3QgcmVkdWNlcjogQ29tYmluZWRSZWR1Y2VyPFN0YXRlLCBBY3Rpb24+ID0gY29tYmluZVJlZHVjZXJzKHtcbiAgdXNlcnM6IHVzZXJzLFxufSk7IiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHR5cGUgeyBDb21iaW5lZFJlZHVjZXIgfSBmcm9tICdyZWR1eCc7XG5cbmltcG9ydCB7IHJlZHVjZXIgYXMgZGlyZWN0b3J5IH0gZnJvbSAnLi9kaXJlY3RvcnkvcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIERpcmVjdG9yeVN0YXRlLCBBY3Rpb24gYXMgRGlyZWN0b3J5QWN0aW9uIH0gZnJvbSAnLi9kaXJlY3RvcnkvcmVkdWNlcic7XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9IFxuICB8IERpcmVjdG9yeUFjdGlvblxuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHtcbiAgZGlyZWN0b3J5OiBEaXJlY3RvcnlTdGF0ZVxufVxuXG5leHBvcnQgY29uc3QgcmVkdWNlcjogQ29tYmluZWRSZWR1Y2VyPFN0YXRlLCBBY3Rpb24+ID0gY29tYmluZVJlZHVjZXJzKHtcbiAgZGlyZWN0b3J5OiBkaXJlY3RvcnksXG59KTtcbiIsIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IE1lbnVzIH0gZnJvbSAnQC9zdGF0ZS9jb250ZXh0L3R5cGVzJ1xuaW1wb3J0IHsgRElSRUNUT1JZX0lELCBNRU1CRVJfSUQgfSBmcm9tICcuL2FwcGxpY2F0aW9uJ1xuXG5cbmV4cG9ydCBjb25zdCBtZW51czogTWVudXMgPSB7XG5cbiAgICBbRElSRUNUT1JZX0lEXToge1xuICAgICAgICByZWxhdGl2ZVBhdGg6IFwiL2RpcmVjdG9yeVwiLFxuICAgICAgICBncm91cHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hbmFnZW1lbnRcIixcbiAgICAgICAgICAgICAgICBsaW5rczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlVzZXJzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInBlb3BsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiBcIi91c2Vyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDdXJyZW50OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk9yZ2FuaXNhdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiYnVzaW5lc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogXCIvb3JnYW5pc2F0aW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQ3VycmVudDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cblxuICAgICAgICBdXG4gICAgfSxcblxuICAgIFtNRU1CRVJfSURdOiB7XG4gICAgICAgIHJlbGF0aXZlUGF0aDogXCIvbWVtYmVyXCIsXG4gICAgICAgIGdyb3VwczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFuYWdlbWVudFwiLFxuICAgICAgICAgICAgICAgIGxpbmtzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTWVtYmVyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJwZW9wbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogXCIvbWVtYmVyc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNEZWZhdWx0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDdXJyZW50OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIF1cbiAgICB9XG4gXG59IiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgbWVudXMgfSBmcm9tICdAL2NvbmZpZy9tZW51JztcbmltcG9ydCB7IGFwcGxpY2F0aW9ucyB9IGZyb20gJ0AvY29uZmlnL2FwcGxpY2F0aW9uJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB0eXBlIHsgQXBwbGljYXRpb24sIE1lbnVzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFN0YXRlID0ge1xuICAgICthcHBsaWNhdGlvbnM6IEFwcGxpY2F0aW9uW10sXG4gICAgK21lbnVzOiBNZW51cyxcbiAgICArYnJlYWRDcnVtYjogc3RyaW5nXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdFN0YXRlOiBTdGF0ZSA9IHtcbiAgICBhcHBsaWNhdGlvbnM6IGFwcGxpY2F0aW9ucyxcbiAgICBtZW51czogbWVudXMsXG4gICAgYnJlYWRDcnVtYjogJydcbn07XG5cbmV4cG9ydCBjb25zdCByZWR1Y2VyID0gKHN0YXRlOiBTdGF0ZSA9IGRlZmF1bHRTdGF0ZSwgYWN0aW9uOiBBY3Rpb24pID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ0NPTlRFWFRfUkVDSUVWRV9CUkVBRENSVU1CJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgYnJlYWRDcnVtYjogYWN0aW9uLnBheWxvYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfVxufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgdHlwZSB7IFVzZXJJbmZvIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB0eXBlIHsgQWN0aW9uIH0gZnJvbSAnLi9hY3Rpb25zJ1xuXG5leHBvcnQgdHlwZSBTdGF0ZSA9IHtcbiAgK2F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4sXG4gICt1c2VySW5mbzogP1VzZXJJbmZvLFxuICAraWRUb2tlbjogP3N0cmluZyxcbiAgK2FjY2Vzc1Rva2VuOiA/c3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0U3RhdGUgPSB7XG4gIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICB1c2VySW5mbzogbnVsbCxcbiAgaWRUb2tlbjogbnVsbCxcbiAgYWNjZXNzVG9rZW46IG51bGxcbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZXIgPSAoc3RhdGU6IFN0YXRlID0gZGVmYXVsdFN0YXRlLCBhY3Rpb246IEFjdGlvbikgPT4ge1xuXG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiQVVUSF9SRUNJRVZFX0FVVEhFTlRJQ0FUSU9OXCI6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBhdXRoZW50aWNhdGVkOiB0cnVlLFxuICAgICAgICB1c2VySW5mbzogYWN0aW9uLnBheWxvYWQudXNlckluZm8sXG4gICAgICAgIGlkVG9rZW46IGFjdGlvbi5wYXlsb2FkLmlkVG9rZW4sXG4gICAgICAgIGFjY2Vzc1Rva2VuOiBhY3Rpb24ucGF5bG9hZC5hY2Nlc3NUb2tlblxuICAgICAgfVxuICAgIH1cbiAgICBjYXNlIFwiQVVUSF9SRUNJRVZFX0FVVEhFTlRJQ0FUSU9OX0NMRUFSXCI6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRlZmF1bHRTdGF0ZVxuICAgICAgfVxuICAgIH1cbiAgICBkZWZhdWx0OiByZXR1cm4gc3RhdGU7XG4gIH1cblxufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGNvbWJpbmVSZWR1Y2VycyB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCB7IGNvbm5lY3RSb3V0ZXIgfSBmcm9tICdjb25uZWN0ZWQtcmVhY3Qtcm91dGVyJztcbmltcG9ydCB0eXBlIHsgQ29tYmluZWRSZWR1Y2VyIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHR5cGUgeyBSb3V0ZXJTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyByZWR1Y2VyIGFzIGFwcCB9IGZyb20gJy4vYXBwL3JlZHVjZXInO1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSBhcyBBcHBTdGF0ZSwgQWN0aW9uIGFzIEFwcEFjdGlvbiB9IGZyb20gJy4vYXBwL3JlZHVjZXInO1xuXG5pbXBvcnQgeyByZWR1Y2VyIGFzIGNvbnRleHQgfSBmcm9tICcuL2NvbnRleHQvcmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIENvbnRleHRTdGF0ZSB9IGZyb20gJy4vY29udGV4dC9yZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uIGFzIENvbnRleHRBY3Rpb24gfSBmcm9tICcuL2NvbnRleHQvYWN0aW9ucyc7XG5cbmltcG9ydCB7IHJlZHVjZXIgYXMgYXV0aCB9IGZyb20gJy4vYXV0aC9yZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgU3RhdGUgYXMgQXV0aFN0YXRlIH0gZnJvbSAnLi9hdXRoL3JlZHVjZXInO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gYXMgQXV0aEFjdGlvbiB9IGZyb20gJy4vYXV0aC9hY3Rpb25zJztcblxuZXhwb3J0IHR5cGUgQWN0aW9uID0gQXBwQWN0aW9uIHwgQ29udGV4dEFjdGlvbiB8IEF1dGhBY3Rpb247XG5cbmV4cG9ydCB0eXBlIFN0YXRlID0ge1xuICAgICthcHA6IEFwcFN0YXRlLFxuICAgICtjb250ZXh0OiBDb250ZXh0U3RhdGUsXG4gICAgK2F1dGg6IEF1dGhTdGF0ZSxcbiAgICArcm91dGVyOiBSb3V0ZXJTdGF0ZVxufTtcblxuY29uc3QgY3JlYXRlUm9vdFJlZHVjZXIgPSAoaGlzdG9yeTogYW55KTogQ29tYmluZWRSZWR1Y2VyPFN0YXRlLCBBY3Rpb24+ID0+XG4gICAgY29tYmluZVJlZHVjZXJzKHtcbiAgICAgICAgYXBwOiBhcHAsXG4gICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgIGF1dGg6IGF1dGgsXG4gICAgICAgIHJvdXRlcjogY29ubmVjdFJvdXRlcihoaXN0b3J5KVxuICAgIH0pO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVSb290UmVkdWNlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKipcbiAqIFRoaXMgYWN0aW9uIHR5cGUgd2lsbCBiZSBkaXNwYXRjaGVkIHdoZW4geW91ciBoaXN0b3J5XG4gKiByZWNlaXZlcyBhIGxvY2F0aW9uIGNoYW5nZS5cbiAqL1xudmFyIExPQ0FUSU9OX0NIQU5HRSA9IGV4cG9ydHMuTE9DQVRJT05fQ0hBTkdFID0gJ0BAcm91dGVyL0xPQ0FUSU9OX0NIQU5HRSc7XG5cbnZhciBvbkxvY2F0aW9uQ2hhbmdlZCA9IGV4cG9ydHMub25Mb2NhdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogX2dldF9fKCdMT0NBVElPTl9DSEFOR0UnKSxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICBhY3Rpb246IGFjdGlvblxuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogVGhpcyBhY3Rpb24gdHlwZSB3aWxsIGJlIGRpc3BhdGNoZWQgYnkgdGhlIGhpc3RvcnkgYWN0aW9ucyBiZWxvdy5cbiAqIElmIHlvdSdyZSB3cml0aW5nIGEgbWlkZGxld2FyZSB0byB3YXRjaCBmb3IgbmF2aWdhdGlvbiBldmVudHMsIGJlIHN1cmUgdG9cbiAqIGxvb2sgZm9yIGFjdGlvbnMgb2YgdGhpcyB0eXBlLlxuICovXG52YXIgQ0FMTF9ISVNUT1JZX01FVEhPRCA9IGV4cG9ydHMuQ0FMTF9ISVNUT1JZX01FVEhPRCA9ICdAQHJvdXRlci9DQUxMX0hJU1RPUllfTUVUSE9EJztcblxudmFyIHVwZGF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gdXBkYXRlTG9jYXRpb24obWV0aG9kKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IF9nZXRfXygnQ0FMTF9ISVNUT1JZX01FVEhPRCcpLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgYXJnczogYXJnc1xuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuXG4vKipcbiAqIFRoZXNlIGFjdGlvbnMgY29ycmVzcG9uZCB0byB0aGUgaGlzdG9yeSBBUEkuXG4gKiBUaGUgYXNzb2NpYXRlZCByb3V0ZXJNaWRkbGV3YXJlIHdpbGwgY2FwdHVyZSB0aGVzZSBldmVudHMgYmVmb3JlIHRoZXkgZ2V0IHRvXG4gKiB5b3VyIHJlZHVjZXIgYW5kIHJlaXNzdWUgdGhlbSBhcyB0aGUgbWF0Y2hpbmcgZnVuY3Rpb24gb24geW91ciBoaXN0b3J5LlxuICovXG52YXIgcHVzaCA9IGV4cG9ydHMucHVzaCA9IF9nZXRfXygndXBkYXRlTG9jYXRpb24nKSgncHVzaCcpO1xudmFyIHJlcGxhY2UgPSBleHBvcnRzLnJlcGxhY2UgPSBfZ2V0X18oJ3VwZGF0ZUxvY2F0aW9uJykoJ3JlcGxhY2UnKTtcbnZhciBnbyA9IGV4cG9ydHMuZ28gPSBfZ2V0X18oJ3VwZGF0ZUxvY2F0aW9uJykoJ2dvJyk7XG52YXIgZ29CYWNrID0gZXhwb3J0cy5nb0JhY2sgPSBfZ2V0X18oJ3VwZGF0ZUxvY2F0aW9uJykoJ2dvQmFjaycpO1xudmFyIGdvRm9yd2FyZCA9IGV4cG9ydHMuZ29Gb3J3YXJkID0gX2dldF9fKCd1cGRhdGVMb2NhdGlvbicpKCdnb0ZvcndhcmQnKTtcblxudmFyIHJvdXRlckFjdGlvbnMgPSBleHBvcnRzLnJvdXRlckFjdGlvbnMgPSB7IHB1c2g6IF9nZXRfXygncHVzaCcpLCByZXBsYWNlOiBfZ2V0X18oJ3JlcGxhY2UnKSwgZ286IF9nZXRfXygnZ28nKSwgZ29CYWNrOiBfZ2V0X18oJ2dvQmFjaycpLCBnb0ZvcndhcmQ6IF9nZXRfXygnZ29Gb3J3YXJkJykgfTtcblxuZnVuY3Rpb24gX2dldEdsb2JhbE9iamVjdCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoISFnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIXdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufVxuXG47XG52YXIgX1Jld2lyZU1vZHVsZUlkX18gPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpIHtcbiAgaWYgKF9SZXdpcmVNb2R1bGVJZF9fID09PSBudWxsKSB7XG4gICAgdmFyIGdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gICAgaWYgKCFnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fKSB7XG4gICAgICBnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fID0gMDtcbiAgICB9XG5cbiAgICBfUmV3aXJlTW9kdWxlSWRfXyA9IF9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18rKztcbiAgfVxuXG4gIHJldHVybiBfUmV3aXJlTW9kdWxlSWRfXztcbn1cblxuZnVuY3Rpb24gX2dldFJld2lyZVJlZ2lzdHJ5X18oKSB7XG4gIHZhciB0aGVHbG9iYWxWYXJpYWJsZSA9IF9nZXRHbG9iYWxPYmplY3QoKTtcblxuICBpZiAoIXRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHJldHVybiBfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlZERhdGFfXygpIHtcbiAgdmFyIG1vZHVsZUlkID0gX2dldFJld2lyZU1vZHVsZUlkX18oKTtcblxuICB2YXIgcmVnaXN0cnkgPSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpO1xuXG4gIHZhciByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuXG4gIGlmICghcmV3aXJlRGF0YSkge1xuICAgIHJlZ2lzdHJ5W21vZHVsZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV3aXJlRGF0YSA9IHJlZ2lzdHJ5W21vZHVsZUlkXTtcbiAgfVxuXG4gIHJldHVybiByZXdpcmVEYXRhO1xufVxuXG4oZnVuY3Rpb24gcmVnaXN0ZXJSZXNldEFsbCgpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGVbJ19fcmV3aXJlX3Jlc2V0X2FsbF9fJ10pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbnZhciBJTlRFTlRJT05BTF9VTkRFRklORUQgPSAnX19JTlRFTlRJT05BTF9VTkRFRklORURfXyc7XG52YXIgX1Jld2lyZUFQSV9fID0ge307XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9BUElPYmplY3QobmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1Jld2lyZUFQSV9fLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG59KSgpO1xuXG5mdW5jdGlvbiBfZ2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBJTlRFTlRJT05BTF9VTkRFRklORUQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge1xuICAgIGNhc2UgJ0xPQ0FUSU9OX0NIQU5HRSc6XG4gICAgICByZXR1cm4gTE9DQVRJT05fQ0hBTkdFO1xuXG4gICAgY2FzZSAnQ0FMTF9ISVNUT1JZX01FVEhPRCc6XG4gICAgICByZXR1cm4gQ0FMTF9ISVNUT1JZX01FVEhPRDtcblxuICAgIGNhc2UgJ3VwZGF0ZUxvY2F0aW9uJzpcbiAgICAgIHJldHVybiB1cGRhdGVMb2NhdGlvbjtcblxuICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgcmV0dXJuIHB1c2g7XG5cbiAgICBjYXNlICdyZXBsYWNlJzpcbiAgICAgIHJldHVybiByZXBsYWNlO1xuXG4gICAgY2FzZSAnZ28nOlxuICAgICAgcmV0dXJuIGdvO1xuXG4gICAgY2FzZSAnZ29CYWNrJzpcbiAgICAgIHJldHVybiBnb0JhY2s7XG5cbiAgICBjYXNlICdnb0ZvcndhcmQnOlxuICAgICAgcmV0dXJuIGdvRm9yd2FyZDtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NpZ25fXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfc2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lLCBfdmFsdWUpIHtcbiAgc3dpdGNoICh2YXJpYWJsZU5hbWUpIHt9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3VwZGF0ZV9vcGVyYXRpb25fXyhvcGVyYXRpb24sIHZhcmlhYmxlTmFtZSwgcHJlZml4KSB7XG4gIHZhciBvbGRWYWx1ZSA9IF9nZXRfXyh2YXJpYWJsZU5hbWUpO1xuXG4gIHZhciBuZXdWYWx1ZSA9IG9wZXJhdGlvbiA9PT0gJysrJyA/IG9sZFZhbHVlICsgMSA6IG9sZFZhbHVlIC0gMTtcblxuICBfYXNzaWduX18odmFyaWFibGVOYW1lLCBuZXdWYWx1ZSk7XG5cbiAgcmV0dXJuIHByZWZpeCA/IG5ld1ZhbHVlIDogb2xkVmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9zZXRfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAoKHR5cGVvZiB2YXJpYWJsZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhcmlhYmxlTmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlTmFtZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVtuYW1lXSA9IHZhcmlhYmxlTmFtZVtuYW1lXTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gSU5URU5USU9OQUxfVU5ERUZJTkVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3Jlc2V0X18odmFyaWFibGVOYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNldF9fKHZhcmlhYmxlTmFtZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgZGVsZXRlIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcblxuICBpZiAoT2JqZWN0LmtleXMocmV3aXJlRGF0YSkubGVuZ3RoID09IDApIHtcbiAgICBkZWxldGUgX2dldFJld2lyZVJlZ2lzdHJ5X18oKVtfZ2V0UmV3aXJlTW9kdWxlSWRfX107XG4gIH1cblxuICA7XG59XG5cbmZ1bmN0aW9uIF93aXRoX18ob2JqZWN0KSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICB2YXIgcmV3aXJlZFZhcmlhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgcHJldmlvdXNWYWx1ZXMgPSB7fTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gb2JqZWN0W3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG5cbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlc3VsdC50aGVuKHJlc2V0KS5jYXRjaChyZXNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0cy5fX2dldF9fID0gX2dldF9fO1xuZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19SZXdpcmVfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19zZXRfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IF9yZXNldF9fO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gX1Jld2lyZUFQSV9fO1xuZXhwb3J0cy5kZWZhdWx0ID0gX1Jld2lyZUFQSV9fOyIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbnZhciBET01JdGVyYWJsZXMgPSAoJ0NTU1J1bGVMaXN0LENTU1N0eWxlRGVjbGFyYXRpb24sQ1NTVmFsdWVMaXN0LENsaWVudFJlY3RMaXN0LERPTVJlY3RMaXN0LERPTVN0cmluZ0xpc3QsJyArXG4gICdET01Ub2tlbkxpc3QsRGF0YVRyYW5zZmVySXRlbUxpc3QsRmlsZUxpc3QsSFRNTEFsbENvbGxlY3Rpb24sSFRNTENvbGxlY3Rpb24sSFRNTEZvcm1FbGVtZW50LEhUTUxTZWxlY3RFbGVtZW50LCcgK1xuICAnTWVkaWFMaXN0LE1pbWVUeXBlQXJyYXksTmFtZWROb2RlTWFwLE5vZGVMaXN0LFBhaW50UmVxdWVzdExpc3QsUGx1Z2luLFBsdWdpbkFycmF5LFNWR0xlbmd0aExpc3QsU1ZHTnVtYmVyTGlzdCwnICtcbiAgJ1NWR1BhdGhTZWdMaXN0LFNWR1BvaW50TGlzdCxTVkdTdHJpbmdMaXN0LFNWR1RyYW5zZm9ybUxpc3QsU291cmNlQnVmZmVyTGlzdCxTdHlsZVNoZWV0TGlzdCxUZXh0VHJhY2tDdWVMaXN0LCcgK1xuICAnVGV4dFRyYWNrTGlzdCxUb3VjaExpc3QnKS5zcGxpdCgnLCcpO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IERPTUl0ZXJhYmxlcy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IERPTUl0ZXJhYmxlc1tpXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmIChwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvYXNzaWduXCIpO1xuXG52YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfYXNzaWduMi5kZWZhdWx0IHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3Byb21pc2VcIik7XG5cbnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGdlbiA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBzdGVwKGtleSwgYXJnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIF9wcm9taXNlMi5kZWZhdWx0LnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdGVwKFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgc3RlcChcInRocm93XCIsIGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0ZXAoXCJuZXh0XCIpO1xuICAgIH0pO1xuICB9O1xufTsiLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG52YXIgQ29va2llcyA9IHJlcXVpcmUoJ2pzLWNvb2tpZScpO1xuXG5mdW5jdGlvbiBzZXRDb29raWUobmFtZSwgdmFsdWUsIGV4cGlyZXNBdCkge1xuICB2YXIgY29va2llT3B0aW9ucyA9IHtcbiAgICBwYXRoOiAnLydcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gIGlmICghIShEYXRlLnBhcnNlKGV4cGlyZXNBdCkpKSB7XG4gICAgLy8gRXhwaXJlcyB2YWx1ZSBjYW4gYmUgY29udmVydGVkIHRvIGEgRGF0ZSBvYmplY3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgJ2V4cGlyZXNBdCcgdmFsdWUgaXMgbm90IHByb3ZpZGVkLCBvciB0aGUgdmFsdWUgY2Fubm90IGJlXG4gICAgLy8gcGFyc2VkIGFzIGEgRGF0ZSBvYmplY3QsIHRoZSBjb29raWUgd2lsbCBzZXQgYXMgYSBzZXNzaW9uIGNvb2tpZS5cbiAgICBjb29raWVPcHRpb25zLmV4cGlyZXMgPSBuZXcgRGF0ZShleHBpcmVzQXQpO1xuICB9XG5cbiAgQ29va2llcy5zZXQobmFtZSwgdmFsdWUsIGNvb2tpZU9wdGlvbnMpO1xuICByZXR1cm4gZ2V0Q29va2llKG5hbWUpO1xufVxuXG5mdW5jdGlvbiBnZXRDb29raWUobmFtZSkge1xuICByZXR1cm4gQ29va2llcy5nZXQobmFtZSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUNvb2tpZShuYW1lKSB7XG4gIHJldHVybiBDb29raWVzLnJlbW92ZShuYW1lLCB7IHBhdGg6ICcvJyB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldENvb2tpZTogc2V0Q29va2llLFxuICBnZXRDb29raWU6IGdldENvb2tpZSxcbiAgZGVsZXRlQ29va2llOiBkZWxldGVDb29raWVcbn07XG4iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSB0b0Nzc1ZhbHVlO1xudmFyIGpvaW4gPSBmdW5jdGlvbiBqb2luKHZhbHVlLCBieSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBSZW1vdmUgIWltcG9ydGFudCBmcm9tIHRoZSB2YWx1ZSwgaXQgd2lsbCBiZSByZWFkZGVkIGxhdGVyLlxuICAgIGlmICh2YWx1ZVtpXSA9PT0gJyFpbXBvcnRhbnQnKSBicmVhaztcbiAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gYnk7XG4gICAgcmVzdWx0ICs9IHZhbHVlW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xuZnVuY3Rpb24gdG9Dc3NWYWx1ZSh2YWx1ZSkge1xuICB2YXIgaWdub3JlSW1wb3J0YW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG5cbiAgdmFyIGNzc1ZhbHVlID0gJyc7XG5cbiAgLy8gU3VwcG9ydCBzcGFjZSBzZXBhcmF0ZWQgdmFsdWVzIHZpYSBgW1snNXB4JywgJzEwcHgnXV1gLlxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZVswXSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgICBpZiAoY3NzVmFsdWUpIGNzc1ZhbHVlICs9ICcsICc7XG4gICAgICBjc3NWYWx1ZSArPSBqb2luKHZhbHVlW2ldLCAnICcpO1xuICAgIH1cbiAgfSBlbHNlIGNzc1ZhbHVlID0gam9pbih2YWx1ZSwgJywgJyk7XG5cbiAgLy8gQWRkICFpbXBvcnRhbnQsIGJlY2F1c2UgaXQgd2FzIGlnbm9yZWQuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGNyZWF0ZVJ1bGU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1N0eWxlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2Nsb25lU3R5bGUgPSByZXF1aXJlKCcuLi91dGlscy9jbG9uZVN0eWxlJyk7XG5cbnZhciBfY2xvbmVTdHlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbG9uZVN0eWxlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIENyZWF0ZSBhIHJ1bGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUoKSB7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAndW5uYW1lZCc7XG4gIHZhciBkZWNsID0gYXJndW1lbnRzWzFdO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1syXTtcbiAgdmFyIGpzcyA9IG9wdGlvbnMuanNzO1xuXG4gIHZhciBkZWNsQ29weSA9ICgwLCBfY2xvbmVTdHlsZTJbJ2RlZmF1bHQnXSkoZGVjbCk7XG5cbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7XG5cbiAgLy8gSXQgaXMgYW4gYXQtcnVsZSBhbmQgaXQgaGFzIG5vIGluc3RhbmNlLlxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIFVua25vd24gYXQtcnVsZSAlcycsIG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKG5hbWUsIGRlY2xDb3B5LCBvcHRpb25zKTtcbn0iLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydCB2YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZG9jdW1lbnQpKSA9PT0gJ29iamVjdCcgJiYgZG9jdW1lbnQubm9kZVR5cGUgPT09IDk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnJvd3NlcjtcbiIsInZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZXBtZXJnZV8xO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5pc051bWJlciA9IGV4cG9ydHMuaXNTdHJpbmcgPSBleHBvcnRzLmZvcm1hdE1zID0gZXhwb3J0cy5kdXJhdGlvbiA9IGV4cG9ydHMuZWFzaW5nID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbnZhciBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59OyAvLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcblxuZXhwb3J0cy5lYXNpbmcgPSBlYXNpbmc7XG52YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5leHBvcnRzLmR1cmF0aW9uID0gZHVyYXRpb247XG5cbnZhciBmb3JtYXRNcyA9IGZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufTtcblxuZXhwb3J0cy5mb3JtYXRNcyA9IGZvcm1hdE1zO1xuXG52YXIgaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn07XG5cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxudmFyIGlzTnVtYmVyID0gZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuXG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG52YXIgX2RlZmF1bHQgPSB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIF9vcHRpb25zJGR1cmF0aW9uID0gb3B0aW9ucy5kdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb25PcHRpb24gPSBfb3B0aW9ucyRkdXJhdGlvbiA9PT0gdm9pZCAwID8gZHVyYXRpb24uc3RhbmRhcmQgOiBfb3B0aW9ucyRkdXJhdGlvbixcbiAgICAgICAgX29wdGlvbnMkZWFzaW5nID0gb3B0aW9ucy5lYXNpbmcsXG4gICAgICAgIGVhc2luZ09wdGlvbiA9IF9vcHRpb25zJGVhc2luZyA9PT0gdm9pZCAwID8gZWFzaW5nLmVhc2VJbk91dCA6IF9vcHRpb25zJGVhc2luZyxcbiAgICAgICAgX29wdGlvbnMkZGVsYXkgPSBvcHRpb25zLmRlbGF5LFxuICAgICAgICBkZWxheSA9IF9vcHRpb25zJGRlbGF5ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZGVsYXksXG4gICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGlzU3RyaW5nKHByb3BzKSB8fCBBcnJheS5pc0FycmF5KHByb3BzKSwgJ01hdGVyaWFsLVVJOiBhcmd1bWVudCBcInByb3BzXCIgbXVzdCBiZSBhIHN0cmluZyBvciBBcnJheS4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pIHx8IGlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSwgXCJNYXRlcmlhbC1VSTogYXJndW1lbnQgXFxcImR1cmF0aW9uXFxcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCBcIi5jb25jYXQoZHVyYXRpb25PcHRpb24sIFwiLlwiKSkgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGlzU3RyaW5nKGVhc2luZ09wdGlvbiksICdNYXRlcmlhbC1VSTogYXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShpc051bWJlcihkZWxheSkgfHwgaXNTdHJpbmcoZGVsYXkpLCAnTWF0ZXJpYWwtVUk6IGFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoID09PSAwLCBcIk1hdGVyaWFsLVVJOiB1bnJlY29nbml6ZWQgYXJndW1lbnQocykgW1wiLmNvbmNhdChPYmplY3Qua2V5cyhvdGhlcikuam9pbignLCcpLCBcIl1cIikpIDogdm9pZCAwO1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9vd25lckRvY3VtZW50XCIpKTtcblxuZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZmFsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHdpbmRvdztcbiAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50VmlldyB8fCBmYWxsYmFjaztcbn1cblxudmFyIF9kZWZhdWx0ID0gb3duZXJXaW5kb3c7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdm9pZCAwO1xuXG52YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9yZWFjdExpZmVjeWNsZXNDb21wYXQgPSByZXF1aXJlKFwicmVhY3QtbGlmZWN5Y2xlcy1jb21wYXRcIik7XG5cbnZhciBfUHJvcFR5cGVzID0gcmVxdWlyZShcIi4vdXRpbHMvUHJvcFR5cGVzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydHMuVU5NT1VOVEVEID0gVU5NT1VOVEVEO1xudmFyIEVYSVRFRCA9ICdleGl0ZWQnO1xuZXhwb3J0cy5FWElURUQgPSBFWElURUQ7XG52YXIgRU5URVJJTkcgPSAnZW50ZXJpbmcnO1xuZXhwb3J0cy5FTlRFUklORyA9IEVOVEVSSU5HO1xudmFyIEVOVEVSRUQgPSAnZW50ZXJlZCc7XG5leHBvcnRzLkVOVEVSRUQgPSBFTlRFUkVEO1xudmFyIEVYSVRJTkcgPSAnZXhpdGluZyc7XG4vKipcbiAqIFRoZSBUcmFuc2l0aW9uIGNvbXBvbmVudCBsZXRzIHlvdSBkZXNjcmliZSBhIHRyYW5zaXRpb24gZnJvbSBvbmUgY29tcG9uZW50XG4gKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5XG4gKiBpdCdzIHVzZWQgdG8gYW5pbWF0ZSB0aGUgbW91bnRpbmcgYW5kIHVubW91bnRpbmcgb2YgYSBjb21wb25lbnQsIGJ1dCBjYW4gYWxzb1xuICogYmUgdXNlZCB0byBkZXNjcmliZSBpbi1wbGFjZSB0cmFuc2l0aW9uIHN0YXRlcyBhcyB3ZWxsLlxuICpcbiAqIEJ5IGRlZmF1bHQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lcyBub3QgYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHRoZVxuICogY29tcG9uZW50IGl0IHJlbmRlcnMsIGl0IG9ubHkgdHJhY2tzIFwiZW50ZXJcIiBhbmQgXCJleGl0XCIgc3RhdGVzIGZvciB0aGUgY29tcG9uZW50cy5cbiAqIEl0J3MgdXAgdG8geW91IHRvIGdpdmUgbWVhbmluZyBhbmQgZWZmZWN0IHRvIHRob3NlIHN0YXRlcy4gRm9yIGV4YW1wbGUgd2UgY2FuXG4gKiBhZGQgc3R5bGVzIHRvIGEgY29tcG9uZW50IHdoZW4gaXQgZW50ZXJzIG9yIGV4aXRzOlxuICpcbiAqIGBgYGpzeFxuICogaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uJztcbiAqXG4gKiBjb25zdCBkdXJhdGlvbiA9IDMwMDtcbiAqXG4gKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7XG4gKiAgIHRyYW5zaXRpb246IGBvcGFjaXR5ICR7ZHVyYXRpb259bXMgZWFzZS1pbi1vdXRgLFxuICogICBvcGFjaXR5OiAwLFxuICogfVxuICpcbiAqIGNvbnN0IHRyYW5zaXRpb25TdHlsZXMgPSB7XG4gKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDAgfSxcbiAqICAgZW50ZXJlZDogIHsgb3BhY2l0eTogMSB9LFxuICogfTtcbiAqXG4gKiBjb25zdCBGYWRlID0gKHsgaW46IGluUHJvcCB9KSA9PiAoXG4gKiAgIDxUcmFuc2l0aW9uIGluPXtpblByb3B9IHRpbWVvdXQ9e2R1cmF0aW9ufT5cbiAqICAgICB7KHN0YXRlKSA9PiAoXG4gKiAgICAgICA8ZGl2IHN0eWxlPXt7XG4gKiAgICAgICAgIC4uLmRlZmF1bHRTdHlsZSxcbiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV1cbiAqICAgICAgIH19PlxuICogICAgICAgICBJJ20gYSBmYWRlIFRyYW5zaXRpb24hXG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICApfVxuICogICA8L1RyYW5zaXRpb24+XG4gKiApO1xuICogYGBgXG4gKlxuICogQXMgbm90ZWQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lc24ndCBfZG9fIGFueXRoaW5nIGJ5IGl0c2VsZiB0byBpdHMgY2hpbGQgY29tcG9uZW50LlxuICogV2hhdCBpdCBkb2VzIGRvIGlzIHRyYWNrIHRyYW5zaXRpb24gc3RhdGVzIG92ZXIgdGltZSBzbyB5b3UgY2FuIHVwZGF0ZSB0aGVcbiAqIGNvbXBvbmVudCAoc3VjaCBhcyBieSBhZGRpbmcgc3R5bGVzIG9yIGNsYXNzZXMpIHdoZW4gaXQgY2hhbmdlcyBzdGF0ZXMuXG4gKlxuICogVGhlcmUgYXJlIDQgbWFpbiBzdGF0ZXMgYSBUcmFuc2l0aW9uIGNhbiBiZSBpbjpcbiAqICAtIGAnZW50ZXJpbmcnYFxuICogIC0gYCdlbnRlcmVkJ2BcbiAqICAtIGAnZXhpdGluZydgXG4gKiAgLSBgJ2V4aXRlZCdgXG4gKlxuICogVHJhbnNpdGlvbiBzdGF0ZSBpcyB0b2dnbGVkIHZpYSB0aGUgYGluYCBwcm9wLiBXaGVuIGB0cnVlYCB0aGUgY29tcG9uZW50IGJlZ2lucyB0aGVcbiAqIFwiRW50ZXJcIiBzdGFnZS4gRHVyaW5nIHRoaXMgc3RhZ2UsIHRoZSBjb21wb25lbnQgd2lsbCBzaGlmdCBmcm9tIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsXG4gKiB0byBgJ2VudGVyaW5nJ2AgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZVxuICogaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZSB0aGUgZm9sbG93aW5nIGV4YW1wbGU6XG4gKlxuICogYGBganN4XG4gKiBzdGF0ZSA9IHsgaW46IGZhbHNlIH07XG4gKlxuICogdG9nZ2xlRW50ZXJTdGF0ZSA9ICgpID0+IHtcbiAqICAgdGhpcy5zZXRTdGF0ZSh7IGluOiB0cnVlIH0pO1xuICogfVxuICpcbiAqIHJlbmRlcigpIHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezUwMH0gLz5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy50b2dnbGVFbnRlclN0YXRlfT5DbGljayB0byBFbnRlcjwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGUgYW5kXG4gKiBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXMgdG8gYCdlbnRlcmVkJ2AuXG4gKlxuICogV2hlbiBgaW5gIGlzIGBmYWxzZWAgdGhlIHNhbWUgdGhpbmcgaGFwcGVucyBleGNlcHQgdGhlIHN0YXRlIG1vdmVzIGZyb20gYCdleGl0aW5nJ2AgdG8gYCdleGl0ZWQnYC5cbiAqXG4gKiAjIyBUaW1pbmdcbiAqXG4gKiBUaW1pbmcgaXMgb2Z0ZW4gdGhlIHRyaWNraWVzdCBwYXJ0IG9mIGFuaW1hdGlvbiwgbWlzdGFrZXMgY2FuIHJlc3VsdCBpbiBzbGlnaHQgZGVsYXlzXG4gKiB0aGF0IGFyZSBoYXJkIHRvIHBpbiBkb3duLiBBIGNvbW1vbiBleGFtcGxlIGlzIHdoZW4geW91IHdhbnQgdG8gYWRkIGFuIGV4aXQgdHJhbnNpdGlvbixcbiAqIHlvdSBzaG91bGQgc2V0IHRoZSBkZXNpcmVkIGZpbmFsIHN0eWxlcyB3aGVuIHRoZSBzdGF0ZSBpcyBgJ2V4aXRpbmcnYC4gVGhhdCdzIHdoZW4gdGhlXG4gKiB0cmFuc2l0aW9uIHRvIHRob3NlIHN0eWxlcyB3aWxsIHN0YXJ0IGFuZCwgaWYgeW91IG1hdGNoZWQgdGhlIGB0aW1lb3V0YCBwcm9wIHdpdGggdGhlXG4gKiBDU1MgVHJhbnNpdGlvbiBkdXJhdGlvbiwgaXQgd2lsbCBlbmQgZXhhY3RseSB3aGVuIHRoZSBzdGF0ZSBjaGFuZ2VzIHRvIGAnZXhpdGVkJ2AuXG4gKlxuICogPiAqKk5vdGUqKjogRm9yIHNpbXBsZXIgdHJhbnNpdGlvbnMgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgbWlnaHQgYmUgZW5vdWdoLCBidXRcbiAqID4gdGFrZSBpbnRvIGFjY291bnQgdGhhdCBpdCdzIHBsYXRmb3JtLWFnbm9zdGljLCB3aGlsZSB0aGUgYENTU1RyYW5zaXRpb25gIGNvbXBvbmVudFxuICogPiBbZm9yY2VzIHJlZmxvd3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvYmxvYi81MDA3MzAzZTcyOWE3NGJlNjZhMjFjM2UyMjA1ZTQ5MTY4MjE1MjRiL3NyYy9DU1NUcmFuc2l0aW9uLmpzI0wyMDgtTDIxNSlcbiAqID4gaW4gb3JkZXIgdG8gbWFrZSBtb3JlIGNvbXBsZXggdHJhbnNpdGlvbnMgbW9yZSBwcmVkaWN0YWJsZS4gRm9yIGV4YW1wbGUsIGV2ZW4gdGhvdWdoXG4gKiA+IGNsYXNzZXMgYGV4YW1wbGUtZW50ZXJgIGFuZCBgZXhhbXBsZS1lbnRlci1hY3RpdmVgIGFyZSBhcHBsaWVkIGltbWVkaWF0ZWx5IG9uZSBhZnRlclxuICogPiBhbm90aGVyLCB5b3UgY2FuIHN0aWxsIHRyYW5zaXRpb24gZnJvbSBvbmUgdG8gdGhlIG90aGVyIGJlY2F1c2Ugb2YgdGhlIGZvcmNlZCByZWZsb3dcbiAqID4gKHJlYWQgW3RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaXNzdWVzLzE1OSNpc3N1ZWNvbW1lbnQtMzIyNzYxMTcxKVxuICogPiBmb3IgbW9yZSBpbmZvKS4gVGFrZSB0aGlzIGludG8gYWNjb3VudCB3aGVuIGNob29zaW5nIGJldHdlZW4gYFRyYW5zaXRpb25gIGFuZFxuICogPiBgQ1NTVHJhbnNpdGlvbmAuXG4gKi9cblxuZXhwb3J0cy5FWElUSU5HID0gRVhJVElORztcblxudmFyIFRyYW5zaXRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoVHJhbnNpdGlvbiwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSB8fCB0aGlzO1xuICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQudHJhbnNpdGlvbkdyb3VwOyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRyYW5zaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25Hcm91cDogbnVsbCAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuXG4gICAgfTtcbiAgfTtcblxuICBUcmFuc2l0aW9uLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhfcmVmLCBwcmV2U3RhdGUpIHtcbiAgICB2YXIgbmV4dEluID0gX3JlZi5pbjtcblxuICAgIGlmIChuZXh0SW4gJiYgcHJldlN0YXRlLnN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTsgLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG5cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyh0cnVlLCB0aGlzLmFwcGVhclN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgbmV4dFN0YXR1cyA9IG51bGw7XG5cbiAgICBpZiAocHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklORztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gRU5URVJJTkcgfHwgc3RhdHVzID09PSBFTlRFUkVEKSB7XG4gICAgICAgICAgbmV4dFN0YXR1cyA9IEVYSVRJTkc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN0YXR1cyhmYWxzZSwgbmV4dFN0YXR1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5jYW5jZWxOZXh0Q2FsbGJhY2soKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VGltZW91dHMgPSBmdW5jdGlvbiBnZXRUaW1lb3V0cygpIHtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDtcbiAgICB2YXIgZXhpdCwgZW50ZXIsIGFwcGVhcjtcbiAgICBleGl0ID0gZW50ZXIgPSBhcHBlYXIgPSB0aW1lb3V0O1xuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCAmJiB0eXBlb2YgdGltZW91dCAhPT0gJ251bWJlcicpIHtcbiAgICAgIGV4aXQgPSB0aW1lb3V0LmV4aXQ7XG4gICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7XG4gICAgICBhcHBlYXIgPSB0aW1lb3V0LmFwcGVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIGVudGVyOiBlbnRlcixcbiAgICAgIGFwcGVhcjogYXBwZWFyXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlU3RhdHVzID0gZnVuY3Rpb24gdXBkYXRlU3RhdHVzKG1vdW50aW5nLCBuZXh0U3RhdHVzKSB7XG4gICAgaWYgKG1vdW50aW5nID09PSB2b2lkIDApIHtcbiAgICAgIG1vdW50aW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHtcbiAgICAgIC8vIG5leHRTdGF0dXMgd2lsbCBhbHdheXMgYmUgRU5URVJJTkcgb3IgRVhJVElORy5cbiAgICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG5cbiAgICAgIHZhciBub2RlID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG5cbiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykge1xuICAgICAgICB0aGlzLnBlcmZvcm1FbnRlcihub2RlLCBtb3VudGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAgPyB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwLmlzTW91bnRpbmcgOiBtb3VudGluZztcbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7IC8vIG5vIGVudGVyIGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVOVEVSRURcbiAgICAvLyBpZiB3ZSBhcmUgbW91bnRpbmcgYW5kIHJ1bm5pbmcgdGhpcyBpdCBtZWFucyBhcHBlYXIgX211c3RfIGJlIHNldFxuXG4gICAgaWYgKCFtb3VudGluZyAmJiAhZW50ZXIpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRW50ZXIobm9kZSwgYXBwZWFyaW5nKTtcbiAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICBzdGF0dXM6IEVOVEVSSU5HXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJpbmcobm9kZSwgYXBwZWFyaW5nKTsgLy8gRklYTUU6IGFwcGVhciB0aW1lb3V0P1xuXG5cbiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUsIGFwcGVhcmluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnBlcmZvcm1FeGl0ID0gZnVuY3Rpb24gcGVyZm9ybUV4aXQobm9kZSkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpOyAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRFxuXG4gICAgaWYgKCFleGl0KSB7XG4gICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7XG5cbiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpczMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgICBzdGF0dXM6IEVYSVRFRFxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWxOZXh0Q2FsbGJhY2sgPSBmdW5jdGlvbiBjYW5jZWxOZXh0Q2FsbGJhY2soKSB7XG4gICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwoKTtcbiAgICAgIHRoaXMubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNhZmVTZXRTdGF0ZSA9IGZ1bmN0aW9uIHNhZmVTZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgLy8gVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LCBidXQgdGhlcmUgYXJlIHdlaXJkIHJhY2UgY29uZGl0aW9ucyB3aXRoXG4gICAgLy8gc2V0U3RhdGUgY2FsbGJhY2tzIGFuZCB1bm1vdW50aW5nIGluIHRlc3RpbmcsIHNvIGFsd2F5cyBtYWtlIHN1cmUgdGhhdFxuICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuXG4gICAgY2FsbGJhY2sgPSB0aGlzLnNldE5leHRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgdGhpcy5zZXRTdGF0ZShuZXh0U3RhdGUsIGNhbGxiYWNrKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgYWN0aXZlID0gdHJ1ZTtcblxuICAgIHRoaXMubmV4dENhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoYWN0aXZlKSB7XG4gICAgICAgIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpczQubmV4dENhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMubmV4dENhbGxiYWNrO1xuICB9O1xuXG4gIF9wcm90by5vblRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dCwgaGFuZGxlcikge1xuICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpO1xuXG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7XG5cbiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNoaWxkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wcywgW1wiY2hpbGRyZW5cIl0pOyAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uXG5cblxuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm1vdW50T25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy51bm1vdW50T25FeGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5leGl0O1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMuYWRkRW5kTGlzdGVuZXI7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcjtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXJlZDtcbiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkV4aXQ7XG4gICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nO1xuICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRXhpdGVkO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuKHN0YXR1cywgY2hpbGRQcm9wcyk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkID0gX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCBjaGlsZFByb3BzKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbjtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbi5jb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogUHJvcFR5cGVzLm9iamVjdFxufTtcblRyYW5zaXRpb24uY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogZnVuY3Rpb24gdHJhbnNpdGlvbkdyb3VwKCkge31cbn07XG5UcmFuc2l0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYGZ1bmN0aW9uYCBjaGlsZCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9mIGEgUmVhY3QgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1c1xuICAgKiAoJ2VudGVyaW5nJywgJ2VudGVyZWQnLCAnZXhpdGluZycsICdleGl0ZWQnLCAndW5tb3VudGVkJyksIHdoaWNoIGNhbiBiZSB1c2VkXG4gICAqIHRvIGFwcGx5IGNvbnRleHQgc3BlY2lmaWMgcHJvcHMgdG8gYSBjb21wb25lbnQuXG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiA8VHJhbnNpdGlvbiB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHsoc3RhdHVzKSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdHVzfWB9IC8+XG4gICAqICAgKX1cbiAgICogPC9UcmFuc2l0aW9uPlxuICAgKiBgYGBcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXNcbiAgICovXG4gIGluOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGlzIG1vdW50ZWQgaW1tZWRpYXRlbHkgYWxvbmcgd2l0aFxuICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvIFwibGF6eSBtb3VudFwiIHRoZSBjb21wb25lbnQgb24gdGhlXG4gICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheVxuICAgKiBtb3VudGVkLCBldmVuIG9uIFwiZXhpdGVkXCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC5cbiAgICovXG4gIG1vdW50T25FbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBzdGF5cyBtb3VudGVkIGFmdGVyIGl0IHJlYWNoZXMgdGhlIGAnZXhpdGVkJ2Agc3RhdGUuXG4gICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLlxuICAgKi9cbiAgdW5tb3VudE9uRXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE5vcm1hbGx5IGEgY29tcG9uZW50IGlzIG5vdCB0cmFuc2l0aW9uZWQgaWYgaXQgaXMgc2hvd24gd2hlbiB0aGUgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50IG1vdW50cy5cbiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZVxuICAgKiBjb21wb25lbnQgd2lsbCB0cmFuc2l0aW9uIGluIGFzIHNvb24gYXMgdGhlIGA8VHJhbnNpdGlvbj5gIG1vdW50cy5cbiAgICpcbiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgXCJhcHBlYXJcIiBzdGF0ZXMuIGBhcHBlYXJgIG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGBlbnRlcmAgdHJhbnNpdGlvbi5cbiAgICovXG4gIGFwcGVhcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuYWJsZSBvciBkaXNhYmxlIGVudGVyIHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLlxuICAgKi9cbiAgZXhpdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZFxuICAgKlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zIGxpa2U6IGB0aW1lb3V0PXs1MDB9YCxcbiAgICogb3IgaW5kaXZpZHVhbGx5IGxpa2U6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBlbnRlcjogMzAwLFxuICAgKiAgZXhpdDogNTAwLFxuICAgKiB9fVxuICAgKiBgYGBcbiAgICpcbiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBfUHJvcFR5cGVzLnRpbWVvdXRzU2hhcGUgOiB7fTs7XG4gICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHB0LmFwcGx5KHZvaWQgMCwgW3Byb3BzXS5jb25jYXQoYXJncykpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gdHJhbnNpdGlvbiBlbmQgdHJpZ2dlci4gQ2FsbGVkIHdpdGggdGhlIHRyYW5zaXRpb25pbmdcbiAgICogRE9NIG5vZGUgYW5kIGEgYGRvbmVgIGNhbGxiYWNrLiBBbGxvd3MgZm9yIG1vcmUgZmluZSBncmFpbmVkIHRyYW5zaXRpb24gZW5kXG4gICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWRcbiAgICovXG4gIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYyAvLyBOYW1lIHRoZSBmdW5jdGlvbiBzbyBpdCBpcyBjbGVhcmVyIGluIHRoZSBkb2N1bWVudGF0aW9uXG5cbn0gOiB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IDA7XG5UcmFuc2l0aW9uLkVYSVRFRCA9IDE7XG5UcmFuc2l0aW9uLkVOVEVSSU5HID0gMjtcblRyYW5zaXRpb24uRU5URVJFRCA9IDM7XG5UcmFuc2l0aW9uLkVYSVRJTkcgPSA0O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3JlYWN0TGlmZWN5Y2xlc0NvbXBhdC5wb2x5ZmlsbCkoVHJhbnNpdGlvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIkBtYXRlcmlhbC11aS91dGlsc1wiKTtcblxudmFyIF9jcmVhdGVNdWlUaGVtZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlTXVpVGhlbWVcIikpO1xuXG52YXIgX3RoZW1lTGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RoZW1lTGlzdGVuZXJcIikpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xudmFyIGRlZmF1bHRUaGVtZTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFRoZW1lKCkge1xuICBpZiAoZGVmYXVsdFRoZW1lKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbiAgfVxuXG4gIGRlZmF1bHRUaGVtZSA9ICgwLCBfY3JlYXRlTXVpVGhlbWUuZGVmYXVsdCkoKTtcbiAgcmV0dXJuIGRlZmF1bHRUaGVtZTtcbn0gLy8gUHJvdmlkZSB0aGUgdGhlbWUgb2JqZWN0IGFzIGEgcHJvcGVydHkgdG8gdGhlIGlucHV0IGNvbXBvbmVudC5cblxuXG52YXIgd2l0aFRoZW1lT2xkID0gZnVuY3Rpb24gd2l0aFRoZW1lT2xkKCkge1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBXaXRoVGhlbWUgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgICAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoV2l0aFRoZW1lLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFRoZW1lKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfdGhpcztcblxuICAgICAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBXaXRoVGhlbWUpO1xuICAgICAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoV2l0aFRoZW1lKS5jYWxsKHRoaXMpKTtcbiAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgLy8gV2UgdXNlIHx8IGFzIHRoZSBmdW5jdGlvbiBjYWxsIGlzIGxhenkgZXZhbHVhdGVkLlxuICAgICAgICAgIHRoZW1lOiBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmluaXRpYWwoY29udGV4dCkgfHwgZ2V0RGVmYXVsdFRoZW1lKClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuXG4gICAgICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShXaXRoVGhlbWUsIFt7XG4gICAgICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGVtZUxpc3RlbmVyLmRlZmF1bHQudW5zdWJzY3JpYmUodGhpcy5jb250ZXh0LCB0aGlzLnVuc3Vic2NyaWJlSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgaW5uZXJSZWYgPSBfdGhpcyRwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiaW5uZXJSZWZcIl0pO1xuICAgICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICB0aGVtZTogdGhpcy5zdGF0ZS50aGVtZSxcbiAgICAgICAgICAgIHJlZjogaW5uZXJSZWZcbiAgICAgICAgICB9LCBvdGhlcikpO1xuICAgICAgICB9XG4gICAgICB9XSk7XG4gICAgICByZXR1cm4gV2l0aFRoZW1lO1xuICAgIH0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICAgIFdpdGhUaGVtZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gICAgICAvKipcbiAgICAgICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIGRlY29yYXRlZCBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGlubmVyUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pXG4gICAgfSA6IHt9O1xuICAgIFdpdGhUaGVtZS5jb250ZXh0VHlwZXMgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIi5jb25jYXQoKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KSwgXCIpXCIpO1xuICAgIH1cblxuICAgICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MuZGVmYXVsdCkoV2l0aFRoZW1lLCBDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEV4cG9zZWQgZm9yIHRlc3QgcHVycG9zZXMuXG4gICAgICBXaXRoVGhlbWUuTmFrZWQgPSBDb21wb25lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFdpdGhUaGVtZTtcbiAgfTtcbn07XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG5pZiAoIV91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXykge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18gPSB7fTtcbn1cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18ud2l0aFRoZW1lKSB7XG4gIF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXy53aXRoVGhlbWUgPSB3aXRoVGhlbWVPbGQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXy53aXRoVGhlbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFRhYmxlbHZsMkNvbnRleHQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KCk7XG5cbnZhciBfZGVmYXVsdCA9IFRhYmxlbHZsMkNvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG9yIHdpdGhSb3V0ZXIoKSBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIG1hdGNoUGF0aChwYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBzdHJpY3Q6IHN0cmljdCwgZXhhY3Q6IGV4YWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9LCByb3V0ZS5tYXRjaCk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5yZW5kZXIgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICBpZiAoY29tcG9uZW50KSByZXR1cm4gbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbDtcblxuICAgIGlmIChyZW5kZXIpIHJldHVybiBtYXRjaCA/IHJlbmRlcihwcm9wcykgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gY2hpbGRyZW4ocHJvcHMpO1xuXG4gICAgaWYgKGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tIFwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtcbmltcG9ydCBSb3V0ZSBmcm9tIFwiLi9Sb3V0ZVwiO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGUsIHtcbiAgICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7XG4gICAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwidmFyIGFycmF5V2l0aG91dEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRob3V0SG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXkgPSByZXF1aXJlKFwiLi9pdGVyYWJsZVRvQXJyYXlcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IHJlcXVpcmUoXCIuL25vbkl0ZXJhYmxlU3ByZWFkXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IG5vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3RvQ29uc3VtYWJsZUFycmF5OyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ0AvY29uZmlnL2NvbmZpZyc7XG5cbmNvbnN0IGRpcmVjdG9yeUJhc2VBcGkgPSBgJHtjb25maWcuYmFzZUFwaX0vYXBpL2RpcmVjdG9yeWA7XG5cbmV4cG9ydCBjb25zdCB1c2Vyc0FwaSA9IGAke2RpcmVjdG9yeUJhc2VBcGl9L3VzZXJzYDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHsgVXNlckluZm8gfSBmcm9tICcuL3R5cGVzJ1xuXG50eXBlIEF1dGhSZWNlaXZlQWN0aW9uID0geyB0eXBlOiBcIkFVVEhfUkVDSUVWRV9BVVRIRU5USUNBVElPTlwiLCBwYXlsb2FkOiB7IHVzZXJJbmZvOiBVc2VySW5mbywgaWRUb2tlbjogc3RyaW5nLCBhY2Nlc3NUb2tlbjogc3RyaW5nIH0gfTtcbnR5cGUgQXV0aENsZWFyQWN0aW9uID0geyB0eXBlOiBcIkFVVEhfUkVDSUVWRV9BVVRIRU5USUNBVElPTl9DTEVBUlwiIH07XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9IFxuICAgIHwgQXV0aFJlY2VpdmVBY3Rpb25cbiAgICB8IEF1dGhDbGVhckFjdGlvblxuXG5leHBvcnQgY29uc3QgcmVjaWV2ZUF1dGhlbnRpY2F0aW9uID0gKHVzZXJJbmZvOiBVc2VySW5mbywgaWRUb2tlbjogc3RyaW5nLCBhY2Nlc3NUb2tlbjogc3RyaW5nKTogQXV0aFJlY2VpdmVBY3Rpb24gPT4gKHtcbiAgICB0eXBlOiBcIkFVVEhfUkVDSUVWRV9BVVRIRU5USUNBVElPTlwiLFxuICAgIHBheWxvYWQ6IHsgdXNlckluZm8sIGlkVG9rZW4sIGFjY2Vzc1Rva2VuIH1cbn0pXG5cbmV4cG9ydCBjb25zdCBjbGVhckF1dGhlbnRpY2F0aW9uID0gKCk6IEF1dGhDbGVhckFjdGlvbiA9PiAoe1xuICAgIHR5cGU6IFwiQVVUSF9SRUNJRVZFX0FVVEhFTlRJQ0FUSU9OX0NMRUFSXCJcbn0pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSWNvbi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9JY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JY29uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CdXR0b24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9CdXR0b25cIikpOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogU3RyaW5nIGtleSB0aGF0IGNhcnJpZXMgQVBJIGNhbGwgaW5mbyBpbnRlcnByZXRlZCBieSB0aGlzIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQGNvbnN0YW50IHtzdHJpbmd9XG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQGRlZmF1bHRcbiAqL1xudmFyIFJTQUEgPSAnQEByZWR1eC1hcGktbWlkZGxld2FyZS9SU0FBJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gUlNBQTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pc0l0ZXJhYmxlMiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2lzLWl0ZXJhYmxlXCIpO1xuXG52YXIgX2lzSXRlcmFibGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNJdGVyYWJsZTIpO1xuXG52YXIgX2dldEl0ZXJhdG9yMiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL2dldC1pdGVyYXRvclwiKTtcblxudmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuICAgIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaSA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKGFyciksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfYXJyO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICByZXR1cm4gYXJyO1xuICAgIH0gZWxzZSBpZiAoKDAsIF9pc0l0ZXJhYmxlMy5kZWZhdWx0KShPYmplY3QoYXJyKSkpIHtcbiAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xuICAgIH1cbiAgfTtcbn0oKTsiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFwaUVycm9yID0gZXhwb3J0cy5SZXF1ZXN0RXJyb3IgPSBleHBvcnRzLkludGVybmFsRXJyb3IgPSBleHBvcnRzLkludmFsaWRSU0FBID0gdW5kZWZpbmVkO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogRXJyb3IgY2xhc3MgZm9yIGFuIFJTQUEgdGhhdCBkb2VzIG5vdCBjb25mb3JtIHRvIHRoZSBSU0FBIGRlZmluaXRpb25cbiAqXG4gKiBAY2xhc3MgSW52YWxpZFJTQUFcbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge2FycmF5fSB2YWxpZGF0aW9uRXJyb3JzIC0gYW4gYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnNcbiAqL1xudmFyIEludmFsaWRSU0FBID0gZnVuY3Rpb24gKF9FcnJvcikge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShJbnZhbGlkUlNBQSwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBJbnZhbGlkUlNBQSh2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSW52YWxpZFJTQUEpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoSW52YWxpZFJTQUEuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEludmFsaWRSU0FBKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5uYW1lID0gJ0ludmFsaWRSU0FBJztcbiAgICBfdGhpcy5tZXNzYWdlID0gJ0ludmFsaWQgUlNBQSc7XG4gICAgX3RoaXMudmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRpb25FcnJvcnM7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIEludmFsaWRSU0FBO1xufShFcnJvcik7XG5cbi8qKlxuICogRXJyb3IgY2xhc3MgZm9yIGEgY3VzdG9tIGBwYXlsb2FkYCBvciBgbWV0YWAgZnVuY3Rpb24gdGhyb3dpbmdcbiAqXG4gKiBAY2xhc3MgSW50ZXJuYWxFcnJvclxuICogQGFjY2VzcyBwdWJsaWNcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gdGhlIGVycm9yIG1lc3NhZ2VcbiAqL1xuXG5cbnZhciBJbnRlcm5hbEVycm9yID0gZnVuY3Rpb24gKF9FcnJvcjIpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoSW50ZXJuYWxFcnJvciwgX0Vycm9yMik7XG5cbiAgZnVuY3Rpb24gSW50ZXJuYWxFcnJvcihtZXNzYWdlKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSW50ZXJuYWxFcnJvcik7XG5cbiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoSW50ZXJuYWxFcnJvci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoSW50ZXJuYWxFcnJvcikpLmNhbGwodGhpcykpO1xuXG4gICAgX3RoaXMyLm5hbWUgPSAnSW50ZXJuYWxFcnJvcic7XG4gICAgX3RoaXMyLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICByZXR1cm4gSW50ZXJuYWxFcnJvcjtcbn0oRXJyb3IpO1xuXG4vKipcbiAqIEVycm9yIGNsYXNzIGZvciBhbiBlcnJvciByYWlzZWQgdHJ5aW5nIHRvIG1ha2UgYW4gQVBJIGNhbGxcbiAqXG4gKiBAY2xhc3MgUmVxdWVzdEVycm9yXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSB0aGUgZXJyb3IgbWVzc2FnZVxuICovXG5cblxudmFyIFJlcXVlc3RFcnJvciA9IGZ1bmN0aW9uIChfRXJyb3IzKSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJlcXVlc3RFcnJvciwgX0Vycm9yMyk7XG5cbiAgZnVuY3Rpb24gUmVxdWVzdEVycm9yKG1lc3NhZ2UpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZXF1ZXN0RXJyb3IpO1xuXG4gICAgdmFyIF90aGlzMyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFJlcXVlc3RFcnJvci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmVxdWVzdEVycm9yKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpczMubmFtZSA9ICdSZXF1ZXN0RXJyb3InO1xuICAgIF90aGlzMy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICByZXR1cm4gX3RoaXMzO1xuICB9XG5cbiAgcmV0dXJuIFJlcXVlc3RFcnJvcjtcbn0oRXJyb3IpO1xuXG4vKipcbiAqIEVycm9yIGNsYXNzIGZvciBhbiBBUEkgcmVzcG9uc2Ugb3V0c2lkZSB0aGUgMjAwIHJhbmdlXG4gKlxuICogQGNsYXNzIEFwaUVycm9yXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyAtIHRoZSBzdGF0dXMgY29kZSBvZiB0aGUgQVBJIHJlc3BvbnNlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzVGV4dCAtIHRoZSBzdGF0dXMgdGV4dCBvZiB0aGUgQVBJIHJlc3BvbnNlXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgLSB0aGUgcGFyc2VkIEpTT04gcmVzcG9uc2Ugb2YgdGhlIEFQSSBzZXJ2ZXIgaWYgdGhlXG4gKiAgJ0NvbnRlbnQtVHlwZScgaGVhZGVyIHNpZ25hbHMgYSBKU09OIHJlc3BvbnNlXG4gKi9cblxuXG52YXIgQXBpRXJyb3IgPSBmdW5jdGlvbiAoX0Vycm9yNCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShBcGlFcnJvciwgX0Vycm9yNCk7XG5cbiAgZnVuY3Rpb24gQXBpRXJyb3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZSkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEFwaUVycm9yKTtcblxuICAgIHZhciBfdGhpczQgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChBcGlFcnJvci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQXBpRXJyb3IpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzNC5uYW1lID0gJ0FwaUVycm9yJztcbiAgICBfdGhpczQuc3RhdHVzID0gc3RhdHVzO1xuICAgIF90aGlzNC5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dDtcbiAgICBfdGhpczQucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICBfdGhpczQubWVzc2FnZSA9IHN0YXR1cyArICcgLSAnICsgc3RhdHVzVGV4dDtcbiAgICByZXR1cm4gX3RoaXM0O1xuICB9XG5cbiAgcmV0dXJuIEFwaUVycm9yO1xufShFcnJvcik7XG5cbmV4cG9ydHMuSW52YWxpZFJTQUEgPSBJbnZhbGlkUlNBQTtcbmV4cG9ydHMuSW50ZXJuYWxFcnJvciA9IEludGVybmFsRXJyb3I7XG5leHBvcnRzLlJlcXVlc3RFcnJvciA9IFJlcXVlc3RFcnJvcjtcbmV4cG9ydHMuQXBpRXJyb3IgPSBBcGlFcnJvcjsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi9jb29raWVzJyk7XG52YXIgc3RvcmFnZUJ1aWxkZXIgPSByZXF1aXJlKCcuL3N0b3JhZ2VCdWlsZGVyJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcblxuLy8gQnVpbGRpbmcgdGhpcyBhcyBhbiBvYmplY3QgYWxsb3dzIHVzIHRvIG1vY2sgdGhlIGZ1bmN0aW9ucyBpbiBvdXIgdGVzdHNcbnZhciBzdG9yYWdlVXRpbCA9IHt9O1xuXG4vLyBJRTExIGJ1ZyB0aGF0IE1pY3Jvc29mdCBkb2Vzbid0IHBsYW4gdG8gZml4XG4vLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9GZWVkYmFjay9EZXRhaWxzLzE0OTYwNDBcbnN0b3JhZ2VVdGlsLmJyb3dzZXJIYXNMb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICBpZiAoc3RvcmFnZVV0aWwuZ2V0TG9jYWxTdG9yYWdlKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5zdG9yYWdlVXRpbC5icm93c2VySGFzU2Vzc2lvblN0b3JhZ2UgPSBmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICBpZiAoc3RvcmFnZVV0aWwuZ2V0U2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnN0b3JhZ2VVdGlsLmdldEh0dHBDYWNoZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoc3RvcmFnZVV0aWwuYnJvd3Nlckhhc0xvY2FsU3RvcmFnZSgpKSB7XG4gICAgcmV0dXJuIHN0b3JhZ2VCdWlsZGVyKHN0b3JhZ2VVdGlsLmdldExvY2FsU3RvcmFnZSgpLCBjb25maWcuQ0FDSEVfU1RPUkFHRV9OQU1FKTtcbiAgfSBlbHNlIGlmIChzdG9yYWdlVXRpbC5icm93c2VySGFzU2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgIHJldHVybiBzdG9yYWdlQnVpbGRlcihzdG9yYWdlVXRpbC5nZXRTZXNzaW9uU3RvcmFnZSgpLCBjb25maWcuQ0FDSEVfU1RPUkFHRV9OQU1FKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RvcmFnZUJ1aWxkZXIoc3RvcmFnZVV0aWwuZ2V0Q29va2llU3RvcmFnZSgpLCBjb25maWcuQ0FDSEVfU1RPUkFHRV9OQU1FKTtcbiAgfVxufTtcblxuc3RvcmFnZVV0aWwuZ2V0TG9jYWxTdG9yYWdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsb2NhbFN0b3JhZ2U7XG59O1xuXG5zdG9yYWdlVXRpbC5nZXRTZXNzaW9uU3RvcmFnZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gc2Vzc2lvblN0b3JhZ2U7XG59O1xuXG4vLyBQcm92aWRlcyB3ZWJTdG9yYWdlLWxpa2UgaW50ZXJmYWNlIGZvciBjb29raWVzXG5zdG9yYWdlVXRpbC5nZXRDb29raWVTdG9yYWdlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgZ2V0SXRlbTogY29va2llcy5nZXRDb29raWUsXG4gICAgc2V0SXRlbTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgLy8gQ29va2llIHNob3VsZG4ndCBleHBpcmVcbiAgICAgIGNvb2tpZXMuc2V0Q29va2llKGtleSwgdmFsdWUsICcyMDM4LTAxLTE5VDAzOjE0OjA3LjAwMFonKTtcbiAgICB9XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JhZ2VVdGlsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX1NlY3VyZSA9IHJlcXVpcmUoJy4vU2VjdXJlJyk7XG5cbnZhciBfU2VjdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NlY3VyZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctUHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciB3aXRoQXV0aCA9IGZ1bmN0aW9uIHdpdGhBdXRoKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NlY3VyZTIuZGVmYXVsdCwgeyByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihzZWN1cmVDb21wb25lbnRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBwcm9wcywgc2VjdXJlQ29tcG9uZW50UHJvcHMpKTtcbiAgICAgIH0gfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9ICd3aXRoQXV0aCgnICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyAnKSc7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSB3aXRoQXV0aDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSB0b0NzcztcblxudmFyIF90b0Nzc1ZhbHVlID0gcmVxdWlyZSgnLi90b0Nzc1ZhbHVlJyk7XG5cbnZhciBfdG9Dc3NWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIEluZGVudCBhIHN0cmluZy5cbiAqIGh0dHA6Ly9qc3BlcmYuY29tL2FycmF5LWpvaW4tdnMtZm9yXG4gKi9cbmZ1bmN0aW9uIGluZGVudFN0cihzdHIsIGluZGVudCkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfXJldHVybiByZXN1bHQgKyBzdHI7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBSdWxlIHRvIENTUyBzdHJpbmcuXG4gKi9cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgaWYgKCFzdHlsZSkgcmV0dXJuIHJlc3VsdDtcblxuICB2YXIgX29wdGlvbnMkaW5kZW50ID0gb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHVuZGVmaW5lZCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG5cblxuICBpbmRlbnQrKztcblxuICAvLyBBcHBseSBmYWxsYmFja3MgZmlyc3QuXG4gIGlmIChmYWxsYmFja3MpIHtcbiAgICAvLyBBcnJheSBzeW50YXgge2ZhbGxiYWNrczogW3twcm9wOiB2YWx1ZX1dfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGZhbGxiYWNrcykpIHtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBmYWxsYmFja3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHZhciBmYWxsYmFjayA9IGZhbGxiYWNrc1tpbmRleF07XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcbiAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKHByb3AgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKSh2YWx1ZSkgKyAnOycsIGluZGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9iamVjdCBzeW50YXgge2ZhbGxiYWNrczoge3Byb3A6IHZhbHVlfX1cbiAgICAgIGZvciAodmFyIF9wcm9wIGluIGZhbGxiYWNrcykge1xuICAgICAgICB2YXIgX3ZhbHVlID0gZmFsbGJhY2tzW19wcm9wXTtcbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG4nICsgaW5kZW50U3RyKF9wcm9wICsgJzogJyArICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkoX3ZhbHVlKSArICc7JywgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcbiAgICBpZiAoX3ZhbHVlMiAhPSBudWxsICYmIF9wcm9wMiAhPT0gJ2ZhbGxiYWNrcycpIHtcbiAgICAgIHJlc3VsdCArPSAnXFxuJyArIGluZGVudFN0cihfcHJvcDIgKyAnOiAnICsgKDAsIF90b0Nzc1ZhbHVlMlsnZGVmYXVsdCddKShfdmFsdWUyKSArICc7JywgaW5kZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBBbGxvdyBlbXB0eSBzdHlsZSBpbiB0aGlzIGNhc2UsIGJlY2F1c2UgcHJvcGVydGllcyB3aWxsIGJlIGFkZGVkIGR5bmFtaWNhbGx5LlxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0O1xuXG4gIGluZGVudC0tO1xuICByZXN1bHQgPSBpbmRlbnRTdHIoc2VsZWN0b3IgKyAnIHsnICsgcmVzdWx0ICsgJ1xcbicsIGluZGVudCkgKyBpbmRlbnRTdHIoJ30nLCBpbmRlbnQpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1NoZWV0c1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9TaGVldHNSZWdpc3RyeScpO1xuXG52YXIgX1NoZWV0c1JlZ2lzdHJ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c1JlZ2lzdHJ5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIFRoaXMgaXMgYSBnbG9iYWwgc2hlZXRzIHJlZ2lzdHJ5LiBPbmx5IERvbVJlbmRlcmVyIHdpbGwgYWRkIHNoZWV0cyB0byBpdC5cbiAqIE9uIHRoZSBzZXJ2ZXIgb25lIHNob3VsZCB1c2UgYW4gb3duIFNoZWV0c1JlZ2lzdHJ5IGluc3RhbmNlIGFuZCBhZGQgdGhlXG4gKiBzaGVldHMgdG8gaXQsIGJlY2F1c2UgeW91IG5lZWQgdG8gbWFrZSBzdXJlIHRvIGNyZWF0ZSBhIG5ldyByZWdpc3RyeSBmb3JcbiAqIGVhY2ggcmVxdWVzdCBpbiBvcmRlciB0byBub3QgbGVhayBzaGVldHMgYWNyb3NzIHJlcXVlc3RzLlxuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSBuZXcgX1NoZWV0c1JlZ2lzdHJ5MlsnZGVmYXVsdCddKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2lzSW5Ccm93c2VyID0gcmVxdWlyZSgnaXMtaW4tYnJvd3NlcicpO1xuXG52YXIgX2lzSW5Ccm93c2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzSW5Ccm93c2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIganMgPSAnJzsgLyoqXG4gICAgICAgICAgICAgICogRXhwb3J0IGphdmFzY3JpcHQgc3R5bGUgYW5kIGNzcyBzdHlsZSB2ZW5kb3IgcHJlZml4ZXMuXG4gICAgICAgICAgICAgICogQmFzZWQgb24gXCJ0cmFuc2Zvcm1cIiBzdXBwb3J0IHRlc3QuXG4gICAgICAgICAgICAgICovXG5cbnZhciBjc3MgPSAnJztcblxuLy8gV2Ugc2hvdWxkIG5vdCBkbyBhbnl0aGluZyBpZiByZXF1aXJlZCBzZXJ2ZXJzaWRlLlxuaWYgKF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSkge1xuICAvLyBPcmRlciBtYXR0ZXJzLiBXZSBuZWVkIHRvIGNoZWNrIFdlYmtpdCB0aGUgbGFzdCBvbmUgYmVjYXVzZVxuICAvLyBvdGhlciB2ZW5kb3JzIHVzZSB0byBhZGQgV2Via2l0IHByZWZpeGVzIHRvIHNvbWUgcHJvcGVydGllc1xuICB2YXIganNDc3NNYXAgPSB7XG4gICAgTW96OiAnLW1vei0nLFxuICAgIC8vIElFIGRpZCBpdCB3cm9uZyBhZ2FpbiAuLi5cbiAgICBtczogJy1tcy0nLFxuICAgIE86ICctby0nLFxuICAgIFdlYmtpdDogJy13ZWJraXQtJ1xuICB9O1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJykuc3R5bGU7XG4gIHZhciB0ZXN0UHJvcCA9ICdUcmFuc2Zvcm0nO1xuXG4gIGZvciAodmFyIGtleSBpbiBqc0Nzc01hcCkge1xuICAgIGlmIChrZXkgKyB0ZXN0UHJvcCBpbiBzdHlsZSkge1xuICAgICAganMgPSBrZXk7XG4gICAgICBjc3MgPSBqc0Nzc01hcFtrZXldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmVuZG9yIHByZWZpeCBzdHJpbmcgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuXG4gKlxuICogQHR5cGUge3tqczogU3RyaW5nLCBjc3M6IFN0cmluZ319XG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSB7IGpzOiBqcywgY3NzOiBjc3MgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaXNQbGFpbk9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXBsYWluLW9iamVjdFwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2NyZWF0ZUJyZWFrcG9pbnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVCcmVha3BvaW50c1wiKSk7XG5cbnZhciBfY3JlYXRlTWl4aW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNaXhpbnNcIikpO1xuXG52YXIgX2NyZWF0ZVBhbGV0dGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVBhbGV0dGVcIikpO1xuXG52YXIgX2NyZWF0ZVR5cG9ncmFwaHkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZVR5cG9ncmFwaHlcIikpO1xuXG52YXIgX3NoYWRvd3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYWRvd3NcIikpO1xuXG52YXIgX3NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFwZVwiKSk7XG5cbnZhciBfc3BhY2luZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3BhY2luZ1wiKSk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zaXRpb25zXCIpKTtcblxudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5cbi8vIDwgMWtiIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvbWVyZ2UgaXMgPiAza2IuXG5mdW5jdGlvbiBjcmVhdGVNdWlUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgX29wdGlvbnMkYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzLFxuICAgICAgYnJlYWtwb2ludHNJbnB1dCA9IF9vcHRpb25zJGJyZWFrcG9pbnRzID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJGJyZWFrcG9pbnRzLFxuICAgICAgX29wdGlvbnMkbWl4aW5zID0gb3B0aW9ucy5taXhpbnMsXG4gICAgICBtaXhpbnNJbnB1dCA9IF9vcHRpb25zJG1peGlucyA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRtaXhpbnMsXG4gICAgICBfb3B0aW9ucyRwYWxldHRlID0gb3B0aW9ucy5wYWxldHRlLFxuICAgICAgcGFsZXR0ZUlucHV0ID0gX29wdGlvbnMkcGFsZXR0ZSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyRwYWxldHRlLFxuICAgICAgc2hhZG93c0lucHV0ID0gb3B0aW9ucy5zaGFkb3dzLFxuICAgICAgX29wdGlvbnMkc3BhY2luZyA9IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgIHNwYWNpbmdJbnB1dCA9IF9vcHRpb25zJHNwYWNpbmcgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkc3BhY2luZyxcbiAgICAgIF9vcHRpb25zJHR5cG9ncmFwaHkgPSBvcHRpb25zLnR5cG9ncmFwaHksXG4gICAgICB0eXBvZ3JhcGh5SW5wdXQgPSBfb3B0aW9ucyR0eXBvZ3JhcGh5ID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHR5cG9ncmFwaHksXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKG9wdGlvbnMsIFtcImJyZWFrcG9pbnRzXCIsIFwibWl4aW5zXCIsIFwicGFsZXR0ZVwiLCBcInNoYWRvd3NcIiwgXCJzcGFjaW5nXCIsIFwidHlwb2dyYXBoeVwiXSk7XG4gIHZhciBwYWxldHRlID0gKDAsIF9jcmVhdGVQYWxldHRlLmRlZmF1bHQpKHBhbGV0dGVJbnB1dCk7XG4gIHZhciBicmVha3BvaW50cyA9ICgwLCBfY3JlYXRlQnJlYWtwb2ludHMuZGVmYXVsdCkoYnJlYWtwb2ludHNJbnB1dCk7XG4gIHZhciBzcGFjaW5nID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX3NwYWNpbmcuZGVmYXVsdCwgc3BhY2luZ0lucHV0KTtcbiAgdmFyIG11aVRoZW1lID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiAoMCwgX2NyZWF0ZU1peGlucy5kZWZhdWx0KShicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zSW5wdXQpLFxuICAgIG92ZXJyaWRlczoge30sXG4gICAgLy8gSW5qZWN0IGN1c3RvbSBzdHlsZXNcbiAgICBwYWxldHRlOiBwYWxldHRlLFxuICAgIHByb3BzOiB7fSxcbiAgICAvLyBJbmplY3QgY3VzdG9tIHByb3BlcnRpZXNcbiAgICBzaGFkb3dzOiBzaGFkb3dzSW5wdXQgfHwgX3NoYWRvd3MuZGVmYXVsdCxcbiAgICB0eXBvZ3JhcGh5OiAoMCwgX2NyZWF0ZVR5cG9ncmFwaHkuZGVmYXVsdCkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KVxuICB9LCAoMCwgX2RlZXBtZXJnZS5kZWZhdWx0KSh7XG4gICAgc2hhcGU6IF9zaGFwZS5kZWZhdWx0LFxuICAgIHNwYWNpbmc6IHNwYWNpbmcsXG4gICAgdHJhbnNpdGlvbnM6IF90cmFuc2l0aW9ucy5kZWZhdWx0LFxuICAgIHpJbmRleDogX3pJbmRleC5kZWZhdWx0XG4gIH0sIG90aGVyLCB7XG4gICAgaXNNZXJnZWFibGVPYmplY3Q6IF9pc1BsYWluT2JqZWN0LmRlZmF1bHRcbiAgfSkpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkobXVpVGhlbWUuc2hhZG93cy5sZW5ndGggPT09IDI1LCAnTWF0ZXJpYWwtVUk6IHRoZSBzaGFkb3dzIGFycmF5IHByb3ZpZGVkIHRvIGNyZWF0ZU11aVRoZW1lIHNob3VsZCBzdXBwb3J0IDI1IGVsZXZhdGlvbnMuJykgOiB2b2lkIDA7XG4gIHJldHVybiBtdWlUaGVtZTtcbn1cblxudmFyIF9kZWZhdWx0ID0gY3JlYXRlTXVpVGhlbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbnZlcnRIZXhUb1JHQiA9IGNvbnZlcnRIZXhUb1JHQjtcbmV4cG9ydHMucmdiVG9IZXggPSByZ2JUb0hleDtcbmV4cG9ydHMuZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMucmVjb21wb3NlQ29sb3IgPSByZWNvbXBvc2VDb2xvcjtcbmV4cG9ydHMuZ2V0Q29udHJhc3RSYXRpbyA9IGdldENvbnRyYXN0UmF0aW87XG5leHBvcnRzLmdldEx1bWluYW5jZSA9IGdldEx1bWluYW5jZTtcbmV4cG9ydHMuZW1waGFzaXplID0gZW1waGFzaXplO1xuZXhwb3J0cy5mYWRlID0gZmFkZTtcbmV4cG9ydHMuZGFya2VuID0gZGFya2VuO1xuZXhwb3J0cy5saWdodGVuID0gbGlnaHRlbjtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gVGhlIGxvd2VyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggVGhlIHVwcGVyIGJvdW5kYXJ5IG9mIHRoZSBvdXRwdXQgcmFuZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IEEgbnVtYmVyIGluIHRoZSByYW5nZSBbbWluLCBtYXhdXG4gKi9cbmZ1bmN0aW9uIGNsYW1wKHZhbHVlKSB7XG4gIHZhciBtaW4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIHZhciBtYXggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDE7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4LCBcIk1hdGVyaWFsLVVJOiB0aGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpIDogdm9pZCAwO1xuXG4gIGlmICh2YWx1ZSA8IG1pbikge1xuICAgIHJldHVybiBtaW47XG4gIH1cblxuICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICByZXR1cm4gbWF4O1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIGhleCBmb3JtYXQgdG8gQ1NTIHJnYiBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5cblxuZnVuY3Rpb24gY29udmVydEhleFRvUkdCKGNvbG9yKSB7XG4gIGNvbG9yID0gY29sb3Iuc3Vic3RyKDEpO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiLnsxLFwiLmNvbmNhdChjb2xvci5sZW5ndGggLyAzLCBcIn1cIiksICdnJyk7XG4gIHZhciBjb2xvcnMgPSBjb2xvci5tYXRjaChyZSk7XG5cbiAgaWYgKGNvbG9ycyAmJiBjb2xvcnNbMF0ubGVuZ3RoID09PSAxKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIG4gKyBuO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbG9ycyA/IFwicmdiKFwiLmNvbmNhdChjb2xvcnMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KG4sIDE2KTtcbiAgfSkuam9pbignLCAnKSwgXCIpXCIpIDogJyc7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIFBhc3MgaGV4IHN0cmFpZ2h0IHRocm91Z2hcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludFRvSGV4KGMpIHtcbiAgICB2YXIgaGV4ID0gYy50b1N0cmluZygxNik7XG4gICAgcmV0dXJuIGhleC5sZW5ndGggPT09IDEgPyBcIjBcIi5jb25jYXQoaGV4KSA6IGhleDtcbiAgfVxuXG4gIHZhciBfZGVjb21wb3NlQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvciksXG4gICAgICB2YWx1ZXMgPSBfZGVjb21wb3NlQ29sb3IudmFsdWVzO1xuXG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pO1xuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5qb2luKCcnKSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cblxuZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGNvbnZlcnRIZXhUb1JHQihjb2xvcikpO1xuICB9XG5cbiAgdmFyIG1hcmtlciA9IGNvbG9yLmluZGV4T2YoJygnKTtcbiAgdmFyIHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgdmFyIHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKS5zcGxpdCgnLCcpO1xuICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoWydyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSddLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoW1wiTWF0ZXJpYWwtVUk6IHVuc3VwcG9ydGVkIGBcIi5jb25jYXQoY29sb3IsIFwiYCBjb2xvci5cIiksICdXZSBzdXBwb3J0IHRoZSBmb2xsb3dpbmcgZm9ybWF0czogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKS4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHZhbHVlczogdmFsdWVzXG4gIH07XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3Igb2JqZWN0IHdpdGggdHlwZSBhbmQgdmFsdWVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cblxuXG5mdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICB2YXIgdHlwZSA9IGNvbG9yLnR5cGU7XG4gIHZhciB2YWx1ZXMgPSBjb2xvci52YWx1ZXM7XG5cbiAgaWYgKHR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgLy8gT25seSBjb252ZXJ0IHRoZSBmaXJzdCAzIHZhbHVlcyB0byBpbnQgKGkuZS4gbm90IGFscGhhKVxuICAgIHZhbHVlcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgIHJldHVybiBpIDwgMyA/IHBhcnNlSW50KG4sIDEwKSA6IG47XG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXNbMV0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMV0sIFwiJVwiKTtcbiAgICB2YWx1ZXNbMl0gPSBcIlwiLmNvbmNhdCh2YWx1ZXNbMl0sIFwiJVwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChjb2xvci50eXBlLCBcIihcIikuY29uY2F0KHZhbHVlcy5qb2luKCcsICcpLCBcIilcIik7XG59XG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbnRyYXN0IHJhdGlvIGJldHdlZW4gdHdvIGNvbG9ycy5cbiAqXG4gKiBGb3JtdWxhOiBodHRwczovL3d3dy53My5vcmcvVFIvV0NBRzIwLVRFQ0hTL0cxNy5odG1sI0cxNy10ZXN0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JlZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtzdHJpbmd9IGJhY2tncm91bmQgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbnRyYXN0IHJhdGlvIHZhbHVlIGluIHRoZSByYW5nZSAwIC0gMjEuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cblxuZnVuY3Rpb24gZ2V0THVtaW5hbmNlKGNvbG9yKSB7XG4gIHZhciBkZWNvbXBvc2VkQ29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG5cbiAgaWYgKGRlY29tcG9zZWRDb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIHZhciByZ2IgPSBkZWNvbXBvc2VkQ29sb3IudmFsdWVzLm1hcChmdW5jdGlvbiAodmFsKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICAgIHJldHVybiB2YWwgPD0gMC4wMzkyOCA/IHZhbCAvIDEyLjkyIDogTWF0aC5wb3coKHZhbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICAgIH0pOyAvLyBUcnVuY2F0ZSBhdCAzIGRpZ2l0c1xuXG4gICAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbiAgfSAvLyBlbHNlIGlmIChkZWNvbXBvc2VkQ29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpXG5cblxuICByZXR1cm4gZGVjb21wb3NlZENvbG9yLnZhbHVlc1syXSAvIDEwMDtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvdXIsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQ9MC4xNSAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gZW1waGFzaXplKGNvbG9yKSB7XG4gIHZhciBjb2VmZmljaWVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMC4xNTtcbiAgcmV0dXJuIGdldEx1bWluYW5jZShjb2xvcikgPiAwLjUgPyBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSA6IGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KTtcbn1cbi8qKlxuICogU2V0IHRoZSBhYnNvbHV0ZSB0cmFuc3BhcmVuY3kgb2YgYSBjb2xvci5cbiAqIEFueSBleGlzdGluZyBhbHBoYSB2YWx1ZXMgYXJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMCAtMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5cbmZ1bmN0aW9uIGZhZGUoY29sb3IsIHZhbHVlKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBmYWRlKFwiLmNvbmNhdChjb2xvciwgXCIsIFwiKS5jb25jYXQodmFsdWUsIFwiKS5cIikpIDogdm9pZCAwO1xuICBpZiAoIWNvbG9yKSByZXR1cm4gY29sb3I7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcblxuICBpZiAoY29sb3IudHlwZSA9PT0gJ3JnYicgfHwgY29sb3IudHlwZSA9PT0gJ2hzbCcpIHtcbiAgICBjb2xvci50eXBlICs9ICdhJztcbiAgfVxuXG4gIGNvbG9yLnZhbHVlc1szXSA9IHZhbHVlO1xuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBEYXJrZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuXG5mdW5jdGlvbiBkYXJrZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShjb2xvciwgXCJNYXRlcmlhbC1VSTogbWlzc2luZyBjb2xvciBhcmd1bWVudCBpbiBkYXJrZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICo9IDEgLSBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuLyoqXG4gKiBMaWdodGVucyBhIGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cblxuZnVuY3Rpb24gbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNvbG9yLCBcIk1hdGVyaWFsLVVJOiBtaXNzaW5nIGNvbG9yIGFyZ3VtZW50IGluIGxpZ2h0ZW4oXCIuY29uY2F0KGNvbG9yLCBcIiwgXCIpLmNvbmNhdChjb2VmZmljaWVudCwgXCIpLlwiKSkgOiB2b2lkIDA7XG4gIGlmICghY29sb3IpIHJldHVybiBjb2xvcjtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvZWZmaWNpZW50ID0gY2xhbXAoY29lZmZpY2llbnQpO1xuXG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSArPSAoMTAwIC0gY29sb3IudmFsdWVzWzJdKSAqIGNvZWZmaWNpZW50O1xuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZigncmdiJykgIT09IC0xKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpICs9IDEpIHtcbiAgICAgIGNvbG9yLnZhbHVlc1tpXSArPSAoMjU1IC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5DSEFOTkVMID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG4vLyBTYW1lIHZhbHVlIHVzZWQgYnkgcmVhY3QtanNzXG52YXIgQ0hBTk5FTCA9ICdfX1RIRU1JTkdfXyc7XG5leHBvcnRzLkNIQU5ORUwgPSBDSEFOTkVMO1xudmFyIHRoZW1lTGlzdGVuZXIgPSB7XG4gIGNvbnRleHRUeXBlczogKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIENIQU5ORUwsIGZ1bmN0aW9uICgpIHt9KSxcbiAgaW5pdGlhbDogZnVuY3Rpb24gaW5pdGlhbChjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0W0NIQU5ORUxdKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dFtDSEFOTkVMXS5nZXRTdGF0ZSgpO1xuICB9LFxuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjb250ZXh0LCBjYikge1xuICAgIGlmICghY29udGV4dFtDSEFOTkVMXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHRbQ0hBTk5FTF0uc3Vic2NyaWJlKGNiKTtcbiAgfSxcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKGNvbnRleHQsIHN1YnNjcmlwdGlvbklkKSB7XG4gICAgaWYgKGNvbnRleHRbQ0hBTk5FTF0pIHtcbiAgICAgIGNvbnRleHRbQ0hBTk5FTF0udW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uSWQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IHRoZW1lTGlzdGVuZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9QYXBlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGFwZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBjaGFpblByb3BUeXBlcyhwcm9wVHlwZTEsIHByb3BUeXBlMikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiB2YWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gcHJvcFR5cGUxLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSB8fCBwcm9wVHlwZTIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBjaGFpblByb3BUeXBlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRUcmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHM7XG5leHBvcnRzLnJlZmxvdyA9IHZvaWQgMDtcblxudmFyIHJlZmxvdyA9IGZ1bmN0aW9uIHJlZmxvdyhub2RlKSB7XG4gIHJldHVybiBub2RlLnNjcm9sbFRvcDtcbn07XG5cbmV4cG9ydHMucmVmbG93ID0gcmVmbG93O1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUHJvcHMocHJvcHMsIG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0LFxuICAgICAgX3Byb3BzJHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBzdHlsZSA9IF9wcm9wcyRzdHlsZSA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkc3R5bGU7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb246IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiB8fCB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogdGltZW91dFtvcHRpb25zLm1vZGVdLFxuICAgIGRlbGF5OiBzdHlsZS50cmFuc2l0aW9uRGVsYXlcbiAgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdCAoZXgpIHsgcmV0dXJuIChleCAmJiAodHlwZW9mIGV4ID09PSAnb2JqZWN0JykgJiYgJ2RlZmF1bHQnIGluIGV4KSA/IGV4WydkZWZhdWx0J10gOiBleDsgfVxuXG52YXIgX2NsYXNzQ2FsbENoZWNrID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKSk7XG52YXIgX2NyZWF0ZUNsYXNzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKSk7XG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJykpO1xudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mJykpO1xudmFyIF9pbmhlcml0cyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJykpO1xudmFyIF90eXBlb2YgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YnKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnKSk7XG52YXIgX2V4dGVuZHMgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJykpO1xudmFyIFJlYWN0ID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoJ3JlYWN0JykpO1xudmFyIFByb3BUeXBlcyA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKCdwcm9wLXR5cGVzJykpO1xudmFyIHdhcm5pbmcgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZSgnd2FybmluZycpKTtcblxuZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgYXR0cikge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIGF0dHIpO1xufSAvLyBQYXNzaXZlIG9wdGlvbnNcbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9kb20vcGFzc2l2ZWV2ZW50bGlzdGVuZXJzLmpzXG5cblxudmFyIHBhc3NpdmVPcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWNoZSA9IG51bGw7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhY2hlICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuXG4gICAgdmFyIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbiA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7Ly9cbiAgICB9XG5cbiAgICBjYWNoZSA9IHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbiAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlT3B0aW9uO1xuICB9KCk7XG59KCk7XG5cbnZhciBkZWZhdWx0RXZlbnRPcHRpb25zID0ge1xuICBjYXB0dXJlOiBmYWxzZSxcbiAgcGFzc2l2ZTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdEV2ZW50T3B0aW9ucyhvcHRpb25zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgZGVmYXVsdEV2ZW50T3B0aW9ucywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldEV2ZW50TGlzdGVuZXJBcmdzKGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIGFyZ3MgPSBbZXZlbnROYW1lLCBjYWxsYmFja107XG4gIGFyZ3MucHVzaChwYXNzaXZlT3B0aW9uID8gb3B0aW9ucyA6IG9wdGlvbnMuY2FwdHVyZSk7XG4gIHJldHVybiBhcmdzO1xufVxuXG5mdW5jdGlvbiBvbih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIG9mZih0YXJnZXQsIGV2ZW50TmFtZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBnZXRFdmVudExpc3RlbmVyQXJncyhldmVudE5hbWUsIGNhbGxiYWNrLCBvcHRpb25zKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hMaXN0ZW5lcihwcm9wcywgaXRlcmF0ZWUpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICB0YXJnZXQgPSBwcm9wcy50YXJnZXQsXG4gICAgICBldmVudFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcInRhcmdldFwiXSk7XG5cbiAgT2JqZWN0LmtleXMoZXZlbnRQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lLnN1YnN0cmluZygwLCAyKSAhPT0gJ29uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wID0gZXZlbnRQcm9wc1tuYW1lXTtcblxuICAgIHZhciB0eXBlID0gX3R5cGVvZihwcm9wKTtcblxuICAgIHZhciBpc09iamVjdCA9IHR5cGUgPT09ICdvYmplY3QnO1xuICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2FwdHVyZSA9IG5hbWUuc3Vic3RyKC03KS50b0xvd2VyQ2FzZSgpID09PSAnY2FwdHVyZSc7XG4gICAgdmFyIGV2ZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDIpLnRvTG93ZXJDYXNlKCk7XG4gICAgZXZlbnROYW1lID0gY2FwdHVyZSA/IGV2ZW50TmFtZS5zdWJzdHJpbmcoMCwgZXZlbnROYW1lLmxlbmd0aCAtIDcpIDogZXZlbnROYW1lO1xuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICBpdGVyYXRlZShldmVudE5hbWUsIHByb3AuaGFuZGxlciwgcHJvcC5vcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXRlcmF0ZWUoZXZlbnROYW1lLCBwcm9wLCBtZXJnZURlZmF1bHRFdmVudE9wdGlvbnMoe1xuICAgICAgICBjYXB0dXJlOiBjYXB0dXJlXG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gd2l0aE9wdGlvbnMoaGFuZGxlciwgb3B0aW9ucykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG9wdGlvbnMsICdyZWFjdC1ldmVudC1saXN0ZW5lcjogc2hvdWxkIGJlIHNwZWNpZmllZCBvcHRpb25zIGluIHdpdGhPcHRpb25zLicpIDogdm9pZCAwO1xuICByZXR1cm4ge1xuICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgb3B0aW9uczogbWVyZ2VEZWZhdWx0RXZlbnRPcHRpb25zKG9wdGlvbnMpXG4gIH07XG59XG5cbnZhciBFdmVudExpc3RlbmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRXZlbnRMaXN0ZW5lciwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEV2ZW50TGlzdGVuZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50TGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihFdmVudExpc3RlbmVyKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhFdmVudExpc3RlbmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYXBwbHlMaXN0ZW5lcnMob24pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgdGhpcy5hcHBseUxpc3RlbmVycyhvZmYsIHByZXZQcm9wcyk7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9uKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5TGlzdGVuZXJzKG9mZik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGx5TGlzdGVuZXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5TGlzdGVuZXJzKG9uT3JPZmYpIHtcbiAgICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpcy5wcm9wcztcbiAgICAgIHZhciB0YXJnZXQgPSBwcm9wcy50YXJnZXQ7XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0YXJnZXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHdpbmRvd1t0YXJnZXRdO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaExpc3RlbmVyKHByb3BzLCBvbk9yT2ZmLmJpbmQobnVsbCwgZWxlbWVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRXZlbnRMaXN0ZW5lcjtcbn0oUmVhY3QuUHVyZUNvbXBvbmVudCk7XG5cbkV2ZW50TGlzdGVuZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIGNoaWxkIHRvby5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogVGhlIERPTSB0YXJnZXQgdG8gbGlzdGVuIHRvLlxuICAgKi9cbiAgdGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufSA6IHt9O1xuXG5leHBvcnRzLndpdGhPcHRpb25zID0gd2l0aE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHQgPSBFdmVudExpc3RlbmVyO1xuIiwiLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gKiBiZSB0cmlnZ2VyZWQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBhZnRlciBpdCBzdG9wcyBiZWluZyBjYWxsZWQgZm9yXG4gKiBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAqIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuIFRoZSBmdW5jdGlvbiBhbHNvIGhhcyBhIHByb3BlcnR5ICdjbGVhcicgXG4gKiB0aGF0IGlzIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBjbGVhciB0aGUgdGltZXIgdG8gcHJldmVudCBwcmV2aW91c2x5IHNjaGVkdWxlZCBleGVjdXRpb25zLiBcbiAqXG4gKiBAc291cmNlIHVuZGVyc2NvcmUuanNcbiAqIEBzZWUgaHR0cDovL3Vuc2NyaXB0YWJsZS5jb20vMjAwOS8wMy8yMC9kZWJvdW5jaW5nLWphdmFzY3JpcHQtbWV0aG9kcy9cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0aW9uIHRvIHdyYXBcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lb3V0IGluIG1zIChgMTAwYClcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0byBleGVjdXRlIGF0IHRoZSBiZWdpbm5pbmcgKGBmYWxzZWApXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBpbW1lZGlhdGUpe1xuICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG4gIGlmIChudWxsID09IHdhaXQpIHdhaXQgPSAxMDA7XG5cbiAgZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgdmFyIGxhc3QgPSBEYXRlLm5vdygpIC0gdGltZXN0YW1wO1xuXG4gICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQgLSBsYXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICBpZiAoIWltbWVkaWF0ZSkge1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBkZWJvdW5jZWQgPSBmdW5jdGlvbigpe1xuICAgIGNvbnRleHQgPSB0aGlzO1xuICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgY2FsbE5vdyA9IGltbWVkaWF0ZSAmJiAhdGltZW91dDtcbiAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICBpZiAoY2FsbE5vdykge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGRlYm91bmNlZC5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIFxuICBkZWJvdW5jZWQuZmx1c2ggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIFxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBkZWJvdW5jZWQ7XG59O1xuXG4vLyBBZGRzIGNvbXBhdGliaWxpdHkgZm9yIEVTIG1vZHVsZXNcbmRlYm91bmNlLmRlYm91bmNlID0gZGVib3VuY2U7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVib3VuY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIExpc3RDb250ZXh0ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlQ29udGV4dCh7fSk7XG5cbnZhciBfZGVmYXVsdCA9IExpc3RDb250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJodG1sLCBib2R5LCAjcm9vdCwgI3Jvb3QgPiBkaXYge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxufVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0lucHV0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0lucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbnB1dFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfSW5wdXRCYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0lucHV0QmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5wdXRCYXNlXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaGFzVmFsdWUgPSBoYXNWYWx1ZTtcbmV4cG9ydHMuaXNGaWxsZWQgPSBpc0ZpbGxlZDtcbmV4cG9ydHMuaXNBZG9ybmVkU3RhcnQgPSBpc0Fkb3JuZWRTdGFydDtcblxuLy8gU3VwcG9ydHMgZGV0ZXJtaW5hdGlvbiBvZiBpc0NvbnRyb2xsZWQoKS5cbi8vIENvbnRyb2xsZWQgaW5wdXQgYWNjZXB0cyBpdHMgY3VycmVudCB2YWx1ZSBhcyBhIHByb3AuXG4vL1xuLy8gQHNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Zvcm1zLmh0bWwjY29udHJvbGxlZC1jb21wb25lbnRzXG4vLyBAcGFyYW0gdmFsdWVcbi8vIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHN0cmluZyAoaW5jbHVkaW5nICcnKSBvciBudW1iZXIgKGluY2x1ZGluZyB6ZXJvKVxuZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgIShBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApO1xufSAvLyBEZXRlcm1pbmUgaWYgZmllbGQgaXMgZW1wdHkgb3IgZmlsbGVkLlxuLy8gUmVzcG9uc2UgZGV0ZXJtaW5lcyBpZiBsYWJlbCBpcyBwcmVzZW50ZWQgYWJvdmUgZmllbGQgb3IgYXMgcGxhY2Vob2xkZXIuXG4vL1xuLy8gQHBhcmFtIG9ialxuLy8gQHBhcmFtIFNTUlxuLy8gQHJldHVybnMge2Jvb2xlYW59IEZhbHNlIHdoZW4gbm90IHByZXNlbnQgb3IgZW1wdHkgc3RyaW5nLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhbnkgbnVtYmVyIG9yIHN0cmluZyB3aXRoIGxlbmd0aC5cblxuXG5mdW5jdGlvbiBpc0ZpbGxlZChvYmopIHtcbiAgdmFyIFNTUiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gIHJldHVybiBvYmogJiYgKGhhc1ZhbHVlKG9iai52YWx1ZSkgJiYgb2JqLnZhbHVlICE9PSAnJyB8fCBTU1IgJiYgaGFzVmFsdWUob2JqLmRlZmF1bHRWYWx1ZSkgJiYgb2JqLmRlZmF1bHRWYWx1ZSAhPT0gJycpO1xufSAvLyBEZXRlcm1pbmUgaWYgYW4gSW5wdXQgaXMgYWRvcm5lZCBvbiBzdGFydC5cbi8vIEl0J3MgY29ycmVzcG9uZGluZyB0byB0aGUgbGVmdCB3aXRoIExUUi5cbi8vXG4vLyBAcGFyYW0gb2JqXG4vLyBAcmV0dXJucyB7Ym9vbGVhbn0gRmFsc2Ugd2hlbiBubyBhZG9ybm1lbnRzLlxuLy8gICAgICAgICAgICAgICAgICAgIFRydWUgd2hlbiBhZG9ybmVkIGF0IHRoZSBzdGFydC5cblxuXG5mdW5jdGlvbiBpc0Fkb3JuZWRTdGFydChvYmopIHtcbiAgcmV0dXJuIG9iai5zdGFydEFkb3JubWVudDtcbn0iLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IHdpdGhSb3V0ZXIgZnJvbSBcInJlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVtb2l6ZU9wdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB2YXIgcmVzdWx0RnVuYyA9IGZ1bmNzLnBvcCgpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXG4gICAgdmFyIG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUuYXBwbHkodW5kZWZpbmVkLCBbZnVuY3Rpb24gKCkge1xuICAgICAgcmVjb21wdXRhdGlvbnMrKztcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChtZW1vaXplT3B0aW9ucykpO1xuXG4gICAgLy8gSWYgYSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgZXhhY3Qgc2FtZSBhcmd1bWVudHMgd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSBvdXIgZGVwZW5kZW5jaWVzIGFnYWluLlxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn0iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmltcG9ydCB7IERFRkFVTFRfQVBQTElDQVRJT05fSUQgfSBmcm9tICdAL2NvbmZpZy9hcHBsaWNhdGlvbic7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFJvb3RTdGF0ZSB9IGZyb20gJ0Avc3RhdGUvcm9vdFJlZHVjZXInO1xuaW1wb3J0IHR5cGUgeyBBcHBsaWNhdGlvbiwgTWVudXMsIE1lbnUsIE1lbnVMaW5rIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBwYXRoTmFtZVNlbGVjdG9yID0gKHN0YXRlOiBSb290U3RhdGUpOiBzdHJpbmcgPT5cbiAgICBzdGF0ZS5yb3V0ZXIgPyBzdGF0ZS5yb3V0ZXIubG9jYXRpb24ucGF0aG5hbWUgOiAnJztcbmV4cG9ydCBjb25zdCBhcHBzU2VsZWN0b3IgPSAoc3RhdGU6IFJvb3RTdGF0ZSk6IEFwcGxpY2F0aW9uW10gPT5cbiAgICBzdGF0ZS5jb250ZXh0LmFwcGxpY2F0aW9ucztcbmV4cG9ydCBjb25zdCBtZW51c1NlbGVjdG9yID0gKHN0YXRlOiBSb290U3RhdGUpOiBNZW51cyA9PiBzdGF0ZS5jb250ZXh0Lm1lbnVzO1xuZXhwb3J0IGNvbnN0IGJyZWFkQ3J1bWJTZWxlY3RvciA9IChzdGF0ZTogUm9vdFN0YXRlKTogc3RyaW5nID0+XG4gICAgc3RhdGUuY29udGV4dC5icmVhZENydW1iO1xuXG5leHBvcnQgY29uc3QgYXBwbGljYXRpb25zU2VsZWN0b3I6IChcbiAgICBzdGF0ZTogUm9vdFN0YXRlXG4pID0+IEFwcGxpY2F0aW9uW10gPSBjcmVhdGVTZWxlY3RvcihcbiAgICBwYXRoTmFtZVNlbGVjdG9yLFxuICAgIGFwcHNTZWxlY3RvcixcbiAgICAocGF0aE5hbWUsIGFwcGxpY2F0aW9ucykgPT4ge1xuICAgICAgICByZXR1cm4gYXBwbGljYXRpb25zLm1hcChhcHAgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5hcHAsXG4gICAgICAgICAgICAgICAgaXNDdXJyZW50OiBpc0N1cnJlbnRBcHBsaWNhdGlvbihhcHAsIHBhdGhOYW1lKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IGN1cnJlbnRBcHBsaWNhdGlvblNlbGVjdG9yOiAoXG4gICAgc3RhdGU6IFJvb3RTdGF0ZVxuKSA9PiBBcHBsaWNhdGlvbiA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIGFwcGxpY2F0aW9uc1NlbGVjdG9yLFxuICAgIGFwcGxpY2F0aW9ucyA9PiB7XG4gICAgICAgIHJldHVybiBhcHBsaWNhdGlvbnMuZmlsdGVyKGFwcCA9PiBhcHAuaXNDdXJyZW50KVswXTtcbiAgICB9XG4pO1xuXG5leHBvcnQgY29uc3QgY3VycmVudE1lbnVTZWxlY3RvcjogKHN0YXRlOiBSb290U3RhdGUpID0+IE1lbnUgPSBjcmVhdGVTZWxlY3RvcihcbiAgICBwYXRoTmFtZVNlbGVjdG9yLFxuICAgIGN1cnJlbnRBcHBsaWNhdGlvblNlbGVjdG9yLFxuICAgIG1lbnVzU2VsZWN0b3IsXG4gICAgKHBhdGhOYW1lLCBhcHBsaWNhdGlvbiwgbWVudXMpID0+IHtcbiAgICAgICAgY29uc3QgbWVudSA9IG1lbnVzW2FwcGxpY2F0aW9uLmlkXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4ubWVudSxcbiAgICAgICAgICAgIGdyb3VwczogbWVudS5ncm91cHMubWFwKGdyb3VwID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAuLi5ncm91cCxcbiAgICAgICAgICAgICAgICAgICAgbGlua3M6IGdyb3VwLmxpbmtzLm1hcChsaW5rID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubGluayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0N1cnJlbnQ6IGlzQ3VycmVudE1lbnVMaW5rKG1lbnUsIGxpbmssIHBhdGhOYW1lKVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICB9XG4pO1xuXG5leHBvcnQgY29uc3QgY3VycmVudE1lbnVMaW5rU2VsZWN0b3I6IChcbiAgICBzdGF0ZTogUm9vdFN0YXRlXG4pID0+IE1lbnVMaW5rID0gY3JlYXRlU2VsZWN0b3IoXG4gICAgY3VycmVudE1lbnVTZWxlY3RvcixcbiAgICBtZW51ID0+IHtcbiAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gbWVudS5ncm91cHMucmVkdWNlKChsaW5rcywgZ3JvdXApID0+IHtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goLi4uZ3JvdXAubGlua3MpO1xuICAgICAgICAgICAgcmV0dXJuIGxpbmtzO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiBmbGF0dGVuZWQuZmlsdGVyKGxpbmsgPT4gbGluay5pc0N1cnJlbnQpWzBdO1xuICAgIH1cbik7XG5cbmNvbnN0IGlzQ3VycmVudEFwcGxpY2F0aW9uID0gKGFwcGxpY2F0aW9uLCBwYXRoTmFtZSkgPT4ge1xuICAgIGlmICghcGF0aE5hbWUgfHwgcGF0aE5hbWUgPT09ICcvJykge1xuICAgICAgICBpZiAoYXBwbGljYXRpb24uaWQgPT09IERFRkFVTFRfQVBQTElDQVRJT05fSUQpIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhOYW1lLmluZGV4T2YoYXBwbGljYXRpb24ucmVsYXRpdmVQYXRoKSAhPT0gLTE7XG59O1xuXG5jb25zdCBpc0N1cnJlbnRNZW51TGluayA9IChtZW51LCBsaW5rLCBwYXRoTmFtZSkgPT4ge1xuICAgIGlmICghcGF0aE5hbWUgfHwgcGF0aE5hbWUgPT09ICcvJyB8fCBwYXRoTmFtZSA9PT0gbWVudS5yZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgaWYgKGxpbmsuaXNEZWZhdWx0KSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoTmFtZS5pbmRleE9mKGAke21lbnUucmVsYXRpdmVQYXRofSR7bGluay5yZWxhdGl2ZVBhdGh9YCkgPT09IDA7XG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmssIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBzdHlsZWQsIHsgY3NzIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb24nO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcblxuaW1wb3J0IHR5cGUgeyBUaGVtZSB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcy9jcmVhdGVNdWlUaGVtZSc7XG5cbmltcG9ydCBBcHBCYXJNVUkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCBUb29sYmFyTVVJIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXInO1xuaW1wb3J0IEJ1dHRvbiBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9CdXR0b24nO1xuXG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFJvb3RTdGF0ZSB9IGZyb20gJ0Avc3RhdGUvcm9vdFJlZHVjZXInO1xuaW1wb3J0IHR5cGUgeyBBcHBsaWNhdGlvbiB9IGZyb20gJ0Avc3RhdGUvY29udGV4dC90eXBlcyc7XG5cbmltcG9ydCB7XG4gICAgYXBwbGljYXRpb25zU2VsZWN0b3IsXG4gICAgY3VycmVudEFwcGxpY2F0aW9uU2VsZWN0b3Jcbn0gZnJvbSAnQC9zdGF0ZS9jb250ZXh0L3NlbGVjdG9ycyc7XG5cbnR5cGUgVGhlbWVQcm9wcyA9IHtcbiAgICB0aGVtZTogVGhlbWVcbn07XG5cbmNvbnN0IEFwcEJhciA9IHN0eWxlZChBcHBCYXJNVUkpYFxuICAgIHotaW5kZXg6ICR7KHByb3BzOiBUaGVtZVByb3BzKSA9PiBwcm9wcy50aGVtZS56SW5kZXguZHJhd2VyICsgMX0gIWltcG9ydGFudDtcbiAgICBib3JkZXItYm90dG9tOiA0cHggc29saWQgJHtwcm9wcyA9PiBwcm9wcy5hcHBsaWNhdGlvbi5jb2xvcn07XG5gO1xuXG5jb25zdCBUb29sYmFyID0gc3R5bGVkKFRvb2xiYXJNVUkpYFxuICAgIGFsaWduLWl0ZW1zOiBub3JtYWwgIWltcG9ydGFudDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJJdGVtID0gc3R5bGVkLmRpdmBcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1pbi1oZWlnaHQ6IDBweDtcbiAgICB3aWR0aDogMTQ1cHg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBmb250LWZhbWlseTogJHsocHJvcHM6IFRoZW1lUHJvcHMpID0+IHByb3BzLnRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseX07XG4gICAgZm9udC13ZWlnaHQ6ICR7KHByb3BzOiBUaGVtZVByb3BzKSA9PlxuICAgICAgICBwcm9wcy50aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW19O1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuXG5jb25zdCBIZWFkZXIgPSBzdHlsZWQoVG9vbGJhckl0ZW0pYFxuICAgIGp1c3RpZnktY29udGVudDogbGVmdDtcbiAgICB3aWR0aDogMjE1cHg7XG4gICAgZm9udC1zaXplOiAxLjZyZW07XG5gO1xuXG5jb25zdCBMaWdodCA9IHN0eWxlZC5zcGFuYFxuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XG5gO1xuXG5jb25zdCBCb2xkID0gc3R5bGVkLnNwYW5gXG4gICAgZm9udC13ZWlnaHQ6IDgwMDtcbmA7XG5cbmNvbnN0IE5hdkl0ZW0gPSBzdHlsZWQoVG9vbGJhckl0ZW0pYFxuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAke3Byb3BzID0+XG4gICAgICAgIHByb3BzLmFwcGxpY2F0aW9uLmlzQ3VycmVudCAmJlxuICAgICAgICBjc3NgXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke3Byb3BzLmFwcGxpY2F0aW9uLmNvbG9yfTtcbiAgICAgICAgYH07XG5gO1xuXG5jb25zdCBOYXZJdGVtVGV4dCA9IHN0eWxlZC5zcGFuYFxuICAgIHBhZGRpbmctbGVmdDogNXB4O1xuYDtcblxudHlwZSBQcm9wcyA9IHtcbiAgICBvbkxvZ291dDogRnVuY3Rpb24sXG4gICAgYXBwbGljYXRpb25zOiBBcHBsaWNhdGlvbltdLFxuICAgIGN1cnJlbnRBcHBsaWNhdGlvbjogQXBwbGljYXRpb24sXG4gICAgdGhlbWU6IFRoZW1lLFxuICAgIGhpc3Rvcnk6IE9iamVjdFxufTtcblxuY2xhc3MgTmF2aWdhdG9yIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gICAgbmF2aWdhdGUodG8pIHtcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2godG8pO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxBcHBCYXJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbj1cImZpeGVkXCJcbiAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbj17dGhpcy5wcm9wcy5jdXJyZW50QXBwbGljYXRpb259XG4gICAgICAgICAgICAgICAgdGhlbWU9e3RoaXMucHJvcHMudGhlbWV9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFRvb2xiYXI+XG4gICAgICAgICAgICAgICAgICAgIDxIZWFkZXIgdGhlbWU9e3RoaXMucHJvcHMudGhlbWV9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJvbGQ+T25lPC9Cb2xkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPExpZ2h0PkFkdmlzb3I8L0xpZ2h0PlxuICAgICAgICAgICAgICAgICAgICA8L0hlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuYXBwbGljYXRpb25zLm1hcChhcHAgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2FwcC5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbj17YXBwfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lPXt0aGlzLnByb3BzLnRoZW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMubmF2aWdhdGUoYXBwLnJlbGF0aXZlUGF0aCl9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb24+e2FwcC5pY29ufTwvSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2SXRlbVRleHQ+e2FwcC5uYW1lfTwvTmF2SXRlbVRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L05hdkl0ZW0+XG4gICAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNvbG9yPVwiaW5oZXJpdFwiIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMub25Mb2dvdXQoKX0+U2lnbm91dDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvVG9vbGJhcj5cbiAgICAgICAgICAgIDwvQXBwQmFyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUpID0+ICh7XG4gICAgYXBwbGljYXRpb25zOiBhcHBsaWNhdGlvbnNTZWxlY3RvcihzdGF0ZSksXG4gICAgY3VycmVudEFwcGxpY2F0aW9uOiBjdXJyZW50QXBwbGljYXRpb25TZWxlY3RvcihzdGF0ZSkgfHwge31cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykod2l0aFRoZW1lKCkod2l0aFJvdXRlcihOYXZpZ2F0b3IpKSk7XG4iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gXCJoaXN0b3J5XCI7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgaW52YXJpYW50KHRvICE9PSB1bmRlZmluZWQsICdZb3UgbXVzdCBzcGVjaWZ5IHRoZSBcInRvXCIgcHJvcGVydHknKTtcblxuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGhpc3RvcnkubG9jYXRpb24pIDogdG87XG5cbiAgICB2YXIgaHJlZiA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsgY3NzIH0gZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IHdpdGhTdHlsZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBJY29uIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0ljb24nO1xuaW1wb3J0IERyYXdlck1VSSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9EcmF3ZXInO1xuaW1wb3J0IFRvb2xiYXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVG9vbGJhcic7XG5pbXBvcnQgTGlzdE1VSSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9MaXN0JztcbmltcG9ydCBEaXZpZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0RpdmlkZXInO1xuaW1wb3J0IExpc3RJdGVtIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RJdGVtJztcbmltcG9ydCBMaXN0SXRlbUljb24gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1JY29uJztcbmltcG9ydCBMaXN0SXRlbVRleHQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvTGlzdEl0ZW1UZXh0JztcbmltcG9ydCBBcHBCYXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCBMaXN0U3ViaGVhZGVyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0xpc3RTdWJoZWFkZXInO1xuXG5pbXBvcnQgY29uZmlnIGZyb20gJ0AvY29uZmlnL2NvbmZpZyc7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFJvb3RTdGF0ZSB9IGZyb20gJ0Avc3RhdGUvcm9vdFJlZHVjZXInO1xuaW1wb3J0IHR5cGUgeyBNZW51LCBNZW51TGluaywgQXBwbGljYXRpb24gfSBmcm9tICdAL3N0YXRlL2NvbnRleHQvdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBjdXJyZW50TWVudVNlbGVjdG9yLFxuICAgIGN1cnJlbnRBcHBsaWNhdGlvblNlbGVjdG9yXG59IGZyb20gJ0Avc3RhdGUvY29udGV4dC9zZWxlY3RvcnMnO1xuXG5jb25zdCBkcmF3ZXJXaWR0aCA9IGNvbmZpZy51aS5zaWRlQmFyV2lkdGg7XG5cbmNvbnN0IERyYXdlciA9IHN0eWxlZChEcmF3ZXJNVUkpYFxuICAgIHdpZHRoOiAke2RyYXdlcldpZHRofXB4ICFpbXBvcnRhbnQ7XG4gICAgZmxleC1zaHJpbms6IDAgIWltcG9ydGFudDtcblxuICAgICYgPiBkaXYge1xuICAgICAgICB3aWR0aDogJHtkcmF3ZXJXaWR0aH1weCAhaW1wb3J0YW50O1xuICAgIH1cbmA7XG5cbmNvbnN0IExpc3QgPSBzdHlsZWQoTGlzdE1VSSlgXG4gICAgbWFyZ2luLXRvcDo1cHggIWltcG9ydGFudDtcbmA7XG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgY2xhc3NOYW1lOiBzdHJpbmcsXG4gICAgbWVudTogTWVudSxcbiAgICBhcHBsaWNhdGlvbjogQXBwbGljYXRpb25cbn07XG5cbmNsYXNzIFNpZGVNZW51IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPERyYXdlciB2YXJpYW50PVwicGVybWFuZW50XCI+XG4gICAgICAgICAgICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiPlxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDwvQXBwQmFyPlxuXG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMubWVudS5ncm91cHMubWFwKGdyb3VwID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtncm91cC5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmhlYWRlcj17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0U3ViaGVhZGVyPntncm91cC5uYW1lfTwvTGlzdFN1YmhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2dyb3VwLmxpbmtzLm1hcChsaW5rID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaXN0SXRlbUxpbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2xpbmsucmVsYXRpdmVQYXRofVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms9e2xpbmt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudT17dGhpcy5wcm9wcy5tZW51fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uPXt0aGlzLnByb3BzLmFwcGxpY2F0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvTGlzdD5cbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvRHJhd2VyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY29uc3QgTGlzdEl0ZW1Db250ZXh0ID0gc3R5bGVkLmxpYFxuICAgICR7cHJvcHMgPT5cbiAgICAgICAgcHJvcHMubGluay5pc0N1cnJlbnQgJiZcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCAke3Byb3BzID0+IHByb3BzLmFwcGxpY2F0aW9uLmNvbG9yfTtcbiAgICAgICAgYH0gJHtwcm9wcyA9PlxuICAgICAgICAhcHJvcHMubGluay5pc0N1cnJlbnQgJiZcbiAgICAgICAgY3NzYFxuICAgICAgICAgICAgYm9yZGVyLWxlZnQ6IDZweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICAgICAgYH07XG5gO1xuXG50eXBlIExpc3RJdGVtTGlua1Byb3BzID0ge1xuICAgIGxpbms6IE1lbnVMaW5rLFxuICAgIG1lbnU6IE1lbnUsXG4gICAgYXBwbGljYXRpb246IEFwcGxpY2F0aW9uXG59O1xuXG5jbGFzcyBMaXN0SXRlbUxpbmsgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGlzdEl0ZW1MaW5rUHJvcHM+IHtcbiAgICByZW5kZXJMaW5rID0gaXRlbVByb3BzID0+IChcbiAgICAgICAgPExpbmtcbiAgICAgICAgICAgIHRvPXtgJHt0aGlzLnByb3BzLm1lbnUucmVsYXRpdmVQYXRofSR7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5saW5rLnJlbGF0aXZlUGF0aFxuICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICB7Li4uaXRlbVByb3BzfVxuICAgICAgICAvPlxuICAgICk7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgbGluaywgYXBwbGljYXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TGlzdEl0ZW1Db250ZXh0IGxpbms9e2xpbmt9IGFwcGxpY2F0aW9uPXthcHBsaWNhdGlvbn0+XG4gICAgICAgICAgICAgICAgPExpc3RJdGVtXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQ9e3RoaXMucmVuZGVyTGlua31cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2xpbmsuaXNDdXJyZW50fVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJY29uPntsaW5rLmljb259PC9JY29uPlxuICAgICAgICAgICAgICAgICAgICA8L0xpc3RJdGVtSWNvbj5cbiAgICAgICAgICAgICAgICAgICAgPExpc3RJdGVtVGV4dCBwcmltYXJ5PXtsaW5rLm5hbWV9IC8+XG4gICAgICAgICAgICAgICAgPC9MaXN0SXRlbT5cbiAgICAgICAgICAgIDwvTGlzdEl0ZW1Db250ZXh0PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUpID0+ICh7XG4gICAgbWVudTogY3VycmVudE1lbnVTZWxlY3RvcihzdGF0ZSksXG4gICAgYXBwbGljYXRpb246IGN1cnJlbnRBcHBsaWNhdGlvblNlbGVjdG9yKHN0YXRlKVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShTaWRlTWVudSk7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5pbXBvcnQgR3JpZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9HcmlkJztcblxuaW1wb3J0IHR5cGUgeyBTdGF0ZSBhcyBSb290U3RhdGUgfSBmcm9tICdAL3N0YXRlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgTWVudUxpbmssIEFwcGxpY2F0aW9uIH0gZnJvbSAnQC9zdGF0ZS9jb250ZXh0L3R5cGVzJztcbmltcG9ydCB7XG4gICAgY3VycmVudE1lbnVMaW5rU2VsZWN0b3IsXG4gICAgY3VycmVudEFwcGxpY2F0aW9uU2VsZWN0b3IsXG4gICAgYnJlYWRDcnVtYlNlbGVjdG9yXG59IGZyb20gJ0Avc3RhdGUvY29udGV4dC9zZWxlY3RvcnMnO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGxpbms6IE1lbnVMaW5rLFxuICAgIGFwcGxpY2F0aW9uOiBBcHBsaWNhdGlvbixcbiAgICBicmVhZENydW1iOiBzdHJpbmdcbn07XG5cbmNsYXNzIFBhZ2VIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um93XG4gICAgICAgICAgICAgICAgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uPVwiY29sdW1uXCJcbiAgICAgICAgICAgICAgICBqdXN0aWZ5PVwiY2VudGVyXCJcbiAgICAgICAgICAgICAgICBhbGlnbkl0ZW1zPVwic3RyZXRjaFwiXG4gICAgICAgICAgICAgICAgYXBwbGljYXRpb249e3RoaXMucHJvcHMuYXBwbGljYXRpb259XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPEhlYWRlciBpdGVtPlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5saW5rLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmJyZWFkQ3J1bWIgJiYgPExpZ2h0PiAvIHt0aGlzLnByb3BzLmJyZWFkQ3J1bWJ9PC9MaWdodD59XG4gICAgICAgICAgICAgICAgPC9IZWFkZXI+XG4gICAgICAgICAgICA8L1Jvdz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmNvbnN0IFJvdyA9IHN0eWxlZChHcmlkKWBcbiAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR7cHJvcHMgPT4gcHJvcHMuYXBwbGljYXRpb24uY29sb3J9O1xuICAgIGhlaWdodDogNTNweDtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xuYDtcblxuY29uc3QgSGVhZGVyID0gc3R5bGVkKEdyaWQpYFxuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICAgIHBhZGRpbmctbGVmdDogMTVweDtcbiAgICBmb250LXdlaWdodDogNTAwO1xuYDtcblxuY29uc3QgTGlnaHQgPSBzdHlsZWQuc3BhbmBcbiAgICBmb250LXdlaWdodDogMTAwO1xuICAgIGZvbnQtc2l6ZTogMC45N3JlbTtcbmA7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogUm9vdFN0YXRlKSA9PiAoe1xuICAgIGxpbms6IGN1cnJlbnRNZW51TGlua1NlbGVjdG9yKHN0YXRlKSxcbiAgICBhcHBsaWNhdGlvbjogY3VycmVudEFwcGxpY2F0aW9uU2VsZWN0b3Ioc3RhdGUpLFxuICAgIGJyZWFkQ3J1bWI6IGJyZWFkQ3J1bWJTZWxlY3RvcihzdGF0ZSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoUGFnZUhlYWRlcik7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBBcHBCYXIgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQXBwQmFyJztcbmltcG9ydCBUb29sYmFyIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXInO1xuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVHlwb2dyYXBoeSc7XG5cbmltcG9ydCBQYWdlSGVhZGVyIGZyb20gJy4vUGFnZUhlYWRlcic7XG5cbmNvbnN0IE1haW4gPSBzdHlsZWQoVHlwb2dyYXBoeSlgXG4gICAgZmxleC1ncm93OiAxICFpbXBvcnRhbnQ7XG5gO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5Ob2RlXG59O1xuXG5jbGFzcyBCb2R5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPE1haW4gdmFyaWFudD1cImJvZHkxXCIgY29tcG9uZW50PVwiZGl2XCI+XG4gICAgICAgICAgICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiPlxuICAgICAgICAgICAgICAgICAgICA8VG9vbGJhciAvPlxuICAgICAgICAgICAgICAgIDwvQXBwQmFyPlxuICAgICAgICAgICAgICAgIDxQYWdlSGVhZGVyIC8+XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICA8L01haW4+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb2R5O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgTmF2aWdhdG9yIGZyb20gJy4vTmF2aWdhdG9yJztcbmltcG9ydCBTaWRlTWVudSBmcm9tICcuL1NpZGVNZW51JztcbmltcG9ydCBQYWdlSGVhZGVyIGZyb20gJy4vUGFnZUhlYWRlcic7XG5pbXBvcnQgQm9keSBmcm9tICcuL0JvZHknO1xuXG5jb25zdCBSb290ID0gc3R5bGVkLmRpdmBcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgZGlzcGxheTogZmxleDtcbmA7XG5cbnR5cGUgUHJvcHMgPSB7XG4gICAgb25Mb2dvdXQ6IEZ1bmN0aW9uLFxuICAgIGNoaWxkcmVuOiBhbnlbXVxufTtcblxuY2xhc3MgTGF5b3V0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFJvb3Q+XG4gICAgICAgICAgICAgICAgPE5hdmlnYXRvciBvbkxvZ291dD17dGhpcy5wcm9wcy5vbkxvZ291dH0gLz5cbiAgICAgICAgICAgICAgICA8U2lkZU1lbnUgLz5cbiAgICAgICAgICAgICAgICA8Qm9keT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L0JvZHk+XG4gICAgICAgICAgICA8L1Jvb3Q+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMYXlvdXQ7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEdyaWQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvR3JpZCc7XG5pbXBvcnQgQ2lyY3VsYXJQcm9ncmVzcyBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9DaXJjdWxhclByb2dyZXNzJztcbmltcG9ydCBUeXBvZ3JhcGh5IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHknO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IFdyYXBwZXIgPSBzdHlsZWQoR3JpZClgXG4gICAgcGFkZGluZy10b3A6IDYwcHg7XG5gO1xuXG5jb25zdCBUZXh0ID0gc3R5bGVkKFR5cG9ncmFwaHkpYFxuICAgIHBhZGRpbmctdG9wOiAxMHB4ICFpbXBvcnRhbnQ7XG5gO1xuXG50eXBlIFByb3BzID0ge1xuICAgIHRleHQ/OiBzdHJpbmdcbn07XG5cbmNvbnN0IExvYWRlciA9ICh7IHRleHQgPSAnbG9hZGluZy4uLicgfTogUHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8V3JhcHBlciBjb250YWluZXIgZGlyZWN0aW9uPVwiY29sdW1uXCIganVzdGlmeT1cImNlbnRlclwiIGFsaWduSXRlbXM9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgIDxHcmlkIGl0ZW0+XG4gICAgICAgICAgICAgICAgPENpcmN1bGFyUHJvZ3Jlc3MgY29sb3I9XCJzZWNvbmRhcnlcIiAvPlxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICAgICAgPEdyaWQgaXRlbT5cbiAgICAgICAgICAgICAgICA8VGV4dCB2YXJpYW50PVwiYm9keTFcIj5cbiAgICAgICAgICAgICAgICAgICAge3RleHR9XG4gICAgICAgICAgICAgICAgPC9UZXh0PlxuICAgICAgICAgICAgPC9HcmlkPlxuICAgICAgICA8L1dyYXBwZXI+XG4gICAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgd2l0aEF1dGggfSBmcm9tICdAb2t0YS9va3RhLXJlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgdHlwZSB7IERpc3BhdGNoIH0gZnJvbSAnQC9zdGF0ZS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFJvb3RTdGF0ZSB9IGZyb20gJ0Avc3RhdGUvcm9vdFJlZHVjZXInO1xuXG5pbXBvcnQgTGF5b3V0IGZyb20gJ0AvdWkvbGF5b3V0L0xheW91dCc7XG5pbXBvcnQgTG9hZGVyIGZyb20gJ0AvdWkvY29tbW9uL0xvYWRlcic7XG5cbmltcG9ydCB7IHJlY2lldmVBdXRoZW50aWNhdGlvbiwgY2xlYXJBdXRoZW50aWNhdGlvbiB9IGZyb20gJ0Avc3RhdGUvYXV0aC9hY3Rpb25zJztcblxudHlwZSBQcm9wcyA9IHtcbiAgICBhdXRoOiBPYmplY3QsXG4gICAgYXV0aGVudGljYXRlZDogYm9vbGVhbixcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2gsXG4gICAgY2hpbGRyZW46IGFueVtdXG59O1xuXG5jbGFzcyBBdXRoZW50aWNhdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5jaGVja0F1dGhlbnRpY2F0aW9uKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICB0aGlzLmNoZWNrQXV0aGVudGljYXRpb24oKTtcbiAgICB9XG5cbiAgICBjaGVja0F1dGhlbnRpY2F0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBhdXRoZW50aWNhdGVkID0gYXdhaXQgdGhpcy5wcm9wcy5hdXRoLmlzQXV0aGVudGljYXRlZCgpO1xuXG4gICAgICAgIGlmICghYXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5hdXRoLnJlZGlyZWN0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5hdXRoZW50aWNhdGVkID09PSBhdXRoZW50aWNhdGVkKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJpbmZvID0gYXdhaXQgdGhpcy5wcm9wcy5hdXRoLmdldFVzZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGlkVG9rZW4gPSBhd2FpdCB0aGlzLnByb3BzLmF1dGguZ2V0SWRUb2tlbigpO1xuICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBhd2FpdCB0aGlzLnByb3BzLmF1dGguZ2V0QWNjZXNzVG9rZW4oKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goXG4gICAgICAgICAgICAgICAgcmVjaWV2ZUF1dGhlbnRpY2F0aW9uKHVzZXJpbmZvLCBpZFRva2VuLCBhY2Nlc3NUb2tlbilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGNsZWFyQXV0aGVudGljYXRpb24oKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbG9nb3V0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLmF1dGgubG9nb3V0KCk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmF1dGhlbnRpY2F0ZWQpXG4gICAgICAgICAgICByZXR1cm4gPExvYWRlciB0ZXh0PVwic2lnbmluZyBpbi4uLlwiIC8+XG5cbiAgICAgICAgcmV0dXJuIDxMYXlvdXQgb25Mb2dvdXQ9e3RoaXMubG9nb3V0fT57dGhpcy5wcm9wcy5jaGlsZHJlbn08L0xheW91dD47XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gKHtcbiAgICBhdXRoZW50aWNhdGVkOiBzdGF0ZS5hdXRoLmF1dGhlbnRpY2F0ZWQsXG4gICAgdXNlckluZm86IHN0YXRlLmF1dGgudXNlckluZm9cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykod2l0aEF1dGgoQXV0aGVudGljYXRpb24pKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGNyZWF0ZU11aVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJztcbmltcG9ydCBibHVlIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL2NvbG9ycy9ibHVlJztcblxuZXhwb3J0IGNvbnN0IHRoZW1lID0gY3JlYXRlTXVpVGhlbWUoe1xuICAgIHBhbGV0dGU6IHtcbiAgICAgICAgcHJpbWFyeTogYmx1ZVxuICAgIH0sXG4gICAgdHlwb2dyYXBoeToge1xuICAgICAgICB1c2VOZXh0VmFyaWFudHM6IHRydWVcbiAgICB9XG59KTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxudHlwZSBQcm9wcyA9IHtcbiAgdGV4dD86IHN0cmluZ1xufTtcblxuY29uc3QgRXJyb3IgPSAoeyB0ZXh0ID0gXCJBbiBlcnJvciBoYXMgb2NjdXJlZCwgcGxlYXNlIHJlbG9hZCB0aGUgYXBwbGljYXRpb25cIiB9OiBQcm9wcykgPT4ge1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC01IG1iLTVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgdGV4dC1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICA8aDU+e3RleHR9PC9oNT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXJyb3IiLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmltcG9ydCB0eXBlIHsgU3RhdGUgYXMgUm9vdFN0YXRlIH0gZnJvbSAnQC9zdGF0ZS9yb290UmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFJvdXRlclByb3BzIH0gZnJvbSAnQC9zdGF0ZS90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSAnLi9yZWR1Y2VyJztcblxuY29uc3Qgcm9vdFNlbGVjdG9yID0gKHN0YXRlOiBSb290U3RhdGUpOiBTdGF0ZSA9PlxuICAgIHN0YXRlLmFwcC5kaXJlY3RvcnkudXNlcnMubGlzdDtcblxuZXhwb3J0IGNvbnN0IGxpc3RTZWxlY3RvcjogKHN0YXRlOiBSb290U3RhdGUpID0+IFN0YXRlID0gY3JlYXRlU2VsZWN0b3IoXG4gICAgcm9vdFNlbGVjdG9yLFxuICAgIHJvb3QgPT4gcm9vdFxuKTtcblxuY29uc3QgZ2V0Q3VycmVudFVzZXJJZCA9IChzdGF0ZTogUm9vdFN0YXRlLCBwcm9wczogUm91dGVyUHJvcHMpID0+XG4gICAgcHJvcHMubWF0Y2gucGFyYW1zLnVzZXJJZDtcblxuZXhwb3J0IGNvbnN0IGdldENhY2hlZFVzZXI6IChcbiAgICBzdGF0ZTogUm9vdFN0YXRlLFxuICAgIHByb3BzOiBSb3V0ZXJQcm9wc1xuKSA9PiA/VXNlciA9IGNyZWF0ZVNlbGVjdG9yKFxuICAgIFtyb290U2VsZWN0b3IsIGdldEN1cnJlbnRVc2VySWRdLFxuICAgIChyb290LCB1c2VySWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvb3QuaXRlbXMuZmluZCh1ID0+IHUuaWQgPT09IHVzZXJJZCk7XG4gICAgfVxuKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5pbXBvcnQgVGFibGUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGFibGUnO1xuaW1wb3J0IFRhYmxlQm9keSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUJvZHknO1xuaW1wb3J0IFRhYmxlQ2VsbCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUNlbGwnO1xuaW1wb3J0IFRhYmxlSGVhZCBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9UYWJsZUhlYWQnO1xuaW1wb3J0IFRhYmxlUm93IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL1RhYmxlUm93JztcblxuaW1wb3J0IExvYWRlciBmcm9tICdAL3VpL2NvbW1vbi9Mb2FkZXInO1xuaW1wb3J0IEVycm9yIGZyb20gJ0AvdWkvY29tbW9uL0Vycm9yJztcblxuaW1wb3J0IHR5cGUgeyBSb3V0ZXJQcm9wcywgUmVkdXhQcm9wcyB9IGZyb20gJ0Avc3RhdGUvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSBhcyBSb290U3RhdGUgfSBmcm9tICdAL3N0YXRlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB7IGxpc3RTZWxlY3RvciB9IGZyb20gJ0Avc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy9saXN0L3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBmZXRjaFVzZXJzIH0gZnJvbSAnQC9zdGF0ZS9hcHAvZGlyZWN0b3J5L3VzZXJzL2xpc3QvYWN0aW9ucyc7XG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICdAL3N0YXRlL2FwcC9kaXJlY3RvcnkvdXNlcnMvdHlwZXMnO1xuXG50eXBlIExvY2FsUHJvcHMgPSB7XG4gICAgdXNlcnM6IFVzZXJbXSxcbiAgICBmZXRjaGluZzogYm9vbGVhbixcbiAgICBlcnJvcjogYm9vbGVhbixcbn07XG50eXBlIFByb3BzID0gTG9jYWxQcm9wcyAmIFJvdXRlclByb3BzICYgUmVkdXhQcm9wcztcblxuY2xhc3MgVXNlckxpc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChmZXRjaFVzZXJzKCkpO1xuICAgIH1cblxuICAgIGVkaXRVc2VyID0gKGlkKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKGAvZGlyZWN0b3J5L3VzZXJzLyR7aWR9YClcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVycm9yKSByZXR1cm4gPEVycm9yIC8+O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5mZXRjaGluZykgcmV0dXJuIDxMb2FkZXIgdGV4dD1cImxvYWRpbmcgdXNlcnMuLi5cIiAvPjtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYmxlPlxuICAgICAgICAgICAgICAgIDxUYWJsZUhlYWQ+XG4gICAgICAgICAgICAgICAgICAgIDxUYWJsZVJvdz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+SWQ8L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+Rmlyc3QgTmFtZTwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlQ2VsbD5MYXN0IE5hbWU8L1RhYmxlQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVJvdz5cbiAgICAgICAgICAgICAgICA8L1RhYmxlSGVhZD5cbiAgICAgICAgICAgICAgICA8VGFibGVCb2R5PlxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy51c2Vycy5tYXAodXNlciA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVSb3cga2V5PXt1c2VyLmlkfSBvbkNsaWNrPXsoKSA9PiB0aGlzLmVkaXRVc2VyKHVzZXIuaWQpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGVDZWxsPnt1c2VyLmlkfTwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+e3VzZXIuZmlyc3ROYW1lfTwvVGFibGVDZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZUNlbGw+e3VzZXIubGFzdE5hbWV9PC9UYWJsZUNlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlUm93PlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L1RhYmxlQm9keT5cbiAgICAgICAgICAgIDwvVGFibGU+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gKHtcbiAgICB1c2VyczogbGlzdFNlbGVjdG9yKHN0YXRlKS5pdGVtcyB8fCBbXSxcbiAgICBmZXRjaGluZzogbGlzdFNlbGVjdG9yKHN0YXRlKS5mZXRjaGluZyxcbiAgICBlcnJvcjogbGlzdFNlbGVjdG9yKHN0YXRlKS5lcnJvclxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXIoY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFVzZXJMaXN0KSk7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvVGV4dEZpZWxkJztcbmltcG9ydCBHcmlkIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0dyaWQnO1xuaW1wb3J0IHN0eWxlZCwgeyBjc3MgfSBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJ0Avc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIGFzIFJvb3RTdGF0ZSB9IGZyb20gJ0Avc3RhdGUvcm9vdFJlZHVjZXInO1xuXG5jb25zdCBGb3JtID0gc3R5bGVkKEdyaWQpYFxuICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcbiAgICBtYXJnaW46IDBweCAhaW1wb3J0YW50O1xuYFxuXG50eXBlIFByb3BzID0ge1xuICAgIHVzZXI6IFVzZXJcbn07XG5cbnR5cGUgU3RhdGUgPSB7XG4gICAgdXNlcjogVXNlclxufTtcblxuY2xhc3MgVXNlckZvcm0gZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdXNlcjogcHJvcHMudXNlclxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge31cblxuICAgIGhhbmRsZUNoYW5nZSA9IG5hbWUgPT4gZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB1c2VyID0ge1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZS51c2VyLFxuICAgICAgICAgICAgW25hbWVdOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB1c2VyOiB1c2VyXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Rm9ybSBjb250YWluZXIgc3BhY2luZz17MjR9PlxuICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfT5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJGaXJzdCBOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnVzZXIuZmlyc3ROYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlKCdmaXJzdE5hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICAgICAgIDxHcmlkIGl0ZW0geHM9ezEyfT5cbiAgICAgICAgICAgICAgICAgICAgPFRleHRGaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJMYXN0IE5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUudXNlci5sYXN0TmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZSgnbGFzdE5hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxXaWR0aD17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L0dyaWQ+XG4gICAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IFJvb3RTdGF0ZSkgPT4gKHt9KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFVzZXJGb3JtKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlckZvcm0gZnJvbSAnLi9Vc2VyRm9ybSc7XG5cbnR5cGUgUHJvcHMgPSB7XG59O1xuXG5jbGFzcyBOZXdVc2VyIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIE5ld1VzZXJcbiAgICAgICAgPC8+XG4gICAgKVxuXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmV3VXNlciIsIi8vIEBmbG93XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB0eXBlIHsgRGlzcGF0Y2ggfSBmcm9tICdAL3N0YXRlL3R5cGVzJztcbmltcG9ydCB7IHJlY2lldmVCcmVhZENydW1iIH0gZnJvbSAnQC9zdGF0ZS9jb250ZXh0L2FjdGlvbnMnO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICAgIGJyZWFkQ3J1bWI6IHN0cmluZyxcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2hcbn07XG5cbmNsYXNzIENvbnRlbnRDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5kaXNwYXRjaChyZWNpZXZlQnJlYWRDcnVtYih0aGlzLnByb3BzLmJyZWFkQ3J1bWIpKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiA8Q29udGVudFdyYXBwZXI+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9Db250ZW50V3JhcHBlcj47XG4gICAgfVxufVxuXG5jb25zdCBDb250ZW50V3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAxODBweCk7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5leHBvcnQgY29uc3QgQ29udGVudCA9IGNvbm5lY3QoKShDb250ZW50Q29tcG9uZW50KTtcbiIsIi8vIEBmbG93XG5cbnR5cGUgQ29udGV4dFJlY2VpdmVCcmVhZENydW1iID0ge1xuICAgIHR5cGU6ICdDT05URVhUX1JFQ0lFVkVfQlJFQURDUlVNQicsXG4gICAgcGF5bG9hZDogc3RyaW5nXG59O1xuXG5leHBvcnQgdHlwZSBBY3Rpb24gPSBDb250ZXh0UmVjZWl2ZUJyZWFkQ3J1bWI7XG5cbmV4cG9ydCBjb25zdCByZWNpZXZlQnJlYWRDcnVtYiA9IChcbiAgICBicmVhZENydW1iOiBzdHJpbmdcbik6IENvbnRleHRSZWNlaXZlQnJlYWRDcnVtYiA9PiAoe1xuICAgIHR5cGU6ICdDT05URVhUX1JFQ0lFVkVfQlJFQURDUlVNQicsXG4gICAgcGF5bG9hZDogYnJlYWRDcnVtYlxufSk7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCBjb25maWcgZnJvbSAnQC9jb25maWcvY29uZmlnJztcbiBcbnR5cGUgUHJvcHMgPSB7XG4gICAgY2hpbGRyZW46IFJlYWN0Lk5vZGVcbn07XG5cbmNsYXNzIEZvb3RlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxXcmFwcGVyPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9XcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuXG5jb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgaGVpZ2h0OiA1NXB4O1xuICAgIGJvdHRvbTogMDtcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gJHtjb25maWcudWkuc2lkZUJhcldpZHRofXB4KTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTZFNkU2O1xuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjQzRDNEM0O1xuICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5leHBvcnQgeyBGb290ZXIgfTsiLCIvLyBAZmxvd1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQnV0dG9uTXVpIGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL0J1dHRvbic7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuY29uc3QgQnV0dG9uU3R5bGVkID0gc3R5bGVkKEJ1dHRvbk11aSlgXG4gICBtYXJnaW4tbGVmdDogOHB4ICFpbXBvcnRhbnQ7XG5gO1xuXG50eXBlIFByb3BzID0ge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5Ob2RlXG59O1xuXG5jb25zdCBCdXR0b24gPSAoeyAuLi5wcm9wcyB9OiBQcm9wcykgPT4gKFxuICAgICA8QnV0dG9uU3R5bGVkIHZhcmlhbnQ9XCJjb250YWluZWRcIiB7Li4ucHJvcHN9PlxuICAgICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9CdXR0b25TdHlsZWQ+XG4pXG5cbmV4cG9ydCB7IEJ1dHRvbiB9O1xuXG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gJ3Jlc2VsZWN0JztcbmltcG9ydCB0eXBlIHsgU3RhdGUgYXMgUm9vdFN0YXRlIH0gZnJvbSAnQC9zdGF0ZS9yb290UmVkdWNlcic7XG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFN0YXRlIH0gZnJvbSAnLi9yZWR1Y2VyJztcblxuY29uc3Qgcm9vdFNlbGVjdG9yID0gKHN0YXRlOiBSb290U3RhdGUpOiBTdGF0ZSA9PlxuICAgIHN0YXRlLmFwcC5kaXJlY3RvcnkudXNlcnMudXNlcjtcblxuZXhwb3J0IGNvbnN0IHVzZXJTZWxlY3RvcjogKHN0YXRlOiBSb290U3RhdGUpID0+IFN0YXRlID0gY3JlYXRlU2VsZWN0b3IoXG4gICAgcm9vdFNlbGVjdG9yLFxuICAgIHJvb3QgPT4gcm9vdFxuKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVXNlckZvcm0gZnJvbSAnLi9Vc2VyRm9ybSc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgd2l0aFJvdXRlciB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmltcG9ydCBMb2FkZXIgZnJvbSAnQC91aS9jb21tb24vTG9hZGVyJztcbmltcG9ydCBFcnJvciBmcm9tICdAL3VpL2NvbW1vbi9FcnJvcic7XG5pbXBvcnQgeyBDb250ZW50LCBGb290ZXIgfSBmcm9tICdAL3VpL2xheW91dC9tYWluJztcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvdWkvY29tbW9uL2NvbnRyb2xzJztcblxuaW1wb3J0IHR5cGUgeyBSZWR1eFByb3BzLCBSb3V0ZXJQcm9wcyB9IGZyb20gJ0Avc3RhdGUvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBTdGF0ZSBhcyBSb290U3RhdGUgfSBmcm9tICdAL3N0YXRlL3Jvb3RSZWR1Y2VyJztcbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJ0Avc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy90eXBlcyc7XG5pbXBvcnQgeyBnZXRDYWNoZWRVc2VyIH0gZnJvbSAnQC9zdGF0ZS9hcHAvZGlyZWN0b3J5L3VzZXJzL2xpc3Qvc2VsZWN0b3JzJztcbmltcG9ydCB7IHVzZXJTZWxlY3RvciB9IGZyb20gJ0Avc3RhdGUvYXBwL2RpcmVjdG9yeS91c2Vycy91c2VyL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBmZXRjaFVzZXIgfSBmcm9tICdAL3N0YXRlL2FwcC9kaXJlY3RvcnkvdXNlcnMvdXNlci9hY3Rpb25zJztcblxudHlwZSBMb2NhbFByb3BzID0ge1xuICAgIHVzZXI6IFVzZXIsXG4gICAgZmV0Y2hpbmc6IGJvb2xlYW4sXG4gICAgZXJyb3I6IGJvb2xlYW5cbn07XG50eXBlIFByb3BzID0gTG9jYWxQcm9wcyAmIFJvdXRlclByb3BzICYgUmVkdXhQcm9wcztcblxuY2xhc3MgRWRpdFVzZXIgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLnVzZXIpXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGZldGNoVXNlcih0aGlzLnByb3BzLm1hdGNoLnBhcmFtcy51c2VySWQpKTtcbiAgICB9XG5cbiAgICBjYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKGAvZGlyZWN0b3J5L3VzZXJzYCk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMuZXJyb3IpIHJldHVybiA8RXJyb3IgLz47XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmZldGNoaW5nIHx8ICF0aGlzLnByb3BzLnVzZXIpXG4gICAgICAgICAgICByZXR1cm4gPExvYWRlciB0ZXh0PVwibG9hZGluZyB1c2VyLi4uXCIgLz47XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxDb250ZW50IGJyZWFkQ3J1bWI9XCJFZGl0IFVzZXJcIj5cbiAgICAgICAgICAgICAgICA8VXNlckZvcm0gdXNlcj17dGhpcy5wcm9wcy51c2VyfSAvPlxuICAgICAgICAgICAgICAgIDxGb290ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4gdGhpcy5jYW5jZWwoKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gY29sb3I9XCJwcmltYXJ5XCI+U2F2ZTwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvRm9vdGVyPlxuICAgICAgICAgICAgPC9Db250ZW50PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlOiBSb290U3RhdGUsIHByb3BzOiBSb3V0ZXJQcm9wcykgPT4gKHtcbiAgICB1c2VyOiBnZXRDYWNoZWRVc2VyKHN0YXRlLCBwcm9wcykgfHwgdXNlclNlbGVjdG9yKHN0YXRlKS51c2VyLFxuICAgIGZldGNoaW5nOiB1c2VyU2VsZWN0b3Ioc3RhdGUpLmZldGNoaW5nLFxuICAgIGVycm9yOiB1c2VyU2VsZWN0b3Ioc3RhdGUpLmVycm9yXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcihjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcykoRWRpdFVzZXIpKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTZWN1cmVSb3V0ZSB9IGZyb20gJ0Bva3RhL29rdGEtcmVhY3QnO1xuXG5pbXBvcnQgVXNlckxpc3QgZnJvbSAnQC91aS9hcHAvZGlyZWN0b3J5L3VzZXIvVXNlckxpc3QnO1xuaW1wb3J0IE5ld1VzZXIgZnJvbSAnQC91aS9hcHAvZGlyZWN0b3J5L3VzZXIvTmV3VXNlcic7XG5pbXBvcnQgRWRpdFVzZXIgZnJvbSAnQC91aS9hcHAvZGlyZWN0b3J5L3VzZXIvRWRpdFVzZXInO1xuXG5jb25zdCBEaXJlY3RvcnlSb3V0ZXMgPSAoKSA9PiAoXG4gICAgPD5cbiAgICAgICAgPFNlY3VyZVJvdXRlIGV4YWN0IHBhdGg9XCIvZGlyZWN0b3J5XCIgY29tcG9uZW50PXtVc2VyTGlzdH0gLz5cbiAgICAgICAgPFNlY3VyZVJvdXRlIGV4YWN0IHBhdGg9XCIvZGlyZWN0b3J5L3VzZXJzXCIgY29tcG9uZW50PXtVc2VyTGlzdH0gLz5cbiAgICAgICAgPFNlY3VyZVJvdXRlIGV4YWN0IHBhdGg9XCIvZGlyZWN0b3J5L3VzZXJzL25ld1wiIGNvbXBvbmVudD17TmV3VXNlcn0gLz5cbiAgICAgICAgPFNlY3VyZVJvdXRlIGV4YWN0IHBhdGg9XCIvZGlyZWN0b3J5L3VzZXJzLzp1c2VySWRcIiBjb21wb25lbnQ9e0VkaXRVc2VyfSAvPlxuICAgIDwvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgRGlyZWN0b3J5Um91dGVzO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN3aXRjaCwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgU2VjdXJpdHksIEltcGxpY2l0Q2FsbGJhY2ssIFNlY3VyZVJvdXRlIH0gZnJvbSAnQG9rdGEvb2t0YS1yZWFjdCc7XG5pbXBvcnQgQ3NzQmFzZWxpbmUgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvQ3NzQmFzZWxpbmUnO1xuaW1wb3J0IHsgTXVpVGhlbWVQcm92aWRlciB9IGZyb20gJ0BtYXRlcmlhbC11aS9jb3JlL3N0eWxlcyc7XG5cbmltcG9ydCBjb25maWcgZnJvbSAnQC9jb25maWcvY29uZmlnJztcbmltcG9ydCBBdXRoZW50aWNhdGlvbiBmcm9tICcuL0F1dGhlbnRpY2F0aW9uJztcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnQC91aS9zdHlsZXMvdGhlbWUnO1xuaW1wb3J0IGJhc2UgZnJvbSAnQC91aS9zdHlsZXMvYmFzZS5jc3MnO1xuXG5pbXBvcnQgVXNlckxpc3QgZnJvbSAnQC91aS9hcHAvZGlyZWN0b3J5L3VzZXIvVXNlckxpc3QnO1xuXG4vL1JvdXRlc1xuaW1wb3J0IERpcmVjdG9yeVJvdXRlcyBmcm9tICcuL3JvdXRlcy9EaXJlY3RvcnlSb3V0ZXMnO1xuXG5jb25zdCBBcHAgPSAoKSA9PiAoXG4gICAgPFNlY3VyaXR5XG4gICAgICAgIGlzc3Vlcj17Y29uZmlnLm9pZGMuaXNzdWVyfVxuICAgICAgICBjbGllbnRfaWQ9e2NvbmZpZy5vaWRjLmNsaWVudElkfVxuICAgICAgICByZWRpcmVjdF91cmk9e2NvbmZpZy5vaWRjLnJlZGlyZWN0VXJpfVxuICAgID5cbiAgICAgICAgPENzc0Jhc2VsaW5lIC8+XG5cbiAgICAgICAgPE11aVRoZW1lUHJvdmlkZXIgdGhlbWU9e3RoZW1lfT5cbiAgICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvaW1wbGljaXQvY2FsbGJhY2tcIiBjb21wb25lbnQ9e0ltcGxpY2l0Q2FsbGJhY2t9IC8+XG5cbiAgICAgICAgICAgICAgICA8QXV0aGVudGljYXRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxTZWN1cmVSb3V0ZSBleGFjdCBwYXRoPVwiL1wiIGNvbXBvbmVudD17VXNlckxpc3R9IC8+XG5cbiAgICAgICAgICAgICAgICAgICAgPERpcmVjdG9yeVJvdXRlcyAvPlxuICAgICAgICAgICAgICAgIDwvQXV0aGVudGljYXRpb24+XG4gICAgICAgICAgICA8L1N3aXRjaD5cbiAgICAgICAgPC9NdWlUaGVtZVByb3ZpZGVyPlxuICAgIDwvU2VjdXJpdHk+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBSU0FBIH0gZnJvbSAncmVkdXgtYXBpLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgdXNlcnNBcGkgfSBmcm9tICdAL2NvbmZpZy9hcGkvZGlyZWN0b3J5JztcbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJy4uL3R5cGVzJztcblxudHlwZSBVc2VyTGlzdFJlY2VpdmVBY3Rpb24gPSB7IHR5cGU6ICdVU0VSU19MSVNUX1JFQ0VJVkUnLCBwYXlsb2FkOiBVc2VyW10gfTtcbnR5cGUgVXNlckxpc3RGZXRjaGluZ0FjdGlvbiA9IHsgdHlwZTogJ1VTRVJTX0xJU1RfRkVUQ0hJTkcnIH07XG50eXBlIFVzZXJMaXN0RmV0Y2hpbmdFcnJvckFjdGlvbiA9IHsgdHlwZTogJ1VTRVJTX0xJU1RfRkVUQ0hJTkdfRVJST1InIH07XG5cbmV4cG9ydCB0eXBlIEFjdGlvbiA9XG4gICAgfCBVc2VyTGlzdFJlY2VpdmVBY3Rpb25cbiAgICB8IFVzZXJMaXN0RmV0Y2hpbmdBY3Rpb25cbiAgICB8IFVzZXJMaXN0RmV0Y2hpbmdFcnJvckFjdGlvbjtcblxuZXhwb3J0IGNvbnN0IGZldGNoVXNlcnMgPSAoKSA9PiAoe1xuICAgIFtSU0FBXToge1xuICAgICAgICBlbmRwb2ludDogdXNlcnNBcGksXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIHR5cGVzOiBbXG4gICAgICAgICAgICAnVVNFUlNfTElTVF9GRVRDSElORycsXG4gICAgICAgICAgICAnVVNFUlNfTElTVF9SRUNFSVZFJyxcbiAgICAgICAgICAgICdVU0VSU19MSVNUX0ZFVENISU5HX0VSUk9SJ1xuICAgICAgICBdXG4gICAgfVxufSk7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBSU0FBIH0gZnJvbSAncmVkdXgtYXBpLW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgdXNlcnNBcGkgfSBmcm9tICdAL2NvbmZpZy9hcGkvZGlyZWN0b3J5JztcbmltcG9ydCB0eXBlIHsgVXNlciB9IGZyb20gJy4uL3R5cGVzJztcblxudHlwZSBVc2VyUmVjZWl2ZUFjdGlvbiA9IHsgdHlwZTogJ1VTRVJTX1VTRVJfUkVDRUlWRScsIHBheWxvYWQ6IFVzZXIgfTtcbnR5cGUgVXNlckZldGNoaW5nQWN0aW9uID0geyB0eXBlOiAnVVNFUlNfVVNFUl9GRVRDSElORycgfTtcbnR5cGUgVXNlckZldGNoaW5nRXJyb3JBY3Rpb24gPSB7IHR5cGU6ICdVU0VSU19VU0VSX0ZFVENISU5HX0VSUk9SJyB9O1xuXG5leHBvcnQgdHlwZSBBY3Rpb24gPVxuICAgIHwgVXNlclJlY2VpdmVBY3Rpb25cbiAgICB8IFVzZXJGZXRjaGluZ0FjdGlvblxuICAgIHwgVXNlckZldGNoaW5nRXJyb3JBY3Rpb247XG5cbmV4cG9ydCBjb25zdCBmZXRjaFVzZXIgPSAodXNlcklkOiBzdHJpbmcpID0+ICh7XG4gICAgW1JTQUFdOiB7XG4gICAgICAgIGVuZHBvaW50OiBgJHt1c2Vyc0FwaX0vJHt1c2VySWR9YCxcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgdHlwZXM6IFtcbiAgICAgICAgICAgICdVU0VSU19VU0VSX0ZFVENISU5HJyxcbiAgICAgICAgICAgICdVU0VSU19VU0VSX1JFQ0VJVkUnLFxuICAgICAgICAgICAgJ1VTRVJTX1VTRVJfRkVUQ0hJTkdfRVJST1InXG4gICAgICAgIF1cbiAgICB9XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3QuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdFwiKSk7IiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgcm91dGVyTWlkZGxld2FyZSB9IGZyb20gJ2Nvbm5lY3RlZC1yZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgYXBpTWlkZGxld2FyZSB9IGZyb20gJ3JlZHV4LWFwaS1taWRkbGV3YXJlJztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5IH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnO1xuaW1wb3J0IGNyZWF0ZVJvb3RSZWR1Y2VyIGZyb20gJy4vcm9vdFJlZHVjZXInO1xuaW1wb3J0IGh0dHBBdXRoSW5qZWN0b3IgZnJvbSAnLi9taWRkbGV3YXJlL2h0dHBBdXRoSW5qZWN0b3InO1xuXG5leHBvcnQgY29uc3QgaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHsgYmFzZW5hbWU6ICcvJyB9KTtcblxuY29uc3QgbWlkZGxld2FyZSA9IFtcbiAgICB0aHVuayxcbiAgICBodHRwQXV0aEluamVjdG9yLFxuICAgIGFwaU1pZGRsZXdhcmUsXG4gICAgcm91dGVyTWlkZGxld2FyZShoaXN0b3J5KVxuXTtcblxuLy8gZW5hYmxlcyBSZWR1eCBkZXZ0b29scyBleHRlbnNpb24gaWYgcHJlc2VudFxuY29uc3QgZW5oYW5jZXJzID0gW107XG5pZiAod2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18pIHtcbiAgICBlbmhhbmNlcnMucHVzaCh3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXygpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZ3VyZVN0b3JlID0gKCkgPT4ge1xuICAgIGNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXG4gICAgICAgIGNyZWF0ZVJvb3RSZWR1Y2VyKGhpc3RvcnkpLFxuICAgICAgICB1bmRlZmluZWQsIC8vIHByZWxvYWRlZCBzdGF0ZVxuICAgICAgICBjb21wb3NlKFxuICAgICAgICAgICAgYXBwbHlNaWRkbGV3YXJlKC4uLm1pZGRsZXdhcmUpLFxuICAgICAgICAgICAgLi4uZW5oYW5jZXJzXG4gICAgICAgIClcbiAgICApO1xuXG4gICAgLy8gRW5hYmxlIFdlYnBhY2sgaG90IG1vZHVsZSByZXBsYWNlbWVudCBmb3IgcmVkdWNlcnNcbiAgICBpZiAobW9kdWxlLmhvdCkge1xuICAgICAgICBtb2R1bGUuaG90LmFjY2VwdCgnLi9yb290UmVkdWNlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRDcmVhdGVSb290UmVkdWNlciA9IHJlcXVpcmUoJy4vcm9vdFJlZHVjZXInKS5kZWZhdWx0O1xuICAgICAgICAgICAgc3RvcmUucmVwbGFjZVJlZHVjZXIobmV4dENyZWF0ZVJvb3RSZWR1Y2VyKGhpc3RvcnkpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0b3JlO1xufTtcbiIsIiFmdW5jdGlvbihlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKG51bGwpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZShudWxsKSk6d2luZG93LnN0eWxpcz1lKG51bGwpfShmdW5jdGlvbiBlKGEpe1widXNlIHN0cmljdFwiO3ZhciByPS9eXFwwKy9nLGM9L1tcXDBcXHJcXGZdL2cscz0vOiAqL2csdD0vem9vfGdyYS8saT0vKFssOiBdKSh0cmFuc2Zvcm0pL2csZj0vLCtcXHMqKD8hW14oXSpbKV0pL2csbj0vICtcXHMqKD8hW14oXSpbKV0pL2csbD0vICpbXFwwXSAqL2csbz0vLFxccis/L2csaD0vKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyx1PS86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nLGQ9L1xcVysvZyxiPS9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxwPS86OihwbGFjZSkvZyxrPS86KHJlYWQtb25seSkvZyxnPS9cXHMrKD89W3tcXF07PTo+XSkvZyxBPS8oW1t9PTo+XSlcXHMrL2csQz0vKFxce1tee10rPyk7KD89XFx9KS9nLHc9L1xcc3syLH0vZyx2PS8oW15cXChdKSg6KykgKi9nLG09L1tzdmhdXFx3Ky1bdGJscl17Mn0vLHg9L1xcKFxccyooLiopXFxzKlxcKS9nLCQ9LyhbXFxzXFxTXSo/KTsvZyx5PS8tc2VsZnxmbGV4LS9nLE89L1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLGo9L3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyx6PS8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sTj1cIi13ZWJraXQtXCIsUz1cIi1tb3otXCIsRj1cIi1tcy1cIixXPTU5LHE9MTI1LEI9MTIzLEQ9NDAsRT00MSxHPTkxLEg9OTMsST0xMCxKPTEzLEs9OSxMPTY0LE09MzIsUD0zOCxRPTQ1LFI9OTUsVD00MixVPTQ0LFY9NTgsWD0zOSxZPTM0LFo9NDcsXz02MixlZT00MyxhZT0xMjYscmU9MCxjZT0xMixzZT0xMSx0ZT0xMDcsaWU9MTA5LGZlPTExNSxuZT0xMTIsbGU9MTExLG9lPTEwNSxoZT05OSx1ZT0xMDAsZGU9MTEyLGJlPTEscGU9MSxrZT0wLGdlPTEsQWU9MSxDZT0xLHdlPTAsdmU9MCxtZT0wLHhlPVtdLCRlPVtdLHllPTAsT2U9bnVsbCxqZT0tMix6ZT0tMSxOZT0wLFNlPTEsRmU9MixXZT0zLHFlPTAsQmU9MSxEZT1cIlwiLEVlPVwiXCIsR2U9XCJcIjtmdW5jdGlvbiBIZShlLGEscyx0LGkpe2Zvcih2YXIgZixuLG89MCxoPTAsdT0wLGQ9MCxnPTAsQT0wLEM9MCx3PTAsbT0wLCQ9MCx5PTAsTz0wLGo9MCx6PTAsUj0wLHdlPTAsJGU9MCxPZT0wLGplPTAsemU9cy5sZW5ndGgsSmU9emUtMSxSZT1cIlwiLFRlPVwiXCIsVWU9XCJcIixWZT1cIlwiLFhlPVwiXCIsWWU9XCJcIjtSPHplOyl7aWYoQz1zLmNoYXJDb2RlQXQoUiksUj09PUplKWlmKGgrZCt1K28hPT0wKXtpZigwIT09aClDPWg9PT1aP0k6WjtkPXU9bz0wLHplKyssSmUrK31pZihoK2QrdStvPT09MCl7aWYoUj09PUplKXtpZih3ZT4wKVRlPVRlLnJlcGxhY2UoYyxcIlwiKTtpZihUZS50cmltKCkubGVuZ3RoPjApe3N3aXRjaChDKXtjYXNlIE06Y2FzZSBLOmNhc2UgVzpjYXNlIEo6Y2FzZSBJOmJyZWFrO2RlZmF1bHQ6VGUrPXMuY2hhckF0KFIpfUM9V319aWYoMT09PSRlKXN3aXRjaChDKXtjYXNlIEI6Y2FzZSBxOmNhc2UgVzpjYXNlIFk6Y2FzZSBYOmNhc2UgRDpjYXNlIEU6Y2FzZSBVOiRlPTA7Y2FzZSBLOmNhc2UgSjpjYXNlIEk6Y2FzZSBNOmJyZWFrO2RlZmF1bHQ6Zm9yKCRlPTAsamU9UixnPUMsUi0tLEM9VztqZTx6ZTspc3dpdGNoKHMuY2hhckNvZGVBdChqZSsrKSl7Y2FzZSBJOmNhc2UgSjpjYXNlIFc6KytSLEM9ZyxqZT16ZTticmVhaztjYXNlIFY6aWYod2U+MCkrK1IsQz1nO2Nhc2UgQjpqZT16ZX19c3dpdGNoKEMpe2Nhc2UgQjpmb3IoZz0oVGU9VGUudHJpbSgpKS5jaGFyQ29kZUF0KDApLHk9MSxqZT0rK1I7Ujx6ZTspe3N3aXRjaChDPXMuY2hhckNvZGVBdChSKSl7Y2FzZSBCOnkrKzticmVhaztjYXNlIHE6eS0tO2JyZWFrO2Nhc2UgWjpzd2l0Y2goQT1zLmNoYXJDb2RlQXQoUisxKSl7Y2FzZSBUOmNhc2UgWjpSPVFlKEEsUixKZSxzKX1icmVhaztjYXNlIEc6QysrO2Nhc2UgRDpDKys7Y2FzZSBZOmNhc2UgWDpmb3IoO1IrKzxKZSYmcy5jaGFyQ29kZUF0KFIpIT09QzspO31pZigwPT09eSlicmVhaztSKyt9aWYoVWU9cy5zdWJzdHJpbmcoamUsUiksZz09PXJlKWc9KFRlPVRlLnJlcGxhY2UocixcIlwiKS50cmltKCkpLmNoYXJDb2RlQXQoMCk7c3dpdGNoKGcpe2Nhc2UgTDppZih3ZT4wKVRlPVRlLnJlcGxhY2UoYyxcIlwiKTtzd2l0Y2goQT1UZS5jaGFyQ29kZUF0KDEpKXtjYXNlIHVlOmNhc2UgaWU6Y2FzZSBmZTpjYXNlIFE6Zj1hO2JyZWFrO2RlZmF1bHQ6Zj14ZX1pZihqZT0oVWU9SGUoYSxmLFVlLEEsaSsxKSkubGVuZ3RoLG1lPjAmJjA9PT1qZSlqZT1UZS5sZW5ndGg7aWYoeWU+MClpZihmPUllKHhlLFRlLE9lKSxuPVBlKFdlLFVlLGYsYSxwZSxiZSxqZSxBLGksdCksVGU9Zi5qb2luKFwiXCIpLHZvaWQgMCE9PW4paWYoMD09PShqZT0oVWU9bi50cmltKCkpLmxlbmd0aCkpQT0wLFVlPVwiXCI7aWYoamU+MClzd2l0Y2goQSl7Y2FzZSBmZTpUZT1UZS5yZXBsYWNlKHgsTWUpO2Nhc2UgdWU6Y2FzZSBpZTpjYXNlIFE6VWU9VGUrXCJ7XCIrVWUrXCJ9XCI7YnJlYWs7Y2FzZSB0ZTppZihVZT0oVGU9VGUucmVwbGFjZShiLFwiJDEgJDJcIisoQmU+MD9EZTpcIlwiKSkpK1wie1wiK1VlK1wifVwiLDE9PT1BZXx8Mj09PUFlJiZMZShcIkBcIitVZSwzKSlVZT1cIkBcIitOK1VlK1wiQFwiK1VlO2Vsc2UgVWU9XCJAXCIrVWU7YnJlYWs7ZGVmYXVsdDppZihVZT1UZStVZSx0PT09ZGUpVmUrPVVlLFVlPVwiXCJ9ZWxzZSBVZT1cIlwiO2JyZWFrO2RlZmF1bHQ6VWU9SGUoYSxJZShhLFRlLE9lKSxVZSx0LGkrMSl9WGUrPVVlLE89MCwkZT0wLHo9MCx3ZT0wLE9lPTAsaj0wLFRlPVwiXCIsVWU9XCJcIixDPXMuY2hhckNvZGVBdCgrK1IpO2JyZWFrO2Nhc2UgcTpjYXNlIFc6aWYoKGplPShUZT0od2U+MD9UZS5yZXBsYWNlKGMsXCJcIik6VGUpLnRyaW0oKSkubGVuZ3RoKT4xKXtpZigwPT09eilpZigoZz1UZS5jaGFyQ29kZUF0KDApKT09PVF8fGc+OTYmJmc8MTIzKWplPShUZT1UZS5yZXBsYWNlKFwiIFwiLFwiOlwiKSkubGVuZ3RoO2lmKHllPjApaWYodm9pZCAwIT09KG49UGUoU2UsVGUsYSxlLHBlLGJlLFZlLmxlbmd0aCx0LGksdCkpKWlmKDA9PT0oamU9KFRlPW4udHJpbSgpKS5sZW5ndGgpKVRlPVwiXFwwXFwwXCI7c3dpdGNoKGc9VGUuY2hhckNvZGVBdCgwKSxBPVRlLmNoYXJDb2RlQXQoMSksZyl7Y2FzZSByZTpicmVhaztjYXNlIEw6aWYoQT09PW9lfHxBPT09aGUpe1llKz1UZStzLmNoYXJBdChSKTticmVha31kZWZhdWx0OmlmKFRlLmNoYXJDb2RlQXQoamUtMSk9PT1WKWJyZWFrO1ZlKz1LZShUZSxnLEEsVGUuY2hhckNvZGVBdCgyKSl9fU89MCwkZT0wLHo9MCx3ZT0wLE9lPTAsVGU9XCJcIixDPXMuY2hhckNvZGVBdCgrK1IpfX1zd2l0Y2goQyl7Y2FzZSBKOmNhc2UgSTppZihoK2QrdStvK3ZlPT09MClzd2l0Y2goJCl7Y2FzZSBFOmNhc2UgWDpjYXNlIFk6Y2FzZSBMOmNhc2UgYWU6Y2FzZSBfOmNhc2UgVDpjYXNlIGVlOmNhc2UgWjpjYXNlIFE6Y2FzZSBWOmNhc2UgVTpjYXNlIFc6Y2FzZSBCOmNhc2UgcTpicmVhaztkZWZhdWx0OmlmKHo+MCkkZT0xfWlmKGg9PT1aKWg9MDtlbHNlIGlmKGdlK089PT0wJiZ0IT09dGUmJlRlLmxlbmd0aD4wKXdlPTEsVGUrPVwiXFwwXCI7aWYoeWUqcWU+MClQZShOZSxUZSxhLGUscGUsYmUsVmUubGVuZ3RoLHQsaSx0KTtiZT0xLHBlKys7YnJlYWs7Y2FzZSBXOmNhc2UgcTppZihoK2QrdStvPT09MCl7YmUrKzticmVha31kZWZhdWx0OnN3aXRjaChiZSsrLFJlPXMuY2hhckF0KFIpLEMpe2Nhc2UgSzpjYXNlIE06aWYoZCtvK2g9PT0wKXN3aXRjaCh3KXtjYXNlIFU6Y2FzZSBWOmNhc2UgSzpjYXNlIE06UmU9XCJcIjticmVhaztkZWZhdWx0OmlmKEMhPT1NKVJlPVwiIFwifWJyZWFrO2Nhc2UgcmU6UmU9XCJcXFxcMFwiO2JyZWFrO2Nhc2UgY2U6UmU9XCJcXFxcZlwiO2JyZWFrO2Nhc2Ugc2U6UmU9XCJcXFxcdlwiO2JyZWFrO2Nhc2UgUDppZihkK2grbz09PTAmJmdlPjApT2U9MSx3ZT0xLFJlPVwiXFxmXCIrUmU7YnJlYWs7Y2FzZSAxMDg6aWYoZCtoK28ra2U9PT0wJiZ6PjApc3dpdGNoKFIteil7Y2FzZSAyOmlmKHc9PT1uZSYmcy5jaGFyQ29kZUF0KFItMyk9PT1WKWtlPXc7Y2FzZSA4OmlmKG09PT1sZSlrZT1tfWJyZWFrO2Nhc2UgVjppZihkK2grbz09PTApej1SO2JyZWFrO2Nhc2UgVTppZihoK3UrZCtvPT09MCl3ZT0xLFJlKz1cIlxcclwiO2JyZWFrO2Nhc2UgWTpjYXNlIFg6aWYoMD09PWgpZD1kPT09Qz8wOjA9PT1kP0M6ZDticmVhaztjYXNlIEc6aWYoZCtoK3U9PT0wKW8rKzticmVhaztjYXNlIEg6aWYoZCtoK3U9PT0wKW8tLTticmVhaztjYXNlIEU6aWYoZCtoK289PT0wKXUtLTticmVhaztjYXNlIEQ6aWYoZCtoK289PT0wKXtpZigwPT09Tylzd2l0Y2goMip3KzMqbSl7Y2FzZSA1MzM6YnJlYWs7ZGVmYXVsdDp5PTAsTz0xfXUrK31icmVhaztjYXNlIEw6aWYoaCt1K2Qrbyt6K2o9PT0wKWo9MTticmVhaztjYXNlIFQ6Y2FzZSBaOmlmKGQrbyt1PjApYnJlYWs7c3dpdGNoKGgpe2Nhc2UgMDpzd2l0Y2goMipDKzMqcy5jaGFyQ29kZUF0KFIrMSkpe2Nhc2UgMjM1Omg9WjticmVhaztjYXNlIDIyMDpqZT1SLGg9VH1icmVhaztjYXNlIFQ6aWYoQz09PVomJnc9PT1UJiZqZSsyIT09Uil7aWYoMzM9PT1zLmNoYXJDb2RlQXQoamUrMikpVmUrPXMuc3Vic3RyaW5nKGplLFIrMSk7UmU9XCJcIixoPTB9fX1pZigwPT09aCl7aWYoZ2UrZCtvK2o9PT0wJiZ0IT09dGUmJkMhPT1XKXN3aXRjaChDKXtjYXNlIFU6Y2FzZSBhZTpjYXNlIF86Y2FzZSBlZTpjYXNlIEU6Y2FzZSBEOmlmKDA9PT1PKXtzd2l0Y2godyl7Y2FzZSBLOmNhc2UgTTpjYXNlIEk6Y2FzZSBKOlJlKz1cIlxcMFwiO2JyZWFrO2RlZmF1bHQ6UmU9XCJcXDBcIitSZSsoQz09PVU/XCJcIjpcIlxcMFwiKX13ZT0xfWVsc2Ugc3dpdGNoKEMpe2Nhc2UgRDppZih6Kzc9PT1SJiYxMDg9PT13KXo9MDtPPSsreTticmVhaztjYXNlIEU6aWYoMD09KE89LS15KSl3ZT0xLFJlKz1cIlxcMFwifWJyZWFrO2Nhc2UgSzpjYXNlIE06c3dpdGNoKHcpe2Nhc2UgcmU6Y2FzZSBCOmNhc2UgcTpjYXNlIFc6Y2FzZSBVOmNhc2UgY2U6Y2FzZSBLOmNhc2UgTTpjYXNlIEk6Y2FzZSBKOmJyZWFrO2RlZmF1bHQ6aWYoMD09PU8pd2U9MSxSZSs9XCJcXDBcIn19aWYoVGUrPVJlLEMhPT1NJiZDIT09SykkPUN9fW09dyx3PUMsUisrfWlmKGplPVZlLmxlbmd0aCxtZT4wKWlmKDA9PT1qZSYmMD09PVhlLmxlbmd0aCYmMD09PWFbMF0ubGVuZ3RoPT1mYWxzZSlpZih0IT09aWV8fDE9PT1hLmxlbmd0aCYmKGdlPjA/RWU6R2UpPT09YVswXSlqZT1hLmpvaW4oXCIsXCIpLmxlbmd0aCsyO2lmKGplPjApe2lmKGY9MD09PWdlJiZ0IT09dGU/ZnVuY3Rpb24oZSl7Zm9yKHZhciBhLHIscz0wLHQ9ZS5sZW5ndGgsaT1BcnJheSh0KTtzPHQ7KytzKXtmb3IodmFyIGY9ZVtzXS5zcGxpdChsKSxuPVwiXCIsbz0wLGg9MCx1PTAsZD0wLGI9Zi5sZW5ndGg7bzxiOysrbyl7aWYoMD09PShoPShyPWZbb10pLmxlbmd0aCkmJmI+MSljb250aW51ZTtpZih1PW4uY2hhckNvZGVBdChuLmxlbmd0aC0xKSxkPXIuY2hhckNvZGVBdCgwKSxhPVwiXCIsMCE9PW8pc3dpdGNoKHUpe2Nhc2UgVDpjYXNlIGFlOmNhc2UgXzpjYXNlIGVlOmNhc2UgTTpjYXNlIEQ6YnJlYWs7ZGVmYXVsdDphPVwiIFwifXN3aXRjaChkKXtjYXNlIFA6cj1hK0VlO2Nhc2UgYWU6Y2FzZSBfOmNhc2UgZWU6Y2FzZSBNOmNhc2UgRTpjYXNlIEQ6YnJlYWs7Y2FzZSBHOnI9YStyK0VlO2JyZWFrO2Nhc2UgVjpzd2l0Y2goMipyLmNoYXJDb2RlQXQoMSkrMypyLmNoYXJDb2RlQXQoMikpe2Nhc2UgNTMwOmlmKENlPjApe3I9YStyLnN1YnN0cmluZyg4LGgtMSk7YnJlYWt9ZGVmYXVsdDppZihvPDF8fGZbby0xXS5sZW5ndGg8MSlyPWErRWUrcn1icmVhaztjYXNlIFU6YT1cIlwiO2RlZmF1bHQ6aWYoaD4xJiZyLmluZGV4T2YoXCI6XCIpPjApcj1hK3IucmVwbGFjZSh2LFwiJDFcIitFZStcIiQyXCIpO2Vsc2Ugcj1hK3IrRWV9bis9cn1pW3NdPW4ucmVwbGFjZShjLFwiXCIpLnRyaW0oKX1yZXR1cm4gaX0oYSk6YSx5ZT4wKWlmKHZvaWQgMCE9PShuPVBlKEZlLFZlLGYsZSxwZSxiZSxqZSx0LGksdCkpJiYwPT09KFZlPW4pLmxlbmd0aClyZXR1cm4gWWUrVmUrWGU7aWYoVmU9Zi5qb2luKFwiLFwiKStcIntcIitWZStcIn1cIixBZSprZSE9MCl7aWYoMj09PUFlJiYhTGUoVmUsMikpa2U9MDtzd2l0Y2goa2Upe2Nhc2UgbGU6VmU9VmUucmVwbGFjZShrLFwiOlwiK1MrXCIkMVwiKStWZTticmVhaztjYXNlIG5lOlZlPVZlLnJlcGxhY2UocCxcIjo6XCIrTitcImlucHV0LSQxXCIpK1ZlLnJlcGxhY2UocCxcIjo6XCIrUytcIiQxXCIpK1ZlLnJlcGxhY2UocCxcIjpcIitGK1wiaW5wdXQtJDFcIikrVmV9a2U9MH19cmV0dXJuIFllK1ZlK1hlfWZ1bmN0aW9uIEllKGUsYSxyKXt2YXIgYz1hLnRyaW0oKS5zcGxpdChvKSxzPWMsdD1jLmxlbmd0aCxpPWUubGVuZ3RoO3N3aXRjaChpKXtjYXNlIDA6Y2FzZSAxOmZvcih2YXIgZj0wLG49MD09PWk/XCJcIjplWzBdK1wiIFwiO2Y8dDsrK2Ypc1tmXT1KZShuLHNbZl0scixpKS50cmltKCk7YnJlYWs7ZGVmYXVsdDpmPTA7dmFyIGw9MDtmb3Iocz1bXTtmPHQ7KytmKWZvcih2YXIgaD0wO2g8aTsrK2gpc1tsKytdPUplKGVbaF0rXCIgXCIsY1tmXSxyLGkpLnRyaW0oKX1yZXR1cm4gc31mdW5jdGlvbiBKZShlLGEscixjKXt2YXIgcz1hLHQ9cy5jaGFyQ29kZUF0KDApO2lmKHQ8MzMpdD0ocz1zLnRyaW0oKSkuY2hhckNvZGVBdCgwKTtzd2l0Y2godCl7Y2FzZSBQOnN3aXRjaChnZStjKXtjYXNlIDA6Y2FzZSAxOmlmKDA9PT1lLnRyaW0oKS5sZW5ndGgpYnJlYWs7ZGVmYXVsdDpyZXR1cm4gcy5yZXBsYWNlKGgsXCIkMVwiK2UudHJpbSgpKX1icmVhaztjYXNlIFY6c3dpdGNoKHMuY2hhckNvZGVBdCgxKSl7Y2FzZSAxMDM6aWYoQ2U+MCYmZ2U+MClyZXR1cm4gcy5yZXBsYWNlKHUsXCIkMVwiKS5yZXBsYWNlKGgsXCIkMVwiK0dlKTticmVhaztkZWZhdWx0OnJldHVybiBlLnRyaW0oKStzLnJlcGxhY2UoaCxcIiQxXCIrZS50cmltKCkpfWRlZmF1bHQ6aWYocipnZT4wJiZzLmluZGV4T2YoXCJcXGZcIik+MClyZXR1cm4gcy5yZXBsYWNlKGgsKGUuY2hhckNvZGVBdCgwKT09PVY/XCJcIjpcIiQxXCIpK2UudHJpbSgpKX1yZXR1cm4gZStzfWZ1bmN0aW9uIEtlKGUsYSxyLGMpe3ZhciBsLG89MCxoPWUrXCI7XCIsdT0yKmErMypyKzQqYztpZig5NDQ9PT11KXJldHVybiBmdW5jdGlvbihlKXt2YXIgYT1lLmxlbmd0aCxyPWUuaW5kZXhPZihcIjpcIiw5KSsxLGM9ZS5zdWJzdHJpbmcoMCxyKS50cmltKCkscz1lLnN1YnN0cmluZyhyLGEtMSkudHJpbSgpO3N3aXRjaChlLmNoYXJDb2RlQXQoOSkqQmUpe2Nhc2UgMDpicmVhaztjYXNlIFE6aWYoMTEwIT09ZS5jaGFyQ29kZUF0KDEwKSlicmVhaztkZWZhdWx0OmZvcih2YXIgdD1zLnNwbGl0KChzPVwiXCIsZikpLGk9MCxyPTAsYT10Lmxlbmd0aDtpPGE7cj0wLCsraSl7Zm9yKHZhciBsPXRbaV0sbz1sLnNwbGl0KG4pO2w9b1tyXTspe3ZhciBoPWwuY2hhckNvZGVBdCgwKTtpZigxPT09QmUmJihoPkwmJmg8OTB8fGg+OTYmJmg8MTIzfHxoPT09Unx8aD09PVEmJmwuY2hhckNvZGVBdCgxKSE9PVEpKXN3aXRjaChpc05hTihwYXJzZUZsb2F0KGwpKSsoLTEhPT1sLmluZGV4T2YoXCIoXCIpKSl7Y2FzZSAxOnN3aXRjaChsKXtjYXNlXCJpbmZpbml0ZVwiOmNhc2VcImFsdGVybmF0ZVwiOmNhc2VcImJhY2t3YXJkc1wiOmNhc2VcInJ1bm5pbmdcIjpjYXNlXCJub3JtYWxcIjpjYXNlXCJmb3J3YXJkc1wiOmNhc2VcImJvdGhcIjpjYXNlXCJub25lXCI6Y2FzZVwibGluZWFyXCI6Y2FzZVwiZWFzZVwiOmNhc2VcImVhc2UtaW5cIjpjYXNlXCJlYXNlLW91dFwiOmNhc2VcImVhc2UtaW4tb3V0XCI6Y2FzZVwicGF1c2VkXCI6Y2FzZVwicmV2ZXJzZVwiOmNhc2VcImFsdGVybmF0ZS1yZXZlcnNlXCI6Y2FzZVwiaW5oZXJpdFwiOmNhc2VcImluaXRpYWxcIjpjYXNlXCJ1bnNldFwiOmNhc2VcInN0ZXAtc3RhcnRcIjpjYXNlXCJzdGVwLWVuZFwiOmJyZWFrO2RlZmF1bHQ6bCs9RGV9fW9bcisrXT1sfXMrPSgwPT09aT9cIlwiOlwiLFwiKStvLmpvaW4oXCIgXCIpfX1pZihzPWMrcytcIjtcIiwxPT09QWV8fDI9PT1BZSYmTGUocywxKSlyZXR1cm4gTitzK3M7cmV0dXJuIHN9KGgpO2Vsc2UgaWYoMD09PUFlfHwyPT09QWUmJiFMZShoLDEpKXJldHVybiBoO3N3aXRjaCh1KXtjYXNlIDEwMTU6cmV0dXJuIDk3PT09aC5jaGFyQ29kZUF0KDEwKT9OK2graDpoO2Nhc2UgOTUxOnJldHVybiAxMTY9PT1oLmNoYXJDb2RlQXQoMyk/TitoK2g6aDtjYXNlIDk2MzpyZXR1cm4gMTEwPT09aC5jaGFyQ29kZUF0KDUpP04raCtoOmg7Y2FzZSAxMDA5OmlmKDEwMCE9PWguY2hhckNvZGVBdCg0KSlicmVhaztjYXNlIDk2OTpjYXNlIDk0MjpyZXR1cm4gTitoK2g7Y2FzZSA5Nzg6cmV0dXJuIE4raCtTK2graDtjYXNlIDEwMTk6Y2FzZSA5ODM6cmV0dXJuIE4raCtTK2grRitoK2g7Y2FzZSA4ODM6aWYoaC5jaGFyQ29kZUF0KDgpPT09USlyZXR1cm4gTitoK2g7aWYoaC5pbmRleE9mKFwiaW1hZ2Utc2V0KFwiLDExKT4wKXJldHVybiBoLnJlcGxhY2UoeixcIiQxXCIrTitcIiQyXCIpK2g7cmV0dXJuIGg7Y2FzZSA5MzI6aWYoaC5jaGFyQ29kZUF0KDQpPT09USlzd2l0Y2goaC5jaGFyQ29kZUF0KDUpKXtjYXNlIDEwMzpyZXR1cm4gTitcImJveC1cIitoLnJlcGxhY2UoXCItZ3Jvd1wiLFwiXCIpK04raCtGK2gucmVwbGFjZShcImdyb3dcIixcInBvc2l0aXZlXCIpK2g7Y2FzZSAxMTU6cmV0dXJuIE4raCtGK2gucmVwbGFjZShcInNocmlua1wiLFwibmVnYXRpdmVcIikraDtjYXNlIDk4OnJldHVybiBOK2grRitoLnJlcGxhY2UoXCJiYXNpc1wiLFwicHJlZmVycmVkLXNpemVcIikraH1yZXR1cm4gTitoK0YraCtoO2Nhc2UgOTY0OnJldHVybiBOK2grRitcImZsZXgtXCIraCtoO2Nhc2UgMTAyMzppZig5OSE9PWguY2hhckNvZGVBdCg4KSlicmVhaztyZXR1cm4gbD1oLnN1YnN0cmluZyhoLmluZGV4T2YoXCI6XCIsMTUpKS5yZXBsYWNlKFwiZmxleC1cIixcIlwiKS5yZXBsYWNlKFwic3BhY2UtYmV0d2VlblwiLFwianVzdGlmeVwiKSxOK1wiYm94LXBhY2tcIitsK04raCtGK1wiZmxleC1wYWNrXCIrbCtoO2Nhc2UgMTAwNTpyZXR1cm4gdC50ZXN0KGgpP2gucmVwbGFjZShzLFwiOlwiK04pK2gucmVwbGFjZShzLFwiOlwiK1MpK2g6aDtjYXNlIDFlMzpzd2l0Y2gobz0obD1oLnN1YnN0cmluZygxMykudHJpbSgpKS5pbmRleE9mKFwiLVwiKSsxLGwuY2hhckNvZGVBdCgwKStsLmNoYXJDb2RlQXQobykpe2Nhc2UgMjI2Omw9aC5yZXBsYWNlKG0sXCJ0YlwiKTticmVhaztjYXNlIDIzMjpsPWgucmVwbGFjZShtLFwidGItcmxcIik7YnJlYWs7Y2FzZSAyMjA6bD1oLnJlcGxhY2UobSxcImxyXCIpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIGh9cmV0dXJuIE4raCtGK2wraDtjYXNlIDEwMTc6aWYoLTE9PT1oLmluZGV4T2YoXCJzdGlja3lcIiw5KSlyZXR1cm4gaDtjYXNlIDk3NTpzd2l0Y2gobz0oaD1lKS5sZW5ndGgtMTAsdT0obD0oMzM9PT1oLmNoYXJDb2RlQXQobyk/aC5zdWJzdHJpbmcoMCxvKTpoKS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiOlwiLDcpKzEpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSsoMHxsLmNoYXJDb2RlQXQoNykpKXtjYXNlIDIwMzppZihsLmNoYXJDb2RlQXQoOCk8MTExKWJyZWFrO2Nhc2UgMTE1Omg9aC5yZXBsYWNlKGwsTitsKStcIjtcIitoO2JyZWFrO2Nhc2UgMjA3OmNhc2UgMTAyOmg9aC5yZXBsYWNlKGwsTisodT4xMDI/XCJpbmxpbmUtXCI6XCJcIikrXCJib3hcIikrXCI7XCIraC5yZXBsYWNlKGwsTitsKStcIjtcIitoLnJlcGxhY2UobCxGK2wrXCJib3hcIikrXCI7XCIraH1yZXR1cm4gaCtcIjtcIjtjYXNlIDkzODppZihoLmNoYXJDb2RlQXQoNSk9PT1RKXN3aXRjaChoLmNoYXJDb2RlQXQoNikpe2Nhc2UgMTA1OnJldHVybiBsPWgucmVwbGFjZShcIi1pdGVtc1wiLFwiXCIpLE4raCtOK1wiYm94LVwiK2wrRitcImZsZXgtXCIrbCtoO2Nhc2UgMTE1OnJldHVybiBOK2grRitcImZsZXgtaXRlbS1cIitoLnJlcGxhY2UoeSxcIlwiKStoO2RlZmF1bHQ6cmV0dXJuIE4raCtGK1wiZmxleC1saW5lLXBhY2tcIitoLnJlcGxhY2UoXCJhbGlnbi1jb250ZW50XCIsXCJcIikucmVwbGFjZSh5LFwiXCIpK2h9YnJlYWs7Y2FzZSA5NzM6Y2FzZSA5ODk6aWYoaC5jaGFyQ29kZUF0KDMpIT09UXx8MTIyPT09aC5jaGFyQ29kZUF0KDQpKWJyZWFrO2Nhc2UgOTMxOmNhc2UgOTUzOmlmKHRydWU9PT1qLnRlc3QoZSkpaWYoMTE1PT09KGw9ZS5zdWJzdHJpbmcoZS5pbmRleE9mKFwiOlwiKSsxKSkuY2hhckNvZGVBdCgwKSlyZXR1cm4gS2UoZS5yZXBsYWNlKFwic3RyZXRjaFwiLFwiZmlsbC1hdmFpbGFibGVcIiksYSxyLGMpLnJlcGxhY2UoXCI6ZmlsbC1hdmFpbGFibGVcIixcIjpzdHJldGNoXCIpO2Vsc2UgcmV0dXJuIGgucmVwbGFjZShsLE4rbCkraC5yZXBsYWNlKGwsUytsLnJlcGxhY2UoXCJmaWxsLVwiLFwiXCIpKStoO2JyZWFrO2Nhc2UgOTYyOmlmKGg9TitoKygxMDI9PT1oLmNoYXJDb2RlQXQoNSk/RitoOlwiXCIpK2gscitjPT09MjExJiYxMDU9PT1oLmNoYXJDb2RlQXQoMTMpJiZoLmluZGV4T2YoXCJ0cmFuc2Zvcm1cIiwxMCk+MClyZXR1cm4gaC5zdWJzdHJpbmcoMCxoLmluZGV4T2YoXCI7XCIsMjcpKzEpLnJlcGxhY2UoaSxcIiQxXCIrTitcIiQyXCIpK2h9cmV0dXJuIGh9ZnVuY3Rpb24gTGUoZSxhKXt2YXIgcj1lLmluZGV4T2YoMT09PWE/XCI6XCI6XCJ7XCIpLGM9ZS5zdWJzdHJpbmcoMCwzIT09YT9yOjEwKSxzPWUuc3Vic3RyaW5nKHIrMSxlLmxlbmd0aC0xKTtyZXR1cm4gT2UoMiE9PWE/YzpjLnJlcGxhY2UoTyxcIiQxXCIpLHMsYSl9ZnVuY3Rpb24gTWUoZSxhKXt2YXIgcj1LZShhLGEuY2hhckNvZGVBdCgwKSxhLmNoYXJDb2RlQXQoMSksYS5jaGFyQ29kZUF0KDIpKTtyZXR1cm4gciE9PWErXCI7XCI/ci5yZXBsYWNlKCQsXCIgb3IgKCQxKVwiKS5zdWJzdHJpbmcoNCk6XCIoXCIrYStcIilcIn1mdW5jdGlvbiBQZShlLGEscixjLHMsdCxpLGYsbixsKXtmb3IodmFyIG8saD0wLHU9YTtoPHllOysraClzd2l0Y2gobz0kZVtoXS5jYWxsKFRlLGUsdSxyLGMscyx0LGksZixuLGwpKXtjYXNlIHZvaWQgMDpjYXNlIGZhbHNlOmNhc2UgdHJ1ZTpjYXNlIG51bGw6YnJlYWs7ZGVmYXVsdDp1PW99aWYodSE9PWEpcmV0dXJuIHV9ZnVuY3Rpb24gUWUoZSxhLHIsYyl7Zm9yKHZhciBzPWErMTtzPHI7KytzKXN3aXRjaChjLmNoYXJDb2RlQXQocykpe2Nhc2UgWjppZihlPT09VClpZihjLmNoYXJDb2RlQXQocy0xKT09PVQmJmErMiE9PXMpcmV0dXJuIHMrMTticmVhaztjYXNlIEk6aWYoZT09PVopcmV0dXJuIHMrMX1yZXR1cm4gc31mdW5jdGlvbiBSZShlKXtmb3IodmFyIGEgaW4gZSl7dmFyIHI9ZVthXTtzd2l0Y2goYSl7Y2FzZVwia2V5ZnJhbWVcIjpCZT0wfHI7YnJlYWs7Y2FzZVwiZ2xvYmFsXCI6Q2U9MHxyO2JyZWFrO2Nhc2VcImNhc2NhZGVcIjpnZT0wfHI7YnJlYWs7Y2FzZVwiY29tcHJlc3NcIjp3ZT0wfHI7YnJlYWs7Y2FzZVwic2VtaWNvbG9uXCI6dmU9MHxyO2JyZWFrO2Nhc2VcInByZXNlcnZlXCI6bWU9MHxyO2JyZWFrO2Nhc2VcInByZWZpeFwiOmlmKE9lPW51bGwsIXIpQWU9MDtlbHNlIGlmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHIpQWU9MTtlbHNlIEFlPTIsT2U9cn19cmV0dXJuIFJlfWZ1bmN0aW9uIFRlKGEscil7aWYodm9pZCAwIT09dGhpcyYmdGhpcy5jb25zdHJ1Y3Rvcj09PVRlKXJldHVybiBlKGEpO3ZhciBzPWEsdD1zLmNoYXJDb2RlQXQoMCk7aWYodDwzMyl0PShzPXMudHJpbSgpKS5jaGFyQ29kZUF0KDApO2lmKEJlPjApRGU9cy5yZXBsYWNlKGQsdD09PUc/XCJcIjpcIi1cIik7aWYodD0xLDE9PT1nZSlHZT1zO2Vsc2UgRWU9czt2YXIgaSxmPVtHZV07aWYoeWU+MClpZih2b2lkIDAhPT0oaT1QZSh6ZSxyLGYsZixwZSxiZSwwLDAsMCwwKSkmJlwic3RyaW5nXCI9PXR5cGVvZiBpKXI9aTt2YXIgbj1IZSh4ZSxmLHIsMCwwKTtpZih5ZT4wKWlmKHZvaWQgMCE9PShpPVBlKGplLG4sZixmLHBlLGJlLG4ubGVuZ3RoLDAsMCwwKSkmJlwic3RyaW5nXCIhPXR5cGVvZihuPWkpKXQ9MDtyZXR1cm4gRGU9XCJcIixHZT1cIlwiLEVlPVwiXCIsa2U9MCxwZT0xLGJlPTEsd2UqdD09MD9uOm4ucmVwbGFjZShjLFwiXCIpLnJlcGxhY2UoZyxcIlwiKS5yZXBsYWNlKEEsXCIkMVwiKS5yZXBsYWNlKEMsXCIkMVwiKS5yZXBsYWNlKHcsXCIgXCIpfWlmKFRlLnVzZT1mdW5jdGlvbiBlKGEpe3N3aXRjaChhKXtjYXNlIHZvaWQgMDpjYXNlIG51bGw6eWU9JGUubGVuZ3RoPTA7YnJlYWs7ZGVmYXVsdDppZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhKSRlW3llKytdPWE7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgYSlmb3IodmFyIHI9MCxjPWEubGVuZ3RoO3I8YzsrK3IpZShhW3JdKTtlbHNlIHFlPTB8ISFhfXJldHVybiBlfSxUZS5zZXQ9UmUsdm9pZCAwIT09YSlSZShhKTtyZXR1cm4gVGV9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxpcy5taW4uanMubWFwIiwidmFyIHNpbXBsZUlzRXF1YWwgPSBmdW5jdGlvbiBzaW1wbGVJc0VxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiBpbmRleCAocmVzdWx0Rm4sIGlzRXF1YWwpIHtcbiAgaWYgKGlzRXF1YWwgPT09IHZvaWQgMCkge1xuICAgIGlzRXF1YWwgPSBzaW1wbGVJc0VxdWFsO1xuICB9XG5cbiAgdmFyIGxhc3RUaGlzO1xuICB2YXIgbGFzdEFyZ3MgPSBbXTtcbiAgdmFyIGxhc3RSZXN1bHQ7XG4gIHZhciBjYWxsZWRPbmNlID0gZmFsc2U7XG5cbiAgdmFyIGlzTmV3QXJnRXF1YWxUb0xhc3QgPSBmdW5jdGlvbiBpc05ld0FyZ0VxdWFsVG9MYXN0KG5ld0FyZywgaW5kZXgpIHtcbiAgICByZXR1cm4gaXNFcXVhbChuZXdBcmcsIGxhc3RBcmdzW2luZGV4XSk7XG4gIH07XG5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uIHJlc3VsdCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbmV3QXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIG5ld0FyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGNhbGxlZE9uY2UgJiYgbGFzdFRoaXMgPT09IHRoaXMgJiYgbmV3QXJncy5sZW5ndGggPT09IGxhc3RBcmdzLmxlbmd0aCAmJiBuZXdBcmdzLmV2ZXJ5KGlzTmV3QXJnRXF1YWxUb0xhc3QpKSB7XG4gICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICB9XG5cbiAgICBsYXN0UmVzdWx0ID0gcmVzdWx0Rm4uYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgY2FsbGVkT25jZSA9IHRydWU7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RBcmdzID0gbmV3QXJncztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlUm93LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlUm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZVJvd1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGV4dEZpZWxkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RleHRGaWVsZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGV4dEZpZWxkXCIpKTsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcIndhcm5pbmdcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcImludmFyaWFudFwiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHJvdXRlID0gdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcblxuICAgIHZhciBtYXRjaCA9IHZvaWQgMCxcbiAgICAgICAgY2hpbGQgPSB2b2lkIDA7XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgICBwYXRoUHJvcCA9IF9lbGVtZW50JHByb3BzLnBhdGgsXG4gICAgICAgICAgICBleGFjdCA9IF9lbGVtZW50JHByb3BzLmV4YWN0LFxuICAgICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgICAgc2Vuc2l0aXZlID0gX2VsZW1lbnQkcHJvcHMuc2Vuc2l0aXZlLFxuICAgICAgICAgICAgZnJvbSA9IF9lbGVtZW50JHByb3BzLmZyb207XG5cbiAgICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICAgIGNoaWxkID0gZWxlbWVudDtcbiAgICAgICAgbWF0Y2ggPSBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgZXhhY3Q6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSwgcm91dGUubWF0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzVmFsaWRSU0FBID0gZXhwb3J0cy52YWxpZGF0ZVJTQUEgPSBleHBvcnRzLmlzVmFsaWRUeXBlRGVzY3JpcHRvciA9IGV4cG9ydHMuaXNSU0FBID0gdW5kZWZpbmVkO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXknKTtcblxudmFyIF9zbGljZWRUb0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlZFRvQXJyYXkyKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZicpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxudmFyIF9SU0FBID0gcmVxdWlyZSgnLi9SU0FBJyk7XG5cbnZhciBfUlNBQTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SU0FBKTtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKCdsb2Rhc2guaXNwbGFpbm9iamVjdCcpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBhY3Rpb24gYSBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIGFuIFtSU0FBXSBwcm9wZXJ0eT9cbiAqXG4gKiBAZnVuY3Rpb24gaXNSU0FBXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbiAtIFRoZSBhY3Rpb24gdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1JTQUEoYWN0aW9uKSB7XG4gIHJldHVybiAoMCwgX2xvZGFzaDIuZGVmYXVsdCkoYWN0aW9uKSAmJiBhY3Rpb24uaGFzT3duUHJvcGVydHkoX1JTQUEyLmRlZmF1bHQpO1xufVxuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBvYmplY3QgYSB2YWxpZCB0eXBlIGRlc2NyaXB0b3I/XG4gKlxuICogQGZ1bmN0aW9uIGlzVmFsaWRUeXBlRGVzY3JpcHRvclxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqIC0gVGhlIG9iamVjdCB0byBjaGVjayBhZ2FpbnMgdGhlIHR5cGUgZGVzY3JpcHRvciBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZFR5cGVEZXNjcmlwdG9yKG9iaikge1xuICB2YXIgdmFsaWRLZXlzID0gWyd0eXBlJywgJ3BheWxvYWQnLCAnbWV0YSddO1xuXG4gIGlmICghKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKG9iaikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmICghfnZhbGlkS2V5cy5pbmRleE9mKGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKCEoJ3R5cGUnIGluIG9iaikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iai50eXBlICE9PSAnc3RyaW5nJyAmJiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkob2JqLnR5cGUpICE9PSAnc3ltYm9sJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoZWNrcyBhbiBhY3Rpb24gYWdhaW5zdCB0aGUgUlNBQSBkZWZpbml0aW9uLCByZXR1cm5pbmcgYSAocG9zc2libHkgZW1wdHkpXG4gKiBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9ycy5cbiAqXG4gKiBAZnVuY3Rpb24gdmFsaWRhdGVSU0FBXG4gKiBAYWNjZXNzIHB1YmxpY1xuICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbiAtIFRoZSBhY3Rpb24gdG8gY2hlY2sgYWdhaW5zdCB0aGUgUlNBQSBkZWZpbml0aW9uXG4gKiBAcmV0dXJucyB7YXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUlNBQShhY3Rpb24pIHtcbiAgdmFyIHZhbGlkYXRpb25FcnJvcnMgPSBbXTtcbiAgdmFyIHZhbGlkQ2FsbEFQSUtleXMgPSBbJ2VuZHBvaW50JywgJ29wdGlvbnMnLCAnbWV0aG9kJywgJ2JvZHknLCAnaGVhZGVycycsICdjcmVkZW50aWFscycsICdiYWlsb3V0JywgJ3R5cGVzJywgJ2ZldGNoJ107XG4gIHZhciB2YWxpZE1ldGhvZHMgPSBbJ0dFVCcsICdIRUFEJywgJ1BPU1QnLCAnUFVUJywgJ1BBVENIJywgJ0RFTEVURScsICdPUFRJT05TJ107XG4gIHZhciB2YWxpZENyZWRlbnRpYWxzID0gWydvbWl0JywgJ3NhbWUtb3JpZ2luJywgJ2luY2x1ZGUnXTtcblxuICBpZiAoIWlzUlNBQShhY3Rpb24pKSB7XG4gICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKCdSU0FBcyBtdXN0IGJlIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cyB3aXRoIGFuIFtSU0FBXSBwcm9wZXJ0eScpO1xuICAgIHJldHVybiB2YWxpZGF0aW9uRXJyb3JzO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbikge1xuICAgIGlmIChrZXkgIT09IF9SU0FBMi5kZWZhdWx0KSB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ0ludmFsaWQgcm9vdCBrZXk6ICcgKyBrZXkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjYWxsQVBJID0gYWN0aW9uW19SU0FBMi5kZWZhdWx0XTtcbiAgaWYgKCEoMCwgX2xvZGFzaDIuZGVmYXVsdCkoY2FsbEFQSSkpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXSBwcm9wZXJ0eSBtdXN0IGJlIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QnKTtcbiAgfVxuICBmb3IgKHZhciBfa2V5IGluIGNhbGxBUEkpIHtcbiAgICBpZiAoIX52YWxpZENhbGxBUElLZXlzLmluZGV4T2YoX2tleSkpIHtcbiAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnSW52YWxpZCBbUlNBQV0ga2V5OiAnICsgX2tleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVuZHBvaW50ID0gY2FsbEFQSS5lbmRwb2ludCxcbiAgICAgIG1ldGhvZCA9IGNhbGxBUEkubWV0aG9kLFxuICAgICAgaGVhZGVycyA9IGNhbGxBUEkuaGVhZGVycyxcbiAgICAgIG9wdGlvbnMgPSBjYWxsQVBJLm9wdGlvbnMsXG4gICAgICBjcmVkZW50aWFscyA9IGNhbGxBUEkuY3JlZGVudGlhbHMsXG4gICAgICB0eXBlcyA9IGNhbGxBUEkudHlwZXMsXG4gICAgICBiYWlsb3V0ID0gY2FsbEFQSS5iYWlsb3V0LFxuICAgICAgZmV0Y2ggPSBjYWxsQVBJLmZldGNoO1xuXG4gIGlmICh0eXBlb2YgZW5kcG9pbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKCdbUlNBQV0gbXVzdCBoYXZlIGFuIGVuZHBvaW50IHByb3BlcnR5Jyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuZHBvaW50ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZW5kcG9pbnQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXS5lbmRwb2ludCBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24nKTtcbiAgfVxuICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXSBtdXN0IGhhdmUgYSBtZXRob2QgcHJvcGVydHknKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbWV0aG9kICE9PSAnc3RyaW5nJykge1xuICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnW1JTQUFdLm1ldGhvZCBwcm9wZXJ0eSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH0gZWxzZSBpZiAoIX52YWxpZE1ldGhvZHMuaW5kZXhPZihtZXRob2QudG9VcHBlckNhc2UoKSkpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ0ludmFsaWQgW1JTQUFdLm1ldGhvZDogJyArIG1ldGhvZC50b1VwcGVyQ2FzZSgpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaGVhZGVycyAhPT0gJ3VuZGVmaW5lZCcgJiYgISgwLCBfbG9kYXNoMi5kZWZhdWx0KShoZWFkZXJzKSAmJiB0eXBlb2YgaGVhZGVycyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnW1JTQUFdLmhlYWRlcnMgcHJvcGVydHkgbXVzdCBiZSB1bmRlZmluZWQsIGEgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3QsIG9yIGEgZnVuY3Rpb24nKTtcbiAgfVxuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICd1bmRlZmluZWQnICYmICEoMCwgX2xvZGFzaDIuZGVmYXVsdCkob3B0aW9ucykgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXS5vcHRpb25zIHByb3BlcnR5IG11c3QgYmUgdW5kZWZpbmVkLCBhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0LCBvciBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjcmVkZW50aWFscyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGNyZWRlbnRpYWxzICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKCdbUlNBQV0uY3JlZGVudGlhbHMgcHJvcGVydHkgbXVzdCBiZSB1bmRlZmluZWQsIG9yIGEgc3RyaW5nJyk7XG4gICAgfSBlbHNlIGlmICghfnZhbGlkQ3JlZGVudGlhbHMuaW5kZXhPZihjcmVkZW50aWFscykpIHtcbiAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnSW52YWxpZCBbUlNBQV0uY3JlZGVudGlhbHM6ICcgKyBjcmVkZW50aWFscyk7XG4gICAgfVxuICB9XG4gIGlmICh0eXBlb2YgYmFpbG91dCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGJhaWxvdXQgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgYmFpbG91dCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnW1JTQUFdLmJhaWxvdXQgcHJvcGVydHkgbXVzdCBiZSB1bmRlZmluZWQsIGEgYm9vbGVhbiwgb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXSBtdXN0IGhhdmUgYSB0eXBlcyBwcm9wZXJ0eScpO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHR5cGVzKSB8fCB0eXBlcy5sZW5ndGggIT09IDMpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ1tSU0FBXS50eXBlcyBwcm9wZXJ0eSBtdXN0IGJlIGFuIGFycmF5IG9mIGxlbmd0aCAzJyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF90eXBlcyA9ICgwLCBfc2xpY2VkVG9BcnJheTMuZGVmYXVsdCkodHlwZXMsIDMpLFxuICAgICAgICByZXF1ZXN0VHlwZSA9IF90eXBlc1swXSxcbiAgICAgICAgc3VjY2Vzc1R5cGUgPSBfdHlwZXNbMV0sXG4gICAgICAgIGZhaWx1cmVUeXBlID0gX3R5cGVzWzJdO1xuXG4gICAgaWYgKHR5cGVvZiByZXF1ZXN0VHlwZSAhPT0gJ3N0cmluZycgJiYgKHR5cGVvZiByZXF1ZXN0VHlwZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShyZXF1ZXN0VHlwZSkpICE9PSAnc3ltYm9sJyAmJiAhaXNWYWxpZFR5cGVEZXNjcmlwdG9yKHJlcXVlc3RUeXBlKSkge1xuICAgICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKCdJbnZhbGlkIHJlcXVlc3QgdHlwZScpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN1Y2Nlc3NUeXBlICE9PSAnc3RyaW5nJyAmJiAodHlwZW9mIHN1Y2Nlc3NUeXBlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1Y2Nlc3NUeXBlKSkgIT09ICdzeW1ib2wnICYmICFpc1ZhbGlkVHlwZURlc2NyaXB0b3Ioc3VjY2Vzc1R5cGUpKSB7XG4gICAgICB2YWxpZGF0aW9uRXJyb3JzLnB1c2goJ0ludmFsaWQgc3VjY2VzcyB0eXBlJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZmFpbHVyZVR5cGUgIT09ICdzdHJpbmcnICYmICh0eXBlb2YgZmFpbHVyZVR5cGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZmFpbHVyZVR5cGUpKSAhPT0gJ3N5bWJvbCcgJiYgIWlzVmFsaWRUeXBlRGVzY3JpcHRvcihmYWlsdXJlVHlwZSkpIHtcbiAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnSW52YWxpZCBmYWlsdXJlIHR5cGUnKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGZldGNoICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZmV0Y2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbGlkYXRpb25FcnJvcnMucHVzaCgnW1JTQUFdLmZldGNoIHByb3BlcnR5IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWxpZGF0aW9uRXJyb3JzO1xufVxuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBhY3Rpb24gYSB2YWxpZCBSU0FBP1xuICpcbiAqIEBmdW5jdGlvbiBpc1ZhbGlkUlNBQVxuICogQGFjY2VzcyBwdWJsaWNcbiAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb24gLSBUaGUgYWN0aW9uIHRvIGNoZWNrIGFnYWluc3QgdGhlIFJTQUEgZGVmaW5pdGlvblxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRSU0FBKGFjdGlvbikge1xuICByZXR1cm4gIXZhbGlkYXRlUlNBQShhY3Rpb24pLmxlbmd0aDtcbn1cblxuZXhwb3J0cy5pc1JTQUEgPSBpc1JTQUE7XG5leHBvcnRzLmlzVmFsaWRUeXBlRGVzY3JpcHRvciA9IGlzVmFsaWRUeXBlRGVzY3JpcHRvcjtcbmV4cG9ydHMudmFsaWRhdGVSU0FBID0gdmFsaWRhdGVSU0FBO1xuZXhwb3J0cy5pc1ZhbGlkUlNBQSA9IGlzVmFsaWRSU0FBOyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2V0LWl0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hY3Rpb25XaXRoID0gZXhwb3J0cy5ub3JtYWxpemVUeXBlRGVzY3JpcHRvcnMgPSBleHBvcnRzLmdldEpTT04gPSB1bmRlZmluZWQ7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5Jyk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Db25zdW1hYmxlQXJyYXkyKTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YnKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTtcblxudmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxuLyoqXG4gKiBFeHRyYWN0IEpTT04gYm9keSBmcm9tIGEgc2VydmVyIHJlc3BvbnNlXG4gKlxuICogQGZ1bmN0aW9uIGdldEpTT05cbiAqIEBhY2Nlc3MgcHVibGljXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzIC0gQSByYXcgcmVzcG9uc2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7cHJvbWlzZXx1bmRlZmluZWR9XG4gKi9cbnZhciBnZXRKU09OID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3JlZiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZShyZXMpIHtcbiAgICB2YXIgY29udGVudFR5cGUsIGVtcHR5Q29kZXM7XG4gICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY29udGVudFR5cGUgPSByZXMuaGVhZGVycy5nZXQoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgZW1wdHlDb2RlcyA9IFsyMDQsIDIwNV07XG5cbiAgICAgICAgICAgIGlmICghKCF+ZW1wdHlDb2Rlcy5pbmRleE9mKHJlcy5zdGF0dXMpICYmIGNvbnRlbnRUeXBlICYmIH5jb250ZW50VHlwZS5pbmRleE9mKCdqc29uJykpKSB7XG4gICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4O1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcblxuICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsIF9jb250ZXh0LnNlbnQpO1xuXG4gICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEwO1xuICAgICAgICAgICAgcmV0dXJuIF9wcm9taXNlMi5kZWZhdWx0LnJlc29sdmUoKTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCBfY29udGV4dC5zZW50KTtcblxuICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlLCB0aGlzKTtcbiAgfSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBnZXRKU09OKF94KSB7XG4gICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn0oKTtcblxuLyoqXG4gKiBCbG93IHVwIHN0cmluZyBvciBzeW1ib2wgdHlwZXMgaW50byBmdWxsLWZsZWRnZWQgdHlwZSBkZXNjcmlwdG9ycyxcbiAqICAgYW5kIGFkZCBkZWZhdWx0c1xuICpcbiAqIEBmdW5jdGlvbiBub3JtYWxpemVUeXBlRGVzY3JpcHRvcnNcbiAqIEBhY2Nlc3MgcHJpdmF0ZVxuICogQHBhcmFtIHthcnJheX0gdHlwZXMgLSBUaGUgW1JTQUFdLnR5cGVzIGZyb20gYSB2YWxpZGF0ZWQgUlNBQVxuICogQHJldHVybnMge2FycmF5fVxuICovXG5cblxuLyoqXG4gKiBFdmFsdWF0ZSBhIHR5cGUgZGVzY3JpcHRvciB0byBhbiBGU0FcbiAqXG4gKiBAZnVuY3Rpb24gYWN0aW9uV2l0aFxuICogQGFjY2VzcyBwcml2YXRlXG4gKiBAcGFyYW0ge29iamVjdH0gZGVzY3JpcHRvciAtIEEgdHlwZSBkZXNjcmlwdG9yXG4gKiBAcGFyYW0ge2FycmF5fSBhcmdzIC0gVGhlIGFycmF5IG9mIGFyZ3VtZW50cyBmb3IgYHBheWxvYWRgIGFuZCBgbWV0YWAgZnVuY3Rpb24gcHJvcGVydGllc1xuICogQHJldHVybnMge29iamVjdH1cbiAqL1xudmFyIGFjdGlvbldpdGggPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBfcmVmMiA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoZGVzY3JpcHRvciwgYXJncykge1xuICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDA7XG4gICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGRlc2NyaXB0b3IucGF5bG9hZCA9PT0gJ2Z1bmN0aW9uJyA/IGRlc2NyaXB0b3IucGF5bG9hZC5hcHBseShkZXNjcmlwdG9yLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5My5kZWZhdWx0KShhcmdzKSkgOiBkZXNjcmlwdG9yLnBheWxvYWQ7XG5cbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnBheWxvYWQgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gNjtcbiAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsnY2F0Y2gnXSgwKTtcblxuICAgICAgICAgICAgZGVzY3JpcHRvci5wYXlsb2FkID0gbmV3IF9lcnJvcnMuSW50ZXJuYWxFcnJvcihfY29udGV4dDIudDAubWVzc2FnZSk7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmVycm9yID0gdHJ1ZTtcblxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEwO1xuICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMztcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZGVzY3JpcHRvci5tZXRhID09PSAnZnVuY3Rpb24nID8gZGVzY3JpcHRvci5tZXRhLmFwcGx5KGRlc2NyaXB0b3IsICgwLCBfdG9Db25zdW1hYmxlQXJyYXkzLmRlZmF1bHQpKGFyZ3MpKSA6IGRlc2NyaXB0b3IubWV0YTtcblxuICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBkZXNjcmlwdG9yLm1ldGEgPSBfY29udGV4dDIuc2VudDtcbiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDE2O1xuICAgICAgICAgICAgX2NvbnRleHQyLnQxID0gX2NvbnRleHQyWydjYXRjaCddKDEwKTtcblxuICAgICAgICAgICAgZGVsZXRlIGRlc2NyaXB0b3IubWV0YTtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IucGF5bG9hZCA9IG5ldyBfZXJyb3JzLkludGVybmFsRXJyb3IoX2NvbnRleHQyLnQxLm1lc3NhZ2UpO1xuICAgICAgICAgICAgZGVzY3JpcHRvci5lcnJvciA9IHRydWU7XG5cbiAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoJ3JldHVybicsIGRlc2NyaXB0b3IpO1xuXG4gICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlMiwgdGhpcywgW1swLCA2XSwgWzEwLCAxNl1dKTtcbiAgfSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBhY3Rpb25XaXRoKF94MiwgX3gzKSB7XG4gICAgcmV0dXJuIF9yZWYyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59KCk7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbm9ybWFsaXplVHlwZURlc2NyaXB0b3JzKHR5cGVzKSB7XG4gIHZhciBfdHlwZXMgPSAoMCwgX3NsaWNlZFRvQXJyYXkzLmRlZmF1bHQpKHR5cGVzLCAzKSxcbiAgICAgIHJlcXVlc3RUeXBlID0gX3R5cGVzWzBdLFxuICAgICAgc3VjY2Vzc1R5cGUgPSBfdHlwZXNbMV0sXG4gICAgICBmYWlsdXJlVHlwZSA9IF90eXBlc1syXTtcblxuICBpZiAodHlwZW9mIHJlcXVlc3RUeXBlID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIHJlcXVlc3RUeXBlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJlcXVlc3RUeXBlKSkgPT09ICdzeW1ib2wnKSB7XG4gICAgcmVxdWVzdFR5cGUgPSB7IHR5cGU6IHJlcXVlc3RUeXBlIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHN1Y2Nlc3NUeXBlID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIHN1Y2Nlc3NUeXBlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1Y2Nlc3NUeXBlKSkgPT09ICdzeW1ib2wnKSB7XG4gICAgc3VjY2Vzc1R5cGUgPSB7IHR5cGU6IHN1Y2Nlc3NUeXBlIH07XG4gIH1cbiAgc3VjY2Vzc1R5cGUgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICBwYXlsb2FkOiBmdW5jdGlvbiBwYXlsb2FkKGFjdGlvbiwgc3RhdGUsIHJlcykge1xuICAgICAgcmV0dXJuIGdldEpTT04ocmVzKTtcbiAgICB9XG4gIH0sIHN1Y2Nlc3NUeXBlKTtcblxuICBpZiAodHlwZW9mIGZhaWx1cmVUeXBlID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIGZhaWx1cmVUeXBlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGZhaWx1cmVUeXBlKSkgPT09ICdzeW1ib2wnKSB7XG4gICAgZmFpbHVyZVR5cGUgPSB7IHR5cGU6IGZhaWx1cmVUeXBlIH07XG4gIH1cbiAgZmFpbHVyZVR5cGUgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICBwYXlsb2FkOiBmdW5jdGlvbiBwYXlsb2FkKGFjdGlvbiwgc3RhdGUsIHJlcykge1xuICAgICAgcmV0dXJuIGdldEpTT04ocmVzKS50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgIHJldHVybiBuZXcgX2Vycm9ycy5BcGlFcnJvcihyZXMuc3RhdHVzLCByZXMuc3RhdHVzVGV4dCwganNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIGZhaWx1cmVUeXBlKTtcblxuICByZXR1cm4gW3JlcXVlc3RUeXBlLCBzdWNjZXNzVHlwZSwgZmFpbHVyZVR5cGVdO1xufWV4cG9ydHMuZ2V0SlNPTiA9IGdldEpTT047XG5leHBvcnRzLm5vcm1hbGl6ZVR5cGVEZXNjcmlwdG9ycyA9IG5vcm1hbGl6ZVR5cGVEZXNjcmlwdG9ycztcbmV4cG9ydHMuYWN0aW9uV2l0aCA9IGFjdGlvbldpdGg7IiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTtcblxudmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTtcblxudmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTtcblxudmFyIF9yZWdlbmVyYXRvciA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InKTtcblxudmFyIF9yZWdlbmVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWdlbmVyYXRvcik7XG5cbnZhciBfZ2V0SXRlcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2dldC1pdGVyYXRvcicpO1xuXG52YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cbnZhciBfYXN5bmNUb0dlbmVyYXRvcjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcicpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXN5bmNUb0dlbmVyYXRvcjIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9jb25maWd1cmF0aW9uVmFsaWRhdGlvbiA9IHJlcXVpcmUoJ0Bva3RhL2NvbmZpZ3VyYXRpb24tdmFsaWRhdGlvbicpO1xuXG52YXIgX29rdGFBdXRoSnMgPSByZXF1aXJlKCdAb2t0YS9va3RhLWF1dGgtanMnKTtcblxudmFyIF9va3RhQXV0aEpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29rdGFBdXRoSnMpO1xuXG52YXIgX3BhY2thZ2VJbmZvID0gcmVxdWlyZSgnLi9wYWNrYWdlSW5mbycpO1xuXG52YXIgX3BhY2thZ2VJbmZvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BhY2thZ2VJbmZvKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNvbnRhaW5zQXV0aFRva2VucyA9IC9pZF90b2tlbnxhY2Nlc3NfdG9rZW58Y29kZS87IC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE3LVByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG52YXIgQXV0aCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXV0aChjb25maWcpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBdXRoKTtcblxuICAgICgwLCBfY29uZmlndXJhdGlvblZhbGlkYXRpb24uYXNzZXJ0SXNzdWVyKShjb25maWcuaXNzdWVyKTtcbiAgICAoMCwgX2NvbmZpZ3VyYXRpb25WYWxpZGF0aW9uLmFzc2VydENsaWVudElkKShjb25maWcuY2xpZW50X2lkKTtcbiAgICAoMCwgX2NvbmZpZ3VyYXRpb25WYWxpZGF0aW9uLmFzc2VydFJlZGlyZWN0VXJpKShjb25maWcucmVkaXJlY3RfdXJpKTtcbiAgICB0aGlzLl9va3RhQXV0aCA9IG5ldyBfb2t0YUF1dGhKczIuZGVmYXVsdCh7XG4gICAgICB1cmw6IGNvbmZpZy5pc3N1ZXIuc3BsaXQoJy9vYXV0aDIvJylbMF0sXG4gICAgICBjbGllbnRJZDogY29uZmlnLmNsaWVudF9pZCxcbiAgICAgIGlzc3VlcjogY29uZmlnLmlzc3VlcixcbiAgICAgIHJlZGlyZWN0VXJpOiBjb25maWcucmVkaXJlY3RfdXJpXG4gICAgfSk7XG4gICAgdGhpcy5fb2t0YUF1dGgudXNlckFnZW50ID0gX3BhY2thZ2VJbmZvMi5kZWZhdWx0Lm5hbWUgKyAnLycgKyBfcGFja2FnZUluZm8yLmRlZmF1bHQudmVyc2lvbiArICcgJyArIHRoaXMuX29rdGFBdXRoLnVzZXJBZ2VudDtcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5faGlzdG9yeSA9IGNvbmZpZy5oaXN0b3J5O1xuXG4gICAgdGhpcy5oYW5kbGVBdXRoZW50aWNhdGlvbiA9IHRoaXMuaGFuZGxlQXV0aGVudGljYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLmlzQXV0aGVudGljYXRlZCA9IHRoaXMuaXNBdXRoZW50aWNhdGVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRVc2VyID0gdGhpcy5nZXRVc2VyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRJZFRva2VuID0gdGhpcy5nZXRJZFRva2VuLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRBY2Nlc3NUb2tlbiA9IHRoaXMuZ2V0QWNjZXNzVG9rZW4uYmluZCh0aGlzKTtcbiAgICB0aGlzLmxvZ2luID0gdGhpcy5sb2dpbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMubG9nb3V0ID0gdGhpcy5sb2dvdXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZGlyZWN0ID0gdGhpcy5yZWRpcmVjdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQXV0aCwgW3tcbiAgICBrZXk6ICdoYW5kbGVBdXRoZW50aWNhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHZhciB0b2tlbnMsIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24sIF9kaWRJdGVyYXRvckVycm9yLCBfaXRlcmF0b3JFcnJvciwgX2l0ZXJhdG9yLCBfc3RlcCwgdG9rZW47XG5cbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9va3RhQXV0aC50b2tlbi5wYXJzZUZyb21VcmwoKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgdG9rZW5zID0gX2NvbnRleHQuc2VudDtcblxuICAgICAgICAgICAgICAgIHRva2VucyA9IEFycmF5LmlzQXJyYXkodG9rZW5zKSA/IHRva2VucyA6IFt0b2tlbnNdO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7XG4gICAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KSh0b2tlbnMpOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgIHRva2VuID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi5pZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29rdGFBdXRoLnRva2VuTWFuYWdlci5hZGQoJ2lkVG9rZW4nLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29rdGFBdXRoLnRva2VuTWFuYWdlci5hZGQoJ2FjY2Vzc1Rva2VuJywgdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTE7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsnY2F0Y2gnXSg3KTtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBfY29udGV4dC50MDtcblxuICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTY7XG5cbiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxODtcblxuICAgICAgICAgICAgICAgIGlmICghX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmZpbmlzaCgxOCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE1KTtcblxuICAgICAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzcsIDExLCAxNSwgMjNdLCBbMTYsLCAxOCwgMjJdXSk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUF1dGhlbnRpY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlQXV0aGVudGljYXRpb247XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdpc0F1dGhlbnRpY2F0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjIgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEobG9jYXRpb24gJiYgbG9jYXRpb24uaGFzaCAmJiBjb250YWluc0F1dGhUb2tlbnMudGVzdChsb2NhdGlvbi5oYXNoKSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCdyZXR1cm4nLCBudWxsKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEFjY2Vzc1Rva2VuKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9ICEhX2NvbnRleHQyLnNlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2NvbnRleHQyLnQwKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SWRUb2tlbigpO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSAhIV9jb250ZXh0Mi5zZW50O1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgncmV0dXJuJywgX2NvbnRleHQyLnQwKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBpc0F1dGhlbnRpY2F0ZWQoKSB7XG4gICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNBdXRoZW50aWNhdGVkO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VXNlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmMyA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHtcbiAgICAgICAgdmFyIGFjY2Vzc1Rva2VuLCBpZFRva2VuLCB1c2VyaW5mbztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29rdGFBdXRoLnRva2VuTWFuYWdlci5nZXQoJ2FjY2Vzc1Rva2VuJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gX2NvbnRleHQzLnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9va3RhQXV0aC50b2tlbk1hbmFnZXIuZ2V0KCdpZFRva2VuJyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGlkVG9rZW4gPSBfY29udGV4dDMuc2VudDtcblxuICAgICAgICAgICAgICAgIGlmICghKGFjY2Vzc1Rva2VuICYmIGlkVG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA5O1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9va3RhQXV0aC50b2tlbi5nZXRVc2VySW5mbyhhY2Nlc3NUb2tlbik7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIHVzZXJpbmZvID0gX2NvbnRleHQzLnNlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoISh1c2VyaW5mby5zdWIgPT09IGlkVG9rZW4uY2xhaW1zLnN1YikpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTI7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgncmV0dXJuJywgdXNlcmluZm8pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoJ3JldHVybicsIGlkVG9rZW4gPyBpZFRva2VuLmNsYWltcyA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUzLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gZ2V0VXNlcigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRVc2VyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAnZ2V0SWRUb2tlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmNCA9ICgwLCBfYXN5bmNUb0dlbmVyYXRvcjMuZGVmYXVsdCkoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3IyLmRlZmF1bHQubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHtcbiAgICAgICAgdmFyIGlkVG9rZW47XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ0LnByZXYgPSAwO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2t0YUF1dGgudG9rZW5NYW5hZ2VyLmdldCgnaWRUb2tlbicpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZFRva2VuID0gX2NvbnRleHQ0LnNlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoJ3JldHVybicsIGlkVG9rZW4uaWRUb2tlbik7XG5cbiAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gNztcbiAgICAgICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbJ2NhdGNoJ10oMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoJ3JldHVybicsIHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWU0LCB0aGlzLCBbWzAsIDddXSk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldElkVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0SWRUb2tlbjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2dldEFjY2Vzc1Rva2VuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWY1ID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KCkge1xuICAgICAgICB2YXIgYWNjZXNzVG9rZW47XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3IyLmRlZmF1bHQud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2t0YUF1dGgudG9rZW5NYW5hZ2VyLmdldCgnYWNjZXNzVG9rZW4nKTtcblxuICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW4gPSBfY29udGV4dDUuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgncmV0dXJuJywgYWNjZXNzVG9rZW4uYWNjZXNzVG9rZW4pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDc7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1WydjYXRjaCddKDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCdyZXR1cm4nLCB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlNSwgdGhpcywgW1swLCA3XV0pO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWY1LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRBY2Nlc3NUb2tlbjtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2xvZ2luJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWY2ID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KGZyb21VcmksIGFkZGl0aW9uYWxQYXJhbXMpIHtcbiAgICAgICAgdmFyIHJlZmVycmVyUGF0aCwgYXV0aCwgaGlzdG9yeTtcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZWZlcnJlclBhdGggPSBmcm9tVXJpID8geyBwYXRobmFtZTogZnJvbVVyaSB9IDogdGhpcy5faGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzZWN1cmVSb3V0ZXJSZWZlcnJlclBhdGgnLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkocmVmZXJyZXJQYXRoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5vbkF1dGhSZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSA2O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXV0aCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgaGlzdG9yeSA9IHRoaXMuX2hpc3Rvcnk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoJ3JldHVybicsIHRoaXMuX2NvbmZpZy5vbkF1dGhSZXF1aXJlZCh7IGF1dGg6IGF1dGgsIGhpc3Rvcnk6IGhpc3RvcnkgfSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVkaXJlY3QoYWRkaXRpb25hbFBhcmFtcyk7XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBsb2dpbihfeCwgX3gyKSB7XG4gICAgICAgIHJldHVybiBfcmVmNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9naW47XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdsb2dvdXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZjcgPSAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yMi5kZWZhdWx0Lm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcocGF0aCkge1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0Nykge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRoaXMuX29rdGFBdXRoLnRva2VuTWFuYWdlci5jbGVhcigpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2t0YUF1dGguc2lnbk91dCgpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5LnB1c2gocGF0aCB8fCAnLycpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWU3LCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gbG9nb3V0KF94Mykge1xuICAgICAgICByZXR1cm4gX3JlZjcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxvZ291dDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3JlZGlyZWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWY4ID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkge1xuICAgICAgICB2YXIgYWRkaXRpb25hbFBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICAgIHZhciByZXNwb25zZVR5cGUsIHNjb3BlcztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvcjIuZGVmYXVsdC53cmFwKGZ1bmN0aW9uIF9jYWxsZWU4JChfY29udGV4dDgpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDgucHJldiA9IF9jb250ZXh0OC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXNwb25zZVR5cGUgPSBhZGRpdGlvbmFsUGFyYW1zLnJlc3BvbnNlX3R5cGUgfHwgdGhpcy5fY29uZmlnLnJlc3BvbnNlX3R5cGUgfHwgWydpZF90b2tlbicsICd0b2tlbiddO1xuICAgICAgICAgICAgICAgIHNjb3BlcyA9IGFkZGl0aW9uYWxQYXJhbXMuc2NvcGUgfHwgdGhpcy5fY29uZmlnLnNjb3BlIHx8IFsnb3BlbmlkJywgJ2VtYWlsJywgJ3Byb2ZpbGUnXTtcblxuXG4gICAgICAgICAgICAgICAgdGhpcy5fb2t0YUF1dGgudG9rZW4uZ2V0V2l0aFJlZGlyZWN0KCgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiByZXNwb25zZVR5cGUsXG4gICAgICAgICAgICAgICAgICBzY29wZXM6IHNjb3Blc1xuICAgICAgICAgICAgICAgIH0sIGFkZGl0aW9uYWxQYXJhbXMpKTtcblxuICAgICAgICAgICAgICAgIC8vIHJldHVybiBhIHByb21pc2UgdGhhdCBkb2Vzbid0IHRlcm1pbmF0ZSBzbyBub3RoaW5nXG4gICAgICAgICAgICAgICAgLy8gaGFwcGVucyBhZnRlciBzZXR0aW5nIHdpbmRvdy5sb2NhdGlvblxuICAgICAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAqL1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCdyZXR1cm4nLCBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge30pKTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlOCwgdGhpcyk7XG4gICAgICB9KSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlZGlyZWN0KCkge1xuICAgICAgICByZXR1cm4gX3JlZjguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZGlyZWN0O1xuICAgIH0oKVxuICB9XSk7XG4gIHJldHVybiBBdXRoO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBdXRoOyIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSwgbWF4LXN0YXRlbWVudHMgKi9cbnZhciBodHRwID0gcmVxdWlyZSgnLi9odHRwJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIHN0b3JhZ2VVdGlsID0gcmVxdWlyZSgnLi9zdG9yYWdlVXRpbCcpO1xudmFyIEF1dGhTZGtFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL0F1dGhTZGtFcnJvcicpO1xuXG52YXIgaHR0cENhY2hlID0gc3RvcmFnZVV0aWwuZ2V0SHR0cENhY2hlKCk7XG5cbmZ1bmN0aW9uIGlzVG9rZW4ob2JqKSB7XG4gIGlmIChvYmogJiZcbiAgICAgIChvYmouYWNjZXNzVG9rZW4gfHwgb2JqLmlkVG9rZW4pICYmXG4gICAgICBBcnJheS5pc0FycmF5KG9iai5zY29wZXMpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihldmVudFRhcmdldCwgbmFtZSwgZm4pIHtcbiAgaWYgKGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudFRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgbmFtZSwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGV2ZW50VGFyZ2V0LCBuYW1lLCBmbikge1xuICBpZiAoZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuICAgIGV2ZW50VGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgZm4pO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50VGFyZ2V0LmRldGFjaEV2ZW50KCdvbicgKyBuYW1lLCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9hZEZyYW1lKHNyYykge1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBpZnJhbWUuc3JjID0gc3JjO1xuXG4gIHJldHVybiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGlmcmFtZSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRQb3B1cChzcmMsIG9wdGlvbnMpIHtcbiAgdmFyIHRpdGxlID0gb3B0aW9ucy5wb3B1cFRpdGxlIHx8ICdFeHRlcm5hbCBJZGVudGl0eSBQcm92aWRlciBVc2VyIEF1dGhlbnRpY2F0aW9uJztcbiAgdmFyIGFwcGVhcmFuY2UgPSAndG9vbGJhcj1ubywgc2Nyb2xsYmFycz15ZXMsIHJlc2l6YWJsZT15ZXMsICcgK1xuICAgICd0b3A9MTAwLCBsZWZ0PTUwMCwgd2lkdGg9NjAwLCBoZWlnaHQ9NjAwJztcblxuICBpZiAodXRpbC5pc0lFMTFPckxlc3MoKSkge1xuICAgIC8vIElFPD0xMSBkb2Vzbid0IGZ1bGx5IHN1cHBvcnQgcG9zdE1lc3NhZ2UgYXQgdGltZSBvZiB3cml0dGluZy5cbiAgICAvLyB0aGUgZm9sbG93aW5nIHNpbXBsZSBzb2x1dGlvbiBoYXBwZW5lZCB0byBzb2x2ZSB0aGUgaXNzdWVcbiAgICAvLyB3aXRob3V0IGFkZGluZyBhbm90aGVyIHByb3h5IGxheWVyIHdoaWNoIG1ha2VzIGZsb3cgbW9yZSBjb21wbGVjYXRlZC5cbiAgICB2YXIgd2luRWwgPSB3aW5kb3cub3BlbignLycsIHRpdGxlLCBhcHBlYXJhbmNlKTtcbiAgICB3aW5FbC5sb2NhdGlvbi5ocmVmID0gc3JjO1xuICAgIHJldHVybiB3aW5FbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2luZG93Lm9wZW4oc3JjLCB0aXRsZSwgYXBwZWFyYW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0V2VsbEtub3duKHNkaywgaXNzdWVyKSB7XG4gIHJldHVybiBodHRwLmdldChzZGssIChpc3N1ZXIgfHwgc2RrLm9wdGlvbnMudXJsKSArICcvLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nLCB7XG4gICAgY2FjaGVSZXNwb25zZTogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0S2V5KHNkaywgaXNzdWVyLCBraWQpIHtcbiAgcmV0dXJuIGdldFdlbGxLbm93bihzZGssIGlzc3VlcilcbiAgLnRoZW4oZnVuY3Rpb24od2VsbEtub3duKSB7XG4gICAgdmFyIGp3a3NVcmkgPSB3ZWxsS25vd25bJ2p3a3NfdXJpJ107XG5cbiAgICAvLyBDaGVjayBvdXIga2lkIGFnYWluc3QgdGhlIGNhY2hlZCB2ZXJzaW9uIChpZiBpdCBleGlzdHMgYW5kIGlzbid0IGV4cGlyZWQpXG4gICAgdmFyIGNhY2hlQ29udGVudHMgPSBodHRwQ2FjaGUuZ2V0U3RvcmFnZSgpO1xuICAgIHZhciBjYWNoZWRSZXNwb25zZSA9IGNhY2hlQ29udGVudHNbandrc1VyaV07XG4gICAgaWYgKGNhY2hlZFJlc3BvbnNlICYmIERhdGUubm93KCkvMTAwMCA8IGNhY2hlZFJlc3BvbnNlLmV4cGlyZXNBdCkge1xuICAgICAgdmFyIGNhY2hlZEtleSA9IHV0aWwuZmluZChjYWNoZWRSZXNwb25zZS5yZXNwb25zZS5rZXlzLCB7XG4gICAgICAgIGtpZDoga2lkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGNhY2hlZEtleSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBjYWNoZSBmb3IgdGhlIGtleVxuICAgIGh0dHBDYWNoZS5jbGVhclN0b3JhZ2Uoandrc1VyaSk7XG5cbiAgICAvLyBQdWxsIHRoZSBsYXRlc3Qga2V5cyBpZiB0aGUga2V5IHdhc24ndCBpbiB0aGUgY2FjaGVcbiAgICByZXR1cm4gaHR0cC5nZXQoc2RrLCBqd2tzVXJpLCB7XG4gICAgICBjYWNoZVJlc3BvbnNlOiB0cnVlXG4gICAgfSlcbiAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgIHZhciBrZXkgPSB1dGlsLmZpbmQocmVzLmtleXMsIHtcbiAgICAgICAga2lkOiBraWRcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ1RoZSBrZXkgaWQsICcgKyBraWQgKyAnLCB3YXMgbm90IGZvdW5kIGluIHRoZSBzZXJ2ZXJcXCdzIGtleXMnKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xhaW1zKHNkaywgY2xhaW1zLCB2YWxpZGF0aW9uUGFyYW1zKSB7XG4gIHZhciBhdWQgPSB2YWxpZGF0aW9uUGFyYW1zLmNsaWVudElkO1xuICB2YXIgaXNzID0gdmFsaWRhdGlvblBhcmFtcy5pc3N1ZXI7XG4gIHZhciBub25jZSA9IHZhbGlkYXRpb25QYXJhbXMubm9uY2U7XG5cbiAgaWYgKCFjbGFpbXMgfHwgIWlzcyB8fCAhYXVkKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVGhlIGp3dCwgaXNzLCBhbmQgYXVkIGFyZ3VtZW50cyBhcmUgYWxsIHJlcXVpcmVkJyk7XG4gIH1cblxuICBpZiAobm9uY2UgJiYgY2xhaW1zLm5vbmNlICE9PSBub25jZSkge1xuICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ09BdXRoIGZsb3cgcmVzcG9uc2Ugbm9uY2UgZG9lc25cXCd0IG1hdGNoIHJlcXVlc3Qgbm9uY2UnKTtcbiAgfVxuXG4gIHZhciBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpLzEwMDApO1xuXG4gIGlmIChjbGFpbXMuaXNzICE9PSBpc3MpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdUaGUgaXNzdWVyIFsnICsgY2xhaW1zLmlzcyArICddICcgK1xuICAgICAgJ2RvZXMgbm90IG1hdGNoIFsnICsgaXNzICsgJ10nKTtcbiAgfVxuXG4gIGlmIChjbGFpbXMuYXVkICE9PSBhdWQpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdUaGUgYXVkaWVuY2UgWycgKyBjbGFpbXMuYXVkICsgJ10gJyArXG4gICAgICAnZG9lcyBub3QgbWF0Y2ggWycgKyBhdWQgKyAnXScpO1xuICB9XG5cbiAgaWYgKGNsYWltcy5pYXQgPiBjbGFpbXMuZXhwKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVGhlIEpXVCBleHBpcmVkIGJlZm9yZSBpdCB3YXMgaXNzdWVkJyk7XG4gIH1cblxuICBpZiAoKG5vdyAtIHNkay5vcHRpb25zLm1heENsb2NrU2tldykgPiBjbGFpbXMuZXhwKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVGhlIEpXVCBleHBpcmVkIGFuZCBpcyBubyBsb25nZXIgdmFsaWQnKTtcbiAgfVxuXG4gIGlmIChjbGFpbXMuaWF0ID4gKG5vdyArIHNkay5vcHRpb25zLm1heENsb2NrU2tldykpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdUaGUgSldUIHdhcyBpc3N1ZWQgaW4gdGhlIGZ1dHVyZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9BdXRoVXJscyhzZGssIG9hdXRoUGFyYW1zLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIEdldCB1c2VyLXN1cHBsaWVkIGFyZ3VtZW50c1xuICB2YXIgYXV0aG9yaXplVXJsID0gdXRpbC5yZW1vdmVUcmFpbGluZ1NsYXNoKG9wdGlvbnMuYXV0aG9yaXplVXJsKSB8fCBzZGsub3B0aW9ucy5hdXRob3JpemVVcmw7XG4gIHZhciBpc3N1ZXIgPSB1dGlsLnJlbW92ZVRyYWlsaW5nU2xhc2gob3B0aW9ucy5pc3N1ZXIpIHx8IHNkay5vcHRpb25zLmlzc3VlcjtcbiAgdmFyIHVzZXJpbmZvVXJsID0gdXRpbC5yZW1vdmVUcmFpbGluZ1NsYXNoKG9wdGlvbnMudXNlcmluZm9VcmwpIHx8IHNkay5vcHRpb25zLnVzZXJpbmZvVXJsO1xuXG4gIC8vIElmIGFuIGlzc3VlciBleGlzdHMgYnV0IGl0J3Mgbm90IGEgdXJsLCBhc3N1bWUgaXQncyBhbiBhdXRoU2VydmVySWRcbiAgaWYgKGlzc3VlciAmJiAhKC9eaHR0cHM/Oi8udGVzdChpc3N1ZXIpKSkge1xuICAgIC8vIE1ha2UgaXQgYSB1cmxcbiAgICBpc3N1ZXIgPSBzZGsub3B0aW9ucy51cmwgKyAnL29hdXRoMi8nICsgaXNzdWVyO1xuICB9XG5cbiAgLy8gSWYgYW4gYXV0aG9yaXplVXJsIGlzIHN1cHBsaWVkIHdpdGhvdXQgYW4gaXNzdWVyLCBhbmQgYW4gaWRfdG9rZW4gaXMgcmVxdWVzdGVkXG4gIGlmICghaXNzdWVyICYmIGF1dGhvcml6ZVVybCAmJlxuICAgICAgb2F1dGhQYXJhbXMucmVzcG9uc2VUeXBlLmluZGV4T2YoJ2lkX3Rva2VuJykgIT09IC0xKSB7XG4gICAgLy8gVGhlIGlzc3VlciBpcyBhbWJpZ3VvdXMsIHNvIHdlIHdvbid0IGJlIGFibGUgdG8gdmFsaWRhdGUgdGhlIGlkX3Rva2VuIGp3dFxuICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ0Nhbm5vdCByZXF1ZXN0IGlkVG9rZW4gd2l0aCBhbiBhdXRob3JpemVVcmwgd2l0aG91dCBhbiBpc3N1ZXInKTtcbiAgfVxuXG4gIC8vIElmIGEgdG9rZW4gaXMgcmVxdWVzdGVkIHdpdGhvdXQgYW4gaXNzdWVyXG4gIGlmICghaXNzdWVyICYmIG9hdXRoUGFyYW1zLnJlc3BvbnNlVHlwZS5pbmRleE9mKCd0b2tlbicpICE9PSAtMSkge1xuICAgIC8vIElmIGFuIGF1dGhvcml6ZVVybCBpcyBzdXBwbGllZCB3aXRob3V0IGEgdXNlcmluZm9VcmxcbiAgICBpZiAoYXV0aG9yaXplVXJsICYmICF1c2VyaW5mb1VybCkge1xuICAgICAgLy8gVGhlIHVzZXJpbmZvVXJsIGlzIGFtYmlndW91cywgc28gd2Ugd29uJ3QgYmUgYWJsZSB0byBjYWxsIGdldFVzZXJJbmZvXG4gICAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdDYW5ub3QgcmVxdWVzdCBhY2Nlc3NUb2tlbiB3aXRoIGFuIGF1dGhvcml6ZVVybCB3aXRob3V0IGFuIGlzc3VlciBvciB1c2VyaW5mb1VybCcpO1xuICAgIH1cblxuICAgIC8vIElmIGEgdXNlcmluZm9VcmwgaXMgc3VwcGxpZWQgd2l0aG91dCBhIGF1dGhvcml6ZVVybFxuICAgIGlmICh1c2VyaW5mb1VybCAmJiAhYXV0aG9yaXplVXJsKSB7XG4gICAgICAvLyBUaGUgYXV0aG9yaXplVXJsIGlzIGFtYmlndW91cywgc28gd2Ugd29uJ3QgYmUgYWJsZSB0byBjYWxsIHRoZSBhdXRob3JpemUgZW5kcG9pbnRcbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ0Nhbm5vdCByZXF1ZXN0IHRva2VuIHdpdGggYW4gdXNlcmluZm9Vcmwgd2l0aG91dCBhbiBpc3N1ZXIgb3IgYXV0aG9yaXplVXJsJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNoYXJlZFJlc291cmNlU2VydmVyUmVnZXggPSBuZXcgUmVnRXhwKCdeaHR0cHM/Oi8vLio/L29hdXRoMi8uKycpO1xuXG4gIC8vIERlZmF1bHQgdGhlIGlzc3VlciB0byBvdXIgYmFzZVVybFxuICBpc3N1ZXIgPSBpc3N1ZXIgfHwgc2RrLm9wdGlvbnMudXJsO1xuXG4gIC8vIEEgc2hhcmVkIHJlc291cmNlIHNlcnZlciBpc3N1ZXIgbG9va3MgbGlrZTpcbiAgLy8gaHR0cHM6Ly9leGFtcGxlLm9rdGEuY29tL29hdXRoMi9hdXM4YXVzNzZxOGlwaHVwRDBoN1xuICBpZiAoc2hhcmVkUmVzb3VyY2VTZXJ2ZXJSZWdleC50ZXN0KGlzc3VlcikpIHtcbiAgICAvLyBBIHNoYXJlZCByZXNvdXJjZSBzZXJ2ZXIgYXV0aG9yaXplVXJsIGxvb2tzIGxpa2U6XG4gICAgLy8gaHR0cHM6Ly9leGFtcGxlLm9rdGEuY29tL29hdXRoMi9hdXM4YXVzNzZxOGlwaHVwRDBoNy92MS9hdXRob3JpemVcbiAgICBhdXRob3JpemVVcmwgPSBhdXRob3JpemVVcmwgfHwgaXNzdWVyICsgJy92MS9hdXRob3JpemUnO1xuICAgIC8vIFNoYXJlZCByZXNvdXJjZSBzZXJ2ZXIgdXNlcmluZm9VcmxzIGxvb2sgbGlrZTpcbiAgICAvLyBodHRwczovL2V4YW1wbGUub2t0YS5jb20vb2F1dGgyL2F1czhhdXM3NnE4aXBodXBEMGg3L3YxL3VzZXJpbmZvXG4gICAgdXNlcmluZm9VcmwgPSB1c2VyaW5mb1VybCB8fCBpc3N1ZXIgKyAnL3YxL3VzZXJpbmZvJztcblxuICAvLyBOb3JtYWxseSBsb29rcyBsaWtlOlxuICAvLyBodHRwczovL2V4YW1wbGUub2t0YS5jb21cbiAgfSBlbHNlIHtcbiAgICAvLyBOb3JtYWwgYXV0aG9yaXplVXJscyBsb29rIGxpa2U6XG4gICAgLy8gaHR0cHM6Ly9leGFtcGxlLm9rdGEuY29tL29hdXRoMi92MS9hdXRob3JpemVcbiAgICBhdXRob3JpemVVcmwgPSBhdXRob3JpemVVcmwgfHwgaXNzdWVyICsgJy9vYXV0aDIvdjEvYXV0aG9yaXplJztcbiAgICAvLyBOb3JtYWwgdXNlcmluZm9VcmxzIGxvb2sgbGlrZTpcbiAgICAvLyBodHRwczovL2V4YW1wbGUub2t0YS5jb20vb2F1dGgyL3YxL3VzZXJpbmZvXG4gICAgdXNlcmluZm9VcmwgPSB1c2VyaW5mb1VybCB8fCBpc3N1ZXIgKyAnL29hdXRoMi92MS91c2VyaW5mbyc7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlzc3VlcjogaXNzdWVyLFxuICAgIGF1dGhvcml6ZVVybDogYXV0aG9yaXplVXJsLFxuICAgIHVzZXJpbmZvVXJsOiB1c2VyaW5mb1VybFxuICB9O1xufVxuXG5mdW5jdGlvbiBoYXNoVG9PYmplY3QoaGFzaCkge1xuICAvLyBQcmVkZWZpbmUgcmVnZXhzIGZvciBwYXJzaW5nIGhhc2hcbiAgdmFyIHBsdXMyc3BhY2UgPSAvXFwrL2c7XG4gIHZhciBwYXJhbVNwbGl0ID0gLyhbXiY9XSspPT8oW14mXSopL2c7XG5cbiAgLy8gUmVtb3ZlIHRoZSBsZWFkaW5nIGhhc2hcbiAgdmFyIGZyYWdtZW50ID0gaGFzaC5zdWJzdHJpbmcoMSk7XG5cbiAgdmFyIG9iaiA9IHt9O1xuXG4gIC8vIExvb3AgdW50aWwgd2UgaGF2ZSBubyBtb3JlIHBhcmFtc1xuICB2YXIgcGFyYW07XG4gIHdoaWxlICh0cnVlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgcGFyYW0gPSBwYXJhbVNwbGl0LmV4ZWMoZnJhZ21lbnQpO1xuICAgIGlmICghcGFyYW0pIHsgYnJlYWs7IH1cblxuICAgIHZhciBrZXkgPSBwYXJhbVsxXTtcbiAgICB2YXIgdmFsdWUgPSBwYXJhbVsyXTtcblxuICAgIC8vIGlkX3Rva2VuIHNob3VsZCByZW1haW4gYmFzZTY0dXJsIGVuY29kZWRcbiAgICBpZiAoa2V5ID09PSAnaWRfdG9rZW4nIHx8IGtleSA9PT0gJ2FjY2Vzc190b2tlbicgfHwga2V5ID09PSAnY29kZScpIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLnJlcGxhY2UocGx1czJzcGFjZSwgJyAnKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRXZWxsS25vd246IGdldFdlbGxLbm93bixcbiAgZ2V0S2V5OiBnZXRLZXksXG4gIHZhbGlkYXRlQ2xhaW1zOiB2YWxpZGF0ZUNsYWltcyxcbiAgZ2V0T0F1dGhVcmxzOiBnZXRPQXV0aFVybHMsXG4gIGxvYWRGcmFtZTogbG9hZEZyYW1lLFxuICBsb2FkUG9wdXA6IGxvYWRQb3B1cCxcbiAgaGFzaFRvT2JqZWN0OiBoYXNoVG9PYmplY3QsXG4gIGlzVG9rZW46IGlzVG9rZW4sXG4gIGFkZExpc3RlbmVyOiBhZGRMaXN0ZW5lcixcbiAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyXG59O1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG52YXIgQXV0aFNka0Vycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvQXV0aFNka0Vycm9yJyk7XG5cbi8vIHN0b3JhZ2UgbXVzdCBoYXZlIGdldEl0ZW0gYW5kIHNldEl0ZW1cbmZ1bmN0aW9uIHN0b3JhZ2VCdWlsZGVyKHdlYnN0b3JhZ2UsIHN0b3JhZ2VOYW1lKSB7XG4gIGZ1bmN0aW9uIGdldFN0b3JhZ2UoKSB7XG4gICAgdmFyIHN0b3JhZ2VTdHJpbmcgPSB3ZWJzdG9yYWdlLmdldEl0ZW0oc3RvcmFnZU5hbWUpO1xuICAgIHN0b3JhZ2VTdHJpbmcgPSBzdG9yYWdlU3RyaW5nIHx8ICd7fSc7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHN0b3JhZ2VTdHJpbmcpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVW5hYmxlIHRvIHBhcnNlIHN0b3JhZ2Ugc3RyaW5nOiAnICsgc3RvcmFnZU5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0b3JhZ2Uoc3RvcmFnZSkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgc3RvcmFnZVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHN0b3JhZ2UpO1xuICAgICAgd2Vic3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VOYW1lLCBzdG9yYWdlU3RyaW5nKTtcbiAgICB9IGNhdGNoKGUpIHtcbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ1VuYWJsZSB0byBzZXQgc3RvcmFnZTogJyArIHN0b3JhZ2VOYW1lKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhclN0b3JhZ2Uoa2V5KSB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHNldFN0b3JhZ2Uoe30pO1xuICAgIH1cbiAgICB2YXIgc3RvcmFnZSA9IGdldFN0b3JhZ2UoKTtcbiAgICBkZWxldGUgc3RvcmFnZVtrZXldO1xuICAgIHNldFN0b3JhZ2Uoc3RvcmFnZSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTdG9yYWdlKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGdldFN0b3JhZ2UoKTtcbiAgICBzdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgICBzZXRTdG9yYWdlKHN0b3JhZ2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRTdG9yYWdlOiBnZXRTdG9yYWdlLFxuICAgIHNldFN0b3JhZ2U6IHNldFN0b3JhZ2UsXG4gICAgY2xlYXJTdG9yYWdlOiBjbGVhclN0b3JhZ2UsXG4gICAgdXBkYXRlU3RvcmFnZTogdXBkYXRlU3RvcmFnZVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JhZ2VCdWlsZGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBUWVBFX1NUQVRJQ1NbdGFyZ2V0Q29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zcGVjaWFsUHJvcGVydHkgPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL3Byb3AtdHlwZXMtZXhhY3QgcmVwb3NpdG9yeS5cbi8vIEhvd2V2ZXIsIGluIG9yZGVyIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBhbmQgdG8gcmVtb3ZlIHNvbWUgZXh0cmEgc2FmZSBjaGVja3Ncbi8vIHRoZSBtb2R1bGUgd2FzIGZvcmtlZC5cbi8vIE9ubHkgZXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXMuXG52YXIgc3BlY2lhbFByb3BlcnR5ID0gXCJleGFjdC1wcm9wOiBcXHUyMDBCXCI7XG5leHBvcnRzLnNwZWNpYWxQcm9wZXJ0eSA9IHNwZWNpYWxQcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXhhY3RQcm9wKHByb3BUeXBlcykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gcHJvcFR5cGVzO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHByb3BUeXBlcywgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIHNwZWNpYWxQcm9wZXJ0eSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIHVuc3VwcG9ydGVkUHJvcHMgPSBPYmplY3Qua2V5cyhwcm9wcykuZmlsdGVyKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gIXByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbiAgICB9KTtcblxuICAgIGlmICh1bnN1cHBvcnRlZFByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGUgZm9sbG93aW5nIHByb3BlcnRpZXMgYXJlIG5vdCBzdXBwb3J0ZWQ6IFwiLmNvbmNhdCh1bnN1cHBvcnRlZFByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gXCJgXCIuY29uY2F0KHByb3AsIFwiYFwiKTtcbiAgICAgIH0pLmpvaW4oJywgJyksIFwiLiBQbGVhc2UgcmVtb3ZlIHRoZW0uXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSkpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBleGFjdFByb3A7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuLy8gRm9yayBvZiByZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUgd2l0aCBhZGRlZCBJRSAxMSBzdXBwb3J0XG4vLyBTaW1wbGlmaWVkIHBvbHlmaWxsIGZvciBJRSAxMSBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSmFtZXNNR3JlZW5lL0Z1bmN0aW9uLm5hbWUvYmxvYi81OGIzMTRkNGE5ODMxMTBjMzY4MmYxMjI4Zjg0NWQzOWNjY2ExODE3L0Z1bmN0aW9uLm5hbWUuanMjTDNcbnZhciBmbk5hbWVNYXRjaFJlZ2V4ID0gL15cXHMqZnVuY3Rpb24oPzpcXHN8XFxzKlxcL1xcKi4qXFwqXFwvXFxzKikrKFteKFxccy9dKilcXHMqLztcblxuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZuKSB7XG4gIHZhciBtYXRjaCA9IFwiXCIuY29uY2F0KGZuKS5tYXRjaChmbk5hbWVNYXRjaFJlZ2V4KTtcbiAgdmFyIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgcmV0dXJuIG5hbWUgfHwgJyc7XG59XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgaWYgKCFDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCBnZXRGdW5jdGlvbk5hbWUoQ29tcG9uZW50KSB8fCAnQ29tcG9uZW50Jztcbn1cblxudmFyIF9kZWZhdWx0ID0gZ2V0RGlzcGxheU5hbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgX2RlZmF1bHQgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGggPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZSA9IGV4cG9ydHMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUgPSBleHBvcnRzLnNoZWV0cyA9IGV4cG9ydHMuUnVsZUxpc3QgPSBleHBvcnRzLlNoZWV0c01hbmFnZXIgPSBleHBvcnRzLlNoZWV0c1JlZ2lzdHJ5ID0gZXhwb3J0cy50b0Nzc1ZhbHVlID0gZXhwb3J0cy5nZXREeW5hbWljU3R5bGVzID0gdW5kZWZpbmVkO1xuXG52YXIgX2dldER5bmFtaWNTdHlsZXMgPSByZXF1aXJlKCcuL3V0aWxzL2dldER5bmFtaWNTdHlsZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdnZXREeW5hbWljU3R5bGVzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0RHluYW1pY1N0eWxlcylbJ2RlZmF1bHQnXTtcbiAgfVxufSk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4vdXRpbHMvdG9Dc3NWYWx1ZScpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3RvQ3NzVmFsdWUnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzc1ZhbHVlKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9TaGVldHNSZWdpc3RyeSA9IHJlcXVpcmUoJy4vU2hlZXRzUmVnaXN0cnknKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdTaGVldHNSZWdpc3RyeScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c1JlZ2lzdHJ5KVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9TaGVldHNNYW5hZ2VyID0gcmVxdWlyZSgnLi9TaGVldHNNYW5hZ2VyJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU2hlZXRzTWFuYWdlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoZWV0c01hbmFnZXIpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi9SdWxlTGlzdCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ1J1bGVMaXN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZUxpc3QpWydkZWZhdWx0J107XG4gIH1cbn0pO1xuXG52YXIgX3NoZWV0cyA9IHJlcXVpcmUoJy4vc2hlZXRzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc2hlZXRzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hlZXRzKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKVsnZGVmYXVsdCddO1xuICB9XG59KTtcblxudmFyIF9Kc3MgPSByZXF1aXJlKCcuL0pzcycpO1xuXG52YXIgX0pzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Kc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBKc3MuXG4gKi9cbnZhciBjcmVhdGUgPSBleHBvcnRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShvcHRpb25zKSB7XG4gIHJldHVybiBuZXcgX0pzczJbJ2RlZmF1bHQnXShvcHRpb25zKTtcbn07XG5cbi8qKlxuICogQSBnbG9iYWwgSnNzIGluc3RhbmNlLlxuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSBjcmVhdGUoKTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogU2hlZXRzIHJlZ2lzdHJ5IHRvIGFjY2VzcyB0aGVtIGFsbCBhdCBvbmUgcGxhY2UuXG4gKi9cbnZhciBTaGVldHNSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzUmVnaXN0cnkoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNoZWV0c1JlZ2lzdHJ5KTtcblxuICAgIHRoaXMucmVnaXN0cnkgPSBbXTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTaGVldHNSZWdpc3RyeSwgW3tcbiAgICBrZXk6ICdhZGQnLFxuXG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoc2hlZXQpIHtcbiAgICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgICB2YXIgaW5kZXggPSBzaGVldC5vcHRpb25zLmluZGV4O1xuXG5cbiAgICAgIGlmIChyZWdpc3RyeS5pbmRleE9mKHNoZWV0KSAhPT0gLTEpIHJldHVybjtcblxuICAgICAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA9PT0gMCB8fCBpbmRleCA+PSB0aGlzLmluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgYSBwb3NpdGlvbi5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJ5W2ldLm9wdGlvbnMuaW5kZXggPiBpbmRleCkge1xuICAgICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHJlZ2lzdHJ5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXNldCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5yZWdpc3RyeSA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMucmVnaXN0cnkuaW5kZXhPZihzaGVldCk7XG4gICAgICB0aGlzLnJlZ2lzdHJ5LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5maWx0ZXIoZnVuY3Rpb24gKHNoZWV0KSB7XG4gICAgICAgIHJldHVybiBzaGVldC5hdHRhY2hlZDtcbiAgICAgIH0pLm1hcChmdW5jdGlvbiAoc2hlZXQpIHtcbiAgICAgICAgcmV0dXJuIHNoZWV0LnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5kZXgnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2hlZXRzUmVnaXN0cnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUgPSByZXF1aXJlKCdzeW1ib2wtb2JzZXJ2YWJsZScpO1xuXG52YXIgX3N5bWJvbE9ic2VydmFibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sT2JzZXJ2YWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZVtfc3ltYm9sT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXV0gJiYgdmFsdWUgPT09IHZhbHVlW19zeW1ib2xPYnNlcnZhYmxlMlsnZGVmYXVsdCddXSgpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbGlua1J1bGU7XG4vKipcbiAqIExpbmsgcnVsZSB3aXRoIENTU1N0eWxlUnVsZSBhbmQgbmVzdGVkIHJ1bGVzIHdpdGggY29ycmVzcG9uZGluZyBuZXN0ZWQgY3NzUnVsZXMgaWYgYm90aCBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGxpbmtSdWxlKHJ1bGUsIGNzc1J1bGUpIHtcbiAgcnVsZS5yZW5kZXJhYmxlID0gY3NzUnVsZTtcbiAgaWYgKHJ1bGUucnVsZXMgJiYgY3NzUnVsZS5jc3NSdWxlcykgcnVsZS5ydWxlcy5saW5rKGNzc1J1bGUuY3NzUnVsZXMpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQnKTtcblxudmFyIF9TdHlsZVNoZWV0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlU2hlZXQpO1xuXG52YXIgX21vZHVsZUlkID0gcmVxdWlyZSgnLi9tb2R1bGVJZCcpO1xuXG52YXIgX21vZHVsZUlkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vZHVsZUlkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgbWF4UnVsZXMgPSAxZTEwO1xuXG5cbnZhciBlbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuICB2YXIgZGVmYXVsdFByZWZpeCA9IGVudiA9PT0gJ3Byb2R1Y3Rpb24nID8gJ2MnIDogJyc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuIFJ1bGUgY291bnRlciBpcyBhdCAlcy4nLCBydWxlQ291bnRlcik7XG4gICAgfVxuXG4gICAgdmFyIHByZWZpeCA9IGRlZmF1bHRQcmVmaXg7XG4gICAgdmFyIGpzc0lkID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIHByZWZpeCA9IHNoZWV0Lm9wdGlvbnMuY2xhc3NOYW1lUHJlZml4IHx8IGRlZmF1bHRQcmVmaXg7XG4gICAgICBpZiAoc2hlZXQub3B0aW9ucy5qc3MuaWQgIT0gbnVsbCkganNzSWQgKz0gc2hlZXQub3B0aW9ucy5qc3MuaWQ7XG4gICAgfVxuXG4gICAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gJycgKyBwcmVmaXggKyBfbW9kdWxlSWQyWydkZWZhdWx0J10gKyBqc3NJZCArIHJ1bGVDb3VudGVyO1xuICAgIH1cblxuICAgIHJldHVybiBwcmVmaXggKyBydWxlLmtleSArICctJyArIF9tb2R1bGVJZDJbJ2RlZmF1bHQnXSArIChqc3NJZCAmJiAnLScgKyBqc3NJZCkgKyAnLScgKyBydWxlQ291bnRlcjtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX2xpbmtSdWxlID0gcmVxdWlyZSgnLi91dGlscy9saW5rUnVsZScpO1xuXG52YXIgX2xpbmtSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xpbmtSdWxlKTtcblxudmFyIF9SdWxlTGlzdCA9IHJlcXVpcmUoJy4vUnVsZUxpc3QnKTtcblxudmFyIF9SdWxlTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG52YXIgU3R5bGVTaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0eWxlU2hlZXQpO1xuXG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBfdGhpcy5ydWxlcy51cGRhdGUobmFtZSwgZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5ydWxlcy51cGRhdGUobmFtZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfTtcblxuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5saW5rZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNsYXNzZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXNcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IG9wdGlvbnMuUmVuZGVyZXIodGhpcyk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfUnVsZUxpc3QyWydkZWZhdWx0J10odGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9uYW1lIGluIHN0eWxlcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQoX25hbWUsIHN0eWxlc1tfbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCByZW5kZXJhYmxlIHRvIHRoZSByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVTaGVldCwgW3tcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHRoaXMuZGVwbG95KCk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgICAgaWYgKCF0aGlzLmxpbmtlZCAmJiB0aGlzLm9wdGlvbnMubGluaykgdGhpcy5saW5rKCk7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSByZW5kZXJhYmxlIGZyb20gcmVuZGVyIHRyZWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RldGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIGlmICghdGhpcy5hdHRhY2hlZCkgcmV0dXJuIHRoaXM7XG4gICAgICB0aGlzLnJlbmRlcmVyLmRldGFjaCgpO1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcnVsZSB0byB0aGUgY3VycmVudCBzdHlsZXNoZWV0LlxuICAgICAqIFdpbGwgaW5zZXJ0IGEgcnVsZSBhbHNvIGFmdGVyIHRoZSBzdHlsZXNoZWV0IGhhcyBiZWVuIHJlbmRlcmVkIGZpcnN0IHRpbWUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7XG5cbiAgICAgIC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAgIC8vIEluIG9yZGVyIHRvIHByZXNlcnZlIHRoZSByaWdodCBvcmRlciwgd2UgbmVlZCB0byBxdWV1ZSBhbGwgYC5hZGRSdWxlYCBjYWxscyxcbiAgICAgIC8vIHdoaWNoIGhhcHBlbiBhZnRlciB0aGUgZmlyc3QgYHJ1bGVzLmFkZCgpYCBjYWxsLlxuXG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcblxuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuXG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgICBpZiAoIXRoaXMuZGVwbG95ZWQpIHJldHVybiBydWxlO1xuICAgICAgICAvLyBEb24ndCBpbnNlcnQgcnVsZSBkaXJlY3RseSBpZiB0aGVyZSBpcyBubyBzdHJpbmdpZmllZCB2ZXJzaW9uIHlldC5cbiAgICAgICAgLy8gSXQgd2lsbCBiZSBpbnNlcnRlZCBhbGwgdG9nZXRoZXIgd2hlbiAuYXR0YWNoIGlzIGNhbGxlZC5cbiAgICAgICAgaWYgKHF1ZXVlKSBxdWV1ZS5wdXNoKHJ1bGUpO2Vsc2Uge1xuICAgICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS5mb3JFYWNoKHRoaXMuaW5zZXJ0UnVsZSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAgIC8vIFdlIHdpbGwgcmVkZXBsb3kgdGhlIHNoZWV0IG9uY2UgdXNlciB3aWxsIGF0dGFjaCBpdC5cbiAgICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgICB2YXIgcmVuZGVyYWJsZSA9IHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgIGlmIChyZW5kZXJhYmxlICYmIHRoaXMub3B0aW9ucy5saW5rKSAoMCwgX2xpbmtSdWxlMlsnZGVmYXVsdCddKShydWxlLCByZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIGFkZCBydWxlcy5cbiAgICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkUnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBhZGRlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgX25hbWUyIGluIHN0eWxlcykge1xuICAgICAgICBhZGRlZC5wdXNoKHRoaXMuYWRkUnVsZShfbmFtZTIsIHN0eWxlc1tfbmFtZTJdLCBvcHRpb25zKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgcnVsZSBieSBuYW1lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgcnVsZSBieSBuYW1lLlxuICAgICAqIFJldHVybnMgYHRydWVgOiBpZiBydWxlIGhhcyBiZWVuIGRlbGV0ZWQgZnJvbSB0aGUgRE9NLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUnVsZShuYW1lKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuXG4gICAgICBpZiAoIXJ1bGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgdGhpcy5ydWxlcy5yZW1vdmUocnVsZSk7XG5cbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmIHJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5kZWxldGVSdWxlKHJ1bGUucmVuZGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVwbG95IHB1cmUgQ1NTIHN0cmluZyB0byBhIHJlbmRlcmFibGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlcGxveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgICB0aGlzLmRlcGxveWVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExpbmsgcmVuZGVyYWJsZSBDU1MgcnVsZXMgZnJvbSBzaGVldCB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmcgbW9kZWxzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdsaW5rJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGluaygpIHtcbiAgICAgIHZhciBjc3NSdWxlcyA9IHRoaXMucmVuZGVyZXIuZ2V0UnVsZXMoKTtcblxuICAgICAgLy8gSXMgdW5kZWZpbmVkIHdoZW4gVmlydHVhbFJlbmRlcmVyIGlzIHVzZWQuXG4gICAgICBpZiAoY3NzUnVsZXMpIHRoaXMucnVsZXMubGluayhjc3NSdWxlcyk7XG4gICAgICB0aGlzLmxpbmtlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RvU3RyaW5nJyxcblxuXG4gICAgLyoqXG4gICAgICogQ29udmVydCBydWxlcyB0byBhIENTUyBzdHJpbmcuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVNoZWV0O1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTdHlsZVNoZWV0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9qc3NHbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtZ2xvYmFsXCIpKTtcblxudmFyIF9qc3NOZXN0ZWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtbmVzdGVkXCIpKTtcblxudmFyIF9qc3NDYW1lbENhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtY2FtZWwtY2FzZVwiKSk7XG5cbnZhciBfanNzRGVmYXVsdFVuaXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJqc3MtZGVmYXVsdC11bml0XCIpKTtcblxudmFyIF9qc3NWZW5kb3JQcmVmaXhlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy12ZW5kb3ItcHJlZml4ZXJcIikpO1xuXG52YXIgX2pzc1Byb3BzU29ydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImpzcy1wcm9wcy1zb3J0XCIpKTtcblxuLy8gU3Vic2V0IG9mIGpzcy1wcmVzZXQtZGVmYXVsdCB3aXRoIG9ubHkgdGhlIHBsdWdpbnMgdGhlIE1hdGVyaWFsLVVJIGNvbXBvbmVudHMgYXJlIHVzaW5nLlxuZnVuY3Rpb24ganNzUHJlc2V0KCkge1xuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFsoMCwgX2pzc0dsb2JhbC5kZWZhdWx0KSgpLCAoMCwgX2pzc05lc3RlZC5kZWZhdWx0KSgpLCAoMCwgX2pzc0NhbWVsQ2FzZS5kZWZhdWx0KSgpLCAoMCwgX2pzc0RlZmF1bHRVbml0LmRlZmF1bHQpKCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogKDAsIF9qc3NWZW5kb3JQcmVmaXhlci5kZWZhdWx0KSgpLCAoMCwgX2pzc1Byb3BzU29ydC5kZWZhdWx0KSgpXVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBqc3NQcmVzZXQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIGJhc2VDbGFzc2VzKTtcbiAgT2JqZWN0LmtleXMobmV3Q2xhc3NlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKENvbXBvbmVudCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGJhc2VDbGFzc2VzW2tleV0gfHwgIW5ld0NsYXNzZXNba2V5XSwgW1wiTWF0ZXJpYWwtVUk6IHRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3BlcnR5IGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoKDAsIF91dGlscy5nZXREaXNwbGF5TmFtZSkoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKCFuZXdDbGFzc2VzW2tleV0gfHwgdHlwZW9mIG5ld0NsYXNzZXNba2V5XSA9PT0gJ3N0cmluZycsIFtcIk1hdGVyaWFsLVVJOiB0aGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wZXJ0eSBpcyBub3QgdmFsaWQgZm9yIFwiLmNvbmNhdCgoMCwgX3V0aWxzLmdldERpc3BsYXlOYW1lKShDb21wb25lbnQpLCBcIi5cIiksIFwiWW91IG5lZWQgdG8gcHJvdmlkZSBhIG5vbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZjogXCIuY29uY2F0KG5ld0NsYXNzZXNba2V5XSwgXCIuXCIpXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgaWYgKG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgbmV4dENsYXNzZXNba2V5XSA9IFwiXCIuY29uY2F0KGJhc2VDbGFzc2VzW2tleV0sIFwiIFwiKS5jb25jYXQobmV3Q2xhc3Nlc1trZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV4dENsYXNzZXM7XG59XG5cbnZhciBfZGVmYXVsdCA9IG1lcmdlQ2xhc3NlcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyZWFrcG9pbnRzO1xuZXhwb3J0cy5rZXlzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxuLy8gU29ydGVkIEFTQyBieSBzaXplLiBUaGF0J3MgaW1wb3J0YW50LlxuLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxudmFyIGtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107IC8vIEtlZXAgaW4gbWluZCB0aGF0IEBtZWRpYSBpcyBpbmNsdXNpdmUgYnkgdGhlIENTUyBzcGVjaWZpY2F0aW9uLlxuXG5leHBvcnRzLmtleXMgPSBrZXlzO1xuXG5mdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICB2YXIgX2JyZWFrcG9pbnRzJHZhbHVlcyA9IGJyZWFrcG9pbnRzLnZhbHVlcyxcbiAgICAgIHZhbHVlcyA9IF9icmVha3BvaW50cyR2YWx1ZXMgPT09IHZvaWQgMCA/IHtcbiAgICB4czogMCxcbiAgICBzbTogNjAwLFxuICAgIG1kOiA5NjAsXG4gICAgbGc6IDEyODAsXG4gICAgeGw6IDE5MjBcbiAgfSA6IF9icmVha3BvaW50cyR2YWx1ZXMsXG4gICAgICBfYnJlYWtwb2ludHMkdW5pdCA9IGJyZWFrcG9pbnRzLnVuaXQsXG4gICAgICB1bml0ID0gX2JyZWFrcG9pbnRzJHVuaXQgPT09IHZvaWQgMCA/ICdweCcgOiBfYnJlYWtwb2ludHMkdW5pdCxcbiAgICAgIF9icmVha3BvaW50cyRzdGVwID0gYnJlYWtwb2ludHMuc3RlcCxcbiAgICAgIHN0ZXAgPSBfYnJlYWtwb2ludHMkc3RlcCA9PT0gdm9pZCAwID8gNSA6IF9icmVha3BvaW50cyRzdGVwLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpICsgMTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHZhbHVlc1tzdGFydF0pLmNvbmNhdCh1bml0LCBcIikgYW5kIFwiKSArIFwiKG1heC13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleXNbZW5kSW5kZXhdXSAtIHN0ZXAgLyAxMDApLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBvbmx5KGtleSkge1xuICAgIHJldHVybiBiZXR3ZWVuKGtleSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBrZXlzOiBrZXlzLFxuICAgIHZhbHVlczogdmFsdWVzLFxuICAgIHVwOiB1cCxcbiAgICBkb3duOiBkb3duLFxuICAgIGJldHdlZW46IGJldHdlZW4sXG4gICAgb25seTogb25seSxcbiAgICB3aWR0aDogd2lkdGhcbiAgfSwgb3RoZXIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcblxuZnVuY3Rpb24gc2FmZVByZWZpeChjbGFzc05hbWVQcmVmaXgpIHtcbiAgdmFyIHByZWZpeCA9IFN0cmluZyhjbGFzc05hbWVQcmVmaXgpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkocHJlZml4Lmxlbmd0aCA8IDI1NiwgXCJNYXRlcmlhbC1VSTogdGhlIGNsYXNzIG5hbWUgcHJlZml4IGlzIHRvbyBsb25nOiBcIi5jb25jYXQocHJlZml4LCBcIi5cIikpIDogdm9pZCAwOyAvLyBTYW5pdGl6ZSB0aGUgc3RyaW5nIGFzIHdpbGwgYmUgdXNlZCB0byBwcmVmaXggdGhlIGdlbmVyYXRlZCBjbGFzcyBuYW1lLlxuXG4gIHJldHVybiBwcmVmaXgucmVwbGFjZShlc2NhcGVSZWdleCwgJy0nKTtcbn0gLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIGdlbmVyYXRlcyB1bmlxdWUgY2xhc3MgbmFtZXMgYmFzZWQgb24gY291bnRlcnMuXG4vLyBXaGVuIG5ldyBnZW5lcmF0b3IgZnVuY3Rpb24gaXMgY3JlYXRlZCwgcnVsZSBjb3VudGVyIGlzIHJlc2V0LlxuLy8gV2UgbmVlZCB0byByZXNldCB0aGUgcnVsZSBjb3VudGVyIGZvciBTU1IgZm9yIGVhY2ggcmVxdWVzdC5cbi8vXG4vLyBJdCdzIGluc3BpcmVkIGJ5XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvYmxvYi80ZTZhMDVkZDNmN2I2NTcyZmRkM2FiMjE2ODYxZDllNDQ2YzIwMzMxL3NyYy91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZS5qc1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBfb3B0aW9ucyRkYW5nZXJvdXNseVUgPSBvcHRpb25zLmRhbmdlcm91c2x5VXNlR2xvYmFsQ1NTLFxuICAgICAgZGFuZ2Vyb3VzbHlVc2VHbG9iYWxDU1MgPSBfb3B0aW9ucyRkYW5nZXJvdXNseVUgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGFuZ2Vyb3VzbHlVLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHJ1bGVDb3VudGVyID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgcnVsZUNvdW50ZXIgKz0gMTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkocnVsZUNvdW50ZXIgPCAxZTEwLCBbJ01hdGVyaWFsLVVJOiB5b3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKSA6IHZvaWQgMDtcblxuICAgIGlmIChkYW5nZXJvdXNseVVzZUdsb2JhbENTUyAmJiBzdHlsZVNoZWV0ICYmIHN0eWxlU2hlZXQub3B0aW9ucy5uYW1lKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoc2FmZVByZWZpeChzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZSksIFwiLVwiKS5jb25jYXQocnVsZS5rZXkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KHNlZWQpLmNvbmNhdChydWxlQ291bnRlcik7XG4gICAgfSAvLyBIZWxwIHdpdGggZGVidWdnYWJpbGl0eS5cblxuXG4gICAgaWYgKHN0eWxlU2hlZXQgJiYgc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHNhZmVQcmVmaXgoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCksIFwiLVwiKS5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoc2VlZCkuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQocnVsZS5rZXksIFwiLVwiKS5jb25jYXQoc2VlZCkuY29uY2F0KHJ1bGVDb3VudGVyKTtcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CdXR0b25CYXNlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0J1dHRvbkJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvbkJhc2VcIikpOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAvLyBDYWxsIHRoaXMuY29uc3RydWN0b3IuZ0RTRlAgdG8gc3VwcG9ydCBzdWItY2xhc3Nlcy5cbiAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHModGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuXG4gIC8vIFVzZSB0aGUgc2V0U3RhdGUoKSB1cGRhdGVyIHRvIGVuc3VyZSBzdGF0ZSBpc24ndCBzdGFsZSBpbiBjZXJ0YWluIGVkZ2UgY2FzZXMuXG4gIGZ1bmN0aW9uIHVwZGF0ZXIocHJldlN0YXRlKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBudWxsO1xuICB9XG4gIC8vIEJpbmRpbmcgXCJ0aGlzXCIgaXMgaW1wb3J0YW50IGZvciBzaGFsbG93IHJlbmRlcmVyIHN1cHBvcnQuXG4gIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICB0cnkge1xuICAgIHZhciBwcmV2UHJvcHMgPSB0aGlzLnByb3BzO1xuICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMucHJvcHMgPSBuZXh0UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7XG4gICAgdGhpcy5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdCA9IHRoaXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGVcbiAgICApO1xuICB9IGZpbmFsbHkge1xuICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7XG4gICAgdGhpcy5zdGF0ZSA9IHByZXZTdGF0ZTtcbiAgfVxufVxuXG4vLyBSZWFjdCBtYXkgd2FybiBhYm91dCBjV00vY1dSUC9jV1UgbWV0aG9kcyBiZWluZyBkZXByZWNhdGVkLlxuLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuXG5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgPSB0cnVlO1xuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTtcblxuZnVuY3Rpb24gcG9seWZpbGwoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuXG4gIGlmICghcHJvdG90eXBlIHx8ICFwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpO1xuICB9XG5cbiAgaWYgKFxuICAgIHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHByb3RvdHlwZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgLy8gSWYgbmV3IGNvbXBvbmVudCBBUElzIGFyZSBkZWZpbmVkLCBcInVuc2FmZVwiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLlxuICAvLyBFcnJvciBpZiBhbnkgb2YgdGhlc2UgbGlmZWN5Y2xlcyBhcmUgcHJlc2VudCxcbiAgLy8gQmVjYXVzZSB0aGV5IHdvdWxkIHdvcmsgZGlmZmVyZW50bHkgYmV0d2VlbiBvbGRlciBhbmQgbmV3ZXIgKDE2LjMrKSB2ZXJzaW9ucyBvZiBSZWFjdC5cbiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gIHZhciBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gbnVsbDtcbiAgdmFyIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSBudWxsO1xuICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnY29tcG9uZW50V2lsbE1vdW50JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ2NvbXBvbmVudFdpbGxVcGRhdGUnO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgfVxuICBpZiAoXG4gICAgZm91bmRXaWxsTW91bnROYW1lICE9PSBudWxsIHx8XG4gICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCB8fFxuICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGxcbiAgKSB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWU7XG4gICAgdmFyIG5ld0FwaU5hbWUgPVxuICAgICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAnZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKCknXG4gICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknO1xuXG4gICAgdGhyb3cgRXJyb3IoXG4gICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXFxuXFxuJyArXG4gICAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgICAnIHVzZXMgJyArXG4gICAgICAgIG5ld0FwaU5hbWUgK1xuICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArXG4gICAgICAgIChmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyAnXFxuICAnICsgZm91bmRXaWxsTW91bnROYW1lIDogJycpICtcbiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGxcbiAgICAgICAgICA/ICdcXG4gICcgKyBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lXG4gICAgICAgICAgOiAnJykgK1xuICAgICAgICAoZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/ICdcXG4gICcgKyBmb3VuZFdpbGxVcGRhdGVOYW1lIDogJycpICtcbiAgICAgICAgJ1xcblxcblRoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hc3luYy1jb21wb25lbnQtbGlmZWN5Y2xlLWhvb2tzJ1xuICAgICk7XG4gIH1cblxuICAvLyBSZWFjdCA8PSAxNi4yIGRvZXMgbm90IHN1cHBvcnQgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuXG4gIC8vIE5ld2VyIHZlcnNpb25zIG9mIFJlYWN0IHdpbGwgaWdub3JlIHRoZXNlIGxpZmVjeWNsZXMgaWYgZ0RTRlAgZXhpc3RzLlxuICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50O1xuICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcztcbiAgfVxuXG4gIC8vIFJlYWN0IDw9IDE2LjIgZG9lcyBub3Qgc3VwcG9ydCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS5cbiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dVIHRvIGludm9rZSB0aGUgbmV3IGxpZmVjeWNsZS5cbiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuXG4gIGlmICh0eXBlb2YgcHJvdG90eXBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW5ub3QgcG9seWZpbGwgZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoKSBmb3IgY29tcG9uZW50cyB0aGF0IGRvIG5vdCBkZWZpbmUgY29tcG9uZW50RGlkVXBkYXRlKCkgb24gdGhlIHByb3RvdHlwZSdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBjb21wb25lbnRXaWxsVXBkYXRlO1xuXG4gICAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IHByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU7XG5cbiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoXG4gICAgICBwcmV2UHJvcHMsXG4gICAgICBwcmV2U3RhdGUsXG4gICAgICBtYXliZVNuYXBzaG90XG4gICAgKSB7XG4gICAgICAvLyAxNi4zKyB3aWxsIG5vdCBleGVjdXRlIG91ciB3aWxsLXVwZGF0ZSBtZXRob2Q7XG4gICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCB2YWx1ZSB0byBkaWQtdXBkYXRlIHRob3VnaC5cbiAgICAgIC8vIE9sZGVyIHZlcnNpb25zIHdpbGwgcmVxdWlyZSBvdXIgcG9seWZpbGxlZCB3aWxsLXVwZGF0ZSB2YWx1ZS5cbiAgICAgIC8vIFdlIG5lZWQgdG8gaGFuZGxlIGJvdGggY2FzZXMsIGJ1dCBjYW4ndCBqdXN0IGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgXCJtYXliZVNuYXBzaG90XCIsXG4gICAgICAvLyBCZWNhdXNlIGZvciA8PSAxNS54IHZlcnNpb25zIHRoaXMgbWlnaHQgYmUgYSBcInByZXZDb250ZXh0XCIgb2JqZWN0LlxuICAgICAgLy8gV2UgYWxzbyBjYW4ndCBqdXN0IGNoZWNrIFwiX19yZWFjdEludGVybmFsU25hcHNob3RcIixcbiAgICAgIC8vIEJlY2F1c2UgZ2V0LXNuYXBzaG90IG1pZ2h0IHJldHVybiBhIGZhbHN5IHZhbHVlLlxuICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuXG4gICAgICB2YXIgc25hcHNob3QgPSB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZ1xuICAgICAgICA/IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RcbiAgICAgICAgOiBtYXliZVNuYXBzaG90O1xuXG4gICAgICBjb21wb25lbnREaWRVcGRhdGUuY2FsbCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgc25hcHNob3QpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gQ29tcG9uZW50O1xufVxuXG5leHBvcnQgeyBwb2x5ZmlsbCB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTW9kYWwuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb2RhbE1hbmFnZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01vZGFsTWFuYWdlci5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Nb2RhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxcIikpO1xuXG52YXIgX01vZGFsTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTW9kYWxNYW5hZ2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfc3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9zdHlsZVwiKSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX2lzT3ZlcmZsb3dpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzT3ZlcmZsb3dpbmdcIikpO1xuXG52YXIgX21hbmFnZUFyaWFIaWRkZW4gPSByZXF1aXJlKFwiLi9tYW5hZ2VBcmlhSGlkZGVuXCIpO1xuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihkYXRhLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGRhdGEuc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gZ2V0UGFkZGluZ1JpZ2h0KG5vZGUpIHtcbiAgcmV0dXJuIHBhcnNlSW50KCgwLCBfc3R5bGUuZGVmYXVsdCkobm9kZSwgJ3BhZGRpbmdSaWdodCcpIHx8IDAsIDEwKTtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGFpbmVyU3R5bGUoZGF0YSwgY29udGFpbmVyKSB7XG4gIHZhciBzdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgfTsgLy8gV2UgYXJlIG9ubHkgaW50ZXJlc3RlZCBpbiB0aGUgYWN0dWFsIGBzdHlsZWAgaGVyZSBiZWNhdXNlIHdlIHdpbGwgb3ZlcnJpZGUgaXQuXG5cbiAgZGF0YS5zdHlsZSA9IHtcbiAgICBvdmVyZmxvdzogY29udGFpbmVyLnN0eWxlLm92ZXJmbG93LFxuICAgIHBhZGRpbmdSaWdodDogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodFxuICB9O1xuXG4gIGlmIChkYXRhLm92ZXJmbG93aW5nKSB7XG4gICAgdmFyIHNjcm9sbGJhclNpemUgPSAoMCwgX3Njcm9sbGJhclNpemUuZGVmYXVsdCkoKTsgLy8gVXNlIGNvbXB1dGVkIHN0eWxlLCBoZXJlIHRvIGdldCB0aGUgcmVhbCBwYWRkaW5nIHRvIGFkZCBvdXIgc2Nyb2xsYmFyIHdpZHRoLlxuXG4gICAgc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgIHZhciBmaXhlZE5vZGVzID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKGNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaXhlZE5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gZ2V0UGFkZGluZ1JpZ2h0KGZpeGVkTm9kZXNbaV0pO1xuICAgICAgZGF0YS5wcmV2UGFkZGluZ3MucHVzaChwYWRkaW5nUmlnaHQpO1xuICAgICAgZml4ZWROb2Rlc1tpXS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiLmNvbmNhdChwYWRkaW5nUmlnaHQgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjb250YWluZXIuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb250YWluZXJTdHlsZShkYXRhKSB7XG4gIE9iamVjdC5rZXlzKGRhdGEuc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGRhdGEuY29udGFpbmVyLnN0eWxlW2tleV0gPSBkYXRhLnN0eWxlW2tleV07XG4gIH0pO1xuICB2YXIgZml4ZWROb2RlcyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShkYXRhLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLm11aS1maXhlZCcpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZml4ZWROb2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGZpeGVkTm9kZXNbaV0uc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCJcIi5jb25jYXQoZGF0YS5wcmV2UGFkZGluZ3NbaV0sIFwicHhcIik7XG4gIH1cbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdtZW50IGZvciBjb250YWluZXJzIGFuZCB0aGUgbW9kYWxzIGluIHRob3NlIGNvbnRhaW5lcnMuXG4gKiBTaW1wbGlmaWVkLCBidXQgaW5zcGlyZWQgYnkgcmVhY3Qtb3ZlcmxheSdzIE1vZGFsTWFuYWdlciBjbGFzcy5cbiAqIFVzZWQgYnkgdGhlIE1vZGFsIHRvIGVuc3VyZSBwcm9wZXIgc3R5bGluZyBvZiBjb250YWluZXJzLlxuICovXG5cblxudmFyIE1vZGFsTWFuYWdlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1vZGFsTWFuYWdlcigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTW9kYWxNYW5hZ2VyKTtcbiAgICB2YXIgX29wdGlvbnMkaGlkZVNpYmxpbmdOID0gb3B0aW9ucy5oaWRlU2libGluZ05vZGVzLFxuICAgICAgICBoaWRlU2libGluZ05vZGVzID0gX29wdGlvbnMkaGlkZVNpYmxpbmdOID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkaGlkZVNpYmxpbmdOLFxuICAgICAgICBfb3B0aW9ucyRoYW5kbGVDb250YWkgPSBvcHRpb25zLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93LFxuICAgICAgICBoYW5kbGVDb250YWluZXJPdmVyZmxvdyA9IF9vcHRpb25zJGhhbmRsZUNvbnRhaSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGhhbmRsZUNvbnRhaTtcbiAgICB0aGlzLmhpZGVTaWJsaW5nTm9kZXMgPSBoaWRlU2libGluZ05vZGVzO1xuICAgIHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cgPSBoYW5kbGVDb250YWluZXJPdmVyZmxvdzsgLy8gdGhpcy5tb2RhbHNbbW9kYWxJZHhdID0gbW9kYWxcblxuICAgIHRoaXMubW9kYWxzID0gW107IC8vIHRoaXMuZGF0YVtjb250YWluZXJJZHhdID0ge1xuICAgIC8vICAgbW9kYWxzOiBbXSxcbiAgICAvLyAgIGNvbnRhaW5lcixcbiAgICAvLyAgIG92ZXJmbG93aW5nLFxuICAgIC8vICAgcHJldlBhZGRpbmdzLFxuICAgIC8vIH1cblxuICAgIHRoaXMuZGF0YSA9IFtdO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTW9kYWxNYW5hZ2VyLCBbe1xuICAgIGtleTogXCJhZGRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG1vZGFsLCBjb250YWluZXIpIHtcbiAgICAgIHZhciBtb2RhbElkeCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJZHggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBtb2RhbElkeDtcbiAgICAgIH1cblxuICAgICAgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW4pKG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmhpZGVTaWJsaW5nTm9kZXMpIHtcbiAgICAgICAgKDAsIF9tYW5hZ2VBcmlhSGlkZGVuLmFyaWFIaWRkZW5TaWJsaW5ncykoY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRhaW5lcklkeCA9IGZpbmRJbmRleE9mKHRoaXMuZGF0YSwgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uY29udGFpbmVyID09PSBjb250YWluZXI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGNvbnRhaW5lcklkeCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5kYXRhW2NvbnRhaW5lcklkeF0ubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBtb2RhbHM6IFttb2RhbF0sXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBvdmVyZmxvd2luZzogKDAsIF9pc092ZXJmbG93aW5nLmRlZmF1bHQpKGNvbnRhaW5lciksXG4gICAgICAgIHByZXZQYWRkaW5nczogW11cbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmhhbmRsZUNvbnRhaW5lck92ZXJmbG93KSB7XG4gICAgICAgIHNldENvbnRhaW5lclN0eWxlKGRhdGEsIGNvbnRhaW5lcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGF0YS5wdXNoKGRhdGEpO1xuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgICB2YXIgbW9kYWxJZHggPSB0aGlzLm1vZGFscy5pbmRleE9mKG1vZGFsKTtcblxuICAgICAgaWYgKG1vZGFsSWR4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gbW9kYWxJZHg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJZHggPSBmaW5kSW5kZXhPZih0aGlzLmRhdGEsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm1vZGFscy5pbmRleE9mKG1vZGFsKSAhPT0gLTE7XG4gICAgICB9KTtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhW2NvbnRhaW5lcklkeF07XG4gICAgICBkYXRhLm1vZGFscy5zcGxpY2UoZGF0YS5tb2RhbHMuaW5kZXhPZihtb2RhbCksIDEpO1xuICAgICAgdGhpcy5tb2RhbHMuc3BsaWNlKG1vZGFsSWR4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICAgIGlmIChkYXRhLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlQ29udGFpbmVyT3ZlcmZsb3cpIHtcbiAgICAgICAgICByZW1vdmVDb250YWluZXJTdHlsZShkYXRhKTtcbiAgICAgICAgfSAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG5cblxuICAgICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgICAoMCwgX21hbmFnZUFyaWFIaWRkZW4uYXJpYUhpZGRlbikobW9kYWwubW9kYWxSZWYsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuU2libGluZ3MpKGRhdGEuY29udGFpbmVyLCBtb2RhbC5tb3VudE5vZGUsIG1vZGFsLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEuc3BsaWNlKGNvbnRhaW5lcklkeCwgMSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGlkZVNpYmxpbmdOb2Rlcykge1xuICAgICAgICAvLyBPdGhlcndpc2UgbWFrZSBzdXJlIHRoZSBuZXh0IHRvcCBtb2RhbCBpcyB2aXNpYmxlIHRvIGEgc2NyZWFuIHJlYWRlci5cbiAgICAgICAgdmFyIG5leHRUb3AgPSBkYXRhLm1vZGFsc1tkYXRhLm1vZGFscy5sZW5ndGggLSAxXTsgLy8gYXMgc29vbiBhcyBhIG1vZGFsIGlzIGFkZGluZyBpdHMgbW9kYWxSZWYgaXMgdW5kZWZpbmVkLiBpdCBjYW4ndCBzZXRcbiAgICAgICAgLy8gYXJpYS1oaWRkZW4gYmVjYXVzZSB0aGUgZG9tIGVsZW1lbnQgZG9lc24ndCBleGlzdCBlaXRoZXJcbiAgICAgICAgLy8gd2hlbiBtb2RhbCB3YXMgdW5tb3VudGVkIGJlZm9yZSBtb2RhbFJlZiBnZXRzIG51bGxcblxuICAgICAgICBpZiAobmV4dFRvcC5tb2RhbFJlZikge1xuICAgICAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuKShuZXh0VG9wLm1vZGFsUmVmLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vZGFsSWR4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1RvcE1vZGFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVG9wTW9kYWwobW9kYWwpIHtcbiAgICAgIHJldHVybiAhIXRoaXMubW9kYWxzLmxlbmd0aCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBNb2RhbE1hbmFnZXI7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IE1vZGFsTWFuYWdlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsaXplU3R5bGVOYW1lO1xuXG52YXIgX2NhbWVsaXplID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jYW1lbGl6ZVwiKSk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi8yYWViOGEyYTZiZWIwMDYxN2E0MjE3ZjdmODI4NDkyNGZhMmFkODE5L3NyYy92ZW5kb3IvY29yZS9jYW1lbGl6ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2NhbWVsaXplLmRlZmF1bHQpKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9kZWZhdWx0ID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNjcm9sbGJhclNpemU7XG5cbnZhciBfaW5ET00gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2luRE9NXCIpKTtcblxudmFyIHNpemU7XG5cbmZ1bmN0aW9uIHNjcm9sbGJhclNpemUocmVjYWxjKSB7XG4gIGlmICghc2l6ZSAmJiBzaXplICE9PSAwIHx8IHJlY2FsYykge1xuICAgIGlmIChfaW5ET00uZGVmYXVsdCkge1xuICAgICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHNjcm9sbERpdi5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUud2lkdGggPSAnNTBweCc7XG4gICAgICBzY3JvbGxEaXYuc3R5bGUuaGVpZ2h0ID0gJzUwcHgnO1xuICAgICAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICBzaXplID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzaXplO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcmlhSGlkZGVuID0gYXJpYUhpZGRlbjtcbmV4cG9ydHMuYXJpYUhpZGRlblNpYmxpbmdzID0gYXJpYUhpZGRlblNpYmxpbmdzO1xudmFyIEJMQUNLTElTVCA9IFsndGVtcGxhdGUnLCAnc2NyaXB0JywgJ3N0eWxlJ107XG5cbmZ1bmN0aW9uIGlzSGlkYWJsZShub2RlKSB7XG4gIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxICYmIEJMQUNLTElTVC5pbmRleE9mKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTE7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnQsIGN1cnJlbnROb2RlLCBjYWxsYmFjaykge1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50LCBjdXJyZW50Tm9kZV07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgaXNIaWRhYmxlKG5vZGUpKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vdW50Tm9kZSwgY3VycmVudE5vZGUsIHNob3cpIHtcbiAgc2libGluZ3MoY29udGFpbmVyLCBtb3VudE5vZGUsIGN1cnJlbnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpO1xuICB9KTtcbn0iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xudmFyIFRhYmxlQ29udGV4dCA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQoKTtcblxudmFyIF9kZWZhdWx0ID0gVGFibGVDb250ZXh0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3B1cmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWNvbXBvc2UvcHVyZVwiKSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL1N2Z0ljb25cIikpO1xuXG52YXIgX3JlZiA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgZDogXCJNNyAxMGw1IDUgNS01elwiXG59KTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG52YXIgQXJyb3dEcm9wRG93biA9IGZ1bmN0aW9uIEFycm93RHJvcERvd24ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1N2Z0ljb24uZGVmYXVsdCwgcHJvcHMsIF9yZWYpO1xufTtcblxuQXJyb3dEcm9wRG93biA9ICgwLCBfcHVyZS5kZWZhdWx0KShBcnJvd0Ryb3BEb3duKTtcbkFycm93RHJvcERvd24ubXVpTmFtZSA9ICdTdmdJY29uJztcbnZhciBfZGVmYXVsdCA9IEFycm93RHJvcERvd247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc2V0U3RhdGljID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zZXRTdGF0aWNcIikpO1xuXG52YXIgc2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBzZXREaXNwbGF5TmFtZShkaXNwbGF5TmFtZSkge1xuICByZXR1cm4gKDAsIF9zZXRTdGF0aWMuZGVmYXVsdCkoJ2Rpc3BsYXlOYW1lJywgZGlzcGxheU5hbWUpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gc2V0RGlzcGxheU5hbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZ2V0RGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2dldERpc3BsYXlOYW1lXCIpKTtcblxudmFyIHdyYXBEaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCBob2NOYW1lKSB7XG4gIHJldHVybiBob2NOYW1lICsgXCIoXCIgKyAoMCwgX2dldERpc3BsYXlOYW1lLmRlZmF1bHQpKEJhc2VDb21wb25lbnQpICsgXCIpXCI7XG59O1xuXG52YXIgX2RlZmF1bHQgPSB3cmFwRGlzcGxheU5hbWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBOYXRpdmVTZWxlY3RJbnB1dChwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBJY29uQ29tcG9uZW50ID0gcHJvcHMuSWNvbkNvbXBvbmVudCxcbiAgICAgIGlucHV0UmVmID0gcHJvcHMuaW5wdXRSZWYsXG4gICAgICBuYW1lID0gcHJvcHMubmFtZSxcbiAgICAgIG9uQ2hhbmdlID0gcHJvcHMub25DaGFuZ2UsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcIm5hbWVcIiwgXCJvbkNoYW5nZVwiLCBcInZhbHVlXCIsIFwidmFyaWFudFwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuc2VsZWN0LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmlsbGVkLCB2YXJpYW50ID09PSAnZmlsbGVkJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm91dGxpbmVkLCB2YXJpYW50ID09PSAnb3V0bGluZWQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIG9uQ2hhbmdlOiBvbkNoYW5nZSxcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgcmVmOiBpbnB1dFJlZlxuICB9LCBvdGhlciksIGNoaWxkcmVuKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChJY29uQ29tcG9uZW50LCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmljb25cbiAgfSkpO1xufVxuXG5OYXRpdmVTZWxlY3RJbnB1dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHNlbGVjdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogTmFtZSBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIG9yIGhpZGRlbiBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IE5hdGl2ZVNlbGVjdElucHV0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGU6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgICAnJCR0eXBlb2YnOiB0cnVlLFxuICAgIHJlbmRlcjogdHJ1ZVxufTtcblxudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW1JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRhcmdldFN0YXRpY3MgPSBUWVBFX1NUQVRJQ1NbdGFyZ2V0Q29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xuICAgICAgICB2YXIgc291cmNlU3RhdGljcyA9IFRZUEVfU1RBVElDU1tzb3VyY2VDb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgeyBSU0FBIH0gZnJvbSAncmVkdXgtYXBpLW1pZGRsZXdhcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBzdG9yZSA9PiBuZXh0ID0+IGFjdGlvbiA9PiB7XG4gICAgY29uc3QgcnNhYSA9IGFjdGlvbltSU0FBXTtcblxuICAgIC8vIENoZWNrIGlmIHRoaXMgYWN0aW9uIGlzIGEgcmVkdXgtYXBpLW1pZGRsZXdhcmUgYWN0aW9uLlxuICAgIGlmIChyc2FhKSB7XG4gICAgICAgIC8vIEluamVjdCB0aGUgQXV0aG9yaXphdGlvbiBoZWFkZXIgZnJvbSBsb2NhbFN0b3JhZ2UuXG4gICAgICAgIHJzYWEuaGVhZGVycyA9IHtcbiAgICAgICAgICAgIC4uLnJzYWEuaGVhZGVycyxcbiAgICAgICAgICAgIC4uLnsgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgc3RvcmUuZ2V0U3RhdGUoKS5hdXRoLmlkVG9rZW4gfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFBhc3MgdGhlIEZTQSB0byB0aGUgbmV4dCBhY3Rpb24uXG4gICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbn07XG4iLCIoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gKG1vZHVsZVsnZXhwb3J0cyddID0gZmFjdG9yeSgpKSA6XG5cdFx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddID8gZGVmaW5lKGZhY3RvcnkoKSkgOlxuXHRcdFx0KHdpbmRvd1snc3R5bGlzUnVsZVNoZWV0J10gPSBmYWN0b3J5KCkpXG59KGZ1bmN0aW9uICgpIHtcblxuXHQndXNlIHN0cmljdCdcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluc2VydFJ1bGUpIHtcblx0XHR2YXIgZGVsaW1pdGVyID0gJy8qfCovJ1xuXHRcdHZhciBuZWVkbGUgPSBkZWxpbWl0ZXIrJ30nXG5cblx0XHRmdW5jdGlvbiB0b1NoZWV0IChibG9jaykge1xuXHRcdFx0aWYgKGJsb2NrKVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGluc2VydFJ1bGUoYmxvY2sgKyAnfScpXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJ1bGVTaGVldCAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzLCBwYXJlbnRzLCBsaW5lLCBjb2x1bW4sIGxlbmd0aCwgbnMsIGRlcHRoLCBhdCkge1xuXHRcdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRcdC8vIHByb3BlcnR5XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBAaW1wb3J0XG5cdFx0XHRcdFx0aWYgKGRlcHRoID09PSAwICYmIGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gNjQpXG5cdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShjb250ZW50Kyc7JyksICcnXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gc2VsZWN0b3Jcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGlmIChucyA9PT0gMClcblx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgZGVsaW1pdGVyXG5cdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0Ly8gYXQtcnVsZVxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c3dpdGNoIChucykge1xuXHRcdFx0XHRcdFx0Ly8gQGZvbnQtZmFjZSwgQHBhZ2Vcblx0XHRcdFx0XHRcdGNhc2UgMTAyOlxuXHRcdFx0XHRcdFx0Y2FzZSAxMTI6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnNlcnRSdWxlKHNlbGVjdG9yc1swXStjb250ZW50KSwgJydcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlIC0yOlxuXHRcdFx0XHRcdGNvbnRlbnQuc3BsaXQobmVlZGxlKS5mb3JFYWNoKHRvU2hlZXQpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KSlcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRHJhd2VyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0RyYXdlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRHJhd2VyXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0U3ViaGVhZGVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RTdWJoZWFkZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0xpc3RTdWJoZWFkZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0xpc3RJdGVtLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RJdGVtID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0SXRlbVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTGlzdEl0ZW1JY29uLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0xpc3RJdGVtSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdEl0ZW1JY29uXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9MaXN0SXRlbVRleHQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfTGlzdEl0ZW1UZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MaXN0SXRlbVRleHRcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NpcmN1bGFyUHJvZ3Jlc3MuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfQ2lyY3VsYXJQcm9ncmVzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2lyY3VsYXJQcm9ncmVzc1wiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gYmx1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1RhYmxlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfVGFibGVIZWFkLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1RhYmxlSGVhZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVGFibGVIZWFkXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9UYWJsZUJvZHkuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVGFibGVCb2R5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZUJvZHlcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Nzc0Jhc2VsaW5lLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Nzc0Jhc2VsaW5lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Dc3NCYXNlbGluZVwiKSk7IiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgcmVhY3RQcm9wc1JlZ2V4ID0gL14oKGNoaWxkcmVufGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfGtleXxyZWZ8YXV0b0ZvY3VzfGRlZmF1bHRWYWx1ZXxkZWZhdWx0Q2hlY2tlZHxpbm5lckhUTUx8c3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nfHZhbHVlTGlua3xhY2NlcHR8YWNjZXB0Q2hhcnNldHxhY2Nlc3NLZXl8YWN0aW9ufGFsbG93fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8Zm9ybXxmb3JtQWN0aW9ufGZvcm1FbmNUeXBlfGZvcm1NZXRob2R8Zm9ybU5vVmFsaWRhdGV8Zm9ybVRhcmdldHxmcmFtZUJvcmRlcnxoZWFkZXJzfGhlaWdodHxoaWRkZW58aGlnaHxocmVmfGhyZWZMYW5nfGh0bWxGb3J8aHR0cEVxdWl2fGlkfGlucHV0TW9kZXxpbnRlZ3JpdHl8aXN8a2V5UGFyYW1zfGtleVR5cGV8a2luZHxsYWJlbHxsYW5nfGxpc3R8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHlwZXx1c2VNYXB8dmFsdWV8d2lkdGh8d21vZGV8d3JhcHxhYm91dHxkYXRhdHlwZXxpbmxpc3R8cHJlZml4fHByb3BlcnR5fHJlc291cmNlfHR5cGVvZnx2b2NhYnxhdXRvQ2FwaXRhbGl6ZXxhdXRvQ29ycmVjdHxhdXRvU2F2ZXxjb2xvcnxpdGVtUHJvcHxpdGVtU2NvcGV8aXRlbVR5cGV8aXRlbUlEfGl0ZW1SZWZ8cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzKXwob25bQS1aXS4qKXwoKGRhdGF8YXJpYXx4KS0uKikpJC9pO1xudmFyIGluZGV4ID0gbWVtb2l6ZShyZWFjdFByb3BzUmVnZXgudGVzdC5iaW5kKHJlYWN0UHJvcHNSZWdleCkpO1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgQ29ubmVjdGVkUm91dGVyIH0gZnJvbSAnY29ubmVjdGVkLXJlYWN0LXJvdXRlcidcbmltcG9ydCB7IGNvbmZpZ3VyZVN0b3JlLCBoaXN0b3J5IH0gZnJvbSAnQC9zdGF0ZS9jb25maWd1cmVTdG9yZSc7XG5cbmNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoKTtcblxuLy8gU2F2ZSBhIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBlbGVtZW50IGZvciByZXVzZVxuY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIik7XG5cbi8vIENyZWF0ZSBhIHJldXNhYmxlIHJlbmRlciBtZXRob2QgdGhhdCB3ZSBjYW4gY2FsbCBtb3JlIHRoYW4gb25jZVxubGV0IHJlbmRlciA9ICgpID0+IHtcblxuICAgIC8vIER5bmFtaWNhbGx5IGltcG9ydCBvdXIgbWFpbiBBcHAgY29tcG9uZW50LCBhbmQgcmVuZGVyIGl0XG4gICAgY29uc3QgQXBwID0gcmVxdWlyZShcIi4vdWkvbGF5b3V0L0FwcFwiKS5kZWZhdWx0O1xuXG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgICAgIDxDb25uZWN0ZWRSb3V0ZXIgaGlzdG9yeT17aGlzdG9yeX0+XG4gICAgICAgICAgICAgICAgPEFwcCAvPlxuICAgICAgICAgICAgPC9Db25uZWN0ZWRSb3V0ZXI+XG4gICAgICAgIDwvUHJvdmlkZXI+LFxuICAgICAgICByb290RWxlbWVudFxuICAgICk7XG59O1xuXG5pZihtb2R1bGUuaG90KSB7XG4gICAgLy8gU3VwcG9ydCBob3QgcmVsb2FkaW5nIG9mIGNvbXBvbmVudHMuXG4gICAgLy8gV2hlbmV2ZXIgdGhlIEFwcCBjb21wb25lbnQgZmlsZSBvciBvbmUgb2YgaXRzIGRlcGVuZGVuY2llc1xuICAgIC8vIGlzIGNoYW5nZWQsIHJlLWltcG9ydCB0aGUgdXBkYXRlZCBjb21wb25lbnQgYW5kIHJlLXJlbmRlciBpdFxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi91aS9sYXlvdXQvQXBwXCIsICgpID0+IHtcbiAgICAgICAgc2V0VGltZW91dChyZW5kZXIpO1xuICAgIH0pO1xufVxuXG5yZW5kZXIoKTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSx5PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHo9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOlxuNjAxMTUsQj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LEM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIGFhKGEsYixlLGMsZCxnLGgsZil7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGw9W2UsYyxkLGcsaCxmXSxtPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4gbFttKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MDtjPGI7YysrKWUrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2FhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsZSl9dmFyIEU9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEY9e307XG5mdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUY7dGhpcy51cGRhdGVyPWV8fEV9Ry5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtHLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe1wib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWE/RChcIjg1XCIpOnZvaWQgMDt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0cucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEgoKXt9SC5wcm90b3R5cGU9Ry5wcm90b3R5cGU7ZnVuY3Rpb24gSShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1GO3RoaXMudXBkYXRlcj1lfHxFfXZhciBKPUkucHJvdG90eXBlPW5ldyBIO1xuSi5jb25zdHJ1Y3Rvcj1JO2soSixHLnByb3RvdHlwZSk7Si5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSz17Y3VycmVudDpudWxsLGN1cnJlbnREaXNwYXRjaGVyOm51bGx9LEw9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxNPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBOKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilMLmNhbGwoYixjKSYmIU0uaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgbD1BcnJheShmKSxtPTA7bTxmO20rKylsW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49bH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBiYShhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixlLGMpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9ZTtkLmNvbnRleHQ9YztkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6ZSxjb250ZXh0OmMsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrVShkLGgpO2crPVQoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1DJiZhW0NdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGg9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaCsrKSxnKz1UKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGUpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixlKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBjYShhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBkYShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9XKGEsYyxlLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPWJhKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrZSkpLGMucHVzaChhKSl9ZnVuY3Rpb24gVyhhLGIsZSxjLGQpe3ZhciBnPVwiXCI7bnVsbCE9ZSYmKGc9KFwiXCIrZSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGMsZCk7VihhLGRhLGIpO1MoYil9XG52YXIgWD17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtXKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGUpO1YoYSxjYSxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1coYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtPKGEpP3ZvaWQgMDpEKFwiMTQzXCIpO3JldHVybiBhfX0sY3JlYXRlUmVmOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19LENvbXBvbmVudDpHLFB1cmVDb21wb25lbnQ6SSxjcmVhdGVDb250ZXh0OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6Yixcbl9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LHJlbmRlcjphfX0sbGF6eTpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QixfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX0sbWVtbzpmdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjpBLHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX0sRnJhZ21lbnQ6cixTdHJpY3RNb2RlOnQsU3VzcGVuc2U6eixjcmVhdGVFbGVtZW50Ok4sY2xvbmVFbGVtZW50OmZ1bmN0aW9uKGEsYixlKXtudWxsPT09YXx8dm9pZCAwPT09YT9EKFwiMjY3XCIsYSk6dm9pZCAwO3ZhciBjPXZvaWQgMCxkPWsoe30sYS5wcm9wcyksZz1hLmtleSxoPWEucmVmLGY9YS5fb3duZXI7XG5pZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgbD12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYobD1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUwuY2FsbChiLGMpJiYhTS5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109dm9pZCAwPT09YltjXSYmdm9pZCAwIT09bD9sW2NdOmJbY10pfWM9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1jKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Yyl7bD1BcnJheShjKTtmb3IodmFyIG09MDttPGM7bSsrKWxbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1sfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOmZ9fSxjcmVhdGVGYWN0b3J5OmZ1bmN0aW9uKGEpe3ZhciBiPU4uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifSxpc1ZhbGlkRWxlbWVudDpPLHZlcnNpb246XCIxNi42LjNcIixcbl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpLLGFzc2lnbjprfX07WC51bnN0YWJsZV9Db25jdXJyZW50TW9kZT14O1gudW5zdGFibGVfUHJvZmlsZXI9dTt2YXIgWT17ZGVmYXVsdDpYfSxaPVkmJlh8fFk7bW9kdWxlLmV4cG9ydHM9Wi5kZWZhdWx0fHxaO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxiYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIGNhKGEsYixjLGQsZSxmLGcsaCl7aWYoIWEpe2E9dm9pZCAwO2lmKHZvaWQgMD09PWIpYT1FcnJvcihcIk1pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2Vsc2V7dmFyIGs9W2MsZCxlLGYsZyxoXSxsPTA7YT1FcnJvcihiLnJlcGxhY2UoLyVzL2csZnVuY3Rpb24oKXtyZXR1cm4ga1tsKytdfSkpO2EubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIn1hLmZyYW1lc1RvUG9wPTE7dGhyb3cgYTt9fVxuZnVuY3Rpb24gdChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGQ9MDtkPGI7ZCsrKWMrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2NhKCExLFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0ICVzIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4gXCIsYyl9YWE/dm9pZCAwOnQoXCIyMjdcIik7ZnVuY3Rpb24gZGEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19XG52YXIgZWE9ITEsZmE9bnVsbCxoYT0hMSxpYT1udWxsLGphPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2VhPSEwO2ZhPWF9fTtmdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7ZWE9ITE7ZmE9bnVsbDtkYS5hcHBseShqYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGxhKGEsYixjLGQsZSxmLGcsaCxrKXtrYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZWEpe2lmKGVhKXt2YXIgbD1mYTtlYT0hMTtmYT1udWxsfWVsc2UgdChcIjE5OFwiKSxsPXZvaWQgMDtoYXx8KGhhPSEwLGlhPWwpfX12YXIgbWE9bnVsbCxuYT17fTtcbmZ1bmN0aW9uIG9hKCl7aWYobWEpZm9yKHZhciBhIGluIG5hKXt2YXIgYj1uYVthXSxjPW1hLmluZGV4T2YoYSk7LTE8Yz92b2lkIDA6dChcIjk2XCIsYSk7aWYoIXBhW2NdKXtiLmV4dHJhY3RFdmVudHM/dm9pZCAwOnQoXCI5N1wiLGEpO3BhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7cWEuaGFzT3duUHJvcGVydHkoaCk/dChcIjk5XCIsaCk6dm9pZCAwO3FhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnJhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyhyYShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2U/dm9pZCAwOnQoXCI5OFwiLGQsYSl9fX19XG5mdW5jdGlvbiByYShhLGIsYyl7c2FbYV0/dChcIjEwMFwiLGEpOnZvaWQgMDtzYVthXT1iO3RhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHBhPVtdLHFhPXt9LHNhPXt9LHRhPXt9LHVhPW51bGwsdmE9bnVsbCx3YT1udWxsO2Z1bmN0aW9uIHhhKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD13YShjKTtsYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfWZ1bmN0aW9uIHlhKGEsYil7bnVsbD09Yj90KFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1cbmZ1bmN0aW9uIHphKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBBYT1udWxsO2Z1bmN0aW9uIEJhKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKyl4YShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZ4YShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19XG52YXIgQ2E9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6ZnVuY3Rpb24oYSl7bWE/dChcIjEwMVwiKTp2b2lkIDA7bWE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7b2EoKX0saW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOmZ1bmN0aW9uKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO25hLmhhc093blByb3BlcnR5KGMpJiZuYVtjXT09PWR8fChuYVtjXT90KFwiMTAyXCIsYyk6dm9pZCAwLG5hW2NdPWQsYj0hMCl9YiYmb2EoKX19O1xuZnVuY3Rpb24gRGEoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD11YShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMjMxXCIsYix0eXBlb2YgYyk6dm9pZCAwO1xucmV0dXJuIGN9ZnVuY3Rpb24gRWEoYSl7bnVsbCE9PWEmJihBYT15YShBYSxhKSk7YT1BYTtBYT1udWxsO2lmKGEmJih6YShhLEJhKSxBYT90KFwiOTVcIik6dm9pZCAwLGhhKSl0aHJvdyBhPWlhLGhhPSExLGlhPW51bGwsYTt9dmFyIEZhPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLEdhPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrRmEsSGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitGYTtmdW5jdGlvbiBJYShhKXtpZihhW0dhXSlyZXR1cm4gYVtHYV07Zm9yKDshYVtHYV07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtHYV07cmV0dXJuIDU9PT1hLnRhZ3x8Nj09PWEudGFnP2E6bnVsbH1mdW5jdGlvbiBKYShhKXthPWFbR2FdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZz9udWxsOmF9XG5mdW5jdGlvbiBLYShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dChcIjMzXCIpfWZ1bmN0aW9uIExhKGEpe3JldHVybiBhW0hhXXx8bnVsbH1mdW5jdGlvbiBNYShhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfWZ1bmN0aW9uIE5hKGEsYixjKXtpZihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9eWEoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9eWEoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9XG5mdW5jdGlvbiBPYShhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPU1hKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylOYShjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKU5hKGNbYl0sXCJidWJibGVkXCIsYSl9fWZ1bmN0aW9uIFBhKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPURhKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz15YShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz15YShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gUWEoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZQYShhLl90YXJnZXRJbnN0LG51bGwsYSl9XG5mdW5jdGlvbiBSYShhKXt6YShhLE9hKX12YXIgU2E9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5kb2N1bWVudHx8IXdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtmdW5jdGlvbiBUYShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBVYT17YW5pbWF0aW9uZW5kOlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlRhKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VGEoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VGEoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxWYT17fSxXYT17fTtcblNhJiYoV2E9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVWEuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVWEuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVWEuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVWEudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBYYShhKXtpZihWYVthXSlyZXR1cm4gVmFbYV07aWYoIVVhW2FdKXJldHVybiBhO3ZhciBiPVVhW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFdhKXJldHVybiBWYVthXT1iW2NdO3JldHVybiBhfVxudmFyIFlhPVhhKFwiYW5pbWF0aW9uZW5kXCIpLFphPVhhKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLCRhPVhhKFwiYW5pbWF0aW9uc3RhcnRcIiksYWI9WGEoXCJ0cmFuc2l0aW9uZW5kXCIpLGJiPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxjYj1udWxsLGViPW51bGwsZmI9bnVsbDtcbmZ1bmN0aW9uIGdiKCl7aWYoZmIpcmV0dXJuIGZiO3ZhciBhLGI9ZWIsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gZmI9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBoYigpe3JldHVybiEwfWZ1bmN0aW9uIGliKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBBKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9oYjppYjt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWliO3JldHVybiB0aGlzfVxubihBLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWhiKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWhiKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWhifSxpc1BlcnNpc3RlbnQ6aWIsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9aWI7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtBLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkEuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7amIoYyk7cmV0dXJuIGN9O2piKEEpO2Z1bmN0aW9uIGtiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIGxiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDp0KFwiMjc5XCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1cbmZ1bmN0aW9uIGpiKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWtiO2EucmVsZWFzZT1sYn12YXIgbWI9QS5leHRlbmQoe2RhdGE6bnVsbH0pLG5iPUEuZXh0ZW5kKHtkYXRhOm51bGx9KSxvYj1bOSwxMywyNywzMl0scGI9U2EmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LHFiPW51bGw7U2EmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKHFiPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgcmI9U2EmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFxYixzYj1TYSYmKCFwYnx8cWImJjg8cWImJjExPj1xYiksdGI9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksdWI9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0sdmI9ITE7XG5mdW5jdGlvbiB3YihhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PW9iLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24geGIoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgeWI9ITE7ZnVuY3Rpb24gemIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHhiKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDt2Yj0hMDtyZXR1cm4gdGI7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09dGImJnZiP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIEFiKGEsYil7aWYoeWIpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IXBiJiZ3YihhLGIpPyhhPWdiKCksZmI9ZWI9Y2I9bnVsbCx5Yj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gc2ImJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIEJiPXtldmVudFR5cGVzOnViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZihwYiliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjplPXViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjplPXViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6ZT11Yi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgeWI/d2IoYSxjKSYmKGU9dWIuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT11Yi5jb21wb3NpdGlvblN0YXJ0KTtlPyhzYiYmXCJrb1wiIT09Yy5sb2NhbGUmJih5Ynx8ZSE9PXViLmNvbXBvc2l0aW9uU3RhcnQ/ZT09PXViLmNvbXBvc2l0aW9uRW5kJiZ5YiYmKGY9Z2IoKSk6KGNiPWQsZWI9XCJ2YWx1ZVwiaW4gY2I/Y2IudmFsdWU6Y2IudGV4dENvbnRlbnQseWI9XG4hMCkpLGU9bWIuZ2V0UG9vbGVkKGUsYixjLGQpLGY/ZS5kYXRhPWY6KGY9eGIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLFJhKGUpLGY9ZSk6Zj1udWxsOyhhPXJiP3piKGEsYyk6QWIoYSxjKSk/KGI9bmIuZ2V0UG9vbGVkKHViLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxSYShiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxDYj1udWxsLERiPW51bGwsRWI9bnVsbDtmdW5jdGlvbiBIYihhKXtpZihhPXZhKGEpKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQ2I/dChcIjI4MFwiKTp2b2lkIDA7dmFyIGI9dWEoYS5zdGF0ZU5vZGUpO0NiKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gSWIoYSl7RGI/RWI/RWIucHVzaChhKTpFYj1bYV06RGI9YX1mdW5jdGlvbiBKYigpe2lmKERiKXt2YXIgYT1EYixiPUViO0ViPURiPW51bGw7SGIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUhiKGJbYV0pfX1cbmZ1bmN0aW9uIEtiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gTGIoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gTWIoKXt9dmFyIE5iPSExO2Z1bmN0aW9uIE9iKGEsYil7aWYoTmIpcmV0dXJuIGEoYik7TmI9ITA7dHJ5e3JldHVybiBLYihhLGIpfWZpbmFsbHl7aWYoTmI9ITEsbnVsbCE9PURifHxudWxsIT09RWIpTWIoKSxKYigpfX12YXIgUGI9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gUWIoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFQYlthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG5mdW5jdGlvbiBSYihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gU2IoYSl7aWYoIVNhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIFRiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYihhKXt2YXIgYj1UYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVViKGEpKX1mdW5jdGlvbiBXYihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGIoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBYYj1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxZYj0vXiguKilbXFxcXFxcL10vLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYj1EP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRiPUQ/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZjPUQ/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYz1EP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTpcbjYwMTEzLGljPUQ/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsamM9RD9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixrYz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbGMoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPWtjJiZhW2tjXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxuZnVuY3Rpb24gbWMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBmYzpyZXR1cm5cIkNvbmN1cnJlbnRNb2RlXCI7Y2FzZSBhYzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYjpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2M6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmM6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYzpyZXR1cm5cIlN1c3BlbnNlXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGVjOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGM6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYzp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1xuXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgaWM6cmV0dXJuIG1jKGEudHlwZSk7Y2FzZSBqYzppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIG1jKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIG5jKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMDpjYXNlIDE6Y2FzZSA1OmNhc2UgODpjYXNlIDEzOnZhciBjPWEuX2RlYnVnT3duZXIsZD1hLl9kZWJ1Z1NvdXJjZSxlPW1jKGEudHlwZSk7dmFyIGY9bnVsbDtjJiYoZj1tYyhjLnR5cGUpKTtjPWU7ZT1cIlwiO2Q/ZT1cIiAoYXQgXCIrZC5maWxlTmFtZS5yZXBsYWNlKFliLFwiXCIpK1wiOlwiK2QubGluZU51bWJlcitcIilcIjpmJiYoZT1cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiKTtmPVwiXFxuICAgIGluIFwiKyhjfHxcIlVua25vd25cIikrZTticmVhayBhO2RlZmF1bHQ6Zj1cIlwifWIrPWY7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBvYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8scGM9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxxYz17fSxyYz17fTtcbmZ1bmN0aW9uIHNjKGEpe2lmKHBjLmNhbGwocmMsYSkpcmV0dXJuITA7aWYocGMuY2FsbChxYyxhKSlyZXR1cm4hMTtpZihvYy50ZXN0KGEpKXJldHVybiByY1thXT0hMDtxY1thXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiB0YyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHVjKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHRjKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gRShhLGIsYyxkLGUpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWJ9dmFyIEY9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwwLCExLGEsbnVsbCl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07RltiXT1uZXcgRShiLDEsITEsYVsxXSxudWxsKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwyLCExLGEsbnVsbCl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtGW2FdPW5ldyBFKGEsMywhMCxhLG51bGwpfSk7XG5bXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0ZbYV09bmV3IEUoYSw0LCExLGEsbnVsbCl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDYsITEsYSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RlthXT1uZXcgRShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIHZjPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24geGMoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMsXG54Yyk7RltiXT1uZXcgRShiLDEsITEsYSxudWxsKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOmhyZWYgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMseGMpO0ZbYl09bmV3IEUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UodmMseGMpO0ZbYl09bmV3IEUoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIil9KTtGLnRhYkluZGV4PW5ldyBFKFwidGFiSW5kZXhcIiwxLCExLFwidGFiaW5kZXhcIixudWxsKTtcbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPUYuaGFzT3duUHJvcGVydHkoYik/RltiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KHVjKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9zYyhiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxuZnVuY3Rpb24gemMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIEFjKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXpjKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQ2MoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ5YyhhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gRGMoYSxiKXtDYyhhLGIpO3ZhciBjPXpjKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0VjKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkVjKGEsYi50eXBlLHpjKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRmMoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hYS5kZWZhdWx0Q2hlY2tlZDthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRWMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBHYz17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBIYyhhLGIsYyl7YT1BLmdldFBvb2xlZChHYy5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0liKGMpO1JhKGEpO3JldHVybiBhfXZhciBKYz1udWxsLEtjPW51bGw7ZnVuY3Rpb24gTGMoYSl7RWEoYSl9XG5mdW5jdGlvbiBNYyhhKXt2YXIgYj1LYShhKTtpZihXYihiKSlyZXR1cm4gYX1mdW5jdGlvbiBOYyhhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBPYz0hMTtTYSYmKE9jPVNiKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIFBjKCl7SmMmJihKYy5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYyksS2M9SmM9bnVsbCl9ZnVuY3Rpb24gUWMoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJk1jKEtjKSYmKGE9SGMoS2MsYSxSYihhKSksT2IoTGMsYSkpfWZ1bmN0aW9uIFJjKGEsYixjKXtcImZvY3VzXCI9PT1hPyhQYygpLEpjPWIsS2M9YyxKYy5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixRYykpOlwiYmx1clwiPT09YSYmUGMoKX1mdW5jdGlvbiBTYyhhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBNYyhLYyl9XG5mdW5jdGlvbiBUYyhhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIE1jKGIpfWZ1bmN0aW9uIFVjKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIE1jKGIpfVxudmFyIFZjPXtldmVudFR5cGVzOkdjLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6T2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP0thKGIpOndpbmRvdyxmPXZvaWQgMCxnPXZvaWQgMCxoPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09aHx8XCJpbnB1dFwiPT09aCYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1OYzpRYihlKT9PYz9mPVVjOihmPVNjLGc9UmMpOihoPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1oLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPVRjKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBIYyhmLGMsZCk7ZyYmZyhhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkVjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LFdjPUEuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxYYz17QWx0OlwiYWx0S2V5XCIsXG5Db250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBZYyhhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPVhjW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gWmMoKXtyZXR1cm4gWWN9XG52YXIgJGM9MCxhZD0wLGJkPSExLGNkPSExLGRkPVdjLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj0kYzskYz1hLnNjcmVlblg7cmV0dXJuIGJkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooYmQ9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1hZDthZD1hLnNjcmVlblk7cmV0dXJuIGNkP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooY2Q9ITAsMCl9fSksZWQ9ZGQuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLGZkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxnZD17ZXZlbnRUeXBlczpmZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGY9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGUmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZiYmIWUpcmV0dXJuIG51bGw7ZT1kLndpbmRvdz09PWQ/ZDooZT1kLm93bmVyRG9jdW1lbnQpP2UuZGVmYXVsdFZpZXd8fGUucGFyZW50V2luZG93OndpbmRvdztmPyhmPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT9JYShiKTpudWxsKTpmPW51bGw7aWYoZj09PWIpcmV0dXJuIG51bGw7dmFyIGc9dm9pZCAwLGg9dm9pZCAwLGs9dm9pZCAwLGw9dm9pZCAwO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1hKWc9ZGQsaD1mZC5tb3VzZUxlYXZlLGs9ZmQubW91c2VFbnRlcixsPVwibW91c2VcIjtcbmVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWc9ZWQsaD1mZC5wb2ludGVyTGVhdmUsaz1mZC5wb2ludGVyRW50ZXIsbD1cInBvaW50ZXJcIjt2YXIgbT1udWxsPT1mP2U6S2EoZik7ZT1udWxsPT1iP2U6S2EoYik7YT1nLmdldFBvb2xlZChoLGYsYyxkKTthLnR5cGU9bCtcImxlYXZlXCI7YS50YXJnZXQ9bTthLnJlbGF0ZWRUYXJnZXQ9ZTtjPWcuZ2V0UG9vbGVkKGssYixjLGQpO2MudHlwZT1sK1wiZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1tO2Q9YjtpZihmJiZkKWE6e2I9ZjtlPWQ7bD0wO2ZvcihnPWI7ZztnPU1hKGcpKWwrKztnPTA7Zm9yKGs9ZTtrO2s9TWEoaykpZysrO2Zvcig7MDxsLWc7KWI9TWEoYiksbC0tO2Zvcig7MDxnLWw7KWU9TWEoZSksZy0tO2Zvcig7bC0tOyl7aWYoYj09PWV8fGI9PT1lLmFsdGVybmF0ZSlicmVhayBhO2I9TWEoYik7ZT1NYShlKX1iPW51bGx9ZWxzZSBiPW51bGw7ZT1iO2ZvcihiPVtdO2YmJmYhPT1lOyl7bD1cbmYuYWx0ZXJuYXRlO2lmKG51bGwhPT1sJiZsPT09ZSlicmVhaztiLnB1c2goZik7Zj1NYShmKX1mb3IoZj1bXTtkJiZkIT09ZTspe2w9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWwmJmw9PT1lKWJyZWFrO2YucHVzaChkKTtkPU1hKGQpfWZvcihkPTA7ZDxiLmxlbmd0aDtkKyspUGEoYltkXSxcImJ1YmJsZWRcIixhKTtmb3IoZD1mLmxlbmd0aDswPGQtLTspUGEoZltkXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuW2EsY119fSxoZD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O2Z1bmN0aW9uIGlkKGEsYil7cmV0dXJuIGE9PT1iPzAhPT1hfHwwIT09Ynx8MS9hPT09MS9iOmEhPT1hJiZiIT09Yn1cbmZ1bmN0aW9uIGpkKGEsYil7aWYoaWQoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFoZC5jYWxsKGIsY1tkXSl8fCFpZChhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIGtkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2lmKDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDE7Zm9yKDtiLnJldHVybjspaWYoYj1iLnJldHVybiwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIGxkKGEpezIhPT1rZChhKT90KFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIG1kKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPWtkKGEpLDM9PT1iP3QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm4sZj1lP2UuYWx0ZXJuYXRlOm51bGw7aWYoIWV8fCFmKWJyZWFrO2lmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IodmFyIGc9ZS5jaGlsZDtnOyl7aWYoZz09PWMpcmV0dXJuIGxkKGUpLGE7aWYoZz09PWQpcmV0dXJuIGxkKGUpLGI7Zz1nLnNpYmxpbmd9dChcIjE4OFwiKX1pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtnPSExO2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31nP1xudm9pZCAwOnQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD90KFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/dChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBuZChhKXthPW1kKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxudmFyIG9kPUEuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxwZD1BLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLHFkPVdjLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gcmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgc2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHRkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSx1ZD1XYy5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9c2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9cmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3RkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaYyxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9yZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9yZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHZkPWRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx3ZD1XYy5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpaY30pLHhkPUEuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHlkPWRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksemQ9W1tcImFib3J0XCIsXCJhYm9ydFwiXSxbWWEsXCJhbmltYXRpb25FbmRcIl0sW1phLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCJdLFskYSxcImFuaW1hdGlvblN0YXJ0XCJdLFtcImNhbnBsYXlcIixcImNhblBsYXlcIl0sW1wiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCJdLFtcImRyYWdcIixcImRyYWdcIl0sW1wiZHJhZ2VudGVyXCIsXCJkcmFnRW50ZXJcIl0sW1wiZHJhZ2V4aXRcIixcImRyYWdFeGl0XCJdLFtcImRyYWdsZWF2ZVwiLFwiZHJhZ0xlYXZlXCJdLFtcImRyYWdvdmVyXCIsXCJkcmFnT3ZlclwiXSxbXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIl0sW1wiZW1wdGllZFwiLFwiZW1wdGllZFwiXSxbXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiXSxcbltcImVuZGVkXCIsXCJlbmRlZFwiXSxbXCJlcnJvclwiLFwiZXJyb3JcIl0sW1wiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCJdLFtcImxvYWRcIixcImxvYWRcIl0sW1wibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiXSxbXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIl0sW1wibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIl0sW1wibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIl0sW1wibW91c2Vtb3ZlXCIsXCJtb3VzZU1vdmVcIl0sW1wibW91c2VvdXRcIixcIm1vdXNlT3V0XCJdLFtcIm1vdXNlb3ZlclwiLFwibW91c2VPdmVyXCJdLFtcInBsYXlpbmdcIixcInBsYXlpbmdcIl0sW1wicG9pbnRlcm1vdmVcIixcInBvaW50ZXJNb3ZlXCJdLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJPdXRcIl0sW1wicG9pbnRlcm92ZXJcIixcInBvaW50ZXJPdmVyXCJdLFtcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiXSxbXCJzY3JvbGxcIixcInNjcm9sbFwiXSxbXCJzZWVraW5nXCIsXCJzZWVraW5nXCJdLFtcInN0YWxsZWRcIixcInN0YWxsZWRcIl0sXG5bXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCJdLFtcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIl0sW1widG9nZ2xlXCIsXCJ0b2dnbGVcIl0sW1widG91Y2htb3ZlXCIsXCJ0b3VjaE1vdmVcIl0sW2FiLFwidHJhbnNpdGlvbkVuZFwiXSxbXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdLFtcIndoZWVsXCIsXCJ3aGVlbFwiXV0sQWQ9e30sQmQ9e307ZnVuY3Rpb24gQ2QoYSxiKXt2YXIgYz1hWzBdO2E9YVsxXTt2YXIgZD1cIm9uXCIrKGFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpKTtiPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpkLGNhcHR1cmVkOmQrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbY10saXNJbnRlcmFjdGl2ZTpifTtBZFthXT1iO0JkW2NdPWJ9XG5bW1wiYmx1clwiLFwiYmx1clwiXSxbXCJjYW5jZWxcIixcImNhbmNlbFwiXSxbXCJjbGlja1wiLFwiY2xpY2tcIl0sW1wiY2xvc2VcIixcImNsb3NlXCJdLFtcImNvbnRleHRtZW51XCIsXCJjb250ZXh0TWVudVwiXSxbXCJjb3B5XCIsXCJjb3B5XCJdLFtcImN1dFwiLFwiY3V0XCJdLFtcImF1eGNsaWNrXCIsXCJhdXhDbGlja1wiXSxbXCJkYmxjbGlja1wiLFwiZG91YmxlQ2xpY2tcIl0sW1wiZHJhZ2VuZFwiLFwiZHJhZ0VuZFwiXSxbXCJkcmFnc3RhcnRcIixcImRyYWdTdGFydFwiXSxbXCJkcm9wXCIsXCJkcm9wXCJdLFtcImZvY3VzXCIsXCJmb2N1c1wiXSxbXCJpbnB1dFwiLFwiaW5wdXRcIl0sW1wiaW52YWxpZFwiLFwiaW52YWxpZFwiXSxbXCJrZXlkb3duXCIsXCJrZXlEb3duXCJdLFtcImtleXByZXNzXCIsXCJrZXlQcmVzc1wiXSxbXCJrZXl1cFwiLFwia2V5VXBcIl0sW1wibW91c2Vkb3duXCIsXCJtb3VzZURvd25cIl0sW1wibW91c2V1cFwiLFwibW91c2VVcFwiXSxbXCJwYXN0ZVwiLFwicGFzdGVcIl0sW1wicGF1c2VcIixcInBhdXNlXCJdLFtcInBsYXlcIixcInBsYXlcIl0sW1wicG9pbnRlcmNhbmNlbFwiLFwicG9pbnRlckNhbmNlbFwiXSxcbltcInBvaW50ZXJkb3duXCIsXCJwb2ludGVyRG93blwiXSxbXCJwb2ludGVydXBcIixcInBvaW50ZXJVcFwiXSxbXCJyYXRlY2hhbmdlXCIsXCJyYXRlQ2hhbmdlXCJdLFtcInJlc2V0XCIsXCJyZXNldFwiXSxbXCJzZWVrZWRcIixcInNlZWtlZFwiXSxbXCJzdWJtaXRcIixcInN1Ym1pdFwiXSxbXCJ0b3VjaGNhbmNlbFwiLFwidG91Y2hDYW5jZWxcIl0sW1widG91Y2hlbmRcIixcInRvdWNoRW5kXCJdLFtcInRvdWNoc3RhcnRcIixcInRvdWNoU3RhcnRcIl0sW1widm9sdW1lY2hhbmdlXCIsXCJ2b2x1bWVDaGFuZ2VcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7Q2QoYSwhMCl9KTt6ZC5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NkKGEsITEpfSk7XG52YXIgRGQ9e2V2ZW50VHlwZXM6QWQsaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlOmZ1bmN0aW9uKGEpe2E9QmRbYV07cmV0dXJuIHZvaWQgMCE9PWEmJiEwPT09YS5pc0ludGVyYWN0aXZlfSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPUJkW2FdO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09cmQoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXVkO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1xZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPWRkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9XG52ZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXdkO2JyZWFrO2Nhc2UgWWE6Y2FzZSBaYTpjYXNlICRhOmE9b2Q7YnJlYWs7Y2FzZSBhYjphPXhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPVdjO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9eWQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1wZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPWVkO2JyZWFrO2RlZmF1bHQ6YT1BfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7UmEoYik7cmV0dXJuIGJ9fSxFZD1EZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsXG5GZD1bXTtmdW5jdGlvbiBHZChhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkO2ZvcihkPWM7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKCFkKWJyZWFrO2EuYW5jZXN0b3JzLnB1c2goYyk7Yz1JYShkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1SYihhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO2Zvcih2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9bnVsbCxoPTA7aDxwYS5sZW5ndGg7aCsrKXt2YXIgaz1wYVtoXTtrJiYoaz1rLmV4dHJhY3RFdmVudHMoZCxiLGYsZSkpJiYoZz15YShnLGspKX1FYShnKX19dmFyIEhkPSEwO1xuZnVuY3Rpb24gRyhhLGIpe2lmKCFiKXJldHVybiBudWxsO3ZhciBjPShFZChhKT9JZDpKZCkuYmluZChudWxsLGEpO2IuYWRkRXZlbnRMaXN0ZW5lcihhLGMsITEpfWZ1bmN0aW9uIEtkKGEsYil7aWYoIWIpcmV0dXJuIG51bGw7dmFyIGM9KEVkKGEpP0lkOkpkKS5iaW5kKG51bGwsYSk7Yi5hZGRFdmVudExpc3RlbmVyKGEsYywhMCl9ZnVuY3Rpb24gSWQoYSxiKXtMYihKZCxhLGIpfVxuZnVuY3Rpb24gSmQoYSxiKXtpZihIZCl7dmFyIGM9UmIoYik7Yz1JYShjKTtudWxsPT09Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBjLnRhZ3x8Mj09PWtkKGMpfHwoYz1udWxsKTtpZihGZC5sZW5ndGgpe3ZhciBkPUZkLnBvcCgpO2QudG9wTGV2ZWxUeXBlPWE7ZC5uYXRpdmVFdmVudD1iO2QudGFyZ2V0SW5zdD1jO2E9ZH1lbHNlIGE9e3RvcExldmVsVHlwZTphLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX07dHJ5e09iKEdkLGEpfWZpbmFsbHl7YS50b3BMZXZlbFR5cGU9bnVsbCxhLm5hdGl2ZUV2ZW50PW51bGwsYS50YXJnZXRJbnN0PW51bGwsYS5hbmNlc3RvcnMubGVuZ3RoPTAsMTA+RmQubGVuZ3RoJiZGZC5wdXNoKGEpfX19dmFyIExkPXt9LE1kPTAsTmQ9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuZnVuY3Rpb24gT2QoYSl7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsTmQpfHwoYVtOZF09TWQrKyxMZFthW05kXV09e30pO3JldHVybiBMZFthW05kXV19ZnVuY3Rpb24gUGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIFFkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJkKGEsYil7dmFyIGM9UWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9UWQoYyl9fWZ1bmN0aW9uIFNkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/U2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gVGQoKXtmb3IodmFyIGE9d2luZG93LGI9UGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXthPWIuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3fWNhdGNoKGMpe2JyZWFrfWI9UGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBWZD1TYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFdkPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxYZD1udWxsLFlkPW51bGwsWmQ9bnVsbCwkZD0hMTtcbmZ1bmN0aW9uIGFlKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoJGR8fG51bGw9PVhkfHxYZCE9PVBkKGMpKXJldHVybiBudWxsO2M9WGQ7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmVWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gWmQmJmpkKFpkLGMpP251bGw6KFpkPWMsYT1BLmdldFBvb2xlZChXZC5zZWxlY3QsWWQsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1YZCxSYShhKSxhKX1cbnZhciBiZT17ZXZlbnRUeXBlczpXZCxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1PZChlKTtmPXRhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKXt2YXIgaD1mW2ddO2lmKCFlLmhhc093blByb3BlcnR5KGgpfHwhZVtoXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/S2EoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZihRYihlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlYZD1lLFlkPWIsWmQ9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOlpkPVlkPVhkPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOiRkPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gJGQ9ITEsYWUoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoVmQpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBhZShjLGQpfXJldHVybiBudWxsfX07Q2EuaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTt1YT1MYTt2YT1KYTt3YT1LYTtDYS5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1NpbXBsZUV2ZW50UGx1Z2luOkRkLEVudGVyTGVhdmVFdmVudFBsdWdpbjpnZCxDaGFuZ2VFdmVudFBsdWdpbjpWYyxTZWxlY3RFdmVudFBsdWdpbjpiZSxCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOkJifSk7ZnVuY3Rpb24gZGUoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBlZShhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPWRlKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1mdW5jdGlvbiBmZShhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIremMoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdlKGEsYil7bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTD90KFwiOTFcIik6dm9pZCAwO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhlKGEsYil7dmFyIGM9Yi52YWx1ZTtudWxsPT1jJiYoYz1iLmRlZmF1bHRWYWx1ZSxiPWIuY2hpbGRyZW4sbnVsbCE9YiYmKG51bGwhPWM/dChcIjkyXCIpOnZvaWQgMCxBcnJheS5pc0FycmF5KGIpJiYoMT49Yi5sZW5ndGg/dm9pZCAwOnQoXCI5M1wiKSxiPWJbMF0pLGM9YiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnpjKGMpfX1cbmZ1bmN0aW9uIGllKGEsYil7dmFyIGM9emMoYi52YWx1ZSksZD16YyhiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGplKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJihhLnZhbHVlPWIpfXZhciBrZT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsZShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1lKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sZShiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuZT12b2lkIDAsb2U9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Uuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmU9bmV8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmUuaW5uZXJIVE1MPVwiPHN2Zz5cIitiK1wiPC9zdmc+XCI7Zm9yKGI9bmUuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGUoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxZT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyZT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWUpLmZvckVhY2goZnVuY3Rpb24oYSl7cmUuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxZVtiXT1xZVthXX0pfSk7ZnVuY3Rpb24gc2UoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFlLmhhc093blByb3BlcnR5KGEpJiZxZVthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0ZShhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zZShjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1ZT1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmUoYSxiKXtiJiYodWVbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3QoXCIxMzdcIixhLFwiXCIpOnZvaWQgMCksbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmKG51bGwhPWIuY2hpbGRyZW4/dChcIjYwXCIpOnZvaWQgMCxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP3ZvaWQgMDp0KFwiNjFcIikpLG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZT90KFwiNjJcIixcIlwiKTp2b2lkIDApfVxuZnVuY3Rpb24gd2UoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fVxuZnVuY3Rpb24geGUoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9T2QoYSk7Yj10YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl7dmFyIGU9YltkXTtpZighYy5oYXNPd25Qcm9wZXJ0eShlKXx8IWNbZV0pe3N3aXRjaChlKXtjYXNlIFwic2Nyb2xsXCI6S2QoXCJzY3JvbGxcIixhKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOktkKFwiZm9jdXNcIixhKTtLZChcImJsdXJcIixhKTtjLmJsdXI9ITA7Yy5mb2N1cz0hMDticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6U2IoZSkmJktkKGUsYSk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWJiLmluZGV4T2YoZSkmJkcoZSxhKX1jW2VdPSEwfX19ZnVuY3Rpb24geWUoKXt9dmFyIHplPW51bGwsQWU9bnVsbDtcbmZ1bmN0aW9uIEJlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1mdW5jdGlvbiBDZShhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIERlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEVlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtcbmZ1bmN0aW9uIEZlKGEpe2ZvcihhPWEubmV4dFNpYmxpbmc7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gR2UoYSl7Zm9yKGE9YS5maXJzdENoaWxkO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfW5ldyBTZXQ7dmFyIEhlPVtdLEllPS0xO2Z1bmN0aW9uIEgoYSl7MD5JZXx8KGEuY3VycmVudD1IZVtJZV0sSGVbSWVdPW51bGwsSWUtLSl9ZnVuY3Rpb24gSShhLGIpe0llKys7SGVbSWVdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgSmU9e30sSj17Y3VycmVudDpKZX0sSz17Y3VycmVudDohMX0sS2U9SmU7XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEplO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBNZShhKXtIKEssYSk7SChKLGEpfWZ1bmN0aW9uIE5lKGEpe0goSyxhKTtIKEosYSl9XG5mdW5jdGlvbiBPZShhLGIsYyl7Si5jdXJyZW50IT09SmU/dChcIjE2OFwiKTp2b2lkIDA7SShKLGIsYSk7SShLLGMsYSl9ZnVuY3Rpb24gUGUoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWUgaW4gYT92b2lkIDA6dChcIjEwOFwiLG1jKGIpfHxcIlVua25vd25cIixlKTtyZXR1cm4gbih7fSxjLGQpfWZ1bmN0aW9uIFFlKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8SmU7S2U9Si5jdXJyZW50O0koSixiLGEpO0koSyxLLmN1cnJlbnQsYSk7cmV0dXJuITB9XG5mdW5jdGlvbiBSZShhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7ZD92b2lkIDA6dChcIjE2OVwiKTtjPyhiPVBlKGEsYixLZSksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1iLEgoSyxhKSxIKEosYSksSShKLGIsYSkpOkgoSyxhKTtJKEssYyxhKX12YXIgU2U9bnVsbCxUZT1udWxsO2Z1bmN0aW9uIFVlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19XG5mdW5jdGlvbiBWZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtTZT1VZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7VGU9VWUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFdlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5maXJzdENvbnRleHREZXBlbmRlbmN5PXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIE0oYSxiLGMsZCl7cmV0dXJuIG5ldyBXZShhLGIsYyxkKX1cbmZ1bmN0aW9uIFhlKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWWUoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIFhlKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYylyZXR1cm4gMTE7aWYoYT09PWljKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFplKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9TShhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yy5maXJzdENvbnRleHREZXBlbmRlbmN5PWEuZmlyc3RDb250ZXh0RGVwZW5kZW5jeTtjLnNpYmxpbmc9YS5zaWJsaW5nO1xuYy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gJGUoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKVhlKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFjOnJldHVybiBhZihjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZjOnJldHVybiBiZihjLGV8MyxmLGIpO2Nhc2UgYmM6cmV0dXJuIGJmKGMsZXwyLGYsYik7Y2FzZSBjYzpyZXR1cm4gYT1NKDEyLGMsYixlfDQpLGEuZWxlbWVudFR5cGU9Y2MsYS50eXBlPWNjLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGM6cmV0dXJuIGE9TSgxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1oYyxhLnR5cGU9aGMsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRjOmc9MTA7YnJlYWsgYTtjYXNlIGVjOmc9OTticmVhayBhO2Nhc2UgZ2M6Zz0xMTticmVhayBhO2Nhc2UgaWM6Zz1cbjE0O2JyZWFrIGE7Y2FzZSBqYzpnPTE2O2Q9bnVsbDticmVhayBhfXQoXCIxMzBcIixudWxsPT1hP2E6dHlwZW9mIGEsXCJcIil9Yj1NKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gYWYoYSxiLGMsZCl7YT1NKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBiZihhLGIsYyxkKXthPU0oOCxhLGQsYik7Yj0wPT09KGImMSk/YmM6ZmM7YS5lbGVtZW50VHlwZT1iO2EudHlwZT1iO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBjZihhLGIsYyl7YT1NKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIGRmKGEsYixjKXtiPU0oNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9ZnVuY3Rpb24gZWYoYSxiKXthLmRpZEVycm9yPSExO3ZhciBjPWEuZWFybGllc3RQZW5kaW5nVGltZTswPT09Yz9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZT1iOmM8Yj9hLmVhcmxpZXN0UGVuZGluZ1RpbWU9YjphLmxhdGVzdFBlbmRpbmdUaW1lPmImJihhLmxhdGVzdFBlbmRpbmdUaW1lPWIpO2ZmKGIsYSl9XG5mdW5jdGlvbiBnZihhLGIpe2EuZGlkRXJyb3I9ITE7dmFyIGM9YS5sYXRlc3RQaW5nZWRUaW1lOzAhPT1jJiZjPj1iJiYoYS5sYXRlc3RQaW5nZWRUaW1lPTApO2M9YS5lYXJsaWVzdFBlbmRpbmdUaW1lO3ZhciBkPWEubGF0ZXN0UGVuZGluZ1RpbWU7Yz09PWI/YS5lYXJsaWVzdFBlbmRpbmdUaW1lPWQ9PT1iP2EubGF0ZXN0UGVuZGluZ1RpbWU9MDpkOmQ9PT1iJiYoYS5sYXRlc3RQZW5kaW5nVGltZT1jKTtjPWEuZWFybGllc3RTdXNwZW5kZWRUaW1lO2Q9YS5sYXRlc3RTdXNwZW5kZWRUaW1lOzA9PT1jP2EuZWFybGllc3RTdXNwZW5kZWRUaW1lPWEubGF0ZXN0U3VzcGVuZGVkVGltZT1iOmM8Yj9hLmVhcmxpZXN0U3VzcGVuZGVkVGltZT1iOmQ+YiYmKGEubGF0ZXN0U3VzcGVuZGVkVGltZT1iKTtmZihiLGEpfVxuZnVuY3Rpb24gaGYoYSxiKXt2YXIgYz1hLmVhcmxpZXN0UGVuZGluZ1RpbWU7YT1hLmVhcmxpZXN0U3VzcGVuZGVkVGltZTtjPmImJihiPWMpO2E+YiYmKGI9YSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZmYoYSxiKXt2YXIgYz1iLmVhcmxpZXN0U3VzcGVuZGVkVGltZSxkPWIubGF0ZXN0U3VzcGVuZGVkVGltZSxlPWIuZWFybGllc3RQZW5kaW5nVGltZSxmPWIubGF0ZXN0UGluZ2VkVGltZTtlPTAhPT1lP2U6ZjswPT09ZSYmKDA9PT1hfHxkPGEpJiYoZT1kKTthPWU7MCE9PWEmJmM+YSYmKGE9Yyk7Yi5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1lO2IuZXhwaXJhdGlvblRpbWU9YX12YXIgamY9ITE7XG5mdW5jdGlvbiBrZihhKXtyZXR1cm57YmFzZVN0YXRlOmEsZmlyc3RVcGRhdGU6bnVsbCxsYXN0VXBkYXRlOm51bGwsZmlyc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGxhc3RDYXB0dXJlZFVwZGF0ZTpudWxsLGZpcnN0RWZmZWN0Om51bGwsbGFzdEVmZmVjdDpudWxsLGZpcnN0Q2FwdHVyZWRFZmZlY3Q6bnVsbCxsYXN0Q2FwdHVyZWRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbGYoYSl7cmV0dXJue2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdFVwZGF0ZTphLmZpcnN0VXBkYXRlLGxhc3RVcGRhdGU6YS5sYXN0VXBkYXRlLGZpcnN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxsYXN0Q2FwdHVyZWRVcGRhdGU6bnVsbCxmaXJzdEVmZmVjdDpudWxsLGxhc3RFZmZlY3Q6bnVsbCxmaXJzdENhcHR1cmVkRWZmZWN0Om51bGwsbGFzdENhcHR1cmVkRWZmZWN0Om51bGx9fVxuZnVuY3Rpb24gbWYoYSl7cmV0dXJue2V4cGlyYXRpb25UaW1lOmEsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsLG5leHRFZmZlY3Q6bnVsbH19ZnVuY3Rpb24gbmYoYSxiKXtudWxsPT09YS5sYXN0VXBkYXRlP2EuZmlyc3RVcGRhdGU9YS5sYXN0VXBkYXRlPWI6KGEubGFzdFVwZGF0ZS5uZXh0PWIsYS5sYXN0VXBkYXRlPWIpfVxuZnVuY3Rpb24gb2YoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtpZihudWxsPT09Yyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTt2YXIgZT1udWxsO251bGw9PT1kJiYoZD1hLnVwZGF0ZVF1ZXVlPWtmKGEubWVtb2l6ZWRTdGF0ZSkpfWVsc2UgZD1hLnVwZGF0ZVF1ZXVlLGU9Yy51cGRhdGVRdWV1ZSxudWxsPT09ZD9udWxsPT09ZT8oZD1hLnVwZGF0ZVF1ZXVlPWtmKGEubWVtb2l6ZWRTdGF0ZSksZT1jLnVwZGF0ZVF1ZXVlPWtmKGMubWVtb2l6ZWRTdGF0ZSkpOmQ9YS51cGRhdGVRdWV1ZT1sZihlKTpudWxsPT09ZSYmKGU9Yy51cGRhdGVRdWV1ZT1sZihkKSk7bnVsbD09PWV8fGQ9PT1lP25mKGQsYik6bnVsbD09PWQubGFzdFVwZGF0ZXx8bnVsbD09PWUubGFzdFVwZGF0ZT8obmYoZCxiKSxuZihlLGIpKToobmYoZCxiKSxlLmxhc3RVcGRhdGU9Yil9XG5mdW5jdGlvbiBwZihhLGIpe3ZhciBjPWEudXBkYXRlUXVldWU7Yz1udWxsPT09Yz9hLnVwZGF0ZVF1ZXVlPWtmKGEubWVtb2l6ZWRTdGF0ZSk6cWYoYSxjKTtudWxsPT09Yy5sYXN0Q2FwdHVyZWRVcGRhdGU/Yy5maXJzdENhcHR1cmVkVXBkYXRlPWMubGFzdENhcHR1cmVkVXBkYXRlPWI6KGMubGFzdENhcHR1cmVkVXBkYXRlLm5leHQ9YixjLmxhc3RDYXB0dXJlZFVwZGF0ZT1iKX1mdW5jdGlvbiBxZihhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZiPT09Yy51cGRhdGVRdWV1ZSYmKGI9YS51cGRhdGVRdWV1ZT1sZihiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByZihhLGIsYyxkLGUsZil7c3dpdGNoKGMudGFnKXtjYXNlIDE6cmV0dXJuIGE9Yy5wYXlsb2FkLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EuY2FsbChmLGQsZSk6YTtjYXNlIDM6YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTIwNDl8NjQ7Y2FzZSAwOmE9Yy5wYXlsb2FkO2U9XCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGYsZCxlKTphO2lmKG51bGw9PT1lfHx2b2lkIDA9PT1lKWJyZWFrO3JldHVybiBuKHt9LGQsZSk7Y2FzZSAyOmpmPSEwfXJldHVybiBkfVxuZnVuY3Rpb24gc2YoYSxiLGMsZCxlKXtqZj0hMTtiPXFmKGEsYik7Zm9yKHZhciBmPWIuYmFzZVN0YXRlLGc9bnVsbCxoPTAsaz1iLmZpcnN0VXBkYXRlLGw9ZjtudWxsIT09azspe3ZhciBtPWsuZXhwaXJhdGlvblRpbWU7bTxlPyhudWxsPT09ZyYmKGc9ayxmPWwpLGg8bSYmKGg9bSkpOihsPXJmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD0zMixrLm5leHRFZmZlY3Q9bnVsbCxudWxsPT09Yi5sYXN0RWZmZWN0P2IuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWs6KGIubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWssYi5sYXN0RWZmZWN0PWspKSk7az1rLm5leHR9bT1udWxsO2ZvcihrPWIuZmlyc3RDYXB0dXJlZFVwZGF0ZTtudWxsIT09azspe3ZhciBxPWsuZXhwaXJhdGlvblRpbWU7cTxlPyhudWxsPT09bSYmKG09ayxudWxsPT09ZyYmKGY9bCkpLGg8cSYmKGg9cSkpOihsPXJmKGEsYixrLGwsYyxkKSxudWxsIT09ay5jYWxsYmFjayYmKGEuZWZmZWN0VGFnfD1cbjMyLGsubmV4dEVmZmVjdD1udWxsLG51bGw9PT1iLmxhc3RDYXB0dXJlZEVmZmVjdD9iLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9azooYi5sYXN0Q2FwdHVyZWRFZmZlY3QubmV4dEVmZmVjdD1rLGIubGFzdENhcHR1cmVkRWZmZWN0PWspKSk7az1rLm5leHR9bnVsbD09PWcmJihiLmxhc3RVcGRhdGU9bnVsbCk7bnVsbD09PW0/Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbDphLmVmZmVjdFRhZ3w9MzI7bnVsbD09PWcmJm51bGw9PT1tJiYoZj1sKTtiLmJhc2VTdGF0ZT1mO2IuZmlyc3RVcGRhdGU9ZztiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9bTthLmV4cGlyYXRpb25UaW1lPWg7YS5tZW1vaXplZFN0YXRlPWx9XG5mdW5jdGlvbiB0ZihhLGIsYyl7bnVsbCE9PWIuZmlyc3RDYXB0dXJlZFVwZGF0ZSYmKG51bGwhPT1iLmxhc3RVcGRhdGUmJihiLmxhc3RVcGRhdGUubmV4dD1iLmZpcnN0Q2FwdHVyZWRVcGRhdGUsYi5sYXN0VXBkYXRlPWIubGFzdENhcHR1cmVkVXBkYXRlKSxiLmZpcnN0Q2FwdHVyZWRVcGRhdGU9Yi5sYXN0Q2FwdHVyZWRVcGRhdGU9bnVsbCk7dWYoYi5maXJzdEVmZmVjdCxjKTtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO3VmKGIuZmlyc3RDYXB0dXJlZEVmZmVjdCxjKTtiLmZpcnN0Q2FwdHVyZWRFZmZlY3Q9Yi5sYXN0Q2FwdHVyZWRFZmZlY3Q9bnVsbH1mdW5jdGlvbiB1ZihhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmNhbGxiYWNrO2lmKG51bGwhPT1jKXthLmNhbGxiYWNrPW51bGw7dmFyIGQ9YjtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYz90KFwiMTkxXCIsYyk6dm9pZCAwO2MuY2FsbChkKX1hPWEubmV4dEVmZmVjdH19XG5mdW5jdGlvbiB2ZihhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOm5jKGIpfX12YXIgd2Y9e2N1cnJlbnQ6bnVsbH0seGY9bnVsbCx5Zj1udWxsLHpmPW51bGw7ZnVuY3Rpb24gQWYoYSxiKXt2YXIgYz1hLnR5cGUuX2NvbnRleHQ7SSh3ZixjLl9jdXJyZW50VmFsdWUsYSk7Yy5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gQmYoYSl7dmFyIGI9d2YuY3VycmVudDtIKHdmLGEpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gQ2YoYSl7eGY9YTt6Zj15Zj1udWxsO2EuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT1udWxsfVxuZnVuY3Rpb24gRGYoYSxiKXtpZih6ZiE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpemY9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07bnVsbD09PXlmPyhudWxsPT09eGY/dChcIjI5M1wiKTp2b2lkIDAseGYuZmlyc3RDb250ZXh0RGVwZW5kZW5jeT15Zj1iKTp5Zj15Zi5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgRWY9e30sTj17Y3VycmVudDpFZn0sRmY9e2N1cnJlbnQ6RWZ9LEdmPXtjdXJyZW50OkVmfTtmdW5jdGlvbiBIZihhKXthPT09RWY/dChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZihhLGIpe0koR2YsYixhKTtJKEZmLGEsYSk7SShOLEVmLGEpO3ZhciBjPWIubm9kZVR5cGU7c3dpdGNoKGMpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOm1lKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDpjPTg9PT1jP2IucGFyZW50Tm9kZTpiLGI9Yy5uYW1lc3BhY2VVUkl8fG51bGwsYz1jLnRhZ05hbWUsYj1tZShiLGMpfUgoTixhKTtJKE4sYixhKX1mdW5jdGlvbiBKZihhKXtIKE4sYSk7SChGZixhKTtIKEdmLGEpfWZ1bmN0aW9uIEtmKGEpe0hmKEdmLmN1cnJlbnQpO3ZhciBiPUhmKE4uY3VycmVudCk7dmFyIGM9bWUoYixhLnR5cGUpO2IhPT1jJiYoSShGZixhLGEpLEkoTixjLGEpKX1mdW5jdGlvbiBMZihhKXtGZi5jdXJyZW50PT09YSYmKEgoTixhKSxIKEZmLGEpKX1cbmZ1bmN0aW9uIE8oYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9ZnVuY3Rpb24gTWYoYSl7dmFyIGI9YS5fcmVzdWx0O3N3aXRjaChhLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYjtjYXNlIDI6dGhyb3cgYjtjYXNlIDA6dGhyb3cgYjtkZWZhdWx0OnRocm93IGEuX3N0YXR1cz0wLGI9YS5fY3RvcixiPWIoKSxiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pLGEuX3Jlc3VsdD1iLGI7fX12YXIgTmY9WGIuUmVhY3RDdXJyZW50T3duZXIsT2Y9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBQZihhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jO2Q9YS51cGRhdGVRdWV1ZTtudWxsIT09ZCYmMD09PWEuZXhwaXJhdGlvblRpbWUmJihkLmJhc2VTdGF0ZT1jKX1cbnZhciBVZj17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PWtkKGEpOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPVFmKCk7ZD1SZihkLGEpO3ZhciBlPW1mKGQpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTtTZigpO29mKGEsZSk7VGYoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9UWYoKTtkPVJmKGQsYSk7dmFyIGU9bWYoZCk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7U2YoKTtvZihhLGUpO1RmKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPVFmKCk7Yz1SZihjLGEpO3ZhciBkPW1mKGMpO2QudGFnPVxuMjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7U2YoKTtvZihhLGQpO1RmKGEsYyl9fTtmdW5jdGlvbiBWZihhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFqZChjLGQpfHwhamQoZSxmKTohMH1cbmZ1bmN0aW9uIFdmKGEsYixjKXt2YXIgZD0hMSxlPUplO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPU5mLmN1cnJlbnREaXNwYXRjaGVyLnJlYWRDb250ZXh0KGYpOihlPUwoYik/S2U6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/TGUoYSxlKTpKZSk7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPVVmO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFhmKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZVZi5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIFlmKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9T2Y7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1OZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChmKTooZj1MKGIpP0tlOkouY3VycmVudCxlLmNvbnRleHQ9TGUoYSxmKSk7Zj1hLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoc2YoYSxmLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKFBmKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJlVmLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGY9YS51cGRhdGVRdWV1ZSxudWxsIT09ZiYmKHNmKGEsZixjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgWmY9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uICRmKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDEhPT1jLnRhZz90KFwiMjg5XCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDp0KFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1PZiYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifVwic3RyaW5nXCIhPT10eXBlb2YgYT90KFwiMjg0XCIpOnZvaWQgMDtjLl9vd25lcj92b2lkIDA6dChcIjI5MFwiLGEpfXJldHVybiBhfVxuZnVuY3Rpb24gYWcoYSxiKXtcInRleHRhcmVhXCIhPT1hLnR5cGUmJnQoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKX1cbmZ1bmN0aW9uIGJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiLGMpe2E9WmUoYSxiLGMpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1jZihjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMsZCksZC5yZWY9JGYoYSxiLGMpLGQucmV0dXJuPWEsZDtkPSRlKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPSRmKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9ZGYoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdLGQpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGcpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9YWYoYyxhLm1vZGUsZCxnKSxiLnJldHVybj1hLGI7Yj1lKGIsYyxkKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPWNmKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjPSRlKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPSRmKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYjpyZXR1cm4gYj1kZihiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoWmYoYil8fFxubGMoYikpcmV0dXJuIGI9YWYoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7YWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFpiOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWM/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRiOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFpmKGMpfHxsYyhjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7YWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmI6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFjP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRiOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFpmKGQpfHxsYyhkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7YWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBCKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHI9bnVsbCxtPWcsdT1nPTAscD1udWxsO251bGwhPT1tJiZ1PGgubGVuZ3RoO3UrKyl7bS5pbmRleD51PyhwPW0sbT1udWxsKTpwPW0uc2libGluZzt2YXIgdj14KGUsbSxoW3VdLGspO2lmKG51bGw9PT12KXtudWxsPT09bSYmKG09cCk7YnJlYWt9YSYmXG5tJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodixnLHUpO251bGw9PT1yP2w9djpyLnNpYmxpbmc9djtyPXY7bT1wfWlmKHU9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7dTxoLmxlbmd0aDt1KyspaWYobT1xKGUsaFt1XSxrKSlnPWYobSxnLHUpLG51bGw9PT1yP2w9bTpyLnNpYmxpbmc9bSxyPW07cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3U8aC5sZW5ndGg7dSsrKWlmKHA9eihtLGUsdSxoW3VdLGspKWEmJm51bGwhPT1wLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PXAua2V5P3U6cC5rZXkpLGc9ZihwLGcsdSksbnVsbD09PXI/bD1wOnIuc2libGluZz1wLHI9cDthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIFEoZSxnLGgsayl7dmFyIGw9bGMoaCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIGw/dChcIjE1MFwiKTp2b2lkIDA7aD1sLmNhbGwoaCk7bnVsbD09aD90KFwiMTUxXCIpOnZvaWQgMDtcbmZvcih2YXIgbT1sPW51bGwscj1nLHU9Zz0wLHA9bnVsbCx2PWgubmV4dCgpO251bGwhPT1yJiYhdi5kb25lO3UrKyx2PWgubmV4dCgpKXtyLmluZGV4PnU/KHA9cixyPW51bGwpOnA9ci5zaWJsaW5nO3ZhciB5PXgoZSxyLHYudmFsdWUsayk7aWYobnVsbD09PXkpe3J8fChyPXApO2JyZWFrfWEmJnImJm51bGw9PT15LmFsdGVybmF0ZSYmYihlLHIpO2c9Zih5LGcsdSk7bnVsbD09PW0/bD15Om0uc2libGluZz15O209eTtyPXB9aWYodi5kb25lKXJldHVybiBjKGUsciksbDtpZihudWxsPT09cil7Zm9yKDshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9cShlLHYudmFsdWUsayksbnVsbCE9PXYmJihnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO3JldHVybiBsfWZvcihyPWQoZSxyKTshdi5kb25lO3UrKyx2PWgubmV4dCgpKXY9eihyLGUsdSx2LnZhbHVlLGspLG51bGwhPT12JiYoYSYmbnVsbCE9PXYuYWx0ZXJuYXRlJiZyLmRlbGV0ZShudWxsPT09di5rZXk/dTpcbnYua2V5KSxnPWYodixnLHUpLG51bGw9PT1tP2w9djptLnNpYmxpbmc9dixtPXYpO2EmJnIuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFjJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFpiOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bClpZig3PT09ay50YWc/Zi50eXBlPT09YWM6ay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi50eXBlPT09YWM/Zi5wcm9wcy5jaGlsZHJlbjpmLnByb3BzLGgpO2QucmVmPSRmKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9XG5rLnNpYmxpbmd9Zi50eXBlPT09YWM/KGQ9YWYoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPSRlKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPSRmKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYjphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10saCk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPWRmKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVxuXCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsaCksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1jZihmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihaZihmKSlyZXR1cm4gQihhLGQsZixoKTtpZihsYyhmKSlyZXR1cm4gUShhLGQsZixoKTtsJiZhZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOmg9YS50eXBlLHQoXCIxNTJcIixoLmRpc3BsYXlOYW1lfHxoLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBjZz1iZyghMCksZGc9YmcoITEpLGVnPW51bGwsZmc9bnVsbCxnZz0hMTtcbmZ1bmN0aW9uIGhnKGEsYil7dmFyIGM9TSg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIGlnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gamcoYSl7aWYoZ2cpe3ZhciBiPWZnO2lmKGIpe3ZhciBjPWI7aWYoIWlnKGEsYikpe2I9RmUoYyk7aWYoIWJ8fCFpZyhhLGIpKXthLmVmZmVjdFRhZ3w9MjtnZz0hMTtlZz1hO3JldHVybn1oZyhlZyxjKX1lZz1hO2ZnPUdlKGIpfWVsc2UgYS5lZmZlY3RUYWd8PTIsZ2c9ITEsZWc9YX19ZnVuY3Rpb24ga2coYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWEucmV0dXJuO2VnPWF9ZnVuY3Rpb24gbGcoYSl7aWYoYSE9PWVnKXJldHVybiExO2lmKCFnZylyZXR1cm4ga2coYSksZ2c9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFDZShiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9Zmc7YjspaGcoYSxiKSxiPUZlKGIpO2tnKGEpO2ZnPWVnP0ZlKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIG1nKCl7Zmc9ZWc9bnVsbDtnZz0hMX12YXIgbmc9WGIuUmVhY3RDdXJyZW50T3duZXI7XG5mdW5jdGlvbiBQKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/ZGcoYixudWxsLGMsZCk6Y2coYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gb2coYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO0NmKGIsZSk7ZD1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UChhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBnKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhWGUoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxxZyhhLGIsZyxkLGUsZik7YT0kZShjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmpkLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIHJnKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVplKGcsZCxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBxZyhhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZlPGYmJmpkKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZj9yZyhhLGIsZik6c2coYSxiLGMsZCxmKX1mdW5jdGlvbiB0ZyhhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIHNnKGEsYixjLGQsZSl7dmFyIGY9TChjKT9LZTpKLmN1cnJlbnQ7Zj1MZShiLGYpO0NmKGIsZSk7Yz1jKGQsZik7Yi5lZmZlY3RUYWd8PTE7UChhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHVnKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7UWUoYil9ZWxzZSBmPSExO0NmKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxXZihiLGMsZCxlKSxZZihiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1OZi5jdXJyZW50RGlzcGF0Y2hlci5yZWFkQ29udGV4dChsKToobD1MKGMpP0tlOkouY3VycmVudCxsPUxlKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZYZihiLGcsZCxsKTtqZj0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7az1nLnN0YXRlPXg7dmFyIHo9Yi51cGRhdGVRdWV1ZTtudWxsIT09eiYmKHNmKGIseixkLGcsZSksaz1iLm1lbW9pemVkU3RhdGUpO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHxqZj8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihQZihiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9amZ8fFZmKGIsYyxoLGQseCxrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOk8oYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9TmYuY3VycmVudERpc3BhdGNoZXIucmVhZENvbnRleHQobCk6KGw9TChjKT9LZTpKLmN1cnJlbnQsbD1MZShiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuKHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZYZihiLGcsZCxsKSxqZj0hMSxrPWIubWVtb2l6ZWRTdGF0ZSx4PWcuc3RhdGU9ayx6PWIudXBkYXRlUXVldWUsbnVsbCE9PXomJihzZihiLHosZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlKSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8amY/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoUGYoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPWpmfHxWZihiLGMsaCxkLGsseCxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHxcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9XG5kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiB2ZyhhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiB2ZyhhLGIsYyxkLGUsZil7dGcoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJlJlKGIsYywhMSkscmcoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7bmcuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9Y2coYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1jZyhiLG51bGwsaCxmKSk6UChhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZSZShiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHdnKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/T2UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmT2UoYSxiLmNvbnRleHQsITEpO0lmKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIHhnKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRTdGF0ZTtpZigwPT09KGIuZWZmZWN0VGFnJjY0KSl7Zj1udWxsO3ZhciBnPSExfWVsc2UgZj17dGltZWRPdXRBdDpudWxsIT09Zj9mLnRpbWVkT3V0QXQ6MH0sZz0hMCxiLmVmZmVjdFRhZyY9LTY1O251bGw9PT1hP2c/KGc9ZS5mYWxsYmFjayxlPWFmKG51bGwsZCwwLG51bGwpLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1hZihnLGQsYyxudWxsKSxlLnNpYmxpbmc9ZCxjPWUsYy5yZXR1cm49ZC5yZXR1cm49Yik6Yz1kPWRnKGIsbnVsbCxlLmNoaWxkcmVuLGMpOm51bGwhPT1hLm1lbW9pemVkU3RhdGU/KGQ9YS5jaGlsZCxhPWQuc2libGluZyxnPyhjPWUuZmFsbGJhY2ssZT1aZShkLGQucGVuZGluZ1Byb3BzLDApLDA9PT0oYi5tb2RlJjEpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP1xuYi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1kLmNoaWxkJiYoZS5jaGlsZD1nKSksZD1lLnNpYmxpbmc9WmUoYSxjLGEuZXhwaXJhdGlvblRpbWUpLGM9ZSxlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxjLnJldHVybj1kLnJldHVybj1iKTpjPWQ9Y2coYixkLmNoaWxkLGUuY2hpbGRyZW4sYykpOihhPWEuY2hpbGQsZz8oZz1lLmZhbGxiYWNrLGU9YWYobnVsbCxkLDAsbnVsbCksZS5jaGlsZD1hLDA9PT0oYi5tb2RlJjEpJiYoZS5jaGlsZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCksZD1lLnNpYmxpbmc9YWYoZyxkLGMsbnVsbCksZC5lZmZlY3RUYWd8PTIsYz1lLGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGMucmV0dXJuPWQucmV0dXJuPWIpOmQ9Yz1jZyhiLGEsZS5jaGlsZHJlbixjKSk7Yi5tZW1vaXplZFN0YXRlPWY7Yi5jaGlsZD1jO3JldHVybiBkfVxuZnVuY3Rpb24gcmcoYSxiLGMpe251bGwhPT1hJiYoYi5maXJzdENvbnRleHREZXBlbmRlbmN5PWEuZmlyc3RDb250ZXh0RGVwZW5kZW5jeSk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP3QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1aZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1aZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB5ZyhhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSYmYS5tZW1vaXplZFByb3BzPT09Yi5wZW5kaW5nUHJvcHMmJiFLLmN1cnJlbnQmJmQ8Yyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6d2coYik7bWcoKTticmVhaztjYXNlIDU6S2YoYik7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmUWUoYik7YnJlYWs7Y2FzZSA0OklmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpBZihiLGIubWVtb2l6ZWRQcm9wcy52YWx1ZSk7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtpZigwIT09ZCYmZD49YylyZXR1cm4geGcoYSxiLGMpO2I9cmcoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH19cmV0dXJuIHJnKGEsYixjKX1iLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLmVsZW1lbnRUeXBlO251bGwhPT1cbmEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9TGUoYixKLmN1cnJlbnQpO0NmKGIsYyk7ZT1kKGEsZSk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2lmKEwoZCkpe3ZhciBmPSEwO1FlKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZQZihiLGQsZyxhKTtlLnVwZGF0ZXI9VWY7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtZZihiLGQsYSxjKTtiPXZnKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFAobnVsbCxiLGUsYyksYj1iLmNoaWxkO1xucmV0dXJuIGI7Y2FzZSAxNjplPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2Y9Yi5wZW5kaW5nUHJvcHM7YT1NZihlKTtiLnR5cGU9YTtlPWIudGFnPVllKGEpO2Y9TyhhLGYpO2c9dm9pZCAwO3N3aXRjaChlKXtjYXNlIDA6Zz1zZyhudWxsLGIsYSxmLGMpO2JyZWFrO2Nhc2UgMTpnPXVnKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxMTpnPW9nKG51bGwsYixhLGYsYyk7YnJlYWs7Y2FzZSAxNDpnPXBnKG51bGwsYixhLE8oYS50eXBlLGYpLGQsYyk7YnJlYWs7ZGVmYXVsdDp0KFwiMjgzXCIsYSl9cmV0dXJuIGc7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpPKGQsZSksc2coYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOk8oZCxlKSx1ZyhhLGIsZCxcbmUsYyk7Y2FzZSAzOndnKGIpO2Q9Yi51cGRhdGVRdWV1ZTtudWxsPT09ZD90KFwiMjgyXCIpOnZvaWQgMDtlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3NmKGIsZCxiLnBlbmRpbmdQcm9wcyxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpbWcoKSxiPXJnKGEsYixjKTtlbHNle2U9Yi5zdGF0ZU5vZGU7aWYoZT0obnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZS5oeWRyYXRlKWZnPUdlKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGVnPWIsZT1nZz0hMDtlPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPWRnKGIsbnVsbCxkLGMpKTooUChhLGIsZCxjKSxtZygpKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLZihiKSxudWxsPT09YSYmamcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixDZShkLGUpP2c9bnVsbDpudWxsIT09XG5mJiZDZShkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSx0ZyhhLGIpLDEhPT1jJiZiLm1vZGUmMSYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihQKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZqZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHhnKGEsYixjKTtjYXNlIDQ6cmV0dXJuIElmKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPWNnKGIsbnVsbCxkLGMpOlAoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpPKGQsZSksb2coYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFAoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBQKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFAoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO0FmKGIsZik7aWYobnVsbCE9PWcpe3ZhciBoPWcudmFsdWU7Zj1oPT09ZiYmKDAhPT1ofHwxL2g9PT0xL2YpfHxoIT09aCYmZiE9PWY/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MDtpZigwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9cmcoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGc9Yi5jaGlsZCxudWxsIT09ZyYmKGcucmV0dXJuPWIpO251bGwhPT1nOyl7aD1nLmZpcnN0Q29udGV4dERlcGVuZGVuY3k7aWYobnVsbCE9PWgpe2Rve2lmKGguY29udGV4dD09PWQmJjAhPT0oaC5vYnNlcnZlZEJpdHMmZikpe2lmKDE9PT1nLnRhZyl7dmFyIGs9bWYoYyk7ay50YWc9MjtvZihnLGspfWcuZXhwaXJhdGlvblRpbWU8XG5jJiYoZy5leHBpcmF0aW9uVGltZT1jKTtrPWcuYWx0ZXJuYXRlO251bGwhPT1rJiZrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2Zvcih2YXIgbD1nLnJldHVybjtudWxsIT09bDspe2s9bC5hbHRlcm5hdGU7aWYobC5jaGlsZEV4cGlyYXRpb25UaW1lPGMpbC5jaGlsZEV4cGlyYXRpb25UaW1lPWMsbnVsbCE9PWsmJmsuY2hpbGRFeHBpcmF0aW9uVGltZTxjJiYoay5jaGlsZEV4cGlyYXRpb25UaW1lPWMpO2Vsc2UgaWYobnVsbCE9PWsmJmsuY2hpbGRFeHBpcmF0aW9uVGltZTxjKWsuY2hpbGRFeHBpcmF0aW9uVGltZT1jO2Vsc2UgYnJlYWs7bD1sLnJldHVybn19az1nLmNoaWxkO2g9aC5uZXh0fXdoaWxlKG51bGwhPT1oKX1lbHNlIGs9MTA9PT1nLnRhZz9nLnR5cGU9PT1iLnR5cGU/bnVsbDpnLmNoaWxkOmcuY2hpbGQ7aWYobnVsbCE9PWspay5yZXR1cm49ZztlbHNlIGZvcihrPWc7bnVsbCE9PWs7KXtpZihrPT09Yil7az1udWxsO2JyZWFrfWc9ay5zaWJsaW5nO1xuaWYobnVsbCE9PWcpe2cucmV0dXJuPWsucmV0dXJuO2s9ZzticmVha31rPWsucmV0dXJufWc9a319UChhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixDZihiLGMpLGU9RGYoZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFAoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPU8oZS50eXBlLGIucGVuZGluZ1Byb3BzKSxwZyhhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gcWcoYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOk8oZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLFFlKGIpKTpcbmE9ITEsQ2YoYixjKSxXZihiLGQsZSxjKSxZZihiLGQsZSxjKSx2ZyhudWxsLGIsZCwhMCxhLGMpO2RlZmF1bHQ6dChcIjE1NlwiKX19ZnVuY3Rpb24gemcoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIEFnPXZvaWQgMCxCZz12b2lkIDAsRmc9dm9pZCAwLEdnPXZvaWQgMDtBZz1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmc9ZnVuY3Rpb24oKXt9O1xuRmc9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO0hmKE4uY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPUFjKGcsZik7ZD1BYyhnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9ZWUoZyxmKTtkPWVlKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9Z2UoZyxmKTtkPWdlKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9eWUpfXZlKGMsZCk7Zz1jPXZvaWQgMDt2YXIgaD1udWxsO2ZvcihjIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoYykmJmYuaGFzT3duUHJvcGVydHkoYykmJm51bGwhPWZbY10paWYoXCJzdHlsZVwiPT09XG5jKXt2YXIgaz1mW2NdO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmKGh8fChoPXt9KSxoW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1jJiZcImNoaWxkcmVuXCIhPT1jJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09YyYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWMmJlwiYXV0b0ZvY3VzXCIhPT1jJiYoc2EuaGFzT3duUHJvcGVydHkoYyk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGMsbnVsbCkpO2ZvcihjIGluIGQpe3ZhciBsPWRbY107az1udWxsIT1mP2ZbY106dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoYykmJmwhPT1rJiYobnVsbCE9bHx8bnVsbCE9aykpaWYoXCJzdHlsZVwiPT09YylpZihrKXtmb3IoZyBpbiBrKSFrLmhhc093blByb3BlcnR5KGcpfHxsJiZsLmhhc093blByb3BlcnR5KGcpfHwoaHx8KGg9e30pLGhbZ109XCJcIik7Zm9yKGcgaW4gbClsLmhhc093blByb3BlcnR5KGcpJiZrW2ddIT09bFtnXSYmKGh8fFxuKGg9e30pLGhbZ109bFtnXSl9ZWxzZSBofHwoYXx8KGE9W10pLGEucHVzaChjLGgpKSxoPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWM/KGw9bD9sLl9faHRtbDp2b2lkIDAsaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1sJiZrIT09bCYmKGE9YXx8W10pLnB1c2goYyxcIlwiK2wpKTpcImNoaWxkcmVuXCI9PT1jP2s9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goYyxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1jJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YyYmKHNhLmhhc093blByb3BlcnR5KGMpPyhudWxsIT1sJiZ4ZShlLGMpLGF8fGs9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGMsbCkpfWgmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixoKTtlPWE7KGIudXBkYXRlUXVldWU9ZSkmJnpnKGIpfX07R2c9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJnpnKGIpfTtcbmZ1bmN0aW9uIEhnKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9bmMoYykpO251bGwhPT1jJiZtYyhjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZtYyhhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBJZyhhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtKZyhhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBLZyhhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVGUmJlRlKGEpO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OnZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIubGFzdEVmZmVjdCxudWxsIT09Yikpe3ZhciBjPWI9Yi5uZXh0O2Rve3ZhciBkPWMuZGVzdHJveTtpZihudWxsIT09ZCl7dmFyIGU9YTt0cnl7ZCgpfWNhdGNoKGYpe0pnKGUsZil9fWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX1icmVhaztjYXNlIDE6SWcoYSk7Yj1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGYpe0pnKGEsZil9YnJlYWs7Y2FzZSA1OklnKGEpO2JyZWFrO2Nhc2UgNDpMZyhhKX19XG5mdW5jdGlvbiBNZyhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIE5nKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE1nKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10KFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHBlKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxNZyhjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWlmKGMpaWYoZCl7dmFyIGY9YixnPWUuc3RhdGVOb2RlLGg9Yzs4PT09Zi5ub2RlVHlwZT9mLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGcsaCk6Zi5pbnNlcnRCZWZvcmUoZyxoKX1lbHNlIGIuaW5zZXJ0QmVmb3JlKGUuc3RhdGVOb2RlLGMpO2Vsc2UgZD8oZz1iLGg9ZS5zdGF0ZU5vZGUsOD09PWcubm9kZVR5cGU/KGY9Zy5wYXJlbnROb2RlLGYuaW5zZXJ0QmVmb3JlKGgsZykpOihmPWcsZi5hcHBlbmRDaGlsZChoKSksZz1nLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWcmJnZvaWQgMCE9PWd8fG51bGwhPT1mLm9uY2xpY2t8fChmLm9uY2xpY2s9eWUpKTpiLmFwcGVuZENoaWxkKGUuc3RhdGVOb2RlKTtcbmVsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZC5yZXR1cm49ZTtlPWUuY2hpbGQ7Y29udGludWV9aWYoZT09PWEpYnJlYWs7Zm9yKDtudWxsPT09ZS5zaWJsaW5nOyl7aWYobnVsbD09PWUucmV0dXJufHxlLnJldHVybj09PWEpcmV0dXJuO2U9ZS5yZXR1cm59ZS5zaWJsaW5nLnJldHVybj1lLnJldHVybjtlPWUuc2libGluZ319XG5mdW5jdGlvbiBMZyhhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWIucmV0dXJuO2E6Zm9yKDs7KXtudWxsPT09Yz90KFwiMTYwXCIpOnZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpkPWMuc3RhdGVOb2RlO2U9ITE7YnJlYWsgYTtjYXNlIDM6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYTtjYXNlIDQ6ZD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2U9ITA7YnJlYWsgYX1jPWMucmV0dXJufWM9ITB9aWYoNT09PWIudGFnfHw2PT09Yi50YWcpe2E6Zm9yKHZhciBmPWIsZz1mOzspaWYoS2coZyksbnVsbCE9PWcuY2hpbGQmJjQhPT1nLnRhZylnLmNoaWxkLnJldHVybj1nLGc9Zy5jaGlsZDtlbHNle2lmKGc9PT1mKWJyZWFrO2Zvcig7bnVsbD09PWcuc2libGluZzspe2lmKG51bGw9PT1nLnJldHVybnx8Zy5yZXR1cm49PT1mKWJyZWFrIGE7Zz1nLnJldHVybn1nLnNpYmxpbmcucmV0dXJuPWcucmV0dXJuO2c9Zy5zaWJsaW5nfWU/XG4oZj1kLGc9Yi5zdGF0ZU5vZGUsOD09PWYubm9kZVR5cGU/Zi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGcpOmYucmVtb3ZlQ2hpbGQoZykpOmQucmVtb3ZlQ2hpbGQoYi5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWIudGFnPyhkPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8sZT0hMCk6S2coYiksbnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybjtiPWIucmV0dXJuOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fVxuZnVuY3Rpb24gT2coYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpicmVhaztjYXNlIDE6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW0hhXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZDYyhjLGQpO3dlKGEsZSk7Yj13ZShhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGUoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29lKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wZShjLGgpOnljKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpEYyhjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmllKGMsXG5kKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9mZShjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/ZmUoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOmZlKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT90KFwiMTYyXCIpOnZvaWQgMDtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO2JyZWFrO2Nhc2UgMzpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6Yz1iLm1lbW9pemVkU3RhdGU7YT1iO251bGw9PT1jP2Q9ITE6KGQ9ITAsYT1iLmNoaWxkLDA9PT1jLnRpbWVkT3V0QXQmJihjLnRpbWVkT3V0QXQ9UWYoKSkpO2lmKG51bGwhPT1hKWE6Zm9yKGI9Yz1hOzspe2lmKDU9PT1cbmIudGFnKWE9Yi5zdGF0ZU5vZGUsZD9hLnN0eWxlLmRpc3BsYXk9XCJub25lXCI6KGE9Yi5zdGF0ZU5vZGUsZj1iLm1lbW9pemVkUHJvcHMuc3R5bGUsZj12b2lkIDAhPT1mJiZudWxsIT09ZiYmZi5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/Zi5kaXNwbGF5Om51bGwsYS5zdHlsZS5kaXNwbGF5PXNlKFwiZGlzcGxheVwiLGYpKTtlbHNlIGlmKDY9PT1iLnRhZyliLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmIubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09Yi50YWcmJm51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2E9Yi5jaGlsZC5zaWJsaW5nO2EucmV0dXJuPWI7Yj1hO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1jKWJyZWFrIGE7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWMpYnJlYWsgYTtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49XG5iLnJldHVybjtiPWIuc2libGluZ31icmVhaztjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dChcIjE2M1wiKX19ZnVuY3Rpb24gUGcoYSxiLGMpe2M9bWYoYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWcoZCk7SGcoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSZyhhLGIsYyl7Yz1tZihjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TZz9TZz1uZXcgU2V0KFt0aGlzXSk6U2cuYWRkKHRoaXMpKTt2YXIgYz1iLnZhbHVlLGU9Yi5zdGFjaztIZyhhLGIpO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWU/ZTpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRnKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmTWUoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMjA0OD8oYS5lZmZlY3RUYWc9YiYtMjA0OXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmYoYSksTmUoYSksYj1hLmVmZmVjdFRhZywwIT09KGImNjQpP3QoXCIyODVcIik6dm9pZCAwLGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYTtjYXNlIDU6cmV0dXJuIExmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gYj1hLmVmZmVjdFRhZyxiJjIwNDg/KGEuZWZmZWN0VGFnPWImLTIwNDl8NjQsYSk6bnVsbDtjYXNlIDQ6cmV0dXJuIEpmKGEpLG51bGw7Y2FzZSAxMDpyZXR1cm4gQmYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBVZz17cmVhZENvbnRleHQ6RGZ9LFZnPVhiLlJlYWN0Q3VycmVudE93bmVyLFdnPTEwNzM3NDE4MjIsWGc9MCxZZz0hMSxSPW51bGwsUz1udWxsLFQ9MCxaZz0tMSwkZz0hMSxVPW51bGwsYWg9ITEsYmg9bnVsbCxjaD1udWxsLFNnPW51bGw7ZnVuY3Rpb24gZGgoKXtpZihudWxsIT09Uilmb3IodmFyIGE9Ui5yZXR1cm47bnVsbCE9PWE7KXt2YXIgYj1hO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnZhciBjPWIudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09YyYmdm9pZCAwIT09YyYmTWUoYik7YnJlYWs7Y2FzZSAzOkpmKGIpO05lKGIpO2JyZWFrO2Nhc2UgNTpMZihiKTticmVhaztjYXNlIDQ6SmYoYik7YnJlYWs7Y2FzZSAxMDpCZihiKX1hPWEucmV0dXJufVM9bnVsbDtUPTA7Wmc9LTE7JGc9ITE7Uj1udWxsfWZ1bmN0aW9uIFNmKCl7bnVsbCE9PWNoJiYoYmEudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2soYmgpLGNoKCkpfVxuZnVuY3Rpb24gZWgoYSl7Zm9yKDs7KXt2YXIgYj1hLmFsdGVybmF0ZSxjPWEucmV0dXJuLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmMTAyNCkpe1I9YTthOnt2YXIgZT1iO2I9YTt2YXIgZj1UO3ZhciBnPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgMTY6YnJlYWs7Y2FzZSAxNTpjYXNlIDA6YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmTWUoYik7YnJlYWs7Y2FzZSAzOkpmKGIpO05lKGIpO2c9Yi5zdGF0ZU5vZGU7Zy5wZW5kaW5nQ29udGV4dCYmKGcuY29udGV4dD1nLnBlbmRpbmdDb250ZXh0LGcucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWV8fG51bGw9PT1lLmNoaWxkKWxnKGIpLGIuZWZmZWN0VGFnJj0tMztCZyhiKTticmVhaztjYXNlIDU6TGYoYik7dmFyIGg9SGYoR2YuY3VycmVudCk7Zj1iLnR5cGU7aWYobnVsbCE9PWUmJm51bGwhPWIuc3RhdGVOb2RlKUZnKGUsYixmLGcsaCksZS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD1cbjEyOCk7ZWxzZSBpZihnKXt2YXIgaz1IZihOLmN1cnJlbnQpO2lmKGxnKGIpKXtnPWI7ZT1nLnN0YXRlTm9kZTt2YXIgbD1nLnR5cGUsbT1nLm1lbW9pemVkUHJvcHMscT1oO2VbR2FdPWc7ZVtIYV09bTtmPXZvaWQgMDtoPWw7c3dpdGNoKGgpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6RyhcImxvYWRcIixlKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IobD0wO2w8YmIubGVuZ3RoO2wrKylHKGJiW2xdLGUpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixlKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixlKTtHKFwibG9hZFwiLGUpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RyhcInJlc2V0XCIsZSk7RyhcInN1Ym1pdFwiLGUpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGUpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJjKGUsbSk7RyhcImludmFsaWRcIixlKTt4ZShxLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmUuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIW0ubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZSk7eGUocSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhlKGUsbSksRyhcImludmFsaWRcIixlKSx4ZShxLFwib25DaGFuZ2VcIil9dmUoaCxtKTtsPW51bGw7Zm9yKGYgaW4gbSltLmhhc093blByb3BlcnR5KGYpJiYoaz1tW2ZdLFwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrP2UudGV4dENvbnRlbnQhPT1rJiYobD1bXCJjaGlsZHJlblwiLGtdKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmUudGV4dENvbnRlbnQhPT1cIlwiK2smJihsPVtcImNoaWxkcmVuXCIsXCJcIitrXSk6c2EuaGFzT3duUHJvcGVydHkoZikmJm51bGwhPWsmJnhlKHEsZikpO3N3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpWYihlKTtGYyhlLG0sITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZiKGUpO2plKGUsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBtLm9uQ2xpY2smJlxuKGUub25jbGljaz15ZSl9Zj1sO2cudXBkYXRlUXVldWU9ZjtnPW51bGwhPT1mPyEwOiExO2cmJnpnKGIpfWVsc2V7bT1iO2U9ZjtxPWc7bD05PT09aC5ub2RlVHlwZT9oOmgub3duZXJEb2N1bWVudDtrPT09a2UuaHRtbCYmKGs9bGUoZSkpO2s9PT1rZS5odG1sP1wic2NyaXB0XCI9PT1lPyhlPWwuY3JlYXRlRWxlbWVudChcImRpdlwiKSxlLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGw9ZS5yZW1vdmVDaGlsZChlLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIHEuaXM/bD1sLmNyZWF0ZUVsZW1lbnQoZSx7aXM6cS5pc30pOihsPWwuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmcS5tdWx0aXBsZSYmKGwubXVsdGlwbGU9ITApKTpsPWwuY3JlYXRlRWxlbWVudE5TKGssZSk7ZT1sO2VbR2FdPW07ZVtIYV09ZztBZyhlLGIsITEsITEpO3E9ZTtsPWY7bT1nO3ZhciB4PWgsej13ZShsLG0pO3N3aXRjaChsKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOkcoXCJsb2FkXCIsXG5xKTtoPW07YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGJiLmxlbmd0aDtoKyspRyhiYltoXSxxKTtoPW07YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLHEpO2g9bTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixxKTtHKFwibG9hZFwiLHEpO2g9bTticmVhaztjYXNlIFwiZm9ybVwiOkcoXCJyZXNldFwiLHEpO0coXCJzdWJtaXRcIixxKTtoPW07YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIscSk7aD1tO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkJjKHEsbSk7aD1BYyhxLG0pO0coXCJpbnZhbGlkXCIscSk7eGUoeCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPWVlKHEsbSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFtLm11bHRpcGxlfTtoPW4oe30sbSx7dmFsdWU6dm9pZCAwfSk7RyhcImludmFsaWRcIixxKTt4ZSh4LFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGUocSxcbm0pO2g9Z2UocSxtKTtHKFwiaW52YWxpZFwiLHEpO3hlKHgsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9bX12ZShsLGgpO2s9dm9pZCAwO3ZhciBCPWwsUT1xLHY9aDtmb3IoayBpbiB2KWlmKHYuaGFzT3duUHJvcGVydHkoaykpe3ZhciByPXZba107XCJzdHlsZVwiPT09az90ZShRLHIpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWs/KHI9cj9yLl9faHRtbDp2b2lkIDAsbnVsbCE9ciYmb2UoUSxyKSk6XCJjaGlsZHJlblwiPT09az9cInN0cmluZ1wiPT09dHlwZW9mIHI/KFwidGV4dGFyZWFcIiE9PUJ8fFwiXCIhPT1yKSYmcGUoUSxyKTpcIm51bWJlclwiPT09dHlwZW9mIHImJnBlKFEsXCJcIityKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ayYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWsmJlwiYXV0b0ZvY3VzXCIhPT1rJiYoc2EuaGFzT3duUHJvcGVydHkoayk/bnVsbCE9ciYmeGUoeCxrKTpudWxsIT1yJiZ5YyhRLGsscix6KSl9c3dpdGNoKGwpe2Nhc2UgXCJpbnB1dFwiOlZiKHEpO1xuRmMocSxtLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYihxKTtqZShxLG0pO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1tLnZhbHVlJiZxLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIit6YyhtLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmg9cTtoLm11bHRpcGxlPSEhbS5tdWx0aXBsZTtxPW0udmFsdWU7bnVsbCE9cT9mZShoLCEhbS5tdWx0aXBsZSxxLCExKTpudWxsIT1tLmRlZmF1bHRWYWx1ZSYmZmUoaCwhIW0ubXVsdGlwbGUsbS5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKHEub25jbGljaz15ZSl9KGc9QmUoZixnKSkmJnpnKGIpO2Iuc3RhdGVOb2RlPWV9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZSBudWxsPT09Yi5zdGF0ZU5vZGU/dChcIjE2NlwiKTp2b2lkIDA7YnJlYWs7Y2FzZSA2OmUmJm51bGwhPWIuc3RhdGVOb2RlP0dnKGUsYixlLm1lbW9pemVkUHJvcHMsZyk6KFwic3RyaW5nXCIhPT1cbnR5cGVvZiBnJiYobnVsbD09PWIuc3RhdGVOb2RlP3QoXCIxNjZcIik6dm9pZCAwKSxlPUhmKEdmLmN1cnJlbnQpLEhmKE4uY3VycmVudCksbGcoYik/KGc9YixmPWcuc3RhdGVOb2RlLGU9Zy5tZW1vaXplZFByb3BzLGZbR2FdPWcsKGc9Zi5ub2RlVmFsdWUhPT1lKSYmemcoYikpOihmPWIsZz0oOT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGcpLGdbR2FdPWIsZi5zdGF0ZU5vZGU9ZykpO2JyZWFrO2Nhc2UgMTE6YnJlYWs7Y2FzZSAxMzpnPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSl7Yi5leHBpcmF0aW9uVGltZT1mO1I9YjticmVhayBhfWc9bnVsbCE9PWc7Zj1udWxsIT09ZSYmbnVsbCE9PWUubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmIWcmJmYmJihlPWUuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGg9Yi5maXJzdEVmZmVjdCxudWxsIT09aD8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1oKTooYi5maXJzdEVmZmVjdD1cbmIubGFzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSk7aWYoZyE9PWZ8fDA9PT0oYi5lZmZlY3RUYWcmMSkmJmcpYi5lZmZlY3RUYWd8PTQ7YnJlYWs7Y2FzZSA3OmJyZWFrO2Nhc2UgODpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgNDpKZihiKTtCZyhiKTticmVhaztjYXNlIDEwOkJmKGIpO2JyZWFrO2Nhc2UgOTpicmVhaztjYXNlIDE0OmJyZWFrO2Nhc2UgMTc6TChiLnR5cGUpJiZNZShiKTticmVhaztkZWZhdWx0OnQoXCIxNTZcIil9Uj1udWxsfWI9YTtpZigxPT09VHx8MSE9PWIuY2hpbGRFeHBpcmF0aW9uVGltZSl7Zz0wO2ZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KWU9Zi5leHBpcmF0aW9uVGltZSxoPWYuY2hpbGRFeHBpcmF0aW9uVGltZSxlPmcmJihnPWUpLGg+ZyYmKGc9aCksZj1mLnNpYmxpbmc7Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWd9aWYobnVsbCE9PVIpcmV0dXJuIFI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmMTAyNCkmJihudWxsPT09XG5jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSl9ZWxzZXthPVRnKGEsVCk7aWYobnVsbCE9PWEpcmV0dXJuIGEuZWZmZWN0VGFnJj0xMDIzLGE7bnVsbCE9PWMmJihjLmZpcnN0RWZmZWN0PWMubGFzdEVmZmVjdD1udWxsLGMuZWZmZWN0VGFnfD0xMDI0KX1pZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha31yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGZoKGEpe3ZhciBiPXlnKGEuYWx0ZXJuYXRlLGEsVCk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1laChhKSk7VmcuY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gZ2goYSxiKXtZZz90KFwiMjQzXCIpOnZvaWQgMDtTZigpO1lnPSEwO1ZnLmN1cnJlbnREaXNwYXRjaGVyPVVnO3ZhciBjPWEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT247aWYoYyE9PVR8fGEhPT1TfHxudWxsPT09UilkaCgpLFM9YSxUPWMsUj1aZShTLmN1cnJlbnQsbnVsbCxUKSxhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT0wO3ZhciBkPSExO2Rve3RyeXtpZihiKWZvcig7bnVsbCE9PVImJiFoaCgpOylSPWZoKFIpO2Vsc2UgZm9yKDtudWxsIT09UjspUj1maChSKX1jYXRjaChCKXtpZih6Zj15Zj14Zj1udWxsLG51bGw9PT1SKWQ9ITAsUWcoQik7ZWxzZXtudWxsPT09Uj90KFwiMjcxXCIpOnZvaWQgMDt2YXIgZT1SLGY9ZS5yZXR1cm47aWYobnVsbD09PWYpZD0hMCxRZyhCKTtlbHNle2E6e3ZhciBnPWEsaD1mLGs9ZSxsPUI7Zj1UO2suZWZmZWN0VGFnfD0xMDI0O2suZmlyc3RFZmZlY3Q9ay5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWwmJlwib2JqZWN0XCI9PT1cbnR5cGVvZiBsJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbC50aGVuKXt2YXIgbT1sO2w9aDt2YXIgcT0tMSx4PS0xO2Rve2lmKDEzPT09bC50YWcpe3ZhciB6PWwuYWx0ZXJuYXRlO2lmKG51bGwhPT16JiYoej16Lm1lbW9pemVkU3RhdGUsbnVsbCE9PXopKXt4PTEwKigxMDczNzQxODIyLXoudGltZWRPdXRBdCk7YnJlYWt9ej1sLnBlbmRpbmdQcm9wcy5tYXhEdXJhdGlvbjtpZihcIm51bWJlclwiPT09dHlwZW9mIHopaWYoMD49eilxPTA7ZWxzZSBpZigtMT09PXF8fHo8cSlxPXp9bD1sLnJldHVybn13aGlsZShudWxsIT09bCk7bD1oO2Rve2lmKHo9MTM9PT1sLnRhZyl6PXZvaWQgMD09PWwubWVtb2l6ZWRQcm9wcy5mYWxsYmFjaz8hMTpudWxsPT09bC5tZW1vaXplZFN0YXRlO2lmKHope2g9aWguYmluZChudWxsLGcsbCxrLDA9PT0obC5tb2RlJjEpPzEwNzM3NDE4MjM6Zik7bS50aGVuKGgsaCk7aWYoMD09PShsLm1vZGUmMSkpe2wuZWZmZWN0VGFnfD02NDtrLmVmZmVjdFRhZyY9LTE5NTc7XG4xPT09ay50YWcmJm51bGw9PT1rLmFsdGVybmF0ZSYmKGsudGFnPTE3KTtrLmV4cGlyYXRpb25UaW1lPWY7YnJlYWsgYX0tMT09PXE/Zz0xMDczNzQxODIzOigtMT09PXgmJih4PTEwKigxMDczNzQxODIyLWhmKGcsZikpLTVFMyksZz14K3EpOzA8PWcmJlpnPGcmJihaZz1nKTtsLmVmZmVjdFRhZ3w9MjA0ODtsLmV4cGlyYXRpb25UaW1lPWY7YnJlYWsgYX1sPWwucmV0dXJufXdoaWxlKG51bGwhPT1sKTtsPUVycm9yKChtYyhrLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrbmMoaykpfSRnPSEwO2w9dmYobCxrKTtnPWg7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6az1cbmw7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5leHBpcmF0aW9uVGltZT1mO2Y9UGcoZyxrLGYpO3BmKGcsZik7YnJlYWsgYTtjYXNlIDE6aWYoaz1sLGg9Zy50eXBlLG09Zy5zdGF0ZU5vZGUsMD09PShnLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1tJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TZ3x8IVNnLmhhcyhtKSkpKXtnLmVmZmVjdFRhZ3w9MjA0ODtnLmV4cGlyYXRpb25UaW1lPWY7Zj1SZyhnLGssZik7cGYoZyxmKTticmVhayBhfX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKX1SPWVoKGUpO2NvbnRpbnVlfX19YnJlYWt9d2hpbGUoMSk7WWc9ITE7emY9eWY9eGY9VmcuY3VycmVudERpc3BhdGNoZXI9bnVsbDtpZihkKVM9bnVsbCxhLmZpbmlzaGVkV29yaz1udWxsO2Vsc2UgaWYobnVsbCE9PVIpYS5maW5pc2hlZFdvcms9bnVsbDtlbHNle2Q9YS5jdXJyZW50LmFsdGVybmF0ZTtcbm51bGw9PT1kP3QoXCIyODFcIik6dm9pZCAwO1M9bnVsbDtpZigkZyl7ZT1hLmxhdGVzdFBlbmRpbmdUaW1lO2Y9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2c9YS5sYXRlc3RQaW5nZWRUaW1lO2lmKDAhPT1lJiZlPGN8fDAhPT1mJiZmPGN8fDAhPT1nJiZnPGMpe2dmKGEsYyk7amgoYSxkLGMsYS5leHBpcmF0aW9uVGltZSwtMSk7cmV0dXJufWlmKCFhLmRpZEVycm9yJiZiKXthLmRpZEVycm9yPSEwO2M9YS5uZXh0RXhwaXJhdGlvblRpbWVUb1dvcmtPbj1jO2I9YS5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2poKGEsZCxjLGIsLTEpO3JldHVybn19YiYmLTEhPT1aZz8oZ2YoYSxjKSxiPTEwKigxMDczNzQxODIyLWhmKGEsYykpLGI8WmcmJihaZz1iKSxiPTEwKigxMDczNzQxODIyLVFmKCkpLGI9WmctYixqaChhLGQsYyxhLmV4cGlyYXRpb25UaW1lLDA+Yj8wOmIpKTooYS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9YyxhLmZpbmlzaGVkV29yaz1kKX19XG5mdW5jdGlvbiBKZyhhLGIpe2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe3N3aXRjaChjLnRhZyl7Y2FzZSAxOnZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TZ3x8IVNnLmhhcyhkKSkpe2E9dmYoYixhKTthPVJnKGMsYSwxMDczNzQxODIzKTtvZihjLGEpO1RmKGMsMTA3Mzc0MTgyMyk7cmV0dXJufWJyZWFrO2Nhc2UgMzphPXZmKGIsYSk7YT1QZyhjLGEsMTA3Mzc0MTgyMyk7b2YoYyxhKTtUZihjLDEwNzM3NDE4MjMpO3JldHVybn1jPWMucmV0dXJufTM9PT1hLnRhZyYmKGM9dmYoYixhKSxjPVBnKGEsYywxMDczNzQxODIzKSxvZihhLGMpLFRmKGEsMTA3Mzc0MTgyMykpfVxuZnVuY3Rpb24gUmYoYSxiKXswIT09WGc/YT1YZzpZZz9hPWFoPzEwNzM3NDE4MjM6VDpiLm1vZGUmMT8oYT1raD8xMDczNzQxODIyLTEwKigoKDEwNzM3NDE4MjItYSsxNSkvMTB8MCkrMSk6MTA3Mzc0MTgyMi0yNSooKCgxMDczNzQxODIyLWErNTAwKS8yNXwwKSsxKSxudWxsIT09UyYmYT09PVQmJi0tYSk6YT0xMDczNzQxODIzO2toJiYoMD09PWxofHxhPGxoKSYmKGxoPWEpO3JldHVybiBhfVxuZnVuY3Rpb24gaWgoYSxiLGMsZCl7dmFyIGU9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU7dmFyIGY9YS5sYXRlc3RTdXNwZW5kZWRUaW1lO2lmKDAhPT1lJiZkPD1lJiZkPj1mKXtmPWU9ZDthLmRpZEVycm9yPSExO3ZhciBnPWEubGF0ZXN0UGluZ2VkVGltZTtpZigwPT09Z3x8Zz5mKWEubGF0ZXN0UGluZ2VkVGltZT1mO2ZmKGYsYSl9ZWxzZSBlPVFmKCksZT1SZihlLGIpLGVmKGEsZSk7MCE9PShiLm1vZGUmMSkmJmE9PT1TJiZUPT09ZCYmKFM9bnVsbCk7bWgoYixlKTswPT09KGIubW9kZSYxKSYmKG1oKGMsZSksMT09PWMudGFnJiZudWxsIT09Yy5zdGF0ZU5vZGUmJihiPW1mKGUpLGIudGFnPTIsb2YoYyxiKSkpO2M9YS5leHBpcmF0aW9uVGltZTswIT09YyYmbmgoYSxjKX1cbmZ1bmN0aW9uIG1oKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59cmV0dXJuIGV9XG5mdW5jdGlvbiBUZihhLGIpe2E9bWgoYSxiKTtudWxsIT09YSYmKCFZZyYmMCE9PVQmJmI+VCYmZGgoKSxlZihhLGIpLFlnJiYhYWgmJlM9PT1hfHxuaChhLGEuZXhwaXJhdGlvblRpbWUpLG9oPnBoJiYob2g9MCx0KFwiMTg1XCIpKSl9ZnVuY3Rpb24gcWgoYSxiLGMsZCxlKXt2YXIgZj1YZztYZz0xMDczNzQxODIzO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e1hnPWZ9fXZhciByaD1udWxsLFY9bnVsbCxzaD0wLHRoPXZvaWQgMCxXPSExLHVoPW51bGwsWD0wLGxoPTAsdmg9ITEsd2g9bnVsbCxaPSExLHhoPSExLGtoPSExLHloPW51bGwsemg9YmEudW5zdGFibGVfbm93KCksQWg9MTA3Mzc0MTgyMi0oemgvMTB8MCksQmg9QWgscGg9NTAsb2g9MCxDaD1udWxsO2Z1bmN0aW9uIERoKCl7QWg9MTA3Mzc0MTgyMi0oKGJhLnVuc3RhYmxlX25vdygpLXpoKS8xMHwwKX1cbmZ1bmN0aW9uIEVoKGEsYil7aWYoMCE9PXNoKXtpZihiPHNoKXJldHVybjtudWxsIT09dGgmJmJhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrKHRoKX1zaD1iO2E9YmEudW5zdGFibGVfbm93KCktemg7dGg9YmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhGaCx7dGltZW91dDoxMCooMTA3Mzc0MTgyMi1iKS1hfSl9ZnVuY3Rpb24gamgoYSxiLGMsZCxlKXthLmV4cGlyYXRpb25UaW1lPWQ7MCE9PWV8fGhoKCk/MDxlJiYoYS50aW1lb3V0SGFuZGxlPURlKEdoLmJpbmQobnVsbCxhLGIsYyksZSkpOihhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuZmluaXNoZWRXb3JrPWIpfWZ1bmN0aW9uIEdoKGEsYixjKXthLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jO2EuZmluaXNoZWRXb3JrPWI7RGgoKTtCaD1BaDtIaChhLGMpfWZ1bmN0aW9uIFFmKCl7aWYoVylyZXR1cm4gQmg7SWgoKTtpZigwPT09WHx8MT09PVgpRGgoKSxCaD1BaDtyZXR1cm4gQmh9XG5mdW5jdGlvbiBuaChhLGIpe251bGw9PT1hLm5leHRTY2hlZHVsZWRSb290PyhhLmV4cGlyYXRpb25UaW1lPWIsbnVsbD09PVY/KHJoPVY9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihWPVYubmV4dFNjaGVkdWxlZFJvb3Q9YSxWLm5leHRTY2hlZHVsZWRSb290PXJoKSk6Yj5hLmV4cGlyYXRpb25UaW1lJiYoYS5leHBpcmF0aW9uVGltZT1iKTtXfHwoWj94aCYmKHVoPWEsWD0xMDczNzQxODIzLEpoKGEsMTA3Mzc0MTgyMywhMSkpOjEwNzM3NDE4MjM9PT1iP0toKDEwNzM3NDE4MjMsITEpOkVoKGEsYikpfVxuZnVuY3Rpb24gSWgoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Vilmb3IodmFyIGM9VixkPXJoO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1WP3QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtyaD1WPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1yaClyaD1lPWQubmV4dFNjaGVkdWxlZFJvb3QsVi5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1WKXtWPWM7Vi5uZXh0U2NoZWR1bGVkUm9vdD1yaDtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PWQubmV4dFNjaGVkdWxlZFJvb3QsZC5uZXh0U2NoZWR1bGVkUm9vdD1udWxsO2Q9Yy5uZXh0U2NoZWR1bGVkUm9vdH1lbHNle2U+YSYmKGE9ZSxiPWQpO2lmKGQ9PT1WKWJyZWFrO2lmKDEwNzM3NDE4MjM9PT1cbmEpYnJlYWs7Yz1kO2Q9ZC5uZXh0U2NoZWR1bGVkUm9vdH19dWg9YjtYPWF9dmFyIExoPSExO2Z1bmN0aW9uIGhoKCl7cmV0dXJuIExoPyEwOmJhLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCk/TGg9ITA6ITF9ZnVuY3Rpb24gRmgoKXt0cnl7aWYoIWhoKCkmJm51bGwhPT1yaCl7RGgoKTt2YXIgYT1yaDtkb3t2YXIgYj1hLmV4cGlyYXRpb25UaW1lOzAhPT1iJiZBaDw9YiYmKGEubmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT249QWgpO2E9YS5uZXh0U2NoZWR1bGVkUm9vdH13aGlsZShhIT09cmgpfUtoKDAsITApfWZpbmFsbHl7TGg9ITF9fVxuZnVuY3Rpb24gS2goYSxiKXtJaCgpO2lmKGIpZm9yKERoKCksQmg9QWg7bnVsbCE9PXVoJiYwIT09WCYmYTw9WCYmIShMaCYmQWg+WCk7KUpoKHVoLFgsQWg+WCksSWgoKSxEaCgpLEJoPUFoO2Vsc2UgZm9yKDtudWxsIT09dWgmJjAhPT1YJiZhPD1YOylKaCh1aCxYLCExKSxJaCgpO2ImJihzaD0wLHRoPW51bGwpOzAhPT1YJiZFaCh1aCxYKTtvaD0wO0NoPW51bGw7aWYobnVsbCE9PXloKWZvcihhPXloLHloPW51bGwsYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO3RyeXtjLl9vbkNvbXBsZXRlKCl9Y2F0Y2goZCl7dmh8fCh2aD0hMCx3aD1kKX19aWYodmgpdGhyb3cgYT13aCx3aD1udWxsLHZoPSExLGE7fWZ1bmN0aW9uIEhoKGEsYil7Vz90KFwiMjUzXCIpOnZvaWQgMDt1aD1hO1g9YjtKaChhLGIsITEpO0toKDEwNzM3NDE4MjMsITEpfVxuZnVuY3Rpb24gSmgoYSxiLGMpe1c/dChcIjI0NVwiKTp2b2lkIDA7Vz0hMDtpZihjKXt2YXIgZD1hLmZpbmlzaGVkV29yaztudWxsIT09ZD9NaChhLGQsYik6KGEuZmluaXNoZWRXb3JrPW51bGwsZD1hLnRpbWVvdXRIYW5kbGUsLTEhPT1kJiYoYS50aW1lb3V0SGFuZGxlPS0xLEVlKGQpKSxnaChhLGMpLGQ9YS5maW5pc2hlZFdvcmssbnVsbCE9PWQmJihoaCgpP2EuZmluaXNoZWRXb3JrPWQ6TWgoYSxkLGIpKSl9ZWxzZSBkPWEuZmluaXNoZWRXb3JrLG51bGwhPT1kP01oKGEsZCxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxkPWEudGltZW91dEhhbmRsZSwtMSE9PWQmJihhLnRpbWVvdXRIYW5kbGU9LTEsRWUoZCkpLGdoKGEsYyksZD1hLmZpbmlzaGVkV29yayxudWxsIT09ZCYmTWgoYSxkLGIpKTtXPSExfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWEuZmlyc3RCYXRjaDtpZihudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU+PWMmJihudWxsPT09eWg/eWg9W2RdOnloLnB1c2goZCksZC5fZGVmZXIpKXthLmZpbmlzaGVkV29yaz1iO2EuZXhwaXJhdGlvblRpbWU9MDtyZXR1cm59YS5maW5pc2hlZFdvcms9bnVsbDthPT09Q2g/b2grKzooQ2g9YSxvaD0wKTthaD1ZZz0hMDthLmN1cnJlbnQ9PT1iP3QoXCIxNzdcIik6dm9pZCAwO2M9YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWM/dChcIjI2MVwiKTp2b2lkIDA7YS5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDtkPWIuZXhwaXJhdGlvblRpbWU7dmFyIGU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2Q9ZT5kP2U6ZDthLmRpZEVycm9yPSExOzA9PT1kPyhhLmVhcmxpZXN0UGVuZGluZ1RpbWU9MCxhLmxhdGVzdFBlbmRpbmdUaW1lPTAsYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9XG4wKTooZT1hLmxhdGVzdFBlbmRpbmdUaW1lLDAhPT1lJiYoZT5kP2EuZWFybGllc3RQZW5kaW5nVGltZT1hLmxhdGVzdFBlbmRpbmdUaW1lPTA6YS5lYXJsaWVzdFBlbmRpbmdUaW1lPmQmJihhLmVhcmxpZXN0UGVuZGluZ1RpbWU9YS5sYXRlc3RQZW5kaW5nVGltZSkpLGU9YS5lYXJsaWVzdFN1c3BlbmRlZFRpbWUsMD09PWU/ZWYoYSxkKTpkPGEubGF0ZXN0U3VzcGVuZGVkVGltZT8oYS5lYXJsaWVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFN1c3BlbmRlZFRpbWU9MCxhLmxhdGVzdFBpbmdlZFRpbWU9MCxlZihhLGQpKTpkPmUmJmVmKGEsZCkpO2ZmKDAsYSk7VmcuY3VycmVudD1udWxsOzE8Yi5lZmZlY3RUYWc/bnVsbCE9PWIubGFzdEVmZmVjdD8oYi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YixkPWIuZmlyc3RFZmZlY3QpOmQ9YjpkPWIuZmlyc3RFZmZlY3Q7emU9SGQ7ZT1UZCgpO2lmKFVkKGUpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBlKXZhciBmPXtzdGFydDplLnNlbGVjdGlvblN0YXJ0LFxuZW5kOmUuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2Y9KGY9ZS5vd25lckRvY3VtZW50KSYmZi5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBnPWYuZ2V0U2VsZWN0aW9uJiZmLmdldFNlbGVjdGlvbigpO2lmKGcmJjAhPT1nLnJhbmdlQ291bnQpe2Y9Zy5hbmNob3JOb2RlO3ZhciBoPWcuYW5jaG9yT2Zmc2V0LGs9Zy5mb2N1c05vZGU7Zz1nLmZvY3VzT2Zmc2V0O3RyeXtmLm5vZGVUeXBlLGsubm9kZVR5cGV9Y2F0Y2goZGIpe2Y9bnVsbDticmVhayBhfXZhciBsPTAsbT0tMSxxPS0xLHg9MCx6PTAsQj1lLFE9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB2Ozspe0IhPT1mfHwwIT09aCYmMyE9PUIubm9kZVR5cGV8fChtPWwraCk7QiE9PWt8fDAhPT1nJiYzIT09Qi5ub2RlVHlwZXx8KHE9bCtnKTszPT09Qi5ub2RlVHlwZSYmKGwrPUIubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh2PUIuZmlyc3RDaGlsZCkpYnJlYWs7UT1CO0I9dn1mb3IoOzspe2lmKEI9PT1lKWJyZWFrIGI7UT09PWYmJlxuKyt4PT09aCYmKG09bCk7UT09PWsmJisrej09PWcmJihxPWwpO2lmKG51bGwhPT0odj1CLm5leHRTaWJsaW5nKSlicmVhaztCPVE7UT1CLnBhcmVudE5vZGV9Qj12fWY9LTE9PT1tfHwtMT09PXE/bnVsbDp7c3RhcnQ6bSxlbmQ6cX19ZWxzZSBmPW51bGx9Zj1mfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBmPW51bGw7QWU9e2ZvY3VzZWRFbGVtOmUsc2VsZWN0aW9uUmFuZ2U6Zn07SGQ9ITE7Zm9yKFU9ZDtudWxsIT09VTspe2U9ITE7Zj12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PVU7KXtpZihVLmVmZmVjdFRhZyYyNTYpYTp7dmFyIHI9VS5hbHRlcm5hdGU7aD1VO3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhayBhO2Nhc2UgMTppZihoLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1yKXt2YXIgdT1yLm1lbW9pemVkUHJvcHMseT1yLm1lbW9pemVkU3RhdGUsWT1oLnN0YXRlTm9kZSxUaD1ZLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGguZWxlbWVudFR5cGU9PT1oLnR5cGU/XG51Ok8oaC50eXBlLHUpLHkpO1kuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9VGh9YnJlYWsgYTtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhayBhO2RlZmF1bHQ6dChcIjE2M1wiKX19VT1VLm5leHRFZmZlY3R9fWNhdGNoKGRiKXtlPSEwLGY9ZGJ9ZSYmKG51bGw9PT1VP3QoXCIxNzhcIik6dm9pZCAwLEpnKFUsZiksbnVsbCE9PVUmJihVPVUubmV4dEVmZmVjdCkpfWZvcihVPWQ7bnVsbCE9PVU7KXtyPSExO3U9dm9pZCAwO3RyeXtmb3IoO251bGwhPT1VOyl7dmFyIHc9VS5lZmZlY3RUYWc7dyYxNiYmcGUoVS5zdGF0ZU5vZGUsXCJcIik7aWYodyYxMjgpe3ZhciBDPVUuYWx0ZXJuYXRlO2lmKG51bGwhPT1DKXt2YXIgcD1DLnJlZjtudWxsIT09cCYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBwP3AobnVsbCk6cC5jdXJyZW50PW51bGwpfX1zd2l0Y2godyYxNCl7Y2FzZSAyOk5nKFUpO1UuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6TmcoVSk7VS5lZmZlY3RUYWcmPVxuLTM7T2coVS5hbHRlcm5hdGUsVSk7YnJlYWs7Y2FzZSA0Ok9nKFUuYWx0ZXJuYXRlLFUpO2JyZWFrO2Nhc2UgODp5PVUsTGcoeSkseS5yZXR1cm49bnVsbCx5LmNoaWxkPW51bGwseS5hbHRlcm5hdGUmJih5LmFsdGVybmF0ZS5jaGlsZD1udWxsLHkuYWx0ZXJuYXRlLnJldHVybj1udWxsKX1VPVUubmV4dEVmZmVjdH19Y2F0Y2goZGIpe3I9ITAsdT1kYn1yJiYobnVsbD09PVU/dChcIjE3OFwiKTp2b2lkIDAsSmcoVSx1KSxudWxsIT09VSYmKFU9VS5uZXh0RWZmZWN0KSl9cD1BZTtDPVRkKCk7dz1wLmZvY3VzZWRFbGVtO3U9cC5zZWxlY3Rpb25SYW5nZTtpZihDIT09dyYmdyYmdy5vd25lckRvY3VtZW50JiZTZCh3Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHcpKXtudWxsIT09dSYmVWQodykmJihDPXUuc3RhcnQscD11LmVuZCx2b2lkIDA9PT1wJiYocD1DKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB3Pyh3LnNlbGVjdGlvblN0YXJ0PUMsdy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4ocCxcbncudmFsdWUubGVuZ3RoKSk6KHA9KEM9dy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkMuZGVmYXVsdFZpZXd8fHdpbmRvdyxwLmdldFNlbGVjdGlvbiYmKHA9cC5nZXRTZWxlY3Rpb24oKSx5PXcudGV4dENvbnRlbnQubGVuZ3RoLHI9TWF0aC5taW4odS5zdGFydCx5KSx1PXZvaWQgMD09PXUuZW5kP3I6TWF0aC5taW4odS5lbmQseSksIXAuZXh0ZW5kJiZyPnUmJih5PXUsdT1yLHI9eSkseT1SZCh3LHIpLFk9UmQodyx1KSx5JiZZJiYoMSE9PXAucmFuZ2VDb3VudHx8cC5hbmNob3JOb2RlIT09eS5ub2RlfHxwLmFuY2hvck9mZnNldCE9PXkub2Zmc2V0fHxwLmZvY3VzTm9kZSE9PVkubm9kZXx8cC5mb2N1c09mZnNldCE9PVkub2Zmc2V0KSYmKEM9Qy5jcmVhdGVSYW5nZSgpLEMuc2V0U3RhcnQoeS5ub2RlLHkub2Zmc2V0KSxwLnJlbW92ZUFsbFJhbmdlcygpLHI+dT8ocC5hZGRSYW5nZShDKSxwLmV4dGVuZChZLm5vZGUsWS5vZmZzZXQpKTooQy5zZXRFbmQoWS5ub2RlLFkub2Zmc2V0KSxcbnAuYWRkUmFuZ2UoQykpKSkpKTtDPVtdO2ZvcihwPXc7cD1wLnBhcmVudE5vZGU7KTE9PT1wLm5vZGVUeXBlJiZDLnB1c2goe2VsZW1lbnQ6cCxsZWZ0OnAuc2Nyb2xsTGVmdCx0b3A6cC5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5mb2N1cyYmdy5mb2N1cygpO2Zvcih3PTA7dzxDLmxlbmd0aDt3KyspcD1DW3ddLHAuZWxlbWVudC5zY3JvbGxMZWZ0PXAubGVmdCxwLmVsZW1lbnQuc2Nyb2xsVG9wPXAudG9wfUFlPW51bGw7SGQ9ISF6ZTt6ZT1udWxsO2EuY3VycmVudD1iO2ZvcihVPWQ7bnVsbCE9PVU7KXtkPSExO3c9dm9pZCAwO3RyeXtmb3IoQz1jO251bGwhPT1VOyl7dmFyIEZiPVUuZWZmZWN0VGFnO2lmKEZiJjM2KXt2YXIgR2I9VS5hbHRlcm5hdGU7cD1VO3I9Qztzd2l0Y2gocC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7Y2FzZSAxOnZhciB3Yz1wLnN0YXRlTm9kZTtpZihwLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1HYil3Yy5jb21wb25lbnREaWRNb3VudCgpO1xuZWxzZXt2YXIgY2k9cC5lbGVtZW50VHlwZT09PXAudHlwZT9HYi5tZW1vaXplZFByb3BzOk8ocC50eXBlLEdiLm1lbW9pemVkUHJvcHMpO3djLmNvbXBvbmVudERpZFVwZGF0ZShjaSxHYi5tZW1vaXplZFN0YXRlLHdjLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgQ2c9cC51cGRhdGVRdWV1ZTtudWxsIT09Q2cmJnRmKHAsQ2csd2Mscik7YnJlYWs7Y2FzZSAzOnZhciBEZz1wLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1EZyl7dT1udWxsO2lmKG51bGwhPT1wLmNoaWxkKXN3aXRjaChwLmNoaWxkLnRhZyl7Y2FzZSA1OnU9cC5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOnU9cC5jaGlsZC5zdGF0ZU5vZGV9dGYocCxEZyx1LHIpfWJyZWFrO2Nhc2UgNTp2YXIgZGk9cC5zdGF0ZU5vZGU7bnVsbD09PUdiJiZwLmVmZmVjdFRhZyY0JiZCZShwLnR5cGUscC5tZW1vaXplZFByb3BzKSYmZGkuZm9jdXMoKTticmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO1xuY2FzZSAxMjpicmVhaztjYXNlIDEzOmJyZWFrO2Nhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0KFwiMTYzXCIpfX1pZihGYiYxMjgpe3ZhciBJYz1VLnJlZjtpZihudWxsIT09SWMpe3ZhciBFZz1VLnN0YXRlTm9kZTtzd2l0Y2goVS50YWcpe2Nhc2UgNTp2YXIgY2U9RWc7YnJlYWs7ZGVmYXVsdDpjZT1FZ31cImZ1bmN0aW9uXCI9PT10eXBlb2YgSWM/SWMoY2UpOkljLmN1cnJlbnQ9Y2V9fVU9VS5uZXh0RWZmZWN0fX1jYXRjaChkYil7ZD0hMCx3PWRifWQmJihudWxsPT09VT90KFwiMTc4XCIpOnZvaWQgMCxKZyhVLHcpLG51bGwhPT1VJiYoVT1VLm5leHRFZmZlY3QpKX1ZZz1haD0hMTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgU2UmJlNlKGIuc3RhdGVOb2RlKTtGYj1iLmV4cGlyYXRpb25UaW1lO2I9Yi5jaGlsZEV4cGlyYXRpb25UaW1lO2I9Yj5GYj9iOkZiOzA9PT1iJiYoU2c9bnVsbCk7YS5leHBpcmF0aW9uVGltZT1iO2EuZmluaXNoZWRXb3JrPW51bGx9XG5mdW5jdGlvbiBRZyhhKXtudWxsPT09dWg/dChcIjI0NlwiKTp2b2lkIDA7dWguZXhwaXJhdGlvblRpbWU9MDt2aHx8KHZoPSEwLHdoPWEpfWZ1bmN0aW9uIE5oKGEsYil7dmFyIGM9WjtaPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5eyhaPWMpfHxXfHxLaCgxMDczNzQxODIzLCExKX19ZnVuY3Rpb24gT2goYSxiKXtpZihaJiYheGgpe3hoPSEwO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e3hoPSExfX1yZXR1cm4gYShiKX1mdW5jdGlvbiBQaChhLGIsYyl7aWYoa2gpcmV0dXJuIGEoYixjKTtafHxXfHwwPT09bGh8fChLaChsaCwhMSksbGg9MCk7dmFyIGQ9a2gsZT1aO1o9a2g9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXtraD1kLChaPWUpfHxXfHxLaCgxMDczNzQxODIzLCExKX19XG5mdW5jdGlvbiBRaChhLGIsYyxkLGUpe3ZhciBmPWIuY3VycmVudDthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6ezI9PT1rZChjKSYmMT09PWMudGFnP3ZvaWQgMDp0KFwiMTcwXCIpO3ZhciBnPWM7ZG97c3dpdGNoKGcudGFnKXtjYXNlIDM6Zz1nLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoZy50eXBlKSl7Zz1nLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1nPWcucmV0dXJufXdoaWxlKG51bGwhPT1nKTt0KFwiMTcxXCIpO2c9dm9pZCAwfWlmKDE9PT1jLnRhZyl7dmFyIGg9Yy50eXBlO2lmKEwoaCkpe2M9UGUoYyxoLGcpO2JyZWFrIGF9fWM9Z31lbHNlIGM9SmU7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1lO2U9bWYoZCk7ZS5wYXlsb2FkPXtlbGVtZW50OmF9O2I9dm9pZCAwPT09Yj9udWxsOmI7bnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO1xuU2YoKTtvZihmLGUpO1RmKGYsZCk7cmV0dXJuIGR9ZnVuY3Rpb24gUmgoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9UWYoKTtlPVJmKGYsZSk7cmV0dXJuIFFoKGEsYixjLGUsZCl9ZnVuY3Rpb24gU2goYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBVaChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRiLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuQ2I9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpEYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9TGEoZCk7ZT92b2lkIDA6dChcIjkwXCIpO1diKGQpO0RjKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppZShhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmUoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtcbmZ1bmN0aW9uIFZoKGEpe3ZhciBiPTEwNzM3NDE4MjItMjUqKCgoMTA3Mzc0MTgyMi1RZigpKzUwMCkvMjV8MCkrMSk7Yj49V2cmJihiPVdnLTEpO3RoaXMuX2V4cGlyYXRpb25UaW1lPVdnPWI7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1WaC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDp0KFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgV2g7UWgoYSxiLG51bGwsYyxkLl9vbkNvbW1pdCk7cmV0dXJuIGR9O1xuVmgucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tcGxldGUpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuVmgucHJvdG90eXBlLmNvbW1pdD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX3Jvb3QuX2ludGVybmFsUm9vdCxiPWEuZmlyc3RCYXRjaDt0aGlzLl9kZWZlciYmbnVsbCE9PWI/dm9pZCAwOnQoXCIyNTFcIik7aWYodGhpcy5faGFzQ2hpbGRyZW4pe3ZhciBjPXRoaXMuX2V4cGlyYXRpb25UaW1lO2lmKGIhPT10aGlzKXt0aGlzLl9oYXNDaGlsZHJlbiYmKGM9dGhpcy5fZXhwaXJhdGlvblRpbWU9Yi5fZXhwaXJhdGlvblRpbWUsdGhpcy5yZW5kZXIodGhpcy5fY2hpbGRyZW4pKTtmb3IodmFyIGQ9bnVsbCxlPWI7ZSE9PXRoaXM7KWQ9ZSxlPWUuX25leHQ7bnVsbD09PWQ/dChcIjI1MVwiKTp2b2lkIDA7ZC5fbmV4dD1lLl9uZXh0O3RoaXMuX25leHQ9YjthLmZpcnN0QmF0Y2g9dGhpc310aGlzLl9kZWZlcj0hMTtIaChhLGMpO2I9dGhpcy5fbmV4dDt0aGlzLl9uZXh0PW51bGw7Yj1hLmZpcnN0QmF0Y2g9YjtudWxsIT09YiYmYi5faGFzQ2hpbGRyZW4mJmIucmVuZGVyKGIuX2NoaWxkcmVuKX1lbHNlIHRoaXMuX25leHQ9XG5udWxsLHRoaXMuX2RlZmVyPSExfTtWaC5wcm90b3R5cGUuX29uQ29tcGxldGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tcGxldGUpe3RoaXMuX2RpZENvbXBsZXRlPSEwO3ZhciBhPXRoaXMuX2NhbGxiYWNrcztpZihudWxsIT09YSlmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKykoMCxhW2JdKSgpfX07ZnVuY3Rpb24gV2goKXt0aGlzLl9jYWxsYmFja3M9bnVsbDt0aGlzLl9kaWRDb21taXQ9ITE7dGhpcy5fb25Db21taXQ9dGhpcy5fb25Db21taXQuYmluZCh0aGlzKX1XaC5wcm90b3R5cGUudGhlbj1mdW5jdGlvbihhKXtpZih0aGlzLl9kaWRDb21taXQpYSgpO2Vsc2V7dmFyIGI9dGhpcy5fY2FsbGJhY2tzO251bGw9PT1iJiYoYj10aGlzLl9jYWxsYmFja3M9W10pO2IucHVzaChhKX19O1xuV2gucHJvdG90eXBlLl9vbkNvbW1pdD1mdW5jdGlvbigpe2lmKCF0aGlzLl9kaWRDb21taXQpe3RoaXMuX2RpZENvbW1pdD0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBjPWFbYl07XCJmdW5jdGlvblwiIT09dHlwZW9mIGM/dChcIjE5MVwiLGMpOnZvaWQgMDtjKCl9fX07XG5mdW5jdGlvbiBYaChhLGIsYyl7Yj1NKDMsbnVsbCxudWxsLGI/MzowKTthPXtjdXJyZW50OmIsY29udGFpbmVySW5mbzphLHBlbmRpbmdDaGlsZHJlbjpudWxsLGVhcmxpZXN0UGVuZGluZ1RpbWU6MCxsYXRlc3RQZW5kaW5nVGltZTowLGVhcmxpZXN0U3VzcGVuZGVkVGltZTowLGxhdGVzdFN1c3BlbmRlZFRpbWU6MCxsYXRlc3RQaW5nZWRUaW1lOjAsZGlkRXJyb3I6ITEscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsdGltZW91dEhhbmRsZTotMSxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMsbmV4dEV4cGlyYXRpb25UaW1lVG9Xb3JrT246MCxleHBpcmF0aW9uVGltZTowLGZpcnN0QmF0Y2g6bnVsbCxuZXh0U2NoZWR1bGVkUm9vdDpudWxsfTt0aGlzLl9pbnRlcm5hbFJvb3Q9Yi5zdGF0ZU5vZGU9YX1cblhoLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgV2g7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1JoKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07WGgucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290LGM9bmV3IFdoO2E9dm9pZCAwPT09YT9udWxsOmE7bnVsbCE9PWEmJmMudGhlbihhKTtSaChudWxsLGIsbnVsbCxjLl9vbkNvbW1pdCk7cmV0dXJuIGN9O1hoLnByb3RvdHlwZS5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVybmFsUm9vdCxlPW5ldyBXaDtjPXZvaWQgMD09PWM/bnVsbDpjO251bGwhPT1jJiZlLnRoZW4oYyk7UmgoYixkLGEsZS5fb25Db21taXQpO3JldHVybiBlfTtcblhoLnByb3RvdHlwZS5jcmVhdGVCYXRjaD1mdW5jdGlvbigpe3ZhciBhPW5ldyBWaCh0aGlzKSxiPWEuX2V4cGlyYXRpb25UaW1lLGM9dGhpcy5faW50ZXJuYWxSb290LGQ9Yy5maXJzdEJhdGNoO2lmKG51bGw9PT1kKWMuZmlyc3RCYXRjaD1hLGEuX25leHQ9bnVsbDtlbHNle2ZvcihjPW51bGw7bnVsbCE9PWQmJmQuX2V4cGlyYXRpb25UaW1lPj1iOyljPWQsZD1kLl9uZXh0O2EuX25leHQ9ZDtudWxsIT09YyYmKGMuX25leHQ9YSl9cmV0dXJuIGF9O2Z1bmN0aW9uIFloKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1LYj1OaDtMYj1QaDtNYj1mdW5jdGlvbigpe1d8fDA9PT1saHx8KEtoKGxoLCExKSxsaD0wKX07XG5mdW5jdGlvbiBaaChhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IFhoKGEsITEsYil9XG5mdW5jdGlvbiAkaChhLGIsYyxkLGUpe1loKGMpP3ZvaWQgMDp0KFwiMjAwXCIpO3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGc9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9U2goZi5faW50ZXJuYWxSb290KTtnLmNhbGwoYSl9fW51bGwhPWE/Zi5sZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIoYSxiLGUpOmYucmVuZGVyKGIsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1aaChjLGQpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1TaChmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19T2goZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFNoKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBhaShhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO1loKGIpP3ZvaWQgMDp0KFwiMjAwXCIpO3JldHVybiBVaChhLGIsbnVsbCxjKX1cbnZhciBiaT17Y3JlYXRlUG9ydGFsOmFpLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/dChcIjE4OFwiKTp0KFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPW5kKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX0saHlkcmF0ZTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuICRoKG51bGwsYSxiLCEwLGMpfSxyZW5kZXI6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAkaChudWxsLGEsYiwhMSxjKX0sdW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6ZnVuY3Rpb24oYSxiLGMsZCl7bnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyP3QoXCIzOFwiKTp2b2lkIDA7cmV0dXJuICRoKGEsYixjLCExLGQpfSx1bm1vdW50Q29tcG9uZW50QXROb2RlOmZ1bmN0aW9uKGEpe1loKGEpP1xudm9pZCAwOnQoXCI0MFwiKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhPaChmdW5jdGlvbigpeyRoKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIGFpLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpOaCx1bnN0YWJsZV9pbnRlcmFjdGl2ZVVwZGF0ZXM6UGgsZmx1c2hTeW5jOmZ1bmN0aW9uKGEsYil7Vz90KFwiMTg3XCIpOnZvaWQgMDt2YXIgYz1aO1o9ITA7dHJ5e3JldHVybiBxaChhLGIpfWZpbmFsbHl7Wj1jLEtoKDEwNzM3NDE4MjMsITEpfX0sdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOmZ1bmN0aW9uKGEpe3ZhciBiPVo7Wj0hMDt0cnl7cWgoYSl9ZmluYWxseXsoWj1iKXx8V3x8S2goMTA3Mzc0MTgyMywhMSl9fSxfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDp7RXZlbnRzOltKYSxcbkthLExhLENhLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSxxYSxSYSxmdW5jdGlvbihhKXt6YShhLFFhKX0sSWIsSmIsSmQsRWFdfSx1bnN0YWJsZV9jcmVhdGVSb290OmZ1bmN0aW9uKGEsYil7WWgoYSk/dm9pZCAwOnQoXCIyOTlcIixcInVuc3RhYmxlX2NyZWF0ZVJvb3RcIik7cmV0dXJuIG5ldyBYaChhLCEwLG51bGwhPWImJiEwPT09Yi5oeWRyYXRlKX19OyhmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBWZShuKHt9LGEse2ZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9bmQoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6SWEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi42LjNcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtcbnZhciBlaT17ZGVmYXVsdDpiaX0sZmk9ZWkmJmJpfHxlaTttb2R1bGUuZXhwb3J0cz1maS5kZWZhdWx0fHxmaTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjYuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBkPW51bGwsZj0hMSxoPTMsaz0tMSxsPS0xLG09ITEsbj0hMTtmdW5jdGlvbiBwKCl7aWYoIW0pe3ZhciBhPWQuZXhwaXJhdGlvblRpbWU7bj9xKCk6bj0hMDtyKHQsYSl9fVxuZnVuY3Rpb24gdSgpe3ZhciBhPWQsYj1kLm5leHQ7aWYoZD09PWIpZD1udWxsO2Vsc2V7dmFyIGM9ZC5wcmV2aW91cztkPWMubmV4dD1iO2IucHJldmlvdXM9Y31hLm5leHQ9YS5wcmV2aW91cz1udWxsO2M9YS5jYWxsYmFjaztiPWEuZXhwaXJhdGlvblRpbWU7YT1hLnByaW9yaXR5TGV2ZWw7dmFyIGU9aCxRPWw7aD1hO2w9Yjt0cnl7dmFyIGc9YygpfWZpbmFsbHl7aD1lLGw9UX1pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZylpZihnPXtjYWxsYmFjazpnLHByaW9yaXR5TGV2ZWw6YSxleHBpcmF0aW9uVGltZTpiLG5leHQ6bnVsbCxwcmV2aW91czpudWxsfSxudWxsPT09ZClkPWcubmV4dD1nLnByZXZpb3VzPWc7ZWxzZXtjPW51bGw7YT1kO2Rve2lmKGEuZXhwaXJhdGlvblRpbWU+PWIpe2M9YTticmVha31hPWEubmV4dH13aGlsZShhIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1nLHAoKSk7Yj1jLnByZXZpb3VzO2IubmV4dD1jLnByZXZpb3VzPWc7Zy5uZXh0PWM7Zy5wcmV2aW91cz1cbmJ9fWZ1bmN0aW9uIHYoKXtpZigtMT09PWsmJm51bGwhPT1kJiYxPT09ZC5wcmlvcml0eUxldmVsKXttPSEwO3RyeXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJjE9PT1kLnByaW9yaXR5TGV2ZWwpfWZpbmFsbHl7bT0hMSxudWxsIT09ZD9wKCk6bj0hMX19fWZ1bmN0aW9uIHQoYSl7bT0hMDt2YXIgYj1mO2Y9YTt0cnl7aWYoYSlmb3IoO251bGwhPT1kOyl7dmFyIGM9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihkLmV4cGlyYXRpb25UaW1lPD1jKXtkbyB1KCk7d2hpbGUobnVsbCE9PWQmJmQuZXhwaXJhdGlvblRpbWU8PWMpfWVsc2UgYnJlYWt9ZWxzZSBpZihudWxsIT09ZCl7ZG8gdSgpO3doaWxlKG51bGwhPT1kJiYhdygpKX19ZmluYWxseXttPSExLGY9YixudWxsIT09ZD9wKCk6bj0hMSx2KCl9fVxudmFyIHg9RGF0ZSx5PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHo9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6dm9pZCAwLEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNhbmNlbEFuaW1hdGlvbkZyYW1lP2NhbmNlbEFuaW1hdGlvbkZyYW1lOnZvaWQgMCxDLEQ7ZnVuY3Rpb24gRShhKXtDPUEoZnVuY3Rpb24oYil7eihEKTthKGIpfSk7RD15KGZ1bmN0aW9uKCl7QihDKTthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSwxMDApfVxuaWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIEY9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRi5ub3coKX19ZWxzZSBleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpfTt2YXIgcixxLHc7XG5pZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmd2luZG93Ll9zY2hlZE1vY2spe3ZhciBHPXdpbmRvdy5fc2NoZWRNb2NrO3I9R1swXTtxPUdbMV07dz1HWzJdfWVsc2UgaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIEg9bnVsbCxJPS0xLEo9ZnVuY3Rpb24oYSxiKXtpZihudWxsIT09SCl7dmFyIGM9SDtIPW51bGw7dHJ5e0k9YixjKGEpfWZpbmFsbHl7ST0tMX19fTtyPWZ1bmN0aW9uKGEsYil7LTEhPT1JP3NldFRpbWVvdXQociwwLGEsYik6KEg9YSxzZXRUaW1lb3V0KEosYiwhMCxiKSxzZXRUaW1lb3V0KEosMTA3Mzc0MTgyMywhMSwxMDczNzQxODIzKSl9O3E9ZnVuY3Rpb24oKXtIPW51bGx9O3c9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4tMT09PUk/MDpJfX1lbHNle1widW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSYmXG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIiksXCJmdW5jdGlvblwiIT09dHlwZW9mIEImJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKSk7dmFyIEs9bnVsbCxMPSExLE09LTEsTj0hMSxPPSExLFA9MCxSPTMzLFM9MzM7dz1mdW5jdGlvbigpe3JldHVybiBQPD1leHBvcnRzLnVuc3RhYmxlX25vdygpfTt2YXIgVD1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihhKXtpZihhLnNvdXJjZT09PXdpbmRvdyYmYS5kYXRhPT09VCl7TD0hMTthPUs7dmFyIGI9TTtLPW51bGw7TT0tMTt2YXIgYz1leHBvcnRzLnVuc3RhYmxlX25vdygpLGU9ITE7aWYoMD49UC1jKWlmKC0xIT09YiYmYjw9YyllPSEwO2Vsc2V7Tnx8KE49ITAsRShVKSk7Sz1hO009YjtyZXR1cm59aWYobnVsbCE9PWEpe089ITA7dHJ5e2EoZSl9ZmluYWxseXtPPSExfX19fSwhMSk7dmFyIFU9ZnVuY3Rpb24oYSl7aWYobnVsbCE9PUspe0UoVSk7dmFyIGI9YS1QK1M7YjxTJiZSPFM/KDg+YiYmKGI9OCksUz1iPFI/UjpiKTpSPWI7UD1hK1M7THx8KEw9ITAsd2luZG93LnBvc3RNZXNzYWdlKFQsXCIqXCIpKX1lbHNlIE49ITF9O3I9ZnVuY3Rpb24oYSxiKXtLPWE7TT1iO098fDA+Yj93aW5kb3cucG9zdE1lc3NhZ2UoVCxcIipcIik6Tnx8KE49ITAsRShVKSl9O3E9ZnVuY3Rpb24oKXtLPW51bGw7TD0hMTtNPS0xfX1cbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9aCxlPWs7aD1hO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e2g9YyxrPWUsdigpfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMSE9PWs/azpleHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0KWI9YytiLnRpbWVvdXQ7ZWxzZSBzd2l0Y2goaCl7Y2FzZSAxOmI9YystMTticmVhaztjYXNlIDI6Yj1jKzI1MDticmVhaztjYXNlIDU6Yj1jKzEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmI9YysxRTQ7YnJlYWs7ZGVmYXVsdDpiPWMrNUUzfWE9e2NhbGxiYWNrOmEscHJpb3JpdHlMZXZlbDpoLGV4cGlyYXRpb25UaW1lOmIsbmV4dDpudWxsLHByZXZpb3VzOm51bGx9O2lmKG51bGw9PT1kKWQ9YS5uZXh0PWEucHJldmlvdXM9YSxwKCk7ZWxzZXtjPW51bGw7dmFyIGU9ZDtkb3tpZihlLmV4cGlyYXRpb25UaW1lPmIpe2M9ZTticmVha31lPWUubmV4dH13aGlsZShlIT09ZCk7bnVsbD09PWM/Yz1kOmM9PT1kJiYoZD1hLHAoKSk7XG5iPWMucHJldmlvdXM7Yi5uZXh0PWMucHJldmlvdXM9YTthLm5leHQ9YzthLnByZXZpb3VzPWJ9cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9YS5uZXh0O2lmKG51bGwhPT1iKXtpZihiPT09YSlkPW51bGw7ZWxzZXthPT09ZCYmKGQ9Yik7dmFyIGM9YS5wcmV2aW91cztjLm5leHQ9YjtiLnByZXZpb3VzPWN9YS5uZXh0PWEucHJldmlvdXM9bnVsbH19O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPWg7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9aCxlPWs7aD1iO2s9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7aD1jLGs9ZSx2KCl9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBofTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hZiYmKG51bGwhPT1kJiZkLmV4cGlyYXRpb25UaW1lPGx8fHcoKSl9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi42LjBcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1xudmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixuPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxyPWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNjtmdW5jdGlvbiB0KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciBwPWEuJCR0eXBlb2Y7c3dpdGNoKHApe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBtOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiBwfX1jYXNlIGQ6cmV0dXJuIHB9fX1mdW5jdGlvbiB1KGEpe3JldHVybiB0KGEpPT09bH1leHBvcnRzLnR5cGVPZj10O2V4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bTtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PWx8fGE9PT1nfHxhPT09Znx8YT09PW58fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW0pfTtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB1KGEpfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9dTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWh9O1xuZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09bX07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09ZX07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Z307ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdChhKT09PWR9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0KGEpPT09Zn07XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLl9fUmV3aXJlQVBJX18gPSBleHBvcnRzLl9fUmVzZXREZXBlbmRlbmN5X18gPSBleHBvcnRzLl9fc2V0X18gPSBleHBvcnRzLl9fUmV3aXJlX18gPSBleHBvcnRzLl9fR2V0RGVwZW5kZW5jeV9fID0gZXhwb3J0cy5fX2dldF9fID0gdW5kZWZpbmVkO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucycpO1xuXG52YXIgYWN0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9hY3Rpb25zKTtcblxudmFyIF9Db25uZWN0ZWRSb3V0ZXIgPSByZXF1aXJlKCcuL0Nvbm5lY3RlZFJvdXRlcicpO1xuXG52YXIgX0Nvbm5lY3RlZFJvdXRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25uZWN0ZWRSb3V0ZXIpO1xuXG52YXIgX3JlZHVjZXIgPSByZXF1aXJlKCcuL3JlZHVjZXInKTtcblxudmFyIF9yZWR1Y2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZHVjZXIpO1xuXG52YXIgX21pZGRsZXdhcmUgPSByZXF1aXJlKCcuL21pZGRsZXdhcmUnKTtcblxudmFyIF9taWRkbGV3YXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21pZGRsZXdhcmUpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoJy4vc2VsZWN0b3JzJyk7XG5cbnZhciBfc2VsZWN0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlbGVjdG9ycyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbnZhciBjcmVhdGVBbGwgPSBmdW5jdGlvbiBjcmVhdGVBbGwoc3RydWN0dXJlKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgX2dldF9fKCdhY3Rpb25zJyksIF9nZXRfXygnY3JlYXRlU2VsZWN0b3JzJykoc3RydWN0dXJlKSwge1xuICAgIENvbm5lY3RlZFJvdXRlcjogX2dldF9fKCdjcmVhdGVDb25uZWN0ZWRSb3V0ZXInKShzdHJ1Y3R1cmUpLFxuICAgIGNvbm5lY3RSb3V0ZXI6IF9nZXRfXygnY3JlYXRlQ29ubmVjdFJvdXRlcicpKHN0cnVjdHVyZSksXG4gICAgcm91dGVyTWlkZGxld2FyZTogX2dldF9fKCdyb3V0ZXJNaWRkbGV3YXJlJylcbiAgfSk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZ2V0X18oJ2NyZWF0ZUFsbCcpO1xuXG5mdW5jdGlvbiBfZ2V0R2xvYmFsT2JqZWN0KCkge1xuICB0cnkge1xuICAgIGlmICghIWdsb2JhbCkge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCEhd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG59XG5cbjtcbnZhciBfUmV3aXJlTW9kdWxlSWRfXyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVNb2R1bGVJZF9fKCkge1xuICBpZiAoX1Jld2lyZU1vZHVsZUlkX18gPT09IG51bGwpIHtcbiAgICB2YXIgZ2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgICBpZiAoIWdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18pIHtcbiAgICAgIGdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18gPSAwO1xuICAgIH1cblxuICAgIF9SZXdpcmVNb2R1bGVJZF9fID0gX18kJEdMT0JBTF9SRVdJUkVfTkVYVF9NT0RVTEVfSURfXysrO1xuICB9XG5cbiAgcmV0dXJuIF9SZXdpcmVNb2R1bGVJZF9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXykge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIF9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX187XG59XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVkRGF0YV9fKCkge1xuICB2YXIgbW9kdWxlSWQgPSBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpO1xuXG4gIHZhciByZWdpc3RyeSA9IF9nZXRSZXdpcmVSZWdpc3RyeV9fKCk7XG5cbiAgdmFyIHJld2lyZURhdGEgPSByZWdpc3RyeVttb2R1bGVJZF07XG5cbiAgaWYgKCFyZXdpcmVEYXRhKSB7XG4gICAgcmVnaXN0cnlbbW9kdWxlSWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuICB9XG5cbiAgcmV0dXJuIHJld2lyZURhdGE7XG59XG5cbihmdW5jdGlvbiByZWdpc3RlclJlc2V0QWxsKCkge1xuICB2YXIgdGhlR2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgaWYgKCF0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSkge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlWydfX3Jld2lyZV9yZXNldF9hbGxfXyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxudmFyIElOVEVOVElPTkFMX1VOREVGSU5FRCA9ICdfX0lOVEVOVElPTkFMX1VOREVGSU5FRF9fJztcbnZhciBfUmV3aXJlQVBJX18gPSB7fTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0FQSU9iamVjdChuYW1lLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfUmV3aXJlQVBJX18sIG5hbWUsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19HZXREZXBlbmRlbmN5X18nLCBfZ2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fcmVzZXRfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX193aXRoX18nLCBfd2l0aF9fKTtcbn0pKCk7XG5cbmZ1bmN0aW9uIF9nZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmIChyZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFsdWUgPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgICBpZiAodmFsdWUgPT09IElOVEVOVElPTkFMX1VOREVGSU5FRCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7XG4gICAgY2FzZSAnYWN0aW9ucyc6XG4gICAgICByZXR1cm4gX2ZpbHRlcldpbGRjYXJkSW1wb3J0X18oYWN0aW9ucyk7XG5cbiAgICBjYXNlICdjcmVhdGVTZWxlY3RvcnMnOlxuICAgICAgcmV0dXJuIF9zZWxlY3RvcnMyLmRlZmF1bHQ7XG5cbiAgICBjYXNlICdjcmVhdGVDb25uZWN0ZWRSb3V0ZXInOlxuICAgICAgcmV0dXJuIF9Db25uZWN0ZWRSb3V0ZXIyLmRlZmF1bHQ7XG5cbiAgICBjYXNlICdjcmVhdGVDb25uZWN0Um91dGVyJzpcbiAgICAgIHJldHVybiBfcmVkdWNlcjIuZGVmYXVsdDtcblxuICAgIGNhc2UgJ3JvdXRlck1pZGRsZXdhcmUnOlxuICAgICAgcmV0dXJuIF9taWRkbGV3YXJlMi5kZWZhdWx0O1xuXG4gICAgY2FzZSAnY3JlYXRlQWxsJzpcbiAgICAgIHJldHVybiBjcmVhdGVBbGw7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzaWduX18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIF9zZXRfb3JpZ2luYWxfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgX3ZhbHVlKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7fVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF91cGRhdGVfb3BlcmF0aW9uX18ob3BlcmF0aW9uLCB2YXJpYWJsZU5hbWUsIHByZWZpeCkge1xuICB2YXIgb2xkVmFsdWUgPSBfZ2V0X18odmFyaWFibGVOYW1lKTtcblxuICB2YXIgbmV3VmFsdWUgPSBvcGVyYXRpb24gPT09ICcrKycgPyBvbGRWYWx1ZSArIDEgOiBvbGRWYWx1ZSAtIDE7XG5cbiAgX2Fzc2lnbl9fKHZhcmlhYmxlTmFtZSwgbmV3VmFsdWUpO1xuXG4gIHJldHVybiBwcmVmaXggPyBuZXdWYWx1ZSA6IG9sZFZhbHVlO1xufVxuXG5mdW5jdGlvbiBfc2V0X18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKCh0eXBlb2YgdmFyaWFibGVOYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YXJpYWJsZU5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3Qua2V5cyh2YXJpYWJsZU5hbWUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbbmFtZV0gPSB2YXJpYWJsZU5hbWVbbmFtZV07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IElOVEVOVElPTkFMX1VOREVGSU5FRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9yZXNldF9fKHZhcmlhYmxlTmFtZSk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGRlbGV0ZSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgaWYgKE9iamVjdC5rZXlzKHJld2lyZURhdGEpLmxlbmd0aCA9PSAwKSB7XG4gICAgZGVsZXRlIF9nZXRSZXdpcmVSZWdpc3RyeV9fKClbX2dldFJld2lyZU1vZHVsZUlkX19dO1xuICB9XG5cbiAgO1xufVxuXG5mdW5jdGlvbiBfd2l0aF9fKG9iamVjdCkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgdmFyIHJld2lyZWRWYXJpYWJsZU5hbWVzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgdmFyIHByZXZpb3VzVmFsdWVzID0ge307XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHJld2lyZWRWYXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlTmFtZSkge1xuICAgICAgcHJldmlvdXNWYWx1ZXNbdmFyaWFibGVOYW1lXSA9IHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IG9iamVjdFt2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuXG4gICAgaWYgKCEhcmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXN1bHQudGhlbihyZXNldCkuY2F0Y2gocmVzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNldCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbnZhciBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPSB0eXBlb2YgY3JlYXRlQWxsID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjcmVhdGVBbGwpO1xuXG5mdW5jdGlvbiBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUFsbCwgbmFtZSwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmlmICgoX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID09PSAnb2JqZWN0JyB8fCBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdmdW5jdGlvbicpICYmIE9iamVjdC5pc0V4dGVuc2libGUoY3JlYXRlQWxsKSkge1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fZ2V0X18nLCBfZ2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3NldF9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3dpdGhfXycsIF93aXRoX18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmV3aXJlQVBJX18nLCBfUmV3aXJlQVBJX18pO1xufVxuXG5mdW5jdGlvbiBfZmlsdGVyV2lsZGNhcmRJbXBvcnRfXygpIHtcbiAgdmFyIHdpbGRjYXJkSW1wb3J0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIHZhbGlkUHJvcGVydHlOYW1lcyA9IE9iamVjdC5rZXlzKHdpbGRjYXJkSW1wb3J0KS5maWx0ZXIoZnVuY3Rpb24gKHByb3BlcnR5TmFtZSkge1xuICAgIHJldHVybiBwcm9wZXJ0eU5hbWUgIT09ICdfX2dldF9fJyAmJiBwcm9wZXJ0eU5hbWUgIT09ICdfX3NldF9fJyAmJiBwcm9wZXJ0eU5hbWUgIT09ICdfX3Jlc2V0X18nICYmIHByb3BlcnR5TmFtZSAhPT0gJ19fd2l0aF9fJyAmJiBwcm9wZXJ0eU5hbWUgIT09ICdfX0dldERlcGVuZGVuY3lfXycgJiYgcHJvcGVydHlOYW1lICE9PSAnX19SZXdpcmVfXycgJiYgcHJvcGVydHlOYW1lICE9PSAnX19SZXNldERlcGVuZGVuY3lfXycgJiYgcHJvcGVydHlOYW1lICE9PSAnX19SZXdpcmVBUElfXyc7XG4gIH0pO1xuICByZXR1cm4gdmFsaWRQcm9wZXJ0eU5hbWVzLnJlZHVjZShmdW5jdGlvbiAoZmlsdGVyZWRXaWxkY2FyZEltcG9ydCwgcHJvcGVydHlOYW1lKSB7XG4gICAgZmlsdGVyZWRXaWxkY2FyZEltcG9ydFtwcm9wZXJ0eU5hbWVdID0gd2lsZGNhcmRJbXBvcnRbcHJvcGVydHlOYW1lXTtcbiAgICByZXR1cm4gZmlsdGVyZWRXaWxkY2FyZEltcG9ydDtcbiAgfSwge30pO1xufVxuXG5leHBvcnRzLl9fZ2V0X18gPSBfZ2V0X187XG5leHBvcnRzLl9fR2V0RGVwZW5kZW5jeV9fID0gX2dldF9fO1xuZXhwb3J0cy5fX1Jld2lyZV9fID0gX3NldF9fO1xuZXhwb3J0cy5fX3NldF9fID0gX3NldF9fO1xuZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gX3Jlc2V0X187XG5leHBvcnRzLl9fUmV3aXJlQVBJX18gPSBfUmV3aXJlQVBJX187IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gZXhwb3J0cy5fX3NldF9fID0gZXhwb3J0cy5fX1Jld2lyZV9fID0gZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IGV4cG9ydHMuX19nZXRfXyA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0UmVkdXggPSByZXF1aXJlKCdyZWFjdC1yZWR1eCcpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyJyk7XG5cbnZhciBfYWN0aW9ucyA9IHJlcXVpcmUoJy4vYWN0aW9ucycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBjcmVhdGVDb25uZWN0ZWRSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0ZWRSb3V0ZXIoc3RydWN0dXJlKSB7XG4gIHZhciBnZXRJbiA9IHN0cnVjdHVyZS5nZXRJbixcbiAgICAgIHRvSlMgPSBzdHJ1Y3R1cmUudG9KUztcbiAgLypcbiAgICogQ29ubmVjdGVkUm91dGVyIGxpc3RlbnMgdG8gYSBoaXN0b3J5IG9iamVjdCBwYXNzZWQgZnJvbSBwcm9wcy5cbiAgICogV2hlbiBoaXN0b3J5IGlzIGNoYW5nZWQsIGl0IGRpc3BhdGNoZXMgYWN0aW9uIHRvIHJlZHV4IHN0b3JlLlxuICAgKiBUaGVuLCBzdG9yZSB3aWxsIHBhc3MgcHJvcHMgdG8gY29tcG9uZW50IHRvIHJlbmRlci5cbiAgICogVGhpcyBjcmVhdGVzIHVuaS1kaXJlY3Rpb25hbCBmbG93IGZyb20gaGlzdG9yeS0+c3RvcmUtPnJvdXRlci0+Y29tcG9uZW50cy5cbiAgICovXG5cbiAgdmFyIENvbm5lY3RlZFJvdXRlciA9IGZ1bmN0aW9uIChfZ2V0X18yKSB7XG4gICAgX2luaGVyaXRzKENvbm5lY3RlZFJvdXRlciwgX2dldF9fMik7XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0ZWRSb3V0ZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0ZWRSb3V0ZXIpO1xuXG4gICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29ubmVjdGVkUm91dGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29ubmVjdGVkUm91dGVyKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgICBfdGhpcy5pblRpbWVUcmF2ZWxsaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIFN1YnNjcmliZSB0byBzdG9yZSBjaGFuZ2VzXG4gICAgICBfdGhpcy51bnN1YnNjcmliZSA9IGNvbnRleHQuc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBzdG9yZSdzIGxvY2F0aW9uXG4gICAgICAgIHZhciBfdG9KUyA9IHRvSlMoZ2V0SW4oY29udGV4dC5zdG9yZS5nZXRTdGF0ZSgpLCBbJ3JvdXRlcicsICdsb2NhdGlvbiddKSksXG4gICAgICAgICAgICBwYXRobmFtZUluU3RvcmUgPSBfdG9KUy5wYXRobmFtZSxcbiAgICAgICAgICAgIHNlYXJjaEluU3RvcmUgPSBfdG9KUy5zZWFyY2gsXG4gICAgICAgICAgICBoYXNoSW5TdG9yZSA9IF90b0pTLmhhc2g7XG4gICAgICAgIC8vIEV4dHJhY3QgaGlzdG9yeSdzIGxvY2F0aW9uXG5cblxuICAgICAgICB2YXIgX3Byb3BzJGhpc3RvcnkkbG9jYXRpID0gcHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICAgIHBhdGhuYW1lSW5IaXN0b3J5ID0gX3Byb3BzJGhpc3RvcnkkbG9jYXRpLnBhdGhuYW1lLFxuICAgICAgICAgICAgc2VhcmNoSW5IaXN0b3J5ID0gX3Byb3BzJGhpc3RvcnkkbG9jYXRpLnNlYXJjaCxcbiAgICAgICAgICAgIGhhc2hJbkhpc3RvcnkgPSBfcHJvcHMkaGlzdG9yeSRsb2NhdGkuaGFzaDtcblxuICAgICAgICAvLyBJZiB3ZSBkbyB0aW1lIHRyYXZlbGxpbmcsIHRoZSBsb2NhdGlvbiBpbiBzdG9yZSBpcyBjaGFuZ2VkIGJ1dCBsb2NhdGlvbiBpbiBoaXN0b3J5IGlzIG5vdCBjaGFuZ2VkXG5cbiAgICAgICAgaWYgKHBhdGhuYW1lSW5IaXN0b3J5ICE9PSBwYXRobmFtZUluU3RvcmUgfHwgc2VhcmNoSW5IaXN0b3J5ICE9PSBzZWFyY2hJblN0b3JlIHx8IGhhc2hJbkhpc3RvcnkgIT09IGhhc2hJblN0b3JlKSB7XG4gICAgICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IHRydWU7XG4gICAgICAgICAgLy8gVXBkYXRlIGhpc3RvcnkncyBsb2NhdGlvbiB0byBtYXRjaCBzdG9yZSdzIGxvY2F0aW9uXG4gICAgICAgICAgcHJvcHMuaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRobmFtZUluU3RvcmUsXG4gICAgICAgICAgICBzZWFyY2g6IHNlYXJjaEluU3RvcmUsXG4gICAgICAgICAgICBoYXNoOiBoYXNoSW5TdG9yZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9jYXRpb25DaGFuZ2UobG9jYXRpb24sIGFjdGlvbikge1xuICAgICAgICAvLyBEaXNwYXRjaCBvbkxvY2F0aW9uQ2hhbmdlZCBleGNlcHQgd2hlbiB3ZSdyZSBpbiB0aW1lIHRyYXZlbGxpbmdcbiAgICAgICAgaWYgKCFfdGhpcy5pblRpbWVUcmF2ZWxsaW5nKSB7XG4gICAgICAgICAgcHJvcHMub25Mb2NhdGlvbkNoYW5nZWQobG9jYXRpb24sIGFjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuaW5UaW1lVHJhdmVsbGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBMaXN0ZW4gdG8gaGlzdG9yeSBjaGFuZ2VzXG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGhhbmRsZUxvY2F0aW9uQ2hhbmdlKTtcbiAgICAgIC8vIERpc3BhdGNoIGEgbG9jYXRpb24gY2hhbmdlIGFjdGlvbiBmb3IgdGhlIGluaXRpYWwgbG9jYXRpb25cbiAgICAgIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKHByb3BzLmhpc3RvcnkubG9jYXRpb24sIHByb3BzLmhpc3RvcnkuYWN0aW9uKTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29ubmVjdGVkUm91dGVyLCBbe1xuICAgICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLnVubGlzdGVuKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBoaXN0b3J5ID0gX3Byb3BzLmhpc3RvcnksXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbjtcblxuXG4gICAgICAgIHJldHVybiBfZ2V0X18oJ1JlYWN0JykuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfZ2V0X18oJ1JvdXRlcicpLFxuICAgICAgICAgIHsgaGlzdG9yeTogaGlzdG9yeSB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbm5lY3RlZFJvdXRlcjtcbiAgfShfZ2V0X18oJ0NvbXBvbmVudCcpKTtcblxuICBDb25uZWN0ZWRSb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICAgIHN0b3JlOiBfZ2V0X18oJ1Byb3BUeXBlcycpLnNoYXBlKHtcbiAgICAgIGdldFN0YXRlOiBfZ2V0X18oJ1Byb3BUeXBlcycpLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHN1YnNjcmliZTogX2dldF9fKCdQcm9wVHlwZXMnKS5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH07XG5cbiAgQ29ubmVjdGVkUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBoaXN0b3J5OiBfZ2V0X18oJ1Byb3BUeXBlcycpLnNoYXBlKHtcbiAgICAgIGFjdGlvbjogX2dldF9fKCdQcm9wVHlwZXMnKS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgIGxpc3RlbjogX2dldF9fKCdQcm9wVHlwZXMnKS5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBsb2NhdGlvbjogX2dldF9fKCdQcm9wVHlwZXMnKS5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICAgIHB1c2g6IF9nZXRfXygnUHJvcFR5cGVzJykuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBsb2NhdGlvbjogX2dldF9fKCdQcm9wVHlwZXMnKS5vbmVPZlR5cGUoW19nZXRfXygnUHJvcFR5cGVzJykub2JqZWN0LCBfZ2V0X18oJ1Byb3BUeXBlcycpLnN0cmluZ10pLmlzUmVxdWlyZWQsXG4gICAgYWN0aW9uOiBfZ2V0X18oJ1Byb3BUeXBlcycpLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIGJhc2VuYW1lOiBfZ2V0X18oJ1Byb3BUeXBlcycpLnN0cmluZyxcbiAgICBjaGlsZHJlbjogX2dldF9fKCdQcm9wVHlwZXMnKS5vbmVPZlR5cGUoW19nZXRfXygnUHJvcFR5cGVzJykuZnVuYywgX2dldF9fKCdQcm9wVHlwZXMnKS5ub2RlXSksXG4gICAgb25Mb2NhdGlvbkNoYW5nZWQ6IF9nZXRfXygnUHJvcFR5cGVzJykuZnVuYy5pc1JlcXVpcmVkXG4gIH07XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3Rpb246IGdldEluKHN0YXRlLCBbJ3JvdXRlcicsICdhY3Rpb24nXSksXG4gICAgICBsb2NhdGlvbjogZ2V0SW4oc3RhdGUsIFsncm91dGVyJywgJ2xvY2F0aW9uJ10pXG4gICAgfTtcbiAgfTtcblxuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9uTG9jYXRpb25DaGFuZ2VkOiBmdW5jdGlvbiBvbkxvY2F0aW9uQ2hhbmdlZChsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBkaXNwYXRjaChfZ2V0X18oJ29uTG9jYXRpb25DaGFuZ2VkJykobG9jYXRpb24sIGFjdGlvbikpO1xuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIF9nZXRfXygnY29ubmVjdCcpKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb25uZWN0ZWRSb3V0ZXIpO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2dldF9fKCdjcmVhdGVDb25uZWN0ZWRSb3V0ZXInKTtcblxuZnVuY3Rpb24gX2dldEdsb2JhbE9iamVjdCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoISFnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIXdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufVxuXG47XG52YXIgX1Jld2lyZU1vZHVsZUlkX18gPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpIHtcbiAgaWYgKF9SZXdpcmVNb2R1bGVJZF9fID09PSBudWxsKSB7XG4gICAgdmFyIGdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gICAgaWYgKCFnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fKSB7XG4gICAgICBnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fID0gMDtcbiAgICB9XG5cbiAgICBfUmV3aXJlTW9kdWxlSWRfXyA9IF9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18rKztcbiAgfVxuXG4gIHJldHVybiBfUmV3aXJlTW9kdWxlSWRfXztcbn1cblxuZnVuY3Rpb24gX2dldFJld2lyZVJlZ2lzdHJ5X18oKSB7XG4gIHZhciB0aGVHbG9iYWxWYXJpYWJsZSA9IF9nZXRHbG9iYWxPYmplY3QoKTtcblxuICBpZiAoIXRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHJldHVybiBfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlZERhdGFfXygpIHtcbiAgdmFyIG1vZHVsZUlkID0gX2dldFJld2lyZU1vZHVsZUlkX18oKTtcblxuICB2YXIgcmVnaXN0cnkgPSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpO1xuXG4gIHZhciByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuXG4gIGlmICghcmV3aXJlRGF0YSkge1xuICAgIHJlZ2lzdHJ5W21vZHVsZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV3aXJlRGF0YSA9IHJlZ2lzdHJ5W21vZHVsZUlkXTtcbiAgfVxuXG4gIHJldHVybiByZXdpcmVEYXRhO1xufVxuXG4oZnVuY3Rpb24gcmVnaXN0ZXJSZXNldEFsbCgpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGVbJ19fcmV3aXJlX3Jlc2V0X2FsbF9fJ10pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbnZhciBJTlRFTlRJT05BTF9VTkRFRklORUQgPSAnX19JTlRFTlRJT05BTF9VTkRFRklORURfXyc7XG52YXIgX1Jld2lyZUFQSV9fID0ge307XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9BUElPYmplY3QobmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1Jld2lyZUFQSV9fLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG59KSgpO1xuXG5mdW5jdGlvbiBfZ2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBJTlRFTlRJT05BTF9VTkRFRklORUQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge1xuICAgIGNhc2UgJ0NvbXBvbmVudCc6XG4gICAgICByZXR1cm4gX3JlYWN0LkNvbXBvbmVudDtcblxuICAgIGNhc2UgJ1Byb3BUeXBlcyc6XG4gICAgICByZXR1cm4gX3Byb3BUeXBlczIuZGVmYXVsdDtcblxuICAgIGNhc2UgJ29uTG9jYXRpb25DaGFuZ2VkJzpcbiAgICAgIHJldHVybiBfYWN0aW9ucy5vbkxvY2F0aW9uQ2hhbmdlZDtcblxuICAgIGNhc2UgJ2Nvbm5lY3QnOlxuICAgICAgcmV0dXJuIF9yZWFjdFJlZHV4LmNvbm5lY3Q7XG5cbiAgICBjYXNlICdjcmVhdGVDb25uZWN0ZWRSb3V0ZXInOlxuICAgICAgcmV0dXJuIGNyZWF0ZUNvbm5lY3RlZFJvdXRlcjtcblxuICAgIGNhc2UgJ1JlYWN0JzpcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQ7XG5cbiAgICBjYXNlICdSb3V0ZXInOlxuICAgICAgcmV0dXJuIF9yZWFjdFJvdXRlci5Sb3V0ZXI7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzaWduX18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIF9zZXRfb3JpZ2luYWxfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgX3ZhbHVlKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7fVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF91cGRhdGVfb3BlcmF0aW9uX18ob3BlcmF0aW9uLCB2YXJpYWJsZU5hbWUsIHByZWZpeCkge1xuICB2YXIgb2xkVmFsdWUgPSBfZ2V0X18odmFyaWFibGVOYW1lKTtcblxuICB2YXIgbmV3VmFsdWUgPSBvcGVyYXRpb24gPT09ICcrKycgPyBvbGRWYWx1ZSArIDEgOiBvbGRWYWx1ZSAtIDE7XG5cbiAgX2Fzc2lnbl9fKHZhcmlhYmxlTmFtZSwgbmV3VmFsdWUpO1xuXG4gIHJldHVybiBwcmVmaXggPyBuZXdWYWx1ZSA6IG9sZFZhbHVlO1xufVxuXG5mdW5jdGlvbiBfc2V0X18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKCh0eXBlb2YgdmFyaWFibGVOYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YXJpYWJsZU5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3Qua2V5cyh2YXJpYWJsZU5hbWUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbbmFtZV0gPSB2YXJpYWJsZU5hbWVbbmFtZV07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IElOVEVOVElPTkFMX1VOREVGSU5FRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9yZXNldF9fKHZhcmlhYmxlTmFtZSk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGRlbGV0ZSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgaWYgKE9iamVjdC5rZXlzKHJld2lyZURhdGEpLmxlbmd0aCA9PSAwKSB7XG4gICAgZGVsZXRlIF9nZXRSZXdpcmVSZWdpc3RyeV9fKClbX2dldFJld2lyZU1vZHVsZUlkX19dO1xuICB9XG5cbiAgO1xufVxuXG5mdW5jdGlvbiBfd2l0aF9fKG9iamVjdCkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgdmFyIHJld2lyZWRWYXJpYWJsZU5hbWVzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgdmFyIHByZXZpb3VzVmFsdWVzID0ge307XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHJld2lyZWRWYXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlTmFtZSkge1xuICAgICAgcHJldmlvdXNWYWx1ZXNbdmFyaWFibGVOYW1lXSA9IHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IG9iamVjdFt2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuXG4gICAgaWYgKCEhcmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXN1bHQudGhlbihyZXNldCkuY2F0Y2gocmVzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNldCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbnZhciBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPSB0eXBlb2YgY3JlYXRlQ29ubmVjdGVkUm91dGVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjcmVhdGVDb25uZWN0ZWRSb3V0ZXIpO1xuXG5mdW5jdGlvbiBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUNvbm5lY3RlZFJvdXRlciwgbmFtZSwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmlmICgoX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID09PSAnb2JqZWN0JyB8fCBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdmdW5jdGlvbicpICYmIE9iamVjdC5pc0V4dGVuc2libGUoY3JlYXRlQ29ubmVjdGVkUm91dGVyKSkge1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fZ2V0X18nLCBfZ2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3NldF9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3dpdGhfXycsIF93aXRoX18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmV3aXJlQVBJX18nLCBfUmV3aXJlQVBJX18pO1xufVxuXG5leHBvcnRzLl9fZ2V0X18gPSBfZ2V0X187XG5leHBvcnRzLl9fR2V0RGVwZW5kZW5jeV9fID0gX2dldF9fO1xuZXhwb3J0cy5fX1Jld2lyZV9fID0gX3NldF9fO1xuZXhwb3J0cy5fX3NldF9fID0gX3NldF9fO1xuZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gX3Jlc2V0X187XG5leHBvcnRzLl9fUmV3aXJlQVBJX18gPSBfUmV3aXJlQVBJX187IiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gZXhwb3J0cy5fX3NldF9fID0gZXhwb3J0cy5fX1Jld2lyZV9fID0gZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IGV4cG9ydHMuX19nZXRfXyA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMnKTtcblxudmFyIGNyZWF0ZUNvbm5lY3RSb3V0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDb25uZWN0Um91dGVyKHN0cnVjdHVyZSkge1xuICB2YXIgZnJvbUpTID0gc3RydWN0dXJlLmZyb21KUyxcbiAgICAgIG1lcmdlID0gc3RydWN0dXJlLm1lcmdlO1xuXG5cbiAgdmFyIGNyZWF0ZVJvdXRlclJlZHVjZXIgPSBmdW5jdGlvbiBjcmVhdGVSb3V0ZXJSZWR1Y2VyKGhpc3RvcnkpIHtcbiAgICB2YXIgaW5pdGlhbFJvdXRlclN0YXRlID0gZnJvbUpTKHtcbiAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvblxuICAgIH0pO1xuXG4gICAgLypcbiAgICAqIFRoaXMgcmVkdWNlciB3aWxsIHVwZGF0ZSB0aGUgc3RhdGUgd2l0aCB0aGUgbW9zdCByZWNlbnQgbG9jYXRpb24gaGlzdG9yeVxuICAgICogaGFzIHRyYW5zaXRpb25lZCB0by5cbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRpYWxSb3V0ZXJTdGF0ZTtcblxuICAgICAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgICAgcGF5bG9hZCA9IF9yZWYucGF5bG9hZDtcblxuICAgICAgaWYgKHR5cGUgPT09IF9nZXRfXygnTE9DQVRJT05fQ0hBTkdFJykpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlKHN0YXRlLCBwYXlsb2FkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIGNyZWF0ZVJvdXRlclJlZHVjZXI7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZ2V0X18oJ2NyZWF0ZUNvbm5lY3RSb3V0ZXInKTtcblxuZnVuY3Rpb24gX2dldEdsb2JhbE9iamVjdCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoISFnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIXdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufVxuXG47XG52YXIgX1Jld2lyZU1vZHVsZUlkX18gPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpIHtcbiAgaWYgKF9SZXdpcmVNb2R1bGVJZF9fID09PSBudWxsKSB7XG4gICAgdmFyIGdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gICAgaWYgKCFnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fKSB7XG4gICAgICBnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fID0gMDtcbiAgICB9XG5cbiAgICBfUmV3aXJlTW9kdWxlSWRfXyA9IF9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18rKztcbiAgfVxuXG4gIHJldHVybiBfUmV3aXJlTW9kdWxlSWRfXztcbn1cblxuZnVuY3Rpb24gX2dldFJld2lyZVJlZ2lzdHJ5X18oKSB7XG4gIHZhciB0aGVHbG9iYWxWYXJpYWJsZSA9IF9nZXRHbG9iYWxPYmplY3QoKTtcblxuICBpZiAoIXRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHJldHVybiBfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlZERhdGFfXygpIHtcbiAgdmFyIG1vZHVsZUlkID0gX2dldFJld2lyZU1vZHVsZUlkX18oKTtcblxuICB2YXIgcmVnaXN0cnkgPSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpO1xuXG4gIHZhciByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuXG4gIGlmICghcmV3aXJlRGF0YSkge1xuICAgIHJlZ2lzdHJ5W21vZHVsZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV3aXJlRGF0YSA9IHJlZ2lzdHJ5W21vZHVsZUlkXTtcbiAgfVxuXG4gIHJldHVybiByZXdpcmVEYXRhO1xufVxuXG4oZnVuY3Rpb24gcmVnaXN0ZXJSZXNldEFsbCgpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGVbJ19fcmV3aXJlX3Jlc2V0X2FsbF9fJ10pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbnZhciBJTlRFTlRJT05BTF9VTkRFRklORUQgPSAnX19JTlRFTlRJT05BTF9VTkRFRklORURfXyc7XG52YXIgX1Jld2lyZUFQSV9fID0ge307XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9BUElPYmplY3QobmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1Jld2lyZUFQSV9fLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG59KSgpO1xuXG5mdW5jdGlvbiBfZ2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBJTlRFTlRJT05BTF9VTkRFRklORUQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge1xuICAgIGNhc2UgJ0xPQ0FUSU9OX0NIQU5HRSc6XG4gICAgICByZXR1cm4gX2FjdGlvbnMuTE9DQVRJT05fQ0hBTkdFO1xuXG4gICAgY2FzZSAnY3JlYXRlQ29ubmVjdFJvdXRlcic6XG4gICAgICByZXR1cm4gY3JlYXRlQ29ubmVjdFJvdXRlcjtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NpZ25fXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfc2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lLCBfdmFsdWUpIHtcbiAgc3dpdGNoICh2YXJpYWJsZU5hbWUpIHt9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3VwZGF0ZV9vcGVyYXRpb25fXyhvcGVyYXRpb24sIHZhcmlhYmxlTmFtZSwgcHJlZml4KSB7XG4gIHZhciBvbGRWYWx1ZSA9IF9nZXRfXyh2YXJpYWJsZU5hbWUpO1xuXG4gIHZhciBuZXdWYWx1ZSA9IG9wZXJhdGlvbiA9PT0gJysrJyA/IG9sZFZhbHVlICsgMSA6IG9sZFZhbHVlIC0gMTtcblxuICBfYXNzaWduX18odmFyaWFibGVOYW1lLCBuZXdWYWx1ZSk7XG5cbiAgcmV0dXJuIHByZWZpeCA/IG5ld1ZhbHVlIDogb2xkVmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9zZXRfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAoKHR5cGVvZiB2YXJpYWJsZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhcmlhYmxlTmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlTmFtZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVtuYW1lXSA9IHZhcmlhYmxlTmFtZVtuYW1lXTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gSU5URU5USU9OQUxfVU5ERUZJTkVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3Jlc2V0X18odmFyaWFibGVOYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNldF9fKHZhcmlhYmxlTmFtZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgZGVsZXRlIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcblxuICBpZiAoT2JqZWN0LmtleXMocmV3aXJlRGF0YSkubGVuZ3RoID09IDApIHtcbiAgICBkZWxldGUgX2dldFJld2lyZVJlZ2lzdHJ5X18oKVtfZ2V0UmV3aXJlTW9kdWxlSWRfX107XG4gIH1cblxuICA7XG59XG5cbmZ1bmN0aW9uIF93aXRoX18ob2JqZWN0KSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICB2YXIgcmV3aXJlZFZhcmlhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgcHJldmlvdXNWYWx1ZXMgPSB7fTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gb2JqZWN0W3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG5cbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlc3VsdC50aGVuKHJlc2V0KS5jYXRjaChyZXNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxudmFyIF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9IHR5cGVvZiBjcmVhdGVDb25uZWN0Um91dGVyID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihjcmVhdGVDb25uZWN0Um91dGVyKTtcblxuZnVuY3Rpb24gYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVDb25uZWN0Um91dGVyLCBuYW1lLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuaWYgKChfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdvYmplY3QnIHx8IF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9PT0gJ2Z1bmN0aW9uJykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShjcmVhdGVDb25uZWN0Um91dGVyKSkge1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fZ2V0X18nLCBfZ2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3NldF9fJywgX3NldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX3dpdGhfXycsIF93aXRoX18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmV3aXJlQVBJX18nLCBfUmV3aXJlQVBJX18pO1xufVxuXG5leHBvcnRzLl9fZ2V0X18gPSBfZ2V0X187XG5leHBvcnRzLl9fR2V0RGVwZW5kZW5jeV9fID0gX2dldF9fO1xuZXhwb3J0cy5fX1Jld2lyZV9fID0gX3NldF9fO1xuZXhwb3J0cy5fX3NldF9fID0gX3NldF9fO1xuZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gX3Jlc2V0X187XG5leHBvcnRzLl9fUmV3aXJlQVBJX18gPSBfUmV3aXJlQVBJX187IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gZXhwb3J0cy5fX1Jlc2V0RGVwZW5kZW5jeV9fID0gZXhwb3J0cy5fX3NldF9fID0gZXhwb3J0cy5fX1Jld2lyZV9fID0gZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IGV4cG9ydHMuX19nZXRfXyA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2FjdGlvbnMgPSByZXF1aXJlKCcuL2FjdGlvbnMnKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGNhcHR1cmVzIENBTExfSElTVE9SWV9NRVRIT0QgYWN0aW9ucyB0byByZWRpcmVjdCB0byB0aGVcbiAqIHByb3ZpZGVkIGhpc3Rvcnkgb2JqZWN0LiBUaGlzIHdpbGwgcHJldmVudCB0aGVzZSBhY3Rpb25zIGZyb20gcmVhY2hpbmcgeW91clxuICogcmVkdWNlciBvciBhbnkgbWlkZGxld2FyZSB0aGF0IGNvbWVzIGFmdGVyIHRoaXMgb25lLlxuICovXG52YXIgcm91dGVyTWlkZGxld2FyZSA9IGZ1bmN0aW9uIHJvdXRlck1pZGRsZXdhcmUoaGlzdG9yeSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgIGlmIChhY3Rpb24udHlwZSAhPT0gX2dldF9fKCdDQUxMX0hJU1RPUllfTUVUSE9EJykpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9hY3Rpb24kcGF5bG9hZCA9IGFjdGlvbi5wYXlsb2FkLFxuICAgICAgICAgICAgbWV0aG9kID0gX2FjdGlvbiRwYXlsb2FkLm1ldGhvZCxcbiAgICAgICAgICAgIGFyZ3MgPSBfYWN0aW9uJHBheWxvYWQuYXJncztcblxuICAgICAgICBoaXN0b3J5W21ldGhvZF0uYXBwbHkoaGlzdG9yeSwgX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRfXygncm91dGVyTWlkZGxld2FyZScpO1xuXG5mdW5jdGlvbiBfZ2V0R2xvYmFsT2JqZWN0KCkge1xuICB0cnkge1xuICAgIGlmICghIWdsb2JhbCkge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCEhd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG59XG5cbjtcbnZhciBfUmV3aXJlTW9kdWxlSWRfXyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVNb2R1bGVJZF9fKCkge1xuICBpZiAoX1Jld2lyZU1vZHVsZUlkX18gPT09IG51bGwpIHtcbiAgICB2YXIgZ2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgICBpZiAoIWdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18pIHtcbiAgICAgIGdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18gPSAwO1xuICAgIH1cblxuICAgIF9SZXdpcmVNb2R1bGVJZF9fID0gX18kJEdMT0JBTF9SRVdJUkVfTkVYVF9NT0RVTEVfSURfXysrO1xuICB9XG5cbiAgcmV0dXJuIF9SZXdpcmVNb2R1bGVJZF9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXykge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIF9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX187XG59XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVkRGF0YV9fKCkge1xuICB2YXIgbW9kdWxlSWQgPSBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpO1xuXG4gIHZhciByZWdpc3RyeSA9IF9nZXRSZXdpcmVSZWdpc3RyeV9fKCk7XG5cbiAgdmFyIHJld2lyZURhdGEgPSByZWdpc3RyeVttb2R1bGVJZF07XG5cbiAgaWYgKCFyZXdpcmVEYXRhKSB7XG4gICAgcmVnaXN0cnlbbW9kdWxlSWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuICB9XG5cbiAgcmV0dXJuIHJld2lyZURhdGE7XG59XG5cbihmdW5jdGlvbiByZWdpc3RlclJlc2V0QWxsKCkge1xuICB2YXIgdGhlR2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgaWYgKCF0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSkge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlWydfX3Jld2lyZV9yZXNldF9hbGxfXyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxudmFyIElOVEVOVElPTkFMX1VOREVGSU5FRCA9ICdfX0lOVEVOVElPTkFMX1VOREVGSU5FRF9fJztcbnZhciBfUmV3aXJlQVBJX18gPSB7fTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0FQSU9iamVjdChuYW1lLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfUmV3aXJlQVBJX18sIG5hbWUsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19HZXREZXBlbmRlbmN5X18nLCBfZ2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fcmVzZXRfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX193aXRoX18nLCBfd2l0aF9fKTtcbn0pKCk7XG5cbmZ1bmN0aW9uIF9nZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmIChyZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFsdWUgPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgICBpZiAodmFsdWUgPT09IElOVEVOVElPTkFMX1VOREVGSU5FRCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7XG4gICAgY2FzZSAnQ0FMTF9ISVNUT1JZX01FVEhPRCc6XG4gICAgICByZXR1cm4gX2FjdGlvbnMuQ0FMTF9ISVNUT1JZX01FVEhPRDtcblxuICAgIGNhc2UgJ3JvdXRlck1pZGRsZXdhcmUnOlxuICAgICAgcmV0dXJuIHJvdXRlck1pZGRsZXdhcmU7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzaWduX18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIF9zZXRfb3JpZ2luYWxfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgX3ZhbHVlKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7fVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF91cGRhdGVfb3BlcmF0aW9uX18ob3BlcmF0aW9uLCB2YXJpYWJsZU5hbWUsIHByZWZpeCkge1xuICB2YXIgb2xkVmFsdWUgPSBfZ2V0X18odmFyaWFibGVOYW1lKTtcblxuICB2YXIgbmV3VmFsdWUgPSBvcGVyYXRpb24gPT09ICcrKycgPyBvbGRWYWx1ZSArIDEgOiBvbGRWYWx1ZSAtIDE7XG5cbiAgX2Fzc2lnbl9fKHZhcmlhYmxlTmFtZSwgbmV3VmFsdWUpO1xuXG4gIHJldHVybiBwcmVmaXggPyBuZXdWYWx1ZSA6IG9sZFZhbHVlO1xufVxuXG5mdW5jdGlvbiBfc2V0X18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKCh0eXBlb2YgdmFyaWFibGVOYW1lID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YXJpYWJsZU5hbWUpKSA9PT0gJ29iamVjdCcpIHtcbiAgICBPYmplY3Qua2V5cyh2YXJpYWJsZU5hbWUpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbbmFtZV0gPSB2YXJpYWJsZU5hbWVbbmFtZV07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IElOVEVOVElPTkFMX1VOREVGSU5FRDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF9yZXNldF9fKHZhcmlhYmxlTmFtZSk7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfcmVzZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGRlbGV0ZSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgaWYgKE9iamVjdC5rZXlzKHJld2lyZURhdGEpLmxlbmd0aCA9PSAwKSB7XG4gICAgZGVsZXRlIF9nZXRSZXdpcmVSZWdpc3RyeV9fKClbX2dldFJld2lyZU1vZHVsZUlkX19dO1xuICB9XG5cbiAgO1xufVxuXG5mdW5jdGlvbiBfd2l0aF9fKG9iamVjdCkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgdmFyIHJld2lyZWRWYXJpYWJsZU5hbWVzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgdmFyIHByZXZpb3VzVmFsdWVzID0ge307XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHJld2lyZWRWYXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlTmFtZSkge1xuICAgICAgcHJldmlvdXNWYWx1ZXNbdmFyaWFibGVOYW1lXSA9IHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IG9iamVjdFt2YXJpYWJsZU5hbWVdO1xuICAgIH0pO1xuICAgIHZhciByZXN1bHQgPSBjYWxsYmFjaygpO1xuXG4gICAgaWYgKCEhcmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXN1bHQudGhlbihyZXNldCkuY2F0Y2gocmVzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNldCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbnZhciBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPSB0eXBlb2Ygcm91dGVyTWlkZGxld2FyZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yocm91dGVyTWlkZGxld2FyZSk7XG5cbmZ1bmN0aW9uIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocm91dGVyTWlkZGxld2FyZSwgbmFtZSwge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmlmICgoX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID09PSAnb2JqZWN0JyB8fCBfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdmdW5jdGlvbicpICYmIE9iamVjdC5pc0V4dGVuc2libGUocm91dGVyTWlkZGxld2FyZSkpIHtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX0dldERlcGVuZGVuY3lfXycsIF9nZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19yZXNldF9fJywgX3Jlc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX193aXRoX18nLCBfd2l0aF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZUFQSV9fJywgX1Jld2lyZUFQSV9fKTtcbn1cblxuZXhwb3J0cy5fX2dldF9fID0gX2dldF9fO1xuZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19SZXdpcmVfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19zZXRfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IF9yZXNldF9fO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gX1Jld2lyZUFQSV9fOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuX19SZXdpcmVBUElfXyA9IGV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IGV4cG9ydHMuX19zZXRfXyA9IGV4cG9ydHMuX19SZXdpcmVfXyA9IGV4cG9ydHMuX19HZXREZXBlbmRlbmN5X18gPSBleHBvcnRzLl9fZ2V0X18gPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9yZWFjdFJvdXRlciA9IHJlcXVpcmUoJ3JlYWN0LXJvdXRlcicpO1xuXG52YXIgY3JlYXRlU2VsZWN0b3JzID0gZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JzKHN0cnVjdHVyZSkge1xuICB2YXIgZ2V0SW4gPSBzdHJ1Y3R1cmUuZ2V0SW4sXG4gICAgICB0b0pTID0gc3RydWN0dXJlLnRvSlM7XG5cbiAgdmFyIGdldExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0TG9jYXRpb24oc3RhdGUpIHtcbiAgICByZXR1cm4gdG9KUyhnZXRJbihzdGF0ZSwgWydyb3V0ZXInLCAnbG9jYXRpb24nXSkpO1xuICB9O1xuICB2YXIgZ2V0QWN0aW9uID0gZnVuY3Rpb24gZ2V0QWN0aW9uKHN0YXRlKSB7XG4gICAgcmV0dXJuIHRvSlMoZ2V0SW4oc3RhdGUsIFsncm91dGVyJywgJ2FjdGlvbiddKSk7XG4gIH07XG5cbiAgLy8gSXQgb25seSBtYWtlcyBzZW5zZSB0byByZWNhbGN1bGF0ZSB0aGUgYG1hdGNoUGF0aGAgd2hlbmV2ZXIgdGhlIHBhdGhuYW1lXG4gIC8vIG9mIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLiBUaGF0J3Mgd2h5IGBjcmVhdGVNYXRjaFNlbGVjdG9yYCBtZW1vaXplc1xuICAvLyB0aGUgbGF0ZXN0IHJlc3VsdCBiYXNlZCBvbiB0aGUgbG9jYXRpb24ncyBwYXRobmFtZS5cbiAgdmFyIGNyZWF0ZU1hdGNoU2VsZWN0b3IgPSBmdW5jdGlvbiBjcmVhdGVNYXRjaFNlbGVjdG9yKHBhdGgpIHtcbiAgICB2YXIgbGFzdFBhdGhuYW1lID0gbnVsbDtcbiAgICB2YXIgbGFzdE1hdGNoID0gbnVsbDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHZhciBfcmVmID0gZ2V0TG9jYXRpb24oc3RhdGUpIHx8IHt9LFxuICAgICAgICAgIHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZTtcblxuICAgICAgaWYgKHBhdGhuYW1lID09PSBsYXN0UGF0aG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGxhc3RNYXRjaDtcbiAgICAgIH1cbiAgICAgIGxhc3RQYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgdmFyIG1hdGNoID0gX2dldF9fKCdtYXRjaFBhdGgnKShwYXRobmFtZSwgcGF0aCk7XG4gICAgICBpZiAoIW1hdGNoIHx8ICFsYXN0TWF0Y2ggfHwgbWF0Y2gudXJsICE9PSBsYXN0TWF0Y2gudXJsKSB7XG4gICAgICAgIGxhc3RNYXRjaCA9IG1hdGNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGFzdE1hdGNoO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHsgZ2V0TG9jYXRpb246IGdldExvY2F0aW9uLCBnZXRBY3Rpb246IGdldEFjdGlvbiwgY3JlYXRlTWF0Y2hTZWxlY3RvcjogY3JlYXRlTWF0Y2hTZWxlY3RvciB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2dldF9fKCdjcmVhdGVTZWxlY3RvcnMnKTtcblxuZnVuY3Rpb24gX2dldEdsb2JhbE9iamVjdCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoISFnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIXdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufVxuXG47XG52YXIgX1Jld2lyZU1vZHVsZUlkX18gPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpIHtcbiAgaWYgKF9SZXdpcmVNb2R1bGVJZF9fID09PSBudWxsKSB7XG4gICAgdmFyIGdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gICAgaWYgKCFnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fKSB7XG4gICAgICBnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fID0gMDtcbiAgICB9XG5cbiAgICBfUmV3aXJlTW9kdWxlSWRfXyA9IF9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18rKztcbiAgfVxuXG4gIHJldHVybiBfUmV3aXJlTW9kdWxlSWRfXztcbn1cblxuZnVuY3Rpb24gX2dldFJld2lyZVJlZ2lzdHJ5X18oKSB7XG4gIHZhciB0aGVHbG9iYWxWYXJpYWJsZSA9IF9nZXRHbG9iYWxPYmplY3QoKTtcblxuICBpZiAoIXRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHJldHVybiBfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlZERhdGFfXygpIHtcbiAgdmFyIG1vZHVsZUlkID0gX2dldFJld2lyZU1vZHVsZUlkX18oKTtcblxuICB2YXIgcmVnaXN0cnkgPSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpO1xuXG4gIHZhciByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuXG4gIGlmICghcmV3aXJlRGF0YSkge1xuICAgIHJlZ2lzdHJ5W21vZHVsZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV3aXJlRGF0YSA9IHJlZ2lzdHJ5W21vZHVsZUlkXTtcbiAgfVxuXG4gIHJldHVybiByZXdpcmVEYXRhO1xufVxuXG4oZnVuY3Rpb24gcmVnaXN0ZXJSZXNldEFsbCgpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGVbJ19fcmV3aXJlX3Jlc2V0X2FsbF9fJ10pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbnZhciBJTlRFTlRJT05BTF9VTkRFRklORUQgPSAnX19JTlRFTlRJT05BTF9VTkRFRklORURfXyc7XG52YXIgX1Jld2lyZUFQSV9fID0ge307XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9BUElPYmplY3QobmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1Jld2lyZUFQSV9fLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG59KSgpO1xuXG5mdW5jdGlvbiBfZ2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBJTlRFTlRJT05BTF9VTkRFRklORUQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge1xuICAgIGNhc2UgJ21hdGNoUGF0aCc6XG4gICAgICByZXR1cm4gX3JlYWN0Um91dGVyLm1hdGNoUGF0aDtcblxuICAgIGNhc2UgJ2NyZWF0ZVNlbGVjdG9ycyc6XG4gICAgICByZXR1cm4gY3JlYXRlU2VsZWN0b3JzO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX2Fzc2lnbl9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmIChyZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfc2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9zZXRfb3JpZ2luYWxfXyh2YXJpYWJsZU5hbWUsIF92YWx1ZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge31cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfdXBkYXRlX29wZXJhdGlvbl9fKG9wZXJhdGlvbiwgdmFyaWFibGVOYW1lLCBwcmVmaXgpIHtcbiAgdmFyIG9sZFZhbHVlID0gX2dldF9fKHZhcmlhYmxlTmFtZSk7XG5cbiAgdmFyIG5ld1ZhbHVlID0gb3BlcmF0aW9uID09PSAnKysnID8gb2xkVmFsdWUgKyAxIDogb2xkVmFsdWUgLSAxO1xuXG4gIF9hc3NpZ25fXyh2YXJpYWJsZU5hbWUsIG5ld1ZhbHVlKTtcblxuICByZXR1cm4gcHJlZml4ID8gbmV3VmFsdWUgOiBvbGRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gX3NldF9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmICgodHlwZW9mIHZhcmlhYmxlTmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFyaWFibGVOYW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXModmFyaWFibGVOYW1lKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXdpcmVEYXRhW25hbWVdID0gdmFyaWFibGVOYW1lW25hbWVdO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBJTlRFTlRJT05BTF9VTkRFRklORUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfcmVzZXRfXyh2YXJpYWJsZU5hbWUpO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBkZWxldGUgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gIGlmIChPYmplY3Qua2V5cyhyZXdpcmVEYXRhKS5sZW5ndGggPT0gMCkge1xuICAgIGRlbGV0ZSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpW19nZXRSZXdpcmVNb2R1bGVJZF9fXTtcbiAgfVxuXG4gIDtcbn1cblxuZnVuY3Rpb24gX3dpdGhfXyhvYmplY3QpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIHZhciByZXdpcmVkVmFyaWFibGVOYW1lcyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIHZhciBwcmV2aW91c1ZhbHVlcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHJld2lyZWRWYXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlTmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gcHJldmlvdXNWYWx1ZXNbdmFyaWFibGVOYW1lXTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV0gPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBvYmplY3RbdmFyaWFibGVOYW1lXTtcbiAgICB9KTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soKTtcblxuICAgIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzdWx0LnRoZW4ocmVzZXQpLmNhdGNoKHJlc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzZXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG52YXIgX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID0gdHlwZW9mIGNyZWF0ZVNlbGVjdG9ycyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoY3JlYXRlU2VsZWN0b3JzKTtcblxuZnVuY3Rpb24gYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KG5hbWUsIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVTZWxlY3RvcnMsIG5hbWUsIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5pZiAoKF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9PT0gJ29iamVjdCcgfHwgX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID09PSAnZnVuY3Rpb24nKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGNyZWF0ZVNlbGVjdG9ycykpIHtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX0dldERlcGVuZGVuY3lfXycsIF9nZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19yZXNldF9fJywgX3Jlc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX193aXRoX18nLCBfd2l0aF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZUFQSV9fJywgX1Jld2lyZUFQSV9fKTtcbn1cblxuZXhwb3J0cy5fX2dldF9fID0gX2dldF9fO1xuZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19SZXdpcmVfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19zZXRfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IF9yZXNldF9fO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gX1Jld2lyZUFQSV9fOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuX19SZXdpcmVBUElfXyA9IGV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IGV4cG9ydHMuX19zZXRfXyA9IGV4cG9ydHMuX19SZXdpcmVfXyA9IGV4cG9ydHMuX19HZXREZXBlbmRlbmN5X18gPSBleHBvcnRzLl9fZ2V0X18gPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9nZXRJbiA9IHJlcXVpcmUoJy4vZ2V0SW4nKTtcblxudmFyIF9nZXRJbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzdHJ1Y3R1cmUgPSB7XG4gIGZyb21KUzogZnVuY3Rpb24gZnJvbUpTKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBnZXRJbjogX2dldF9fKCdnZXRJbicpLFxuICBtZXJnZTogZnVuY3Rpb24gbWVyZ2Uoc3RhdGUsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCBwYXlsb2FkKTtcbiAgfSxcbiAgdG9KUzogZnVuY3Rpb24gdG9KUyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2dldF9fKCdzdHJ1Y3R1cmUnKTtcblxuZnVuY3Rpb24gX2dldEdsb2JhbE9iamVjdCgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoISFnbG9iYWwpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghIXdpbmRvdykge1xuICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfVxufVxuXG47XG52YXIgX1Jld2lyZU1vZHVsZUlkX18gPSBudWxsO1xuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpIHtcbiAgaWYgKF9SZXdpcmVNb2R1bGVJZF9fID09PSBudWxsKSB7XG4gICAgdmFyIGdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gICAgaWYgKCFnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fKSB7XG4gICAgICBnbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9ORVhUX01PRFVMRV9JRF9fID0gMDtcbiAgICB9XG5cbiAgICBfUmV3aXJlTW9kdWxlSWRfXyA9IF9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18rKztcbiAgfVxuXG4gIHJldHVybiBfUmV3aXJlTW9kdWxlSWRfXztcbn1cblxuZnVuY3Rpb24gX2dldFJld2lyZVJlZ2lzdHJ5X18oKSB7XG4gIHZhciB0aGVHbG9iYWxWYXJpYWJsZSA9IF9nZXRHbG9iYWxPYmplY3QoKTtcblxuICBpZiAoIXRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZS5fXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHJldHVybiBfXyQkR0xPQkFMX1JFV0lSRV9SRUdJU1RSWV9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlZERhdGFfXygpIHtcbiAgdmFyIG1vZHVsZUlkID0gX2dldFJld2lyZU1vZHVsZUlkX18oKTtcblxuICB2YXIgcmVnaXN0cnkgPSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpO1xuXG4gIHZhciByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuXG4gIGlmICghcmV3aXJlRGF0YSkge1xuICAgIHJlZ2lzdHJ5W21vZHVsZUlkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmV3aXJlRGF0YSA9IHJlZ2lzdHJ5W21vZHVsZUlkXTtcbiAgfVxuXG4gIHJldHVybiByZXdpcmVEYXRhO1xufVxuXG4oZnVuY3Rpb24gcmVnaXN0ZXJSZXNldEFsbCgpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGVbJ19fcmV3aXJlX3Jlc2V0X2FsbF9fJ10pIHtcbiAgICB0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cbnZhciBJTlRFTlRJT05BTF9VTkRFRklORUQgPSAnX19JTlRFTlRJT05BTF9VTkRFRklORURfXyc7XG52YXIgX1Jld2lyZUFQSV9fID0ge307XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGFkZFByb3BlcnR5VG9BUElPYmplY3QobmFtZSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX1Jld2lyZUFQSV9fLCBuYW1lLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fR2V0RGVwZW5kZW5jeV9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX3Jlc2V0X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG59KSgpO1xuXG5mdW5jdGlvbiBfZ2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHZhbHVlID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBJTlRFTlRJT05BTF9VTkRFRklORUQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2dldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSkge1xuICBzd2l0Y2ggKHZhcmlhYmxlTmFtZSkge1xuICAgIGNhc2UgJ2dldEluJzpcbiAgICAgIHJldHVybiBfZ2V0SW4yLmRlZmF1bHQ7XG5cbiAgICBjYXNlICdzdHJ1Y3R1cmUnOlxuICAgICAgcmV0dXJuIHN0cnVjdHVyZTtcbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9hc3NpZ25fXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAocmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfc2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lLCBfdmFsdWUpIHtcbiAgc3dpdGNoICh2YXJpYWJsZU5hbWUpIHt9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3VwZGF0ZV9vcGVyYXRpb25fXyhvcGVyYXRpb24sIHZhcmlhYmxlTmFtZSwgcHJlZml4KSB7XG4gIHZhciBvbGRWYWx1ZSA9IF9nZXRfXyh2YXJpYWJsZU5hbWUpO1xuXG4gIHZhciBuZXdWYWx1ZSA9IG9wZXJhdGlvbiA9PT0gJysrJyA/IG9sZFZhbHVlICsgMSA6IG9sZFZhbHVlIC0gMTtcblxuICBfYXNzaWduX18odmFyaWFibGVOYW1lLCBuZXdWYWx1ZSk7XG5cbiAgcmV0dXJuIHByZWZpeCA/IG5ld1ZhbHVlIDogb2xkVmFsdWU7XG59XG5cbmZ1bmN0aW9uIF9zZXRfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBpZiAoKHR5cGVvZiB2YXJpYWJsZU5hbWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhcmlhYmxlTmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlTmFtZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVtuYW1lXSA9IHZhcmlhYmxlTmFtZVtuYW1lXTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gSU5URU5USU9OQUxfVU5ERUZJTkVEO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgX3Jlc2V0X18odmFyaWFibGVOYW1lKTtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIF9yZXNldF9fKHZhcmlhYmxlTmFtZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgZGVsZXRlIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXTtcblxuICBpZiAoT2JqZWN0LmtleXMocmV3aXJlRGF0YSkubGVuZ3RoID09IDApIHtcbiAgICBkZWxldGUgX2dldFJld2lyZVJlZ2lzdHJ5X18oKVtfZ2V0UmV3aXJlTW9kdWxlSWRfX107XG4gIH1cblxuICA7XG59XG5cbmZ1bmN0aW9uIF93aXRoX18ob2JqZWN0KSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICB2YXIgcmV3aXJlZFZhcmlhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICB2YXIgcHJldmlvdXNWYWx1ZXMgPSB7fTtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgcmV3aXJlZFZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGVOYW1lKSB7XG4gICAgICBwcmV2aW91c1ZhbHVlc1t2YXJpYWJsZU5hbWVdID0gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gb2JqZWN0W3ZhcmlhYmxlTmFtZV07XG4gICAgfSk7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG5cbiAgICBpZiAoISFyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlc3VsdC50aGVuKHJlc2V0KS5jYXRjaChyZXNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxudmFyIF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9IHR5cGVvZiBzdHJ1Y3R1cmUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0cnVjdHVyZSk7XG5cbmZ1bmN0aW9uIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eShuYW1lLCB2YWx1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RydWN0dXJlLCBuYW1lLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuaWYgKChfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdvYmplY3QnIHx8IF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9PT0gJ2Z1bmN0aW9uJykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzdHJ1Y3R1cmUpKSB7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19nZXRfXycsIF9nZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19HZXREZXBlbmRlbmN5X18nLCBfZ2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmV3aXJlX18nLCBfc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fc2V0X18nLCBfc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fcmVzZXRfXycsIF9yZXNldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jlc2V0RGVwZW5kZW5jeV9fJywgX3Jlc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fd2l0aF9fJywgX3dpdGhfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXdpcmVBUElfXycsIF9SZXdpcmVBUElfXyk7XG59XG5cbmV4cG9ydHMuX19nZXRfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19HZXREZXBlbmRlbmN5X18gPSBfZ2V0X187XG5leHBvcnRzLl9fUmV3aXJlX18gPSBfc2V0X187XG5leHBvcnRzLl9fc2V0X18gPSBfc2V0X187XG5leHBvcnRzLl9fUmVzZXREZXBlbmRlbmN5X18gPSBfcmVzZXRfXztcbmV4cG9ydHMuX19SZXdpcmVBUElfXyA9IF9SZXdpcmVBUElfXzsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKiBDb2RlIGZyb20gZ2l0aHViLmNvbS9lcmlrcmFzL3JlZHV4LWZvcm0gYnkgRXJpayBSYXNtdXNzZW4gKi9cblxudmFyIGdldEluID0gZnVuY3Rpb24gZ2V0SW4oc3RhdGUsIHBhdGgpIHtcbiAgaWYgKCFzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBwYXRoLmxlbmd0aDtcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHN0YXRlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aCAmJiAhIXJlc3VsdDsgKytpKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0W3BhdGhbaV1dO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9nZXRfXyhcImdldEluXCIpO1xuXG5mdW5jdGlvbiBfZ2V0R2xvYmFsT2JqZWN0KCkge1xuICB0cnkge1xuICAgIGlmICghIWdsb2JhbCkge1xuICAgICAgcmV0dXJuIGdsb2JhbDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCEhd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG59XG5cbjtcbnZhciBfUmV3aXJlTW9kdWxlSWRfXyA9IG51bGw7XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVNb2R1bGVJZF9fKCkge1xuICBpZiAoX1Jld2lyZU1vZHVsZUlkX18gPT09IG51bGwpIHtcbiAgICB2YXIgZ2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgICBpZiAoIWdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18pIHtcbiAgICAgIGdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX05FWFRfTU9EVUxFX0lEX18gPSAwO1xuICAgIH1cblxuICAgIF9SZXdpcmVNb2R1bGVJZF9fID0gX18kJEdMT0JBTF9SRVdJUkVfTkVYVF9NT0RVTEVfSURfXysrO1xuICB9XG5cbiAgcmV0dXJuIF9SZXdpcmVNb2R1bGVJZF9fO1xufVxuXG5mdW5jdGlvbiBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpIHtcbiAgdmFyIHRoZUdsb2JhbFZhcmlhYmxlID0gX2dldEdsb2JhbE9iamVjdCgpO1xuXG4gIGlmICghdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXykge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlLl9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX18gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIF9fJCRHTE9CQUxfUkVXSVJFX1JFR0lTVFJZX187XG59XG5cbmZ1bmN0aW9uIF9nZXRSZXdpcmVkRGF0YV9fKCkge1xuICB2YXIgbW9kdWxlSWQgPSBfZ2V0UmV3aXJlTW9kdWxlSWRfXygpO1xuXG4gIHZhciByZWdpc3RyeSA9IF9nZXRSZXdpcmVSZWdpc3RyeV9fKCk7XG5cbiAgdmFyIHJld2lyZURhdGEgPSByZWdpc3RyeVttb2R1bGVJZF07XG5cbiAgaWYgKCFyZXdpcmVEYXRhKSB7XG4gICAgcmVnaXN0cnlbbW9kdWxlSWRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZXdpcmVEYXRhID0gcmVnaXN0cnlbbW9kdWxlSWRdO1xuICB9XG5cbiAgcmV0dXJuIHJld2lyZURhdGE7XG59XG5cbihmdW5jdGlvbiByZWdpc3RlclJlc2V0QWxsKCkge1xuICB2YXIgdGhlR2xvYmFsVmFyaWFibGUgPSBfZ2V0R2xvYmFsT2JqZWN0KCk7XG5cbiAgaWYgKCF0aGVHbG9iYWxWYXJpYWJsZVsnX19yZXdpcmVfcmVzZXRfYWxsX18nXSkge1xuICAgIHRoZUdsb2JhbFZhcmlhYmxlWydfX3Jld2lyZV9yZXNldF9hbGxfXyddID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlR2xvYmFsVmFyaWFibGUuX18kJEdMT0JBTF9SRVdJUkVfUkVHSVNUUllfXyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcbiAgfVxufSkoKTtcblxudmFyIElOVEVOVElPTkFMX1VOREVGSU5FRCA9ICdfX0lOVEVOVElPTkFMX1VOREVGSU5FRF9fJztcbnZhciBfUmV3aXJlQVBJX18gPSB7fTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0FQSU9iamVjdChuYW1lLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfUmV3aXJlQVBJX18sIG5hbWUsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19HZXREZXBlbmRlbmN5X18nLCBfZ2V0X18pO1xuICBhZGRQcm9wZXJ0eVRvQVBJT2JqZWN0KCdfX1Jld2lyZV9fJywgX3NldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZFByb3BlcnR5VG9BUElPYmplY3QoJ19fcmVzZXRfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX19SZXNldERlcGVuZGVuY3lfXycsIF9yZXNldF9fKTtcbiAgYWRkUHJvcGVydHlUb0FQSU9iamVjdCgnX193aXRoX18nLCBfd2l0aF9fKTtcbn0pKCk7XG5cbmZ1bmN0aW9uIF9nZXRfXyh2YXJpYWJsZU5hbWUpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIGlmIChyZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdmFsdWUgPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG5cbiAgICBpZiAodmFsdWUgPT09IElOVEVOVElPTkFMX1VOREVGSU5FRCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0X29yaWdpbmFsX18odmFyaWFibGVOYW1lKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7XG4gICAgY2FzZSBcImdldEluXCI6XG4gICAgICByZXR1cm4gZ2V0SW47XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBfYXNzaWduX18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIF9zZXRfb3JpZ2luYWxfXyh2YXJpYWJsZU5hbWUsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3NldF9vcmlnaW5hbF9fKHZhcmlhYmxlTmFtZSwgX3ZhbHVlKSB7XG4gIHN3aXRjaCAodmFyaWFibGVOYW1lKSB7fVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF91cGRhdGVfb3BlcmF0aW9uX18ob3BlcmF0aW9uLCB2YXJpYWJsZU5hbWUsIHByZWZpeCkge1xuICB2YXIgb2xkVmFsdWUgPSBfZ2V0X18odmFyaWFibGVOYW1lKTtcblxuICB2YXIgbmV3VmFsdWUgPSBvcGVyYXRpb24gPT09ICcrKycgPyBvbGRWYWx1ZSArIDEgOiBvbGRWYWx1ZSAtIDE7XG5cbiAgX2Fzc2lnbl9fKHZhcmlhYmxlTmFtZSwgbmV3VmFsdWUpO1xuXG4gIHJldHVybiBwcmVmaXggPyBuZXdWYWx1ZSA6IG9sZFZhbHVlO1xufVxuXG5mdW5jdGlvbiBfc2V0X18odmFyaWFibGVOYW1lLCB2YWx1ZSkge1xuICB2YXIgcmV3aXJlRGF0YSA9IF9nZXRSZXdpcmVkRGF0YV9fKCk7XG5cbiAgaWYgKCh0eXBlb2YgdmFyaWFibGVOYW1lID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodmFyaWFibGVOYW1lKSkgPT09ICdvYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXModmFyaWFibGVOYW1lKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXdpcmVEYXRhW25hbWVdID0gdmFyaWFibGVOYW1lW25hbWVdO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBJTlRFTlRJT05BTF9VTkRFRklORUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJld2lyZURhdGFbdmFyaWFibGVOYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfcmVzZXRfXyh2YXJpYWJsZU5hbWUpO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gX3Jlc2V0X18odmFyaWFibGVOYW1lKSB7XG4gIHZhciByZXdpcmVEYXRhID0gX2dldFJld2lyZWREYXRhX18oKTtcblxuICBkZWxldGUgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdO1xuXG4gIGlmIChPYmplY3Qua2V5cyhyZXdpcmVEYXRhKS5sZW5ndGggPT0gMCkge1xuICAgIGRlbGV0ZSBfZ2V0UmV3aXJlUmVnaXN0cnlfXygpW19nZXRSZXdpcmVNb2R1bGVJZF9fXTtcbiAgfVxuXG4gIDtcbn1cblxuZnVuY3Rpb24gX3dpdGhfXyhvYmplY3QpIHtcbiAgdmFyIHJld2lyZURhdGEgPSBfZ2V0UmV3aXJlZERhdGFfXygpO1xuXG4gIHZhciByZXdpcmVkVmFyaWFibGVOYW1lcyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIHZhciBwcmV2aW91c1ZhbHVlcyA9IHt9O1xuXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIHJld2lyZWRWYXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHZhcmlhYmxlTmFtZSkge1xuICAgICAgcmV3aXJlRGF0YVt2YXJpYWJsZU5hbWVdID0gcHJldmlvdXNWYWx1ZXNbdmFyaWFibGVOYW1lXTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICByZXdpcmVkVmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uICh2YXJpYWJsZU5hbWUpIHtcbiAgICAgIHByZXZpb3VzVmFsdWVzW3ZhcmlhYmxlTmFtZV0gPSByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV07XG4gICAgICByZXdpcmVEYXRhW3ZhcmlhYmxlTmFtZV0gPSBvYmplY3RbdmFyaWFibGVOYW1lXTtcbiAgICB9KTtcbiAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2soKTtcblxuICAgIGlmICghIXJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVzdWx0LnRoZW4ocmVzZXQpLmNhdGNoKHJlc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzZXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG52YXIgX3R5cGVPZk9yaWdpbmFsRXhwb3J0ID0gdHlwZW9mIGdldEluID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoZ2V0SW4pO1xuXG5mdW5jdGlvbiBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkobmFtZSwgdmFsdWUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdldEluLCBuYW1lLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuaWYgKChfdHlwZU9mT3JpZ2luYWxFeHBvcnQgPT09ICdvYmplY3QnIHx8IF90eXBlT2ZPcmlnaW5hbEV4cG9ydCA9PT0gJ2Z1bmN0aW9uJykgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShnZXRJbikpIHtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX2dldF9fJywgX2dldF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX0dldERlcGVuZGVuY3lfXycsIF9nZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19SZXdpcmVfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19zZXRfXycsIF9zZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX19yZXNldF9fJywgX3Jlc2V0X18pO1xuICBhZGROb25FbnVtZXJhYmxlUHJvcGVydHkoJ19fUmVzZXREZXBlbmRlbmN5X18nLCBfcmVzZXRfXyk7XG4gIGFkZE5vbkVudW1lcmFibGVQcm9wZXJ0eSgnX193aXRoX18nLCBfd2l0aF9fKTtcbiAgYWRkTm9uRW51bWVyYWJsZVByb3BlcnR5KCdfX1Jld2lyZUFQSV9fJywgX1Jld2lyZUFQSV9fKTtcbn1cblxuZXhwb3J0cy5fX2dldF9fID0gX2dldF9fO1xuZXhwb3J0cy5fX0dldERlcGVuZGVuY3lfXyA9IF9nZXRfXztcbmV4cG9ydHMuX19SZXdpcmVfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19zZXRfXyA9IF9zZXRfXztcbmV4cG9ydHMuX19SZXNldERlcGVuZGVuY3lfXyA9IF9yZXNldF9fO1xuZXhwb3J0cy5fX1Jld2lyZUFQSV9fID0gX1Jld2lyZUFQSV9fOyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9pcy1pdGVyYWJsZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvY29yZS5pcy1pdGVyYWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmlzSXRlcmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8gPSBPYmplY3QoaXQpO1xuICByZXR1cm4gT1tJVEVSQVRPUl0gIT09IHVuZGVmaW5lZFxuICAgIHx8ICdAQGl0ZXJhdG9yJyBpbiBPXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgIHx8IEl0ZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShjbGFzc29mKE8pKTtcbn07XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yJyk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXQgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3IgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGl0ZXJGbiA9IGdldChpdCk7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICByZXR1cm4gYW5PYmplY3QoaXRlckZuLmNhbGwoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuIiwiLyoqXG4gKiBsb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL2pxdWVyeS5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0IGluIElFIDwgOS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGhvc3Qgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSG9zdE9iamVjdCh2YWx1ZSkge1xuICAvLyBNYW55IGhvc3Qgb2JqZWN0cyBhcmUgYE9iamVjdGAgb2JqZWN0cyB0aGF0IGNhbiBjb2VyY2UgdG8gc3RyaW5nc1xuICAvLyBkZXNwaXRlIGhhdmluZyBpbXByb3Blcmx5IGRlZmluZWQgYHRvU3RyaW5nYCBtZXRob2RzLlxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIHRoYXQgaXMsIGFuIG9iamVjdCBjcmVhdGVkIGJ5IHRoZVxuICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC44LjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqIH1cbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QobmV3IEZvbyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoeyAneCc6IDAsICd5JzogMCB9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8XG4gICAgICBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSAhPSBvYmplY3RUYWcgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiZcbiAgICBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2Zyb20gPSByZXF1aXJlKFwiLi4vY29yZS1qcy9hcnJheS9mcm9tXCIpO1xuXG52YXIgX2Zyb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnJvbSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICgwLCBfZnJvbTIuZGVmYXVsdCkoYXJyKTtcbiAgfVxufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vYXJyYXkvZnJvbVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247XG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XG4iLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBpZiAoc2FmZSAmJiB0YXJnZXRba2V5XSkgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdQcm9taXNlJywgeyAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XG4gIChyZXN1bHQuZSA/IHByb21pc2VDYXBhYmlsaXR5LnJlamVjdCA6IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmUpKHJlc3VsdC52KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcGlNaWRkbGV3YXJlID0gdW5kZWZpbmVkO1xuXG52YXIgX3JlZ2VuZXJhdG9yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvcicpO1xuXG52YXIgX3JlZ2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZ2VuZXJhdG9yKTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheScpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2xpY2VkVG9BcnJheTIpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9SU0FBID0gcmVxdWlyZSgnLi9SU0FBJyk7XG5cbnZhciBfUlNBQTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SU0FBKTtcblxudmFyIF92YWxpZGF0aW9uID0gcmVxdWlyZSgnLi92YWxpZGF0aW9uJyk7XG5cbnZhciBfZXJyb3JzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxudmFyIF91dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQSBSZWR1eCBtaWRkbGV3YXJlIHRoYXQgcHJvY2Vzc2VzIFJTQUEgYWN0aW9ucy5cbiAqXG4gKiBAdHlwZSB7UmVkdXhNaWRkbGV3YXJlfVxuICogQGFjY2VzcyBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gYXBpTWlkZGxld2FyZShfcmVmKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgLy8gRG8gbm90IHByb2Nlc3MgYWN0aW9ucyB3aXRob3V0IGFuIFtSU0FBXSBwcm9wZXJ0eVxuICAgICAgaWYgKCEoMCwgX3ZhbGlkYXRpb24uaXNSU0FBKShhY3Rpb24pKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX2FzeW5jVG9HZW5lcmF0b3IzLmRlZmF1bHQpKF9yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHZhciB2YWxpZGF0aW9uRXJyb3JzLCBfY2FsbEFQSSwgX3JlcXVlc3RUeXBlLCBjYWxsQVBJLCBlbmRwb2ludCwgYm9keSwgaGVhZGVycywgX2NhbGxBUEkkb3B0aW9ucywgb3B0aW9ucywgX2NhbGxBUEkkZmV0Y2gsIGRvRmV0Y2gsIG1ldGhvZCwgY3JlZGVudGlhbHMsIGJhaWxvdXQsIHR5cGVzLCBfbm9ybWFsaXplVHlwZURlc2NyaXAsIF9ub3JtYWxpemVUeXBlRGVzY3JpcDIsIHJlcXVlc3RUeXBlLCBzdWNjZXNzVHlwZSwgZmFpbHVyZVR5cGUsIHJlcztcblxuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGRpc3BhdGNoIGFuIGVycm9yIHJlcXVlc3QgRlNBIGZvciBpbnZhbGlkIFJTQUFzXG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycyA9ICgwLCBfdmFsaWRhdGlvbi52YWxpZGF0ZVJTQUEpKGFjdGlvbik7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkYXRpb25FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jYWxsQVBJID0gYWN0aW9uW19SU0FBMi5kZWZhdWx0XTtcblxuICAgICAgICAgICAgICAgIGlmIChfY2FsbEFQSS50eXBlcyAmJiBBcnJheS5pc0FycmF5KF9jYWxsQVBJLnR5cGVzKSkge1xuICAgICAgICAgICAgICAgICAgX3JlcXVlc3RUeXBlID0gX2NhbGxBUEkudHlwZXNbMF07XG5cbiAgICAgICAgICAgICAgICAgIGlmIChfcmVxdWVzdFR5cGUgJiYgX3JlcXVlc3RUeXBlLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3JlcXVlc3RUeXBlID0gX3JlcXVlc3RUeXBlLnR5cGU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBuZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogX3JlcXVlc3RUeXBlLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBuZXcgX2Vycm9ycy5JbnZhbGlkUlNBQSh2YWxpZGF0aW9uRXJyb3JzKSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nKTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG5cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgdmFsaWRhdGVkIFJTQUEgYWN0aW9uXG4gICAgICAgICAgICAgICAgY2FsbEFQSSA9IGFjdGlvbltfUlNBQTIuZGVmYXVsdF07XG4gICAgICAgICAgICAgICAgZW5kcG9pbnQgPSBjYWxsQVBJLmVuZHBvaW50LCBib2R5ID0gY2FsbEFQSS5ib2R5LCBoZWFkZXJzID0gY2FsbEFQSS5oZWFkZXJzLCBfY2FsbEFQSSRvcHRpb25zID0gY2FsbEFQSS5vcHRpb25zLCBvcHRpb25zID0gX2NhbGxBUEkkb3B0aW9ucyA9PT0gdW5kZWZpbmVkID8ge30gOiBfY2FsbEFQSSRvcHRpb25zLCBfY2FsbEFQSSRmZXRjaCA9IGNhbGxBUEkuZmV0Y2gsIGRvRmV0Y2ggPSBfY2FsbEFQSSRmZXRjaCA9PT0gdW5kZWZpbmVkID8gZmV0Y2ggOiBfY2FsbEFQSSRmZXRjaDtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSBjYWxsQVBJLm1ldGhvZCwgY3JlZGVudGlhbHMgPSBjYWxsQVBJLmNyZWRlbnRpYWxzLCBiYWlsb3V0ID0gY2FsbEFQSS5iYWlsb3V0LCB0eXBlcyA9IGNhbGxBUEkudHlwZXM7XG4gICAgICAgICAgICAgICAgX25vcm1hbGl6ZVR5cGVEZXNjcmlwID0gKDAsIF91dGlsLm5vcm1hbGl6ZVR5cGVEZXNjcmlwdG9ycykodHlwZXMpLCBfbm9ybWFsaXplVHlwZURlc2NyaXAyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfbm9ybWFsaXplVHlwZURlc2NyaXAsIDMpLCByZXF1ZXN0VHlwZSA9IF9ub3JtYWxpemVUeXBlRGVzY3JpcDJbMF0sIHN1Y2Nlc3NUeXBlID0gX25vcm1hbGl6ZVR5cGVEZXNjcmlwMlsxXSwgZmFpbHVyZVR5cGUgPSBfbm9ybWFsaXplVHlwZURlc2NyaXAyWzJdO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdWxkIHdlIGJhaWwgb3V0P1xuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7XG5cbiAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2YgYmFpbG91dCA9PT0gJ2Jvb2xlYW4nICYmIGJhaWxvdXQgfHwgdHlwZW9mIGJhaWxvdXQgPT09ICdmdW5jdGlvbicgJiYgYmFpbG91dChnZXRTdGF0ZSgpKSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbJ2NhdGNoJ10oOSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLmFjdGlvbldpdGgpKCgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHJlcXVlc3RUeXBlLCB7XG4gICAgICAgICAgICAgICAgICBwYXlsb2FkOiBuZXcgX2Vycm9ycy5SZXF1ZXN0RXJyb3IoJ1tSU0FBXS5iYWlsb3V0IGZ1bmN0aW9uIGZhaWxlZCcpLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICB9KSwgW2FjdGlvbiwgZ2V0U3RhdGUoKV0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTk6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDIgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsICgwLCBfY29udGV4dC50MSkoX2NvbnRleHQudDIpKTtcblxuICAgICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBlbmRwb2ludCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyMjtcblxuICAgICAgICAgICAgICAgIGVuZHBvaW50ID0gZW5kcG9pbnQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI2O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQzID0gX2NvbnRleHRbJ2NhdGNoJ10oMjIpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQ0ID0gbmV4dDtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbC5hY3Rpb25XaXRoKSgoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCByZXF1ZXN0VHlwZSwge1xuICAgICAgICAgICAgICAgICAgcGF5bG9hZDogbmV3IF9lcnJvcnMuUmVxdWVzdEVycm9yKCdbUlNBQV0uZW5kcG9pbnQgZnVuY3Rpb24gZmFpbGVkJyksXG4gICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pLCBbYWN0aW9uLCBnZXRTdGF0ZSgpXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAzMTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50NSA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgKDAsIF9jb250ZXh0LnQ0KShfY29udGV4dC50NSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIGJvZHkgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzQ7XG5cbiAgICAgICAgICAgICAgICBib2R5ID0gYm9keShnZXRTdGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMzg7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDYgPSBfY29udGV4dFsnY2F0Y2gnXSgzNCk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDcgPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0MztcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLmFjdGlvbldpdGgpKCgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHJlcXVlc3RUeXBlLCB7XG4gICAgICAgICAgICAgICAgICBwYXlsb2FkOiBuZXcgX2Vycm9ycy5SZXF1ZXN0RXJyb3IoJ1tSU0FBXS5ib2R5IGZ1bmN0aW9uIGZhaWxlZCcpLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICB9KSwgW2FjdGlvbiwgZ2V0U3RhdGUoKV0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDggPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsICgwLCBfY29udGV4dC50NykoX2NvbnRleHQudDgpKTtcblxuICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBoZWFkZXJzID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU3O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDQ2O1xuXG4gICAgICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlcnMoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDUwO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQ5ID0gX2NvbnRleHRbJ2NhdGNoJ10oNDYpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxMCA9IG5leHQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU1O1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWwuYWN0aW9uV2l0aCkoKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgcmVxdWVzdFR5cGUsIHtcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IG5ldyBfZXJyb3JzLlJlcXVlc3RFcnJvcignW1JTQUFdLmhlYWRlcnMgZnVuY3Rpb24gZmFpbGVkJyksXG4gICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pLCBbYWN0aW9uLCBnZXRTdGF0ZSgpXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA1NTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MTEgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsICgwLCBfY29udGV4dC50MTApKF9jb250ZXh0LnQxMSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTc6XG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNTg7XG5cbiAgICAgICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyhnZXRTdGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNjI7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDEyID0gX2NvbnRleHRbJ2NhdGNoJ10oNTgpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxMyA9IG5leHQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY3O1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWwuYWN0aW9uV2l0aCkoKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgcmVxdWVzdFR5cGUsIHtcbiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IG5ldyBfZXJyb3JzLlJlcXVlc3RFcnJvcignW1JTQUFdLm9wdGlvbnMgZnVuY3Rpb24gZmFpbGVkJyksXG4gICAgICAgICAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pLCBbYWN0aW9uLCBnZXRTdGF0ZSgpXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NzpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MTQgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoJ3JldHVybicsICgwLCBfY29udGV4dC50MTMpKF9jb250ZXh0LnQxNCkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjk6XG4gICAgICAgICAgICAgICAgaWYgKCEodHlwZW9mIHJlcXVlc3RUeXBlLnBheWxvYWQgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHJlcXVlc3RUeXBlLm1ldGEgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dC50MTUgPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3MztcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLmFjdGlvbldpdGgpKHJlcXVlc3RUeXBlLCBbYWN0aW9uLCBnZXRTdGF0ZSgpXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA3MzpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MTYgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgICgwLCBfY29udGV4dC50MTUpKF9jb250ZXh0LnQxNik7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDc4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNzc6XG4gICAgICAgICAgICAgICAgbmV4dChyZXF1ZXN0VHlwZSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA3ODpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNzg7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDgxO1xuICAgICAgICAgICAgICAgIHJldHVybiBkb0ZldGNoKGVuZHBvaW50LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IGNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyB8fCB7fVxuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICBjYXNlIDgxOlxuICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDkxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgODQ6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDg0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQxNyA9IF9jb250ZXh0WydjYXRjaCddKDc4KTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MTggPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLmFjdGlvbldpdGgpKCgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIHJlcXVlc3RUeXBlLCB7XG4gICAgICAgICAgICAgICAgICBwYXlsb2FkOiBuZXcgX2Vycm9ycy5SZXF1ZXN0RXJyb3IoX2NvbnRleHQudDE3Lm1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICB9KSwgW2FjdGlvbiwgZ2V0U3RhdGUoKV0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgODk6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDE5ID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCAoMCwgX2NvbnRleHQudDE4KShfY29udGV4dC50MTkpKTtcblxuICAgICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAgIGlmICghcmVzLm9rKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfY29udGV4dC50MjAgPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5NTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF91dGlsLmFjdGlvbldpdGgpKHN1Y2Nlc3NUeXBlLCBbYWN0aW9uLCBnZXRTdGF0ZSgpLCByZXNdKTtcblxuICAgICAgICAgICAgICBjYXNlIDk1OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQyMSA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgncmV0dXJuJywgKDAsIF9jb250ZXh0LnQyMCkoX2NvbnRleHQudDIxKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OTpcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MjIgPSBuZXh0O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBfdXRpbC5hY3Rpb25XaXRoKSgoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBmYWlsdXJlVHlwZSwge1xuICAgICAgICAgICAgICAgICAgZXJyb3I6IHRydWVcbiAgICAgICAgICAgICAgICB9KSwgW2FjdGlvbiwgZ2V0U3RhdGUoKSwgcmVzXSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDIzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCAoMCwgX2NvbnRleHQudDIyKShfY29udGV4dC50MjMpKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwNDpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgX3RoaXMsIFtbOSwgMTRdLCBbMjIsIDI2XSwgWzM0LCAzOF0sIFs0NiwgNTBdLCBbNTgsIDYyXSwgWzc4LCA4NF1dKTtcbiAgICAgIH0pKSgpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydHMuYXBpTWlkZGxld2FyZSA9IGFwaU1pZGRsZXdhcmU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3JlYWN0Um91dGVyID0gcmVxdWlyZSgncmVhY3Qtcm91dGVyJyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX0F1dGggPSByZXF1aXJlKCcuL0F1dGgnKTtcblxudmFyIF9BdXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0F1dGgpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE3LVByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgU2VjdXJpdHkgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTZWN1cml0eSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VjdXJpdHkocHJvcHMpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTZWN1cml0eSk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChTZWN1cml0eS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2VjdXJpdHkpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5hdXRoID0gcHJvcHMuYXV0aCB8fCBuZXcgX0F1dGgyLmRlZmF1bHQocHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFNlY3VyaXR5LCBbe1xuICAgIGtleTogJ2dldENoaWxkQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGF1dGg6IHRoaXMuYXV0aFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy5wcm9wcy5jbGFzc05hbWUgfSxcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNlY3VyaXR5O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU2VjdXJpdHkuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIGF1dGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3JlYWN0Um91dGVyLndpdGhSb3V0ZXIpKFNlY3VyaXR5KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwidmFyIGNvcmUgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJyk7XG52YXIgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHsgc3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeSB9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgtUHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yID0gZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbmZpZ3VyYXRpb25WYWxpZGF0aW9uRXJyb3IpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIHJldHVybiBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yO1xufShFcnJvcik7XG5cbnZhciBjb25maWdVdGlsID0gbW9kdWxlLmV4cG9ydHM7XG5cbnZhciBmaW5kRG9tYWluVVJMID0gJ2h0dHBzOi8vYml0Lmx5L2ZpbmRpbmctb2t0YS1kb21haW4nO1xudmFyIGZpbmRBcHBDcmVkZW50aWFsc1VSTCA9ICdodHRwczovL2JpdC5seS9maW5kaW5nLW9rdGEtYXBwLWNyZWRlbnRpYWxzJztcblxudmFyIGNvcHlDcmVkZW50aWFsc01lc3NhZ2UgPSAnWW91IGNhbiBjb3B5IGl0IGZyb20gdGhlIE9rdGEgRGV2ZWxvcGVyIENvbnNvbGUgJyArICdpbiB0aGUgZGV0YWlscyBmb3IgdGhlIEFwcGxpY2F0aW9uIHlvdSBjcmVhdGVkLiAnICsgKCdGb2xsb3cgdGhlc2UgaW5zdHJ1Y3Rpb25zIHRvIGZpbmQgaXQ6ICcgKyBmaW5kQXBwQ3JlZGVudGlhbHNVUkwpO1xuXG5jb25maWdVdGlsLmFzc2VydElzc3VlciA9IGZ1bmN0aW9uIChpc3N1ZXIpIHtcbiAgdmFyIHRlc3RpbmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBjb3B5TWVzc2FnZSA9ICdZb3UgY2FuIGNvcHkgeW91ciBkb21haW4gZnJvbSB0aGUgT2t0YSBEZXZlbG9wZXIgJyArICdDb25zb2xlLiBGb2xsb3cgdGhlc2UgaW5zdHJ1Y3Rpb25zIHRvIGZpbmQgaXQ6ICcgKyBmaW5kRG9tYWluVVJMO1xuXG4gIGlmICh0ZXN0aW5nLmRpc2FibGVIdHRwc0NoZWNrKSB7XG4gICAgdmFyIGh0dHBzV2FybmluZyA9ICdXYXJuaW5nOiBIVFRQUyBjaGVjayBpcyBkaXNhYmxlZC4gJyArICdUaGlzIGFsbG93cyBmb3IgaW5zZWN1cmUgY29uZmlndXJhdGlvbnMgYW5kIGlzIE5PVCByZWNvbW1lbmRlZCBmb3IgcHJvZHVjdGlvbiB1c2UuJztcbiAgICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZSAqL1xuICAgIGNvbnNvbGUud2FybihodHRwc1dhcm5pbmcpO1xuICB9XG5cbiAgaWYgKCFpc3N1ZXIpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignWW91ciBPa3RhIFVSTCBpcyBtaXNzaW5nLiAnICsgY29weU1lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKCF0ZXN0aW5nLmRpc2FibGVIdHRwc0NoZWNrICYmICFpc3N1ZXIubWF0Y2goL15odHRwczpcXC9cXC8vZykpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignWW91ciBPa3RhIFVSTCBtdXN0IHN0YXJ0IHdpdGggaHR0cHMuICcgKyAoJ0N1cnJlbnQgdmFsdWU6ICcgKyBpc3N1ZXIgKyAnLiAnICsgY29weU1lc3NhZ2UpKTtcbiAgfSBlbHNlIGlmIChpc3N1ZXIubWF0Y2goL3t5b3VyT2t0YURvbWFpbn0vZykpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignUmVwbGFjZSB7eW91ck9rdGFEb21haW59IHdpdGggeW91ciBPa3RhIGRvbWFpbi4gJyArIGNvcHlNZXNzYWdlKTtcbiAgfSBlbHNlIGlmIChpc3N1ZXIubWF0Y2goLy1hZG1pbi4ob2t0YXxva3RhcHJldmlld3xva3RhLWVtZWEpLmNvbS9nKSkge1xuICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yKCdZb3VyIE9rdGEgZG9tYWluIHNob3VsZCBub3QgY29udGFpbiAtYWRtaW4uICcgKyAoJ0N1cnJlbnQgdmFsdWU6ICcgKyBpc3N1ZXIgKyAnLiAnICsgY29weU1lc3NhZ2UpKTtcbiAgfSBlbHNlIGlmIChpc3N1ZXIubWF0Y2goLyguY29tLmNvbSl8KDpcXC9cXC8uKil7Mix9L2cpKSB7XG4gICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25WYWxpZGF0aW9uRXJyb3IoJ0l0IGxvb2tzIGxpa2UgdGhlcmVcXCdzIGEgdHlwbyBpbiB5b3VyIE9rdGEgZG9tYWluLiAnICsgKCdDdXJyZW50IHZhbHVlOiAnICsgaXNzdWVyICsgJy4gJyArIGNvcHlNZXNzYWdlKSk7XG4gIH1cbn07XG5cbmNvbmZpZ1V0aWwuYXNzZXJ0Q2xpZW50SWQgPSBmdW5jdGlvbiAoY2xpZW50SWQpIHtcbiAgaWYgKCFjbGllbnRJZCkge1xuICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yKCdZb3VyIGNsaWVudCBJRCBpcyBtaXNzaW5nLiAnICsgY29weUNyZWRlbnRpYWxzTWVzc2FnZSk7XG4gIH0gZWxzZSBpZiAoY2xpZW50SWQubWF0Y2goL3tjbGllbnRJZH0vZykpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignUmVwbGFjZSB7Y2xpZW50SWR9IHdpdGggdGhlIGNsaWVudCBJRCBvZiB5b3VyIEFwcGxpY2F0aW9uLiAnICsgY29weUNyZWRlbnRpYWxzTWVzc2FnZSk7XG4gIH1cbn07XG5cbmNvbmZpZ1V0aWwuYXNzZXJ0Q2xpZW50U2VjcmV0ID0gZnVuY3Rpb24gKGNsaWVudFNlY3JldCkge1xuICBpZiAoIWNsaWVudFNlY3JldCkge1xuICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uVmFsaWRhdGlvbkVycm9yKCdZb3VyIGNsaWVudCBzZWNyZXQgaXMgbWlzc2luZy4gJyArIGNvcHlDcmVkZW50aWFsc01lc3NhZ2UpO1xuICB9IGVsc2UgaWYgKGNsaWVudFNlY3JldC5tYXRjaCgve2NsaWVudFNlY3JldH0vZykpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignUmVwbGFjZSB7Y2xpZW50U2VjcmV0fSB3aXRoIHRoZSBjbGllbnQgc2VjcmV0IG9mIHlvdXIgQXBwbGljYXRpb24uICcgKyBjb3B5Q3JlZGVudGlhbHNNZXNzYWdlKTtcbiAgfVxufTtcblxuY29uZmlnVXRpbC5hc3NlcnRSZWRpcmVjdFVyaSA9IGZ1bmN0aW9uIChyZWRpcmVjdFVyaSkge1xuICBpZiAoIXJlZGlyZWN0VXJpKSB7XG4gICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25WYWxpZGF0aW9uRXJyb3IoJ1lvdXIgcmVkaXJlY3QgVVJJIGlzIG1pc3NpbmcuJyk7XG4gIH0gZWxzZSBpZiAocmVkaXJlY3RVcmkubWF0Y2goL3tyZWRpcmVjdFVyaX0vZykpIHtcbiAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvblZhbGlkYXRpb25FcnJvcignUmVwbGFjZSB7cmVkaXJlY3RVcml9IHdpdGggdGhlIHJlZGlyZWN0IFVSSSBvZiB5b3VyIEFwcGxpY2F0aW9uLicpO1xuICB9XG59OyIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuLy8gVGhpcyBleGlzdHMgdG8gdXNlIHJlcXdlc3QgZm9yIGh0dHAgcmVxdWVzdHMgYnkgZGVmYXVsdFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9yZXF3ZXN0Jyk7XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbnZhciByZXF3ZXN0UmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxd2VzdFJlcXVlc3QnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbGliL2NsaWVudEJ1aWxkZXInKShyZXF3ZXN0UmVxdWVzdCk7XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIHJlcXdlc3QgPSByZXF1aXJlKCdyZXF3ZXN0Jyk7XG5cbmZ1bmN0aW9uIHJlcXdlc3RSZXF1ZXN0KG1ldGhvZCwgdXJsLCBhcmdzKSB7XG4gIHZhciByID0gcmVxd2VzdCh7XG4gICAgdXJsOiB1cmwsXG4gICAgbWV0aG9kOiBtZXRob2QsXG4gICAgaGVhZGVyczogYXJncy5oZWFkZXJzLFxuICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGFyZ3MuZGF0YSksXG4gICAgd2l0aENyZWRlbnRpYWxzOiB0cnVlXG4gIH0pXG4gIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiByLnJlcXVlc3Q7XG4gIH0pO1xuICByZXR1cm4gcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF3ZXN0UmVxdWVzdDtcbiIsIi8qIVxuICAqIFJlcXdlc3QhIEEgZ2VuZXJhbCBwdXJwb3NlIFhIUiBjb25uZWN0aW9uIG1hbmFnZXJcbiAgKiBsaWNlbnNlIE1JVCAoYykgRHVzdGluIERpYXogMjAxNVxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvcmVxd2VzdFxuICAqL1xuXG4hZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KCdyZXF3ZXN0JywgdGhpcywgZnVuY3Rpb24gKCkge1xuXG4gIHZhciBjb250ZXh0ID0gdGhpc1xuXG4gIGlmICgnd2luZG93JyBpbiBjb250ZXh0KSB7XG4gICAgdmFyIGRvYyA9IGRvY3VtZW50XG4gICAgICAsIGJ5VGFnID0gJ2dldEVsZW1lbnRzQnlUYWdOYW1lJ1xuICAgICAgLCBoZWFkID0gZG9jW2J5VGFnXSgnaGVhZCcpWzBdXG4gIH0gZWxzZSB7XG4gICAgdmFyIFhIUjJcbiAgICB0cnkge1xuICAgICAgWEhSMiA9IHJlcXVpcmUoJ3hocjInKVxuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BlZXIgZGVwZW5kZW5jeSBgeGhyMmAgcmVxdWlyZWQhIFBsZWFzZSBucG0gaW5zdGFsbCB4aHIyJylcbiAgICB9XG4gIH1cblxuXG4gIHZhciBodHRwc1JlID0gL15odHRwL1xuICAgICwgcHJvdG9jb2xSZSA9IC8oXlxcdyspOlxcL1xcLy9cbiAgICAsIHR3b0h1bmRvID0gL14oMjBcXGR8MTIyMykkLyAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTAwNDY5NzIvbXNpZS1yZXR1cm5zLXN0YXR1cy1jb2RlLW9mLTEyMjMtZm9yLWFqYXgtcmVxdWVzdFxuICAgICwgcmVhZHlTdGF0ZSA9ICdyZWFkeVN0YXRlJ1xuICAgICwgY29udGVudFR5cGUgPSAnQ29udGVudC1UeXBlJ1xuICAgICwgcmVxdWVzdGVkV2l0aCA9ICdYLVJlcXVlc3RlZC1XaXRoJ1xuICAgICwgdW5pcWlkID0gMFxuICAgICwgY2FsbGJhY2tQcmVmaXggPSAncmVxd2VzdF8nICsgKCtuZXcgRGF0ZSgpKVxuICAgICwgbGFzdFZhbHVlIC8vIGRhdGEgc3RvcmVkIGJ5IHRoZSBtb3N0IHJlY2VudCBKU09OUCBjYWxsYmFja1xuICAgICwgeG1sSHR0cFJlcXVlc3QgPSAnWE1MSHR0cFJlcXVlc3QnXG4gICAgLCB4RG9tYWluUmVxdWVzdCA9ICdYRG9tYWluUmVxdWVzdCdcbiAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fVxuXG4gICAgLCBpc0FycmF5ID0gdHlwZW9mIEFycmF5LmlzQXJyYXkgPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IEFycmF5LmlzQXJyYXlcbiAgICAgICAgOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGEgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgIH1cblxuICAgICwgZGVmYXVsdEhlYWRlcnMgPSB7XG4gICAgICAgICAgJ2NvbnRlbnRUeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgLCAncmVxdWVzdGVkV2l0aCc6IHhtbEh0dHBSZXF1ZXN0XG4gICAgICAgICwgJ2FjY2VwdCc6IHtcbiAgICAgICAgICAgICAgJyonOiAgJ3RleHQvamF2YXNjcmlwdCwgdGV4dC9odG1sLCBhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sLCAqLyonXG4gICAgICAgICAgICAsICd4bWwnOiAgJ2FwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwnXG4gICAgICAgICAgICAsICdodG1sJzogJ3RleHQvaHRtbCdcbiAgICAgICAgICAgICwgJ3RleHQnOiAndGV4dC9wbGFpbidcbiAgICAgICAgICAgICwgJ2pzb24nOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICAgICAgLCAnanMnOiAgICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCB0ZXh0L2phdmFzY3JpcHQnXG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLCB4aHIgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIC8vIGlzIGl0IHgtZG9tYWluXG4gICAgICAgIGlmIChvWydjcm9zc09yaWdpbiddID09PSB0cnVlKSB7XG4gICAgICAgICAgdmFyIHhociA9IGNvbnRleHRbeG1sSHR0cFJlcXVlc3RdID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBudWxsXG4gICAgICAgICAgaWYgKHhociAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgICAgICAgIHJldHVybiB4aHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHRbeERvbWFpblJlcXVlc3RdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzJylcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFt4bWxIdHRwUmVxdWVzdF0pIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KClcbiAgICAgICAgfSBlbHNlIGlmIChYSFIyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBYSFIyKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICwgZ2xvYmFsU2V0dXBPcHRpb25zID0ge1xuICAgICAgICBkYXRhRmlsdGVyOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBkYXRhXG4gICAgICAgIH1cbiAgICAgIH1cblxuICBmdW5jdGlvbiBzdWNjZWVkKHIpIHtcbiAgICB2YXIgcHJvdG9jb2wgPSBwcm90b2NvbFJlLmV4ZWMoci51cmwpXG4gICAgcHJvdG9jb2wgPSAocHJvdG9jb2wgJiYgcHJvdG9jb2xbMV0pIHx8IGNvbnRleHQubG9jYXRpb24ucHJvdG9jb2xcbiAgICByZXR1cm4gaHR0cHNSZS50ZXN0KHByb3RvY29sKSA/IHR3b0h1bmRvLnRlc3Qoci5yZXF1ZXN0LnN0YXR1cykgOiAhIXIucmVxdWVzdC5yZXNwb25zZVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVhZHlTdGF0ZShyLCBzdWNjZXNzLCBlcnJvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB1c2UgX2Fib3J0ZWQgdG8gbWl0aWdhdGUgYWdhaW5zdCBJRSBlcnIgYzAwYzAyM2ZcbiAgICAgIC8vIChjYW4ndCByZWFkIHByb3BzIG9uIGFib3J0ZWQgcmVxdWVzdCBvYmplY3RzKVxuICAgICAgaWYgKHIuX2Fib3J0ZWQpIHJldHVybiBlcnJvcihyLnJlcXVlc3QpXG4gICAgICBpZiAoci5fdGltZWRPdXQpIHJldHVybiBlcnJvcihyLnJlcXVlc3QsICdSZXF1ZXN0IGlzIGFib3J0ZWQ6IHRpbWVvdXQnKVxuICAgICAgaWYgKHIucmVxdWVzdCAmJiByLnJlcXVlc3RbcmVhZHlTdGF0ZV0gPT0gNCkge1xuICAgICAgICByLnJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gbm9vcFxuICAgICAgICBpZiAoc3VjY2VlZChyKSkgc3VjY2VzcyhyLnJlcXVlc3QpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBlcnJvcihyLnJlcXVlc3QpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0SGVhZGVycyhodHRwLCBvKSB7XG4gICAgdmFyIGhlYWRlcnMgPSBvWydoZWFkZXJzJ10gfHwge31cbiAgICAgICwgaFxuXG4gICAgaGVhZGVyc1snQWNjZXB0J10gPSBoZWFkZXJzWydBY2NlcHQnXVxuICAgICAgfHwgZGVmYXVsdEhlYWRlcnNbJ2FjY2VwdCddW29bJ3R5cGUnXV1cbiAgICAgIHx8IGRlZmF1bHRIZWFkZXJzWydhY2NlcHQnXVsnKiddXG5cbiAgICB2YXIgaXNBRm9ybURhdGEgPSB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnICYmIChvWydkYXRhJ10gaW5zdGFuY2VvZiBGb3JtRGF0YSk7XG4gICAgLy8gYnJlYWtzIGNyb3NzLW9yaWdpbiByZXF1ZXN0cyB3aXRoIGxlZ2FjeSBicm93c2Vyc1xuICAgIGlmICghb1snY3Jvc3NPcmlnaW4nXSAmJiAhaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSkgaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSA9IGRlZmF1bHRIZWFkZXJzWydyZXF1ZXN0ZWRXaXRoJ11cbiAgICBpZiAoIWhlYWRlcnNbY29udGVudFR5cGVdICYmICFpc0FGb3JtRGF0YSkgaGVhZGVyc1tjb250ZW50VHlwZV0gPSBvWydjb250ZW50VHlwZSddIHx8IGRlZmF1bHRIZWFkZXJzWydjb250ZW50VHlwZSddXG4gICAgZm9yIChoIGluIGhlYWRlcnMpXG4gICAgICBoZWFkZXJzLmhhc093blByb3BlcnR5KGgpICYmICdzZXRSZXF1ZXN0SGVhZGVyJyBpbiBodHRwICYmIGh0dHAuc2V0UmVxdWVzdEhlYWRlcihoLCBoZWFkZXJzW2hdKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0Q3JlZGVudGlhbHMoaHR0cCwgbykge1xuICAgIGlmICh0eXBlb2Ygb1snd2l0aENyZWRlbnRpYWxzJ10gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBodHRwLndpdGhDcmVkZW50aWFscyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGh0dHAud2l0aENyZWRlbnRpYWxzID0gISFvWyd3aXRoQ3JlZGVudGlhbHMnXVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbmVyYWxDYWxsYmFjayhkYXRhKSB7XG4gICAgbGFzdFZhbHVlID0gZGF0YVxuICB9XG5cbiAgZnVuY3Rpb24gdXJsYXBwZW5kICh1cmwsIHMpIHtcbiAgICByZXR1cm4gdXJsICsgKC9cXD8vLnRlc3QodXJsKSA/ICcmJyA6ICc/JykgKyBzXG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVKc29ucChvLCBmbiwgZXJyLCB1cmwpIHtcbiAgICB2YXIgcmVxSWQgPSB1bmlxaWQrK1xuICAgICAgLCBjYmtleSA9IG9bJ2pzb25wQ2FsbGJhY2snXSB8fCAnY2FsbGJhY2snIC8vIHRoZSAnY2FsbGJhY2snIGtleVxuICAgICAgLCBjYnZhbCA9IG9bJ2pzb25wQ2FsbGJhY2tOYW1lJ10gfHwgcmVxd2VzdC5nZXRjYWxsYmFja1ByZWZpeChyZXFJZClcbiAgICAgICwgY2JyZWcgPSBuZXcgUmVnRXhwKCcoKF58XFxcXD98JiknICsgY2JrZXkgKyAnKT0oW14mXSspJylcbiAgICAgICwgbWF0Y2ggPSB1cmwubWF0Y2goY2JyZWcpXG4gICAgICAsIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgLCBsb2FkZWQgPSAwXG4gICAgICAsIGlzSUUxMCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSAxMC4wJykgIT09IC0xXG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGlmIChtYXRjaFszXSA9PT0gJz8nKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGNicmVnLCAnJDE9JyArIGNidmFsKSAvLyB3aWxkY2FyZCBjYWxsYmFjayBmdW5jIG5hbWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNidmFsID0gbWF0Y2hbM10gLy8gcHJvdmlkZWQgY2FsbGJhY2sgZnVuYyBuYW1lXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IHVybGFwcGVuZCh1cmwsIGNia2V5ICsgJz0nICsgY2J2YWwpIC8vIG5vIGNhbGxiYWNrIGRldGFpbHMsIGFkZCAnZW1cbiAgICB9XG5cbiAgICBjb250ZXh0W2NidmFsXSA9IGdlbmVyYWxDYWxsYmFja1xuXG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0J1xuICAgIHNjcmlwdC5zcmMgPSB1cmxcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlXG4gICAgaWYgKHR5cGVvZiBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlICE9PSAndW5kZWZpbmVkJyAmJiAhaXNJRTEwKSB7XG4gICAgICAvLyBuZWVkIHRoaXMgZm9yIElFIGR1ZSB0byBvdXQtb2Ytb3JkZXIgb25yZWFkeXN0YXRlY2hhbmdlKCksIGJpbmRpbmcgc2NyaXB0XG4gICAgICAvLyBleGVjdXRpb24gdG8gYW4gZXZlbnQgbGlzdGVuZXIgZ2l2ZXMgdXMgY29udHJvbCBvdmVyIHdoZW4gdGhlIHNjcmlwdFxuICAgICAgLy8gaXMgZXhlY3V0ZWQuIFNlZSBodHRwOi8vamF1Ym91cmcubmV0LzIwMTAvMDcvbG9hZGluZy1zY3JpcHQtYXMtb25jbGljay1oYW5kbGVyLW9mLmh0bWxcbiAgICAgIHNjcmlwdC5odG1sRm9yID0gc2NyaXB0LmlkID0gJ19yZXF3ZXN0XycgKyByZXFJZFxuICAgIH1cblxuICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKChzY3JpcHRbcmVhZHlTdGF0ZV0gJiYgc2NyaXB0W3JlYWR5U3RhdGVdICE9PSAnY29tcGxldGUnICYmIHNjcmlwdFtyZWFkeVN0YXRlXSAhPT0gJ2xvYWRlZCcpIHx8IGxvYWRlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgICAgc2NyaXB0Lm9uY2xpY2sgJiYgc2NyaXB0Lm9uY2xpY2soKVxuICAgICAgLy8gQ2FsbCB0aGUgdXNlciBjYWxsYmFjayB3aXRoIHRoZSBsYXN0IHZhbHVlIHN0b3JlZCBhbmQgY2xlYW4gdXAgdmFsdWVzIGFuZCBzY3JpcHRzLlxuICAgICAgZm4obGFzdFZhbHVlKVxuICAgICAgbGFzdFZhbHVlID0gdW5kZWZpbmVkXG4gICAgICBoZWFkLnJlbW92ZUNoaWxkKHNjcmlwdClcbiAgICAgIGxvYWRlZCA9IDFcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIHNjcmlwdCB0byB0aGUgRE9NIGhlYWRcbiAgICBoZWFkLmFwcGVuZENoaWxkKHNjcmlwdClcblxuICAgIC8vIEVuYWJsZSBKU09OUCB0aW1lb3V0XG4gICAgcmV0dXJuIHtcbiAgICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbFxuICAgICAgICBlcnIoe30sICdSZXF1ZXN0IGlzIGFib3J0ZWQ6IHRpbWVvdXQnLCB7fSlcbiAgICAgICAgbGFzdFZhbHVlID0gdW5kZWZpbmVkXG4gICAgICAgIGhlYWQucmVtb3ZlQ2hpbGQoc2NyaXB0KVxuICAgICAgICBsb2FkZWQgPSAxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVxdWVzdChmbiwgZXJyKSB7XG4gICAgdmFyIG8gPSB0aGlzLm9cbiAgICAgICwgbWV0aG9kID0gKG9bJ21ldGhvZCddIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpXG4gICAgICAsIHVybCA9IHR5cGVvZiBvID09PSAnc3RyaW5nJyA/IG8gOiBvWyd1cmwnXVxuICAgICAgLy8gY29udmVydCBub24tc3RyaW5nIG9iamVjdHMgdG8gcXVlcnktc3RyaW5nIGZvcm0gdW5sZXNzIG9bJ3Byb2Nlc3NEYXRhJ10gaXMgZmFsc2VcbiAgICAgICwgZGF0YSA9IChvWydwcm9jZXNzRGF0YSddICE9PSBmYWxzZSAmJiBvWydkYXRhJ10gJiYgdHlwZW9mIG9bJ2RhdGEnXSAhPT0gJ3N0cmluZycpXG4gICAgICAgID8gcmVxd2VzdC50b1F1ZXJ5U3RyaW5nKG9bJ2RhdGEnXSlcbiAgICAgICAgOiAob1snZGF0YSddIHx8IG51bGwpXG4gICAgICAsIGh0dHBcbiAgICAgICwgc2VuZFdhaXQgPSBmYWxzZVxuXG4gICAgLy8gaWYgd2UncmUgd29ya2luZyBvbiBhIEdFVCByZXF1ZXN0IGFuZCB3ZSBoYXZlIGRhdGEgdGhlbiB3ZSBzaG91bGQgYXBwZW5kXG4gICAgLy8gcXVlcnkgc3RyaW5nIHRvIGVuZCBvZiBVUkwgYW5kIG5vdCBwb3N0IGRhdGFcbiAgICBpZiAoKG9bJ3R5cGUnXSA9PSAnanNvbnAnIHx8IG1ldGhvZCA9PSAnR0VUJykgJiYgZGF0YSkge1xuICAgICAgdXJsID0gdXJsYXBwZW5kKHVybCwgZGF0YSlcbiAgICAgIGRhdGEgPSBudWxsXG4gICAgfVxuXG4gICAgaWYgKG9bJ3R5cGUnXSA9PSAnanNvbnAnKSByZXR1cm4gaGFuZGxlSnNvbnAobywgZm4sIGVyciwgdXJsKVxuXG4gICAgLy8gZ2V0IHRoZSB4aHIgZnJvbSB0aGUgZmFjdG9yeSBpZiBwYXNzZWRcbiAgICAvLyBpZiB0aGUgZmFjdG9yeSByZXR1cm5zIG51bGwsIGZhbGwtYmFjayB0byBvdXJzXG4gICAgaHR0cCA9IChvLnhociAmJiBvLnhocihvKSkgfHwgeGhyKG8pXG5cbiAgICBodHRwLm9wZW4obWV0aG9kLCB1cmwsIG9bJ2FzeW5jJ10gPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlKVxuICAgIHNldEhlYWRlcnMoaHR0cCwgbylcbiAgICBzZXRDcmVkZW50aWFscyhodHRwLCBvKVxuICAgIGlmIChjb250ZXh0W3hEb21haW5SZXF1ZXN0XSAmJiBodHRwIGluc3RhbmNlb2YgY29udGV4dFt4RG9tYWluUmVxdWVzdF0pIHtcbiAgICAgICAgaHR0cC5vbmxvYWQgPSBmblxuICAgICAgICBodHRwLm9uZXJyb3IgPSBlcnJcbiAgICAgICAgLy8gTk9URTogc2VlXG4gICAgICAgIC8vIGh0dHA6Ly9zb2NpYWwubXNkbi5taWNyb3NvZnQuY29tL0ZvcnVtcy9lbi1VUy9pZXdlYmRldmVsb3BtZW50L3RocmVhZC8zMGVmM2FkZC03NjdjLTQ0MzYtYjhhOS1mMWNhMTliNDgxMmVcbiAgICAgICAgaHR0cC5vbnByb2dyZXNzID0gZnVuY3Rpb24oKSB7fVxuICAgICAgICBzZW5kV2FpdCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVSZWFkeVN0YXRlKHRoaXMsIGZuLCBlcnIpXG4gICAgfVxuICAgIG9bJ2JlZm9yZSddICYmIG9bJ2JlZm9yZSddKGh0dHApXG4gICAgaWYgKHNlbmRXYWl0KSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHR0cC5zZW5kKGRhdGEpXG4gICAgICB9LCAyMDApXG4gICAgfSBlbHNlIHtcbiAgICAgIGh0dHAuc2VuZChkYXRhKVxuICAgIH1cbiAgICByZXR1cm4gaHR0cFxuICB9XG5cbiAgZnVuY3Rpb24gUmVxd2VzdChvLCBmbikge1xuICAgIHRoaXMubyA9IG9cbiAgICB0aGlzLmZuID0gZm5cblxuICAgIGluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHlwZShoZWFkZXIpIHtcbiAgICAvLyBqc29uLCBqYXZhc2NyaXB0LCB0ZXh0L3BsYWluLCB0ZXh0L2h0bWwsIHhtbFxuICAgIGlmIChoZWFkZXIgPT09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7IC8vSW4gY2FzZSBvZiBubyBjb250ZW50LXR5cGUuXG4gICAgaWYgKGhlYWRlci5tYXRjaCgnanNvbicpKSByZXR1cm4gJ2pzb24nXG4gICAgaWYgKGhlYWRlci5tYXRjaCgnamF2YXNjcmlwdCcpKSByZXR1cm4gJ2pzJ1xuICAgIGlmIChoZWFkZXIubWF0Y2goJ3RleHQnKSkgcmV0dXJuICdodG1sJ1xuICAgIGlmIChoZWFkZXIubWF0Y2goJ3htbCcpKSByZXR1cm4gJ3htbCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQobywgZm4pIHtcblxuICAgIHRoaXMudXJsID0gdHlwZW9mIG8gPT0gJ3N0cmluZycgPyBvIDogb1sndXJsJ11cbiAgICB0aGlzLnRpbWVvdXQgPSBudWxsXG5cbiAgICAvLyB3aGV0aGVyIHJlcXVlc3QgaGFzIGJlZW4gZnVsZmlsbGVkIGZvciBwdXJwb3NlXG4gICAgLy8gb2YgdHJhY2tpbmcgdGhlIFByb21pc2VzXG4gICAgdGhpcy5fZnVsZmlsbGVkID0gZmFsc2VcbiAgICAvLyBzdWNjZXNzIGhhbmRsZXJzXG4gICAgdGhpcy5fc3VjY2Vzc0hhbmRsZXIgPSBmdW5jdGlvbigpe31cbiAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJzID0gW11cbiAgICAvLyBlcnJvciBoYW5kbGVyc1xuICAgIHRoaXMuX2Vycm9ySGFuZGxlcnMgPSBbXVxuICAgIC8vIGNvbXBsZXRlIChib3RoIHN1Y2Nlc3MgYW5kIGZhaWwpIGhhbmRsZXJzXG4gICAgdGhpcy5fY29tcGxldGVIYW5kbGVycyA9IFtdXG4gICAgdGhpcy5fZXJyZWQgPSBmYWxzZVxuICAgIHRoaXMuX3Jlc3BvbnNlQXJncyA9IHt9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXNcblxuICAgIGZuID0gZm4gfHwgZnVuY3Rpb24gKCkge31cblxuICAgIGlmIChvWyd0aW1lb3V0J10pIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0aW1lZE91dCgpXG4gICAgICB9LCBvWyd0aW1lb3V0J10pXG4gICAgfVxuXG4gICAgaWYgKG9bJ3N1Y2Nlc3MnXSkge1xuICAgICAgdGhpcy5fc3VjY2Vzc0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9bJ3N1Y2Nlc3MnXS5hcHBseShvLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9bJ2Vycm9yJ10pIHtcbiAgICAgIHRoaXMuX2Vycm9ySGFuZGxlcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9bJ2Vycm9yJ10uYXBwbHkobywgYXJndW1lbnRzKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAob1snY29tcGxldGUnXSkge1xuICAgICAgdGhpcy5fY29tcGxldGVIYW5kbGVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb1snY29tcGxldGUnXS5hcHBseShvLCBhcmd1bWVudHMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlIChyZXNwKSB7XG4gICAgICBvWyd0aW1lb3V0J10gJiYgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcbiAgICAgIHNlbGYudGltZW91dCA9IG51bGxcbiAgICAgIHdoaWxlIChzZWxmLl9jb21wbGV0ZUhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VsZi5fY29tcGxldGVIYW5kbGVycy5zaGlmdCgpKHJlc3ApXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VjY2VzcyAocmVzcCkge1xuICAgICAgdmFyIHR5cGUgPSBvWyd0eXBlJ10gfHwgcmVzcCAmJiBzZXRUeXBlKHJlc3AuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpKSAvLyByZXNwIGNhbiBiZSB1bmRlZmluZWQgaW4gSUVcbiAgICAgIHJlc3AgPSAodHlwZSAhPT0gJ2pzb25wJykgPyBzZWxmLnJlcXVlc3QgOiByZXNwXG4gICAgICAvLyB1c2UgZ2xvYmFsIGRhdGEgZmlsdGVyIG9uIHJlc3BvbnNlIHRleHRcbiAgICAgIHZhciBmaWx0ZXJlZFJlc3BvbnNlID0gZ2xvYmFsU2V0dXBPcHRpb25zLmRhdGFGaWx0ZXIocmVzcC5yZXNwb25zZVRleHQsIHR5cGUpXG4gICAgICAgICwgciA9IGZpbHRlcmVkUmVzcG9uc2VcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3AucmVzcG9uc2VUZXh0ID0gclxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBjYW4ndCBhc3NpZ24gdGhpcyBpbiBJRTw9OCwganVzdCBpZ25vcmVcbiAgICAgIH1cbiAgICAgIGlmIChyKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzcCA9IGNvbnRleHQuSlNPTiA/IGNvbnRleHQuSlNPTi5wYXJzZShyKSA6IGV2YWwoJygnICsgciArICcpJylcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcihyZXNwLCAnQ291bGQgbm90IHBhcnNlIEpTT04gaW4gcmVzcG9uc2UnLCBlcnIpXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2pzJzpcbiAgICAgICAgICByZXNwID0gZXZhbChyKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgIHJlc3AgPSByXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAneG1sJzpcbiAgICAgICAgICByZXNwID0gcmVzcC5yZXNwb25zZVhNTFxuICAgICAgICAgICAgICAmJiByZXNwLnJlc3BvbnNlWE1MLnBhcnNlRXJyb3IgLy8gSUUgdHJvbG9sb1xuICAgICAgICAgICAgICAmJiByZXNwLnJlc3BvbnNlWE1MLnBhcnNlRXJyb3IuZXJyb3JDb2RlXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvci5yZWFzb25cbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiByZXNwLnJlc3BvbnNlWE1MXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZWxmLl9yZXNwb25zZUFyZ3MucmVzcCA9IHJlc3BcbiAgICAgIHNlbGYuX2Z1bGZpbGxlZCA9IHRydWVcbiAgICAgIGZuKHJlc3ApXG4gICAgICBzZWxmLl9zdWNjZXNzSGFuZGxlcihyZXNwKVxuICAgICAgd2hpbGUgKHNlbGYuX2Z1bGZpbGxtZW50SGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXNwID0gc2VsZi5fZnVsZmlsbG1lbnRIYW5kbGVycy5zaGlmdCgpKHJlc3ApXG4gICAgICB9XG5cbiAgICAgIGNvbXBsZXRlKHJlc3ApXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGltZWRPdXQoKSB7XG4gICAgICBzZWxmLl90aW1lZE91dCA9IHRydWVcbiAgICAgIHNlbGYucmVxdWVzdC5hYm9ydCgpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXJyb3IocmVzcCwgbXNnLCB0KSB7XG4gICAgICByZXNwID0gc2VsZi5yZXF1ZXN0XG4gICAgICBzZWxmLl9yZXNwb25zZUFyZ3MucmVzcCA9IHJlc3BcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5tc2cgPSBtc2dcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy50ID0gdFxuICAgICAgc2VsZi5fZXJyZWQgPSB0cnVlXG4gICAgICB3aGlsZSAoc2VsZi5fZXJyb3JIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGYuX2Vycm9ySGFuZGxlcnMuc2hpZnQoKShyZXNwLCBtc2csIHQpXG4gICAgICB9XG4gICAgICBjb21wbGV0ZShyZXNwKVxuICAgIH1cblxuICAgIHRoaXMucmVxdWVzdCA9IGdldFJlcXVlc3QuY2FsbCh0aGlzLCBzdWNjZXNzLCBlcnJvcilcbiAgfVxuXG4gIFJlcXdlc3QucHJvdG90eXBlID0ge1xuICAgIGFib3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZVxuICAgICAgdGhpcy5yZXF1ZXN0LmFib3J0KClcbiAgICB9XG5cbiAgLCByZXRyeTogZnVuY3Rpb24gKCkge1xuICAgICAgaW5pdC5jYWxsKHRoaXMsIHRoaXMubywgdGhpcy5mbilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbWFsbCBkZXZpYXRpb24gZnJvbSB0aGUgUHJvbWlzZXMgQSBDb21tb25KcyBzcGVjaWZpY2F0aW9uXG4gICAgICogaHR0cDovL3dpa2kuY29tbW9uanMub3JnL3dpa2kvUHJvbWlzZXMvQVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogYHRoZW5gIHdpbGwgZXhlY3V0ZSB1cG9uIHN1Y2Nlc3NmdWwgcmVxdWVzdHNcbiAgICAgKi9cbiAgLCB0aGVuOiBmdW5jdGlvbiAoc3VjY2VzcywgZmFpbCkge1xuICAgICAgc3VjY2VzcyA9IHN1Y2Nlc3MgfHwgZnVuY3Rpb24gKCkge31cbiAgICAgIGZhaWwgPSBmYWlsIHx8IGZ1bmN0aW9uICgpIHt9XG4gICAgICBpZiAodGhpcy5fZnVsZmlsbGVkKSB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwID0gc3VjY2Vzcyh0aGlzLl9yZXNwb25zZUFyZ3MucmVzcClcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZmFpbCh0aGlzLl9yZXNwb25zZUFyZ3MucmVzcCwgdGhpcy5fcmVzcG9uc2VBcmdzLm1zZywgdGhpcy5fcmVzcG9uc2VBcmdzLnQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJzLnB1c2goc3VjY2VzcylcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZhaWwpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGBhbHdheXNgIHdpbGwgZXhlY3V0ZSB3aGV0aGVyIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzXG4gICAgICovXG4gICwgYWx3YXlzOiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgIGlmICh0aGlzLl9mdWxmaWxsZWQgfHwgdGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZm4odGhpcy5fcmVzcG9uc2VBcmdzLnJlc3ApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jb21wbGV0ZUhhbmRsZXJzLnB1c2goZm4pXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGBmYWlsYCB3aWxsIGV4ZWN1dGUgd2hlbiB0aGUgcmVxdWVzdCBmYWlsc1xuICAgICAqL1xuICAsIGZhaWw6IGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKHRoaXMuX2VycmVkKSB7XG4gICAgICAgIGZuKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwLCB0aGlzLl9yZXNwb25zZUFyZ3MubXNnLCB0aGlzLl9yZXNwb25zZUFyZ3MudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vycm9ySGFuZGxlcnMucHVzaChmbilcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAsICdjYXRjaCc6IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIHRoaXMuZmFpbChmbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXF3ZXN0KG8sIGZuKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIG5ld2xpbmUgdmFyaWFudHMgYWNjb3JkaW5nIHRvIHNwZWMgLT4gQ1JMRlxuICBmdW5jdGlvbiBub3JtYWxpemUocykge1xuICAgIHJldHVybiBzID8gcy5yZXBsYWNlKC9cXHI/XFxuL2csICdcXHJcXG4nKSA6ICcnXG4gIH1cblxuICBmdW5jdGlvbiBzZXJpYWwoZWwsIGNiKSB7XG4gICAgdmFyIG4gPSBlbC5uYW1lXG4gICAgICAsIHQgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICwgb3B0Q2IgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgIC8vIElFIGdpdmVzIHZhbHVlPVwiXCIgZXZlbiB3aGVyZSB0aGVyZSBpcyBubyB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgICAgICAvLyAnc3BlY2lmaWVkJyByZWY6IGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvY29yZS5odG1sI0lELTg2MjUyOTI3M1xuICAgICAgICAgIGlmIChvICYmICFvWydkaXNhYmxlZCddKVxuICAgICAgICAgICAgY2Iobiwgbm9ybWFsaXplKG9bJ2F0dHJpYnV0ZXMnXVsndmFsdWUnXSAmJiBvWydhdHRyaWJ1dGVzJ11bJ3ZhbHVlJ11bJ3NwZWNpZmllZCddID8gb1sndmFsdWUnXSA6IG9bJ3RleHQnXSkpXG4gICAgICAgIH1cbiAgICAgICwgY2gsIHJhLCB2YWwsIGlcblxuICAgIC8vIGRvbid0IHNlcmlhbGl6ZSBlbGVtZW50cyB0aGF0IGFyZSBkaXNhYmxlZCBvciB3aXRob3V0IGEgbmFtZVxuICAgIGlmIChlbC5kaXNhYmxlZCB8fCAhbikgcmV0dXJuXG5cbiAgICBzd2l0Y2ggKHQpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoIS9yZXNldHxidXR0b258aW1hZ2V8ZmlsZS9pLnRlc3QoZWwudHlwZSkpIHtcbiAgICAgICAgY2ggPSAvY2hlY2tib3gvaS50ZXN0KGVsLnR5cGUpXG4gICAgICAgIHJhID0gL3JhZGlvL2kudGVzdChlbC50eXBlKVxuICAgICAgICB2YWwgPSBlbC52YWx1ZVxuICAgICAgICAvLyBXZWJLaXQgZ2l2ZXMgdXMgXCJcIiBpbnN0ZWFkIG9mIFwib25cIiBpZiBhIGNoZWNrYm94IGhhcyBubyB2YWx1ZSwgc28gY29ycmVjdCBpdCBoZXJlXG4gICAgICAgIDsoIShjaCB8fCByYSkgfHwgZWwuY2hlY2tlZCkgJiYgY2Iobiwgbm9ybWFsaXplKGNoICYmIHZhbCA9PT0gJycgPyAnb24nIDogdmFsKSlcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgY2Iobiwgbm9ybWFsaXplKGVsLnZhbHVlKSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGlmIChlbC50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3Qtb25lJykge1xuICAgICAgICBvcHRDYihlbC5zZWxlY3RlZEluZGV4ID49IDAgPyBlbC5vcHRpb25zW2VsLnNlbGVjdGVkSW5kZXhdIDogbnVsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGVsLmxlbmd0aCAmJiBpIDwgZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5vcHRpb25zW2ldLnNlbGVjdGVkICYmIG9wdENiKGVsLm9wdGlvbnNbaV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gY29sbGVjdCB1cCBhbGwgZm9ybSBlbGVtZW50cyBmb3VuZCBmcm9tIHRoZSBwYXNzZWQgYXJndW1lbnQgZWxlbWVudHMgYWxsXG4gIC8vIHRoZSB3YXkgZG93biB0byBjaGlsZCBlbGVtZW50czsgcGFzcyBhICc8Zm9ybT4nIG9yIGZvcm0gZmllbGRzLlxuICAvLyBjYWxsZWQgd2l0aCAndGhpcyc9Y2FsbGJhY2sgdG8gdXNlIGZvciBzZXJpYWwoKSBvbiBlYWNoIGVsZW1lbnRcbiAgZnVuY3Rpb24gZWFjaEZvcm1FbGVtZW50KCkge1xuICAgIHZhciBjYiA9IHRoaXNcbiAgICAgICwgZSwgaVxuICAgICAgLCBzZXJpYWxpemVTdWJ0YWdzID0gZnVuY3Rpb24gKGUsIHRhZ3MpIHtcbiAgICAgICAgICB2YXIgaSwgaiwgZmFcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmEgPSBlW2J5VGFnXSh0YWdzW2ldKVxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZhLmxlbmd0aDsgaisrKSBzZXJpYWwoZmFbal0sIGNiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZSA9IGFyZ3VtZW50c1tpXVxuICAgICAgaWYgKC9pbnB1dHxzZWxlY3R8dGV4dGFyZWEvaS50ZXN0KGUudGFnTmFtZSkpIHNlcmlhbChlLCBjYilcbiAgICAgIHNlcmlhbGl6ZVN1YnRhZ3MoZSwgWyAnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJyBdKVxuICAgIH1cbiAgfVxuXG4gIC8vIHN0YW5kYXJkIHF1ZXJ5IHN0cmluZyBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nKCkge1xuICAgIHJldHVybiByZXF3ZXN0LnRvUXVlcnlTdHJpbmcocmVxd2VzdC5zZXJpYWxpemVBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpKVxuICB9XG5cbiAgLy8geyAnbmFtZSc6ICd2YWx1ZScsIC4uLiB9IHN0eWxlIHNlcmlhbGl6YXRpb25cbiAgZnVuY3Rpb24gc2VyaWFsaXplSGFzaCgpIHtcbiAgICB2YXIgaGFzaCA9IHt9XG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgaW4gaGFzaCkge1xuICAgICAgICBoYXNoW25hbWVdICYmICFpc0FycmF5KGhhc2hbbmFtZV0pICYmIChoYXNoW25hbWVdID0gW2hhc2hbbmFtZV1dKVxuICAgICAgICBoYXNoW25hbWVdLnB1c2godmFsdWUpXG4gICAgICB9IGVsc2UgaGFzaFtuYW1lXSA9IHZhbHVlXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvLyBbIHsgbmFtZTogJ25hbWUnLCB2YWx1ZTogJ3ZhbHVlJyB9LCAuLi4gXSBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIHJlcXdlc3Quc2VyaWFsaXplQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyciA9IFtdXG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgYXJyLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0pXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBhcnJcbiAgfVxuXG4gIHJlcXdlc3Quc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgICB2YXIgb3B0LCBmblxuICAgICAgLCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXG4gICAgb3B0ID0gYXJncy5wb3AoKVxuICAgIG9wdCAmJiBvcHQubm9kZVR5cGUgJiYgYXJncy5wdXNoKG9wdCkgJiYgKG9wdCA9IG51bGwpXG4gICAgb3B0ICYmIChvcHQgPSBvcHQudHlwZSlcblxuICAgIGlmIChvcHQgPT0gJ21hcCcpIGZuID0gc2VyaWFsaXplSGFzaFxuICAgIGVsc2UgaWYgKG9wdCA9PSAnYXJyYXknKSBmbiA9IHJlcXdlc3Quc2VyaWFsaXplQXJyYXlcbiAgICBlbHNlIGZuID0gc2VyaWFsaXplUXVlcnlTdHJpbmdcblxuICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKVxuICB9XG5cbiAgcmVxd2VzdC50b1F1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gKG8sIHRyYWQpIHtcbiAgICB2YXIgcHJlZml4LCBpXG4gICAgICAsIHRyYWRpdGlvbmFsID0gdHJhZCB8fCBmYWxzZVxuICAgICAgLCBzID0gW11cbiAgICAgICwgZW5jID0gZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgICAsIGFkZCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG4gICAgICAgICAgdmFsdWUgPSAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlKSA/IHZhbHVlKCkgOiAodmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWUpXG4gICAgICAgICAgc1tzLmxlbmd0aF0gPSBlbmMoa2V5KSArICc9JyArIGVuYyh2YWx1ZSlcbiAgICAgICAgfVxuICAgIC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG4gICAgaWYgKGlzQXJyYXkobykpIHtcbiAgICAgIGZvciAoaSA9IDA7IG8gJiYgaSA8IG8ubGVuZ3RoOyBpKyspIGFkZChvW2ldWyduYW1lJ10sIG9baV1bJ3ZhbHVlJ10pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG4gICAgICAvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cbiAgICAgIGZvciAocHJlZml4IGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkocHJlZml4KSkgYnVpbGRQYXJhbXMocHJlZml4LCBvW3ByZWZpeF0sIHRyYWRpdGlvbmFsLCBhZGQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3BhY2VzIHNob3VsZCBiZSArIGFjY29yZGluZyB0byBzcGVjXG4gICAgcmV0dXJuIHMuam9pbignJicpLnJlcGxhY2UoLyUyMC9nLCAnKycpXG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCkge1xuICAgIHZhciBuYW1lLCBpLCB2XG4gICAgICAsIHJicmFja2V0ID0gL1xcW1xcXSQvXG5cbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cbiAgICAgIGZvciAoaSA9IDA7IG9iaiAmJiBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHYgPSBvYmpbaV1cbiAgICAgICAgaWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuICAgICAgICAgIC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cbiAgICAgICAgICBhZGQocHJlZml4LCB2KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArICh0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyBpIDogJycpICsgJ10nLCB2LCB0cmFkaXRpb25hbCwgYWRkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmogJiYgb2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG4gICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArIG5hbWUgKyAnXScsIG9ialtuYW1lXSwgdHJhZGl0aW9uYWwsIGFkZClcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG4gICAgICBhZGQocHJlZml4LCBvYmopXG4gICAgfVxuICB9XG5cbiAgcmVxd2VzdC5nZXRjYWxsYmFja1ByZWZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2tQcmVmaXhcbiAgfVxuXG4gIC8vIGpRdWVyeSBhbmQgWmVwdG8gY29tcGF0aWJpbGl0eSwgZGlmZmVyZW5jZXMgY2FuIGJlIHJlbWFwcGVkIGhlcmUgc28geW91IGNhbiBjYWxsXG4gIC8vIC5hamF4LmNvbXBhdChvcHRpb25zLCBjYWxsYmFjaylcbiAgcmVxd2VzdC5jb21wYXQgPSBmdW5jdGlvbiAobywgZm4pIHtcbiAgICBpZiAobykge1xuICAgICAgb1sndHlwZSddICYmIChvWydtZXRob2QnXSA9IG9bJ3R5cGUnXSkgJiYgZGVsZXRlIG9bJ3R5cGUnXVxuICAgICAgb1snZGF0YVR5cGUnXSAmJiAob1sndHlwZSddID0gb1snZGF0YVR5cGUnXSlcbiAgICAgIG9bJ2pzb25wQ2FsbGJhY2snXSAmJiAob1snanNvbnBDYWxsYmFja05hbWUnXSA9IG9bJ2pzb25wQ2FsbGJhY2snXSkgJiYgZGVsZXRlIG9bJ2pzb25wQ2FsbGJhY2snXVxuICAgICAgb1snanNvbnAnXSAmJiAob1snanNvbnBDYWxsYmFjayddID0gb1snanNvbnAnXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgcmVxd2VzdC5hamF4U2V0dXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgZm9yICh2YXIgayBpbiBvcHRpb25zKSB7XG4gICAgICBnbG9iYWxTZXR1cE9wdGlvbnNba10gPSBvcHRpb25zW2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXdlc3Rcbn0pO1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21wbGV4aXR5ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtc3RhdGVtZW50cyAqL1xuXG5yZXF1aXJlKCcuL3ZlbmRvci9wb2x5ZmlsbHMnKTtcblxudmFyIFEgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgncScpO1xudmFyIG9hdXRoVXRpbCAgICAgICAgID0gcmVxdWlyZSgnLi9vYXV0aFV0aWwnKTtcbnZhciB1dGlsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIHR4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi90eCcpO1xudmFyIHNlc3Npb24gICAgICAgICAgID0gcmVxdWlyZSgnLi9zZXNzaW9uJyk7XG52YXIgY29va2llcyAgICAgICAgICAgPSByZXF1aXJlKCcuL2Nvb2tpZXMnKTtcbnZhciB0b2tlbiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vdG9rZW4nKTtcbnZhciBBdXRoU2RrRXJyb3IgICAgICA9IHJlcXVpcmUoJy4vZXJyb3JzL0F1dGhTZGtFcnJvcicpO1xudmFyIGNvbmZpZyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnZhciBUb2tlbk1hbmFnZXIgICAgICA9IHJlcXVpcmUoJy4vVG9rZW5NYW5hZ2VyJyk7XG52YXIgaHR0cCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2h0dHAnKTtcblxuZnVuY3Rpb24gT2t0YUF1dGhCdWlsZGVyKGFyZ3MpIHtcbiAgdmFyIHNkayA9IHRoaXM7XG5cbiAgaWYgKCFhcmdzKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignTm8gYXJndW1lbnRzIHBhc3NlZCB0byBjb25zdHJ1Y3Rvci4gJyArXG4gICAgICAnUmVxdWlyZWQgdXNhZ2U6IG5ldyBPa3RhQXV0aChhcmdzKScpO1xuICB9XG5cbiAgdmFyIHVybCA9IGFyZ3MudXJsO1xuICBpZiAoIXVybCkge1xuICAgIHZhciBpc1VybFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXmh0dHA/cz86Ly8uKycpO1xuICAgIGlmIChhcmdzLmlzc3VlciAmJiBpc1VybFJlZ2V4LnRlc3QoYXJncy5pc3N1ZXIpKSB7XG4gICAgICAvLyBJbmZlciB0aGUgVVJMIGZyb20gdGhlIGlzc3VlciBVUkwsIG9taXR0aW5nIHRoZSAvb2F1dGgyL3thdXRoU2VydmVySWR9XG4gICAgICB1cmwgPSBhcmdzLmlzc3Vlci5zcGxpdCgnL29hdXRoMi8nKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignTm8gdXJsIHBhc3NlZCB0byBjb25zdHJ1Y3Rvci4gJyArXG4gICAgICAnUmVxdWlyZWQgdXNhZ2U6IG5ldyBPa3RhQXV0aCh7dXJsOiBcImh0dHBzOi8vc2FtcGxlLm9rdGEuY29tXCJ9KScpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1cmwuaW5kZXhPZignLWFkbWluLicpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ1VSTCBwYXNzZWQgdG8gY29uc3RydWN0b3IgY29udGFpbnMgXCItYWRtaW5cIiBpbiBzdWJkb21haW4uICcgK1xuICAgICAgJ1JlcXVpcmVkIHVzYWdlOiBuZXcgT2t0YUF1dGgoe3VybDogXCJodHRwczovL2Rldi0xMjM0NS5va3RhLmNvbX0pJyk7XG4gIH1cblxuICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgdXJsOiB1dGlsLnJlbW92ZVRyYWlsaW5nU2xhc2godXJsKSxcbiAgICBjbGllbnRJZDogYXJncy5jbGllbnRJZCxcbiAgICBpc3N1ZXI6IHV0aWwucmVtb3ZlVHJhaWxpbmdTbGFzaChhcmdzLmlzc3VlciksXG4gICAgYXV0aG9yaXplVXJsOiB1dGlsLnJlbW92ZVRyYWlsaW5nU2xhc2goYXJncy5hdXRob3JpemVVcmwpLFxuICAgIHVzZXJpbmZvVXJsOiB1dGlsLnJlbW92ZVRyYWlsaW5nU2xhc2goYXJncy51c2VyaW5mb1VybCksXG4gICAgcmVkaXJlY3RVcmk6IGFyZ3MucmVkaXJlY3RVcmksXG4gICAgYWpheFJlcXVlc3Q6IGFyZ3MuYWpheFJlcXVlc3QsXG4gICAgdHJhbnNmb3JtRXJyb3JYSFI6IGFyZ3MudHJhbnNmb3JtRXJyb3JYSFIsXG4gICAgaGVhZGVyczogYXJncy5oZWFkZXJzXG4gIH07XG5cbiAgdGhpcy51c2VyQWdlbnQgPSAnb2t0YS1hdXRoLWpzLScgKyBjb25maWcuU0RLX1ZFUlNJT047XG5cbiAgLy8gRGlnaXRhbCBjbG9ja3Mgd2lsbCBkcmlmdCBvdmVyIHRpbWUsIHNvIHRoZSBzZXJ2ZXJcbiAgLy8gY2FuIG1pc2FsaWduIHdpdGggdGhlIHRpbWUgcmVwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gIC8vIFRoZSBtYXhDbG9ja1NrZXcgYWxsb3dzIHJlbGF4aW5nIHRoZSB0aW1lLWJhc2VkXG4gIC8vIHZhbGlkYXRpb24gb2YgdG9rZW5zIChpbiBzZWNvbmRzLCBub3QgbWlsbGlzZWNvbmRzKS5cbiAgLy8gSXQgY3VycmVudGx5IGRlZmF1bHRzIHRvIDMwMCwgYmVjYXVzZSA1IG1pbiBpcyB0aGVcbiAgLy8gZGVmYXVsdCBtYXhpbXVtIHRvbGVyYW5jZSBhbGxvd2VkIGJ5IEtlcmJlcm9zLlxuICAvLyAoaHR0cHM6Ly90ZWNobmV0Lm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzk3NjM1Ny5hc3B4KVxuICBpZiAoIWFyZ3MubWF4Q2xvY2tTa2V3ICYmIGFyZ3MubWF4Q2xvY2tTa2V3ICE9PSAwKSB7XG4gICAgdGhpcy5vcHRpb25zLm1heENsb2NrU2tldyA9IGNvbmZpZy5ERUZBVUxUX01BWF9DTE9DS19TS0VXO1xuICB9IGVsc2Uge1xuICAgIHRoaXMub3B0aW9ucy5tYXhDbG9ja1NrZXcgPSBhcmdzLm1heENsb2NrU2tldztcbiAgfVxuXG4gIC8vIEdpdmUgdGhlIGRldmVsb3BlciB0aGUgYWJpbGl0eSB0byBkaXNhYmxlIHRva2VuIHNpZ25hdHVyZVxuICAvLyB2YWxpZGF0aW9uLlxuICB0aGlzLm9wdGlvbnMuaWdub3JlU2lnbmF0dXJlID0gISFhcmdzLmlnbm9yZVNpZ25hdHVyZTtcblxuICBzZGsuc2Vzc2lvbiA9IHtcbiAgICBjbG9zZTogdXRpbC5iaW5kKHNlc3Npb24uY2xvc2VTZXNzaW9uLCBudWxsLCBzZGspLFxuICAgIGV4aXN0czogdXRpbC5iaW5kKHNlc3Npb24uc2Vzc2lvbkV4aXN0cywgbnVsbCwgc2RrKSxcbiAgICBnZXQ6IHV0aWwuYmluZChzZXNzaW9uLmdldFNlc3Npb24sIG51bGwsIHNkayksXG4gICAgcmVmcmVzaDogdXRpbC5iaW5kKHNlc3Npb24ucmVmcmVzaFNlc3Npb24sIG51bGwsIHNkayksXG4gICAgc2V0Q29va2llQW5kUmVkaXJlY3Q6IHV0aWwuYmluZChzZXNzaW9uLnNldENvb2tpZUFuZFJlZGlyZWN0LCBudWxsLCBzZGspXG4gIH07XG5cbiAgc2RrLnR4ID0ge1xuICAgIHN0YXR1czogdXRpbC5iaW5kKHR4LnRyYW5zYWN0aW9uU3RhdHVzLCBudWxsLCBzZGspLFxuICAgIHJlc3VtZTogdXRpbC5iaW5kKHR4LnJlc3VtZVRyYW5zYWN0aW9uLCBudWxsLCBzZGspLFxuICAgIGV4aXN0czogdXRpbC5iaW5kKHR4LnRyYW5zYWN0aW9uRXhpc3RzLCBudWxsLCBzZGspXG4gIH07XG5cbiAgLy8gVGhpcyBpcyBleHBvc2VkIHNvIHdlIGNhbiBtb2NrIGRvY3VtZW50LmNvb2tpZSBpbiBvdXIgdGVzdHNcbiAgc2RrLnR4LmV4aXN0cy5fZ2V0Q29va2llID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBjb29raWVzLmdldENvb2tpZShuYW1lKTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIGV4cG9zZWQgc28gd2UgY2FuIG1vY2sgd2luZG93LmxvY2F0aW9uLmhyZWYgaW4gb3VyIHRlc3RzXG4gIHNkay5pZFRva2VuID0ge1xuICAgIGF1dGhvcml6ZToge1xuICAgICAgX2dldExvY2F0aW9uSHJlZjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgc2RrLnRva2VuID0ge1xuICAgIGdldFdpdGhvdXRQcm9tcHQ6IHV0aWwuYmluZCh0b2tlbi5nZXRXaXRob3V0UHJvbXB0LCBudWxsLCBzZGspLFxuICAgIGdldFdpdGhQb3B1cDogdXRpbC5iaW5kKHRva2VuLmdldFdpdGhQb3B1cCwgbnVsbCwgc2RrKSxcbiAgICBnZXRXaXRoUmVkaXJlY3Q6IHV0aWwuYmluZCh0b2tlbi5nZXRXaXRoUmVkaXJlY3QsIG51bGwsIHNkayksXG4gICAgcGFyc2VGcm9tVXJsOiB1dGlsLmJpbmQodG9rZW4ucGFyc2VGcm9tVXJsLCBudWxsLCBzZGspLFxuICAgIGRlY29kZTogdG9rZW4uZGVjb2RlVG9rZW4sXG4gICAgcmVuZXc6IHV0aWwuYmluZCh0b2tlbi5yZW5ld1Rva2VuLCBudWxsLCBzZGspLFxuICAgIGdldFVzZXJJbmZvOiB1dGlsLmJpbmQodG9rZW4uZ2V0VXNlckluZm8sIG51bGwsIHNkayksXG4gICAgdmVyaWZ5OiB1dGlsLmJpbmQodG9rZW4udmVyaWZ5VG9rZW4sIG51bGwsIHNkaylcbiAgfTtcblxuICAvLyBUaGlzIGlzIGV4cG9zZWQgc28gd2UgY2FuIHNldCB3aW5kb3cubG9jYXRpb24gaW4gb3VyIHRlc3RzXG4gIHNkay50b2tlbi5nZXRXaXRoUmVkaXJlY3QuX3NldExvY2F0aW9uID0gZnVuY3Rpb24odXJsKSB7XG4gICAgd2luZG93LmxvY2F0aW9uID0gdXJsO1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgZXhwb3NlZCBzbyB3ZSBjYW4gbW9jayBnZXR0aW5nIHdpbmRvdy5oaXN0b3J5IGluIG91ciB0ZXN0c1xuICBzZGsudG9rZW4ucGFyc2VGcm9tVXJsLl9nZXRIaXN0b3J5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgZXhwb3NlZCBzbyB3ZSBjYW4gbW9jayBnZXR0aW5nIHdpbmRvdy5sb2NhdGlvbiBpbiBvdXIgdGVzdHNcbiAgc2RrLnRva2VuLnBhcnNlRnJvbVVybC5fZ2V0TG9jYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uO1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgZXhwb3NlZCBzbyB3ZSBjYW4gbW9jayBnZXR0aW5nIHdpbmRvdy5kb2N1bWVudCBpbiBvdXIgdGVzdHNcbiAgc2RrLnRva2VuLnBhcnNlRnJvbVVybC5fZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gd2luZG93LmRvY3VtZW50O1xuICB9O1xuXG4gIHNkay5maW5nZXJwcmludC5fZ2V0VXNlckFnZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIH07XG5cbiAgdmFyIGlzV2luZG93c1Bob25lID0gL3dpbmRvd3MgcGhvbmV8aWVtb2JpbGV8d3BkZXNrdG9wL2k7XG4gIHNkay5mZWF0dXJlcy5pc0ZpbmdlcnByaW50U3VwcG9ydGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFnZW50ID0gc2RrLmZpbmdlcnByaW50Ll9nZXRVc2VyQWdlbnQoKTtcbiAgICByZXR1cm4gYWdlbnQgJiYgIWlzV2luZG93c1Bob25lLnRlc3QoYWdlbnQpO1xuICB9O1xuXG4gIHNkay50b2tlbk1hbmFnZXIgPSBuZXcgVG9rZW5NYW5hZ2VyKHNkaywgYXJncy50b2tlbk1hbmFnZXIpO1xufVxuXG52YXIgcHJvdG8gPSBPa3RhQXV0aEJ1aWxkZXIucHJvdG90eXBlO1xuXG5wcm90by5mZWF0dXJlcyA9IHt9O1xuXG5wcm90by5mZWF0dXJlcy5pc1BvcHVwUG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGlzSUU4b3I5ID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDEwO1xuICBpZiAod2luZG93LnBvc3RNZXNzYWdlICYmICFpc0lFOG9yOSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbnByb3RvLmZlYXR1cmVzLmlzVG9rZW5WZXJpZnlTdXBwb3J0ZWQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5zdWJ0bGUgJiYgdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnO1xufTtcblxuLy8geyB1c2VybmFtZSwgcGFzc3dvcmQsIChyZWxheVN0YXRlKSwgKGNvbnRleHQpIH1cbnByb3RvLnNpZ25JbiA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciBzZGsgPSB0aGlzO1xuICBvcHRzID0gdXRpbC5jbG9uZShvcHRzIHx8IHt9KTtcbiAgZnVuY3Rpb24gcG9zdFRvVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGRlbGV0ZSBvcHRzLnNlbmRGaW5nZXJwcmludDtcbiAgICByZXR1cm4gdHgucG9zdFRvVHJhbnNhY3Rpb24oc2RrLCAnL2FwaS92MS9hdXRobicsIG9wdHMsIG9wdGlvbnMpO1xuICB9XG4gIGlmICghb3B0cy5zZW5kRmluZ2VycHJpbnQpIHtcbiAgICByZXR1cm4gcG9zdFRvVHJhbnNhY3Rpb24oKTtcbiAgfVxuICByZXR1cm4gc2RrLmZpbmdlcnByaW50KClcbiAgLnRoZW4oZnVuY3Rpb24oZmluZ2VycHJpbnQpIHtcbiAgICByZXR1cm4gcG9zdFRvVHJhbnNhY3Rpb24oe1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnWC1EZXZpY2UtRmluZ2VycHJpbnQnOiBmaW5nZXJwcmludFxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbnByb3RvLnNpZ25PdXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnNlc3Npb24uY2xvc2UoKTtcbn07XG5cbi8vIHsgdXNlcm5hbWUsIChyZWxheVN0YXRlKSB9XG5wcm90by5mb3Jnb3RQYXNzd29yZCA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHJldHVybiB0eC5wb3N0VG9UcmFuc2FjdGlvbih0aGlzLCAnL2FwaS92MS9hdXRobi9yZWNvdmVyeS9wYXNzd29yZCcsIG9wdHMpO1xufTtcblxuLy8geyB1c2VybmFtZSwgKHJlbGF5U3RhdGUpIH1cbnByb3RvLnVubG9ja0FjY291bnQgPSBmdW5jdGlvbiAob3B0cykge1xuICByZXR1cm4gdHgucG9zdFRvVHJhbnNhY3Rpb24odGhpcywgJy9hcGkvdjEvYXV0aG4vcmVjb3ZlcnkvdW5sb2NrJywgb3B0cyk7XG59O1xuXG4vLyB7IHJlY292ZXJ5VG9rZW4gfVxucHJvdG8udmVyaWZ5UmVjb3ZlcnlUb2tlbiA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHJldHVybiB0eC5wb3N0VG9UcmFuc2FjdGlvbih0aGlzLCAnL2FwaS92MS9hdXRobi9yZWNvdmVyeS90b2tlbicsIG9wdHMpO1xufTtcblxuLy8geyByZXNvdXJjZSwgKHJlbCksIChyZXF1ZXN0Q29udGV4dCl9XG5wcm90by53ZWJmaW5nZXIgPSBmdW5jdGlvbiAob3B0cykge1xuICB2YXIgdXJsID0gJy8ud2VsbC1rbm93bi93ZWJmaW5nZXInICsgdXRpbC50b1F1ZXJ5UGFyYW1zKG9wdHMpO1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pyZCtqc29uJ1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGh0dHAuZ2V0KHRoaXMsIHVybCwgb3B0aW9ucyk7XG59O1xuXG5wcm90by5maW5nZXJwcmludCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBzZGsgPSB0aGlzO1xuICBpZiAoIXNkay5mZWF0dXJlcy5pc0ZpbmdlcnByaW50U3VwcG9ydGVkKCkpIHtcbiAgICByZXR1cm4gUS5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignRmluZ2VycHJpbnRpbmcgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZScpKTtcbiAgfVxuXG4gIHZhciBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcblxuICB2YXIgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gIGZ1bmN0aW9uIGxpc3RlbmVyKGUpIHtcbiAgICBpZiAoIWUgfHwgIWUuZGF0YSB8fCBlLm9yaWdpbiAhPT0gc2RrLm9wdGlvbnMudXJsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBtc2cgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ1VuYWJsZSB0byBwYXJzZSBpZnJhbWUgcmVzcG9uc2UnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFtc2cpIHsgcmV0dXJuOyB9XG4gICAgaWYgKG1zZy50eXBlID09PSAnRmluZ2VycHJpbnRBdmFpbGFibGUnKSB7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZShtc2cuZmluZ2VycHJpbnQpO1xuICAgIH1cbiAgICBpZiAobXNnLnR5cGUgPT09ICdGaW5nZXJwcmludFNlcnZpY2VSZWFkeScpIHtcbiAgICAgIGUuc291cmNlLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgdHlwZTogJ0dldEZpbmdlcnByaW50J1xuICAgICAgfSksIGUub3JpZ2luKTtcbiAgICB9XG4gIH1cbiAgb2F1dGhVdGlsLmFkZExpc3RlbmVyKHdpbmRvdywgJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG5cbiAgaWZyYW1lLnNyYyA9IHNkay5vcHRpb25zLnVybCArICcvYXV0aC9zZXJ2aWNlcy9kZXZpY2VmaW5nZXJwcmludCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZGVmZXJyZWQucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ0ZpbmdlcnByaW50aW5nIHRpbWVkIG91dCcpKTtcbiAgfSwgb3B0aW9ucy50aW1lb3V0IHx8IDE1MDAwKTtcblxuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZS5maW4oZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIG9hdXRoVXRpbC5yZW1vdmVMaXN0ZW5lcih3aW5kb3csICdtZXNzYWdlJywgbGlzdGVuZXIpO1xuICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGlmcmFtZSkpIHtcbiAgICAgIGlmcmFtZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYWpheFJlcXVlc3QpIHtcbiAgZnVuY3Rpb24gT2t0YUF1dGgoYXJncykge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPa3RhQXV0aCkpIHtcbiAgICAgIHJldHVybiBuZXcgT2t0YUF1dGgoYXJncyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MgJiYgIWFyZ3MuYWpheFJlcXVlc3QpIHtcbiAgICAgIGFyZ3MuYWpheFJlcXVlc3QgPSBhamF4UmVxdWVzdDtcbiAgICB9XG4gICAgdXRpbC5iaW5kKE9rdGFBdXRoQnVpbGRlciwgdGhpcykoYXJncyk7XG4gIH1cbiAgT2t0YUF1dGgucHJvdG90eXBlID0gT2t0YUF1dGhCdWlsZGVyLnByb3RvdHlwZTtcbiAgT2t0YUF1dGgucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2t0YUF1dGg7XG5cbiAgcmV0dXJuIE9rdGFBdXRoO1xufTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMTYsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5yZXF1aXJlKCdCYXNlNjQnKTtcblxuLy8gUHJvZHVjdGlvbiBzdGVwcyBvZiBFQ01BLTI2MiwgRWRpdGlvbiA1LCAxNS40LjQuMTRcbi8vIFJlZmVyZW5jZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS40LjQuMTRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2YjUG9seWZpbGxcbmlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbihzZWFyY2hFbGVtZW50LCBmcm9tSW5kZXgpIHtcblxuICAgIHZhciBrO1xuXG4gICAgLy8gMS4gTGV0IG8gYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIFRvT2JqZWN0IHBhc3NpbmdcbiAgICAvLyAgICB0aGUgdGhpcyB2YWx1ZSBhcyB0aGUgYXJndW1lbnQuXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO1xuICAgIH1cblxuICAgIHZhciBvID0gT2JqZWN0KHRoaXMpO1xuXG4gICAgLy8gMi4gTGV0IGxlblZhbHVlIGJlIHRoZSByZXN1bHQgb2YgY2FsbGluZyB0aGUgR2V0XG4gICAgLy8gICAgaW50ZXJuYWwgbWV0aG9kIG9mIG8gd2l0aCB0aGUgYXJndW1lbnQgXCJsZW5ndGhcIi5cbiAgICAvLyAzLiBMZXQgbGVuIGJlIFRvVWludDMyKGxlblZhbHVlKS5cbiAgICB2YXIgbGVuID0gby5sZW5ndGggPj4+IDA7XG5cbiAgICAvLyA0LiBJZiBsZW4gaXMgMCwgcmV0dXJuIC0xLlxuICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvLyA1LiBJZiBhcmd1bWVudCBmcm9tSW5kZXggd2FzIHBhc3NlZCBsZXQgbiBiZVxuICAgIC8vICAgIFRvSW50ZWdlcihmcm9tSW5kZXgpOyBlbHNlIGxldCBuIGJlIDAuXG4gICAgdmFyIG4gPSArZnJvbUluZGV4IHx8IDA7XG5cbiAgICBpZiAoTWF0aC5hYnMobikgPT09IEluZmluaXR5KSB7XG4gICAgICBuID0gMDtcbiAgICB9XG5cbiAgICAvLyA2LiBJZiBuID49IGxlbiwgcmV0dXJuIC0xLlxuICAgIGlmIChuID49IGxlbikge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8vIDcuIElmIG4gPj0gMCwgdGhlbiBMZXQgayBiZSBuLlxuICAgIC8vIDguIEVsc2UsIG48MCwgTGV0IGsgYmUgbGVuIC0gYWJzKG4pLlxuICAgIC8vICAgIElmIGsgaXMgbGVzcyB0aGFuIDAsIHRoZW4gbGV0IGsgYmUgMC5cbiAgICBrID0gTWF0aC5tYXgobiA+PSAwID8gbiA6IGxlbiAtIE1hdGguYWJzKG4pLCAwKTtcblxuICAgIC8vIDkuIFJlcGVhdCwgd2hpbGUgayA8IGxlblxuICAgIHdoaWxlIChrIDwgbGVuKSB7XG4gICAgICAvLyBhLiBMZXQgUGsgYmUgVG9TdHJpbmcoaykuXG4gICAgICAvLyAgIFRoaXMgaXMgaW1wbGljaXQgZm9yIExIUyBvcGVyYW5kcyBvZiB0aGUgaW4gb3BlcmF0b3JcbiAgICAgIC8vIGIuIExldCBrUHJlc2VudCBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlXG4gICAgICAvLyAgICBIYXNQcm9wZXJ0eSBpbnRlcm5hbCBtZXRob2Qgb2YgbyB3aXRoIGFyZ3VtZW50IFBrLlxuICAgICAgLy8gICBUaGlzIHN0ZXAgY2FuIGJlIGNvbWJpbmVkIHdpdGggY1xuICAgICAgLy8gYy4gSWYga1ByZXNlbnQgaXMgdHJ1ZSwgdGhlblxuICAgICAgLy8gICAgaS4gIExldCBlbGVtZW50SyBiZSB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgdGhlIEdldFxuICAgICAgLy8gICAgICAgIGludGVybmFsIG1ldGhvZCBvZiBvIHdpdGggdGhlIGFyZ3VtZW50IFRvU3RyaW5nKGspLlxuICAgICAgLy8gICBpaS4gIExldCBzYW1lIGJlIHRoZSByZXN1bHQgb2YgYXBwbHlpbmcgdGhlXG4gICAgICAvLyAgICAgICAgU3RyaWN0IEVxdWFsaXR5IENvbXBhcmlzb24gQWxnb3JpdGhtIHRvXG4gICAgICAvLyAgICAgICAgc2VhcmNoRWxlbWVudCBhbmQgZWxlbWVudEsuXG4gICAgICAvLyAgaWlpLiAgSWYgc2FtZSBpcyB0cnVlLCByZXR1cm4gay5cbiAgICAgIGlmIChrIGluIG8gJiYgb1trXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaztcbiAgICAgIH1cbiAgICAgIGsrKztcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xufVxuXG5pZiAoIUFycmF5LmlzQXJyYXkpIHtcbiAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn1cbiIsIjsoZnVuY3Rpb24gKCkge1xuXG4gIHZhciBvYmplY3QgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzOyAvLyAjODogd2ViIHdvcmtlcnNcbiAgdmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuICBmdW5jdGlvbiBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IobWVzc2FnZSkge1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cbiAgSW52YWxpZENoYXJhY3RlckVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbiAgSW52YWxpZENoYXJhY3RlckVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ludmFsaWRDaGFyYWN0ZXJFcnJvcic7XG5cbiAgLy8gZW5jb2RlclxuICAvLyBbaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vOTk5MTY2XSBieSBbaHR0cHM6Ly9naXRodWIuY29tL25pZ25hZ11cbiAgb2JqZWN0LmJ0b2EgfHwgKFxuICBvYmplY3QuYnRvYSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICAgIGZvciAoXG4gICAgICAvLyBpbml0aWFsaXplIHJlc3VsdCBhbmQgY291bnRlclxuICAgICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnMsIG91dHB1dCA9ICcnO1xuICAgICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAgIC8vICAgY2hlY2sgaWYgZCBoYXMgbm8gZnJhY3Rpb25hbCBkaWdpdHNcbiAgICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICAgKSB7XG4gICAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzLzQpO1xuICAgICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENoYXJhY3RlckVycm9yKFwiJ2J0b2EnIGZhaWxlZDogVGhlIHN0cmluZyB0byBiZSBlbmNvZGVkIGNvbnRhaW5zIGNoYXJhY3RlcnMgb3V0c2lkZSBvZiB0aGUgTGF0aW4xIHJhbmdlLlwiKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9KTtcblxuICAvLyBkZWNvZGVyXG4gIC8vIFtodHRwczovL2dpc3QuZ2l0aHViLmNvbS8xMDIwMzk2XSBieSBbaHR0cHM6Ly9naXRodWIuY29tL2F0a11cbiAgb2JqZWN0LmF0b2IgfHwgKFxuICBvYmplY3QuYXRvYiA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpLnJlcGxhY2UoLz0rJC8sICcnKTtcbiAgICBpZiAoc3RyLmxlbmd0aCAlIDQgPT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRDaGFyYWN0ZXJFcnJvcihcIidhdG9iJyBmYWlsZWQ6IFRoZSBzdHJpbmcgdG8gYmUgZGVjb2RlZCBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQuXCIpO1xuICAgIH1cbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJzXG4gICAgICB2YXIgYmMgPSAwLCBicywgYnVmZmVyLCBpZHggPSAwLCBvdXRwdXQgPSAnJztcbiAgICAgIC8vIGdldCBuZXh0IGNoYXJhY3RlclxuICAgICAgYnVmZmVyID0gc3RyLmNoYXJBdChpZHgrKyk7XG4gICAgICAvLyBjaGFyYWN0ZXIgZm91bmQgaW4gdGFibGU/IGluaXRpYWxpemUgYml0IHN0b3JhZ2UgYW5kIGFkZCBpdHMgYXNjaWkgdmFsdWU7XG4gICAgICB+YnVmZmVyICYmIChicyA9IGJjICUgNCA/IGJzICogNjQgKyBidWZmZXIgOiBidWZmZXIsXG4gICAgICAgIC8vIGFuZCBpZiBub3QgZmlyc3Qgb2YgZWFjaCA0IGNoYXJhY3RlcnMsXG4gICAgICAgIC8vIGNvbnZlcnQgdGhlIGZpcnN0IDggYml0cyB0byBvbmUgYXNjaWkgY2hhcmFjdGVyXG4gICAgICAgIGJjKysgJSA0KSA/IG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSAmIGJzID4+ICgtMiAqIGJjICYgNikpIDogMFxuICAgICkge1xuICAgICAgLy8gdHJ5IHRvIGZpbmQgY2hhcmFjdGVyIGluIHRhYmxlICgwLTYzLCBub3QgZm91bmQgPT4gLTEpXG4gICAgICBidWZmZXIgPSBjaGFycy5pbmRleE9mKGJ1ZmZlcik7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0pO1xuXG59KCkpO1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCIvKiFcbiAqIEphdmFTY3JpcHQgQ29va2llIHYyLjIuMFxuICogaHR0cHM6Ly9naXRodWIuY29tL2pzLWNvb2tpZS9qcy1jb29raWVcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNiwgMjAxNSBLbGF1cyBIYXJ0bCAmIEZhZ25lciBCcmFja1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0dmFyIHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IGZhbHNlO1xuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKGZhY3RvcnkpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRcdHJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlciA9IHRydWU7XG5cdH1cblx0aWYgKCFyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIpIHtcblx0XHR2YXIgT2xkQ29va2llcyA9IHdpbmRvdy5Db29raWVzO1xuXHRcdHZhciBhcGkgPSB3aW5kb3cuQ29va2llcyA9IGZhY3RvcnkoKTtcblx0XHRhcGkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHdpbmRvdy5Db29raWVzID0gT2xkQ29va2llcztcblx0XHRcdHJldHVybiBhcGk7XG5cdFx0fTtcblx0fVxufShmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIGV4dGVuZCAoKSB7XG5cdFx0dmFyIGkgPSAwO1xuXHRcdHZhciByZXN1bHQgPSB7fTtcblx0XHRmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBhcmd1bWVudHNbIGkgXTtcblx0XHRcdGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHJlc3VsdFtrZXldID0gYXR0cmlidXRlc1trZXldO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdCAoY29udmVydGVyKSB7XG5cdFx0ZnVuY3Rpb24gYXBpIChrZXksIHZhbHVlLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXcml0ZVxuXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0YXR0cmlidXRlcyA9IGV4dGVuZCh7XG5cdFx0XHRcdFx0cGF0aDogJy8nXG5cdFx0XHRcdH0sIGFwaS5kZWZhdWx0cywgYXR0cmlidXRlcyk7XG5cblx0XHRcdFx0aWYgKHR5cGVvZiBhdHRyaWJ1dGVzLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdFx0dmFyIGV4cGlyZXMgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0XHRcdGV4cGlyZXMuc2V0TWlsbGlzZWNvbmRzKGV4cGlyZXMuZ2V0TWlsbGlzZWNvbmRzKCkgKyBhdHRyaWJ1dGVzLmV4cGlyZXMgKiA4NjRlKzUpO1xuXHRcdFx0XHRcdGF0dHJpYnV0ZXMuZXhwaXJlcyA9IGV4cGlyZXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSdyZSB1c2luZyBcImV4cGlyZXNcIiBiZWNhdXNlIFwibWF4LWFnZVwiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUVcblx0XHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gYXR0cmlidXRlcy5leHBpcmVzID8gYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJztcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdFx0XHRpZiAoL15bXFx7XFxbXS8udGVzdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IHJlc3VsdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cblx0XHRcdFx0aWYgKCFjb252ZXJ0ZXIud3JpdGUpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdFx0LnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8M0F8M0N8M0V8M0R8MkZ8M0Z8NDB8NUJ8NUR8NUV8NjB8N0J8N0R8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjb252ZXJ0ZXIud3JpdGUodmFsdWUsIGtleSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGtleSkpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvJSgyM3wyNHwyNnwyQnw1RXw2MHw3QykvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1tcXChcXCldL2csIGVzY2FwZSk7XG5cblx0XHRcdFx0dmFyIHN0cmluZ2lmaWVkQXR0cmlidXRlcyA9ICcnO1xuXG5cdFx0XHRcdGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuXHRcdFx0XHRcdGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnOyAnICsgYXR0cmlidXRlTmFtZTtcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0cmluZ2lmaWVkQXR0cmlidXRlcyArPSAnPScgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0ga2V5ICsgJz0nICsgdmFsdWUgKyBzdHJpbmdpZmllZEF0dHJpYnV0ZXMpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZWFkXG5cblx0XHRcdGlmICgha2V5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUbyBwcmV2ZW50IHRoZSBmb3IgbG9vcCBpbiB0aGUgZmlyc3QgcGxhY2UgYXNzaWduIGFuIGVtcHR5IGFycmF5XG5cdFx0XHQvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjb29raWVzIGF0IGFsbC4gQWxzbyBwcmV2ZW50cyBvZGQgcmVzdWx0IHdoZW5cblx0XHRcdC8vIGNhbGxpbmcgXCJnZXQoKVwiXG5cdFx0XHR2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuXHRcdFx0dmFyIHJkZWNvZGUgPSAvKCVbMC05QS1aXXsyfSkrL2c7XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGZvciAoOyBpIDwgY29va2llcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFydHMgPSBjb29raWVzW2ldLnNwbGl0KCc9Jyk7XG5cdFx0XHRcdHZhciBjb29raWUgPSBwYXJ0cy5zbGljZSgxKS5qb2luKCc9Jyk7XG5cblx0XHRcdFx0aWYgKCF0aGlzLmpzb24gJiYgY29va2llLmNoYXJBdCgwKSA9PT0gJ1wiJykge1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvb2tpZS5zbGljZSgxLCAtMSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBuYW1lID0gcGFydHNbMF0ucmVwbGFjZShyZGVjb2RlLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXHRcdFx0XHRcdGNvb2tpZSA9IGNvbnZlcnRlci5yZWFkID9cblx0XHRcdFx0XHRcdGNvbnZlcnRlci5yZWFkKGNvb2tpZSwgbmFtZSkgOiBjb252ZXJ0ZXIoY29va2llLCBuYW1lKSB8fFxuXHRcdFx0XHRcdFx0Y29va2llLnJlcGxhY2UocmRlY29kZSwgZGVjb2RlVVJJQ29tcG9uZW50KTtcblxuXHRcdFx0XHRcdGlmICh0aGlzLmpzb24pIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvb2tpZSA9IEpTT04ucGFyc2UoY29va2llKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGtleSA9PT0gbmFtZSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0gY29va2llO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCFrZXkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdFtuYW1lXSA9IGNvb2tpZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cdFx0YXBpLnNldCA9IGFwaTtcblx0XHRhcGkuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGFwaS5jYWxsKGFwaSwga2V5KTtcblx0XHR9O1xuXHRcdGFwaS5nZXRKU09OID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGFwaS5hcHBseSh7XG5cdFx0XHRcdGpzb246IHRydWVcblx0XHRcdH0sIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG5cdFx0fTtcblx0XHRhcGkuZGVmYXVsdHMgPSB7fTtcblxuXHRcdGFwaS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRhcGkoa2V5LCAnJywgZXh0ZW5kKGF0dHJpYnV0ZXMsIHtcblx0XHRcdFx0ZXhwaXJlczogLTFcblx0XHRcdH0pKTtcblx0XHR9O1xuXG5cdFx0YXBpLndpdGhDb252ZXJ0ZXIgPSBpbml0O1xuXG5cdFx0cmV0dXJuIGFwaTtcblx0fVxuXG5cdHJldHVybiBpbml0KGZ1bmN0aW9uICgpIHt9KTtcbn0pKTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBBdXRoQXBpRXJyb3IoZXJyLCB4aHIpIHtcbiAgdGhpcy5uYW1lID0gJ0F1dGhBcGlFcnJvcic7XG4gIHRoaXMubWVzc2FnZSA9IGVyci5lcnJvclN1bW1hcnk7XG4gIHRoaXMuZXJyb3JTdW1tYXJ5ID0gZXJyLmVycm9yU3VtbWFyeTtcbiAgdGhpcy5lcnJvckNvZGUgPSBlcnIuZXJyb3JDb2RlO1xuICB0aGlzLmVycm9yTGluayA9IGVyci5lcnJvckxpbms7XG4gIHRoaXMuZXJyb3JJZCA9IGVyci5lcnJvcklkO1xuICB0aGlzLmVycm9yQ2F1c2VzID0gZXJyLmVycm9yQ2F1c2VzO1xuXG4gIGlmICh4aHIpIHtcbiAgICB0aGlzLnhociA9IHhocjtcbiAgfVxufVxuQXV0aEFwaUVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhBcGlFcnJvcjtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSwgbWF4LXN0YXRlbWVudHMgKi9cbnZhciBodHRwICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vaHR0cCcpO1xudmFyIHV0aWwgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgUSAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdxJyk7XG52YXIgQXV0aFNka0Vycm9yICAgICAgPSByZXF1aXJlKCcuL2Vycm9ycy9BdXRoU2RrRXJyb3InKTtcbnZhciBBdXRoUG9sbFN0b3BFcnJvciA9IHJlcXVpcmUoJy4vZXJyb3JzL0F1dGhQb2xsU3RvcEVycm9yJyk7XG52YXIgY29uZmlnICAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvbmZpZycpO1xuXG5mdW5jdGlvbiBhZGRTdGF0ZVRva2VuKHJlcywgb3B0aW9ucykge1xuICB2YXIgYnVpbHRBcmdzID0ge307XG4gIHV0aWwuZXh0ZW5kKGJ1aWx0QXJncywgb3B0aW9ucyk7XG5cbiAgLy8gQWRkIHRoZSBzdGF0ZVRva2VuIGlmIG9uZSBpc24ndCBwYXNzZWQgYW5kIHdlIGhhdmUgb25lXG4gIGlmICghYnVpbHRBcmdzLnN0YXRlVG9rZW4gJiYgcmVzLnN0YXRlVG9rZW4pIHtcbiAgICBidWlsdEFyZ3Muc3RhdGVUb2tlbiA9IHJlcy5zdGF0ZVRva2VuO1xuICB9XG5cbiAgcmV0dXJuIGJ1aWx0QXJncztcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVUb2tlbihyZXMpIHtcbiAgcmV0dXJuIGFkZFN0YXRlVG9rZW4ocmVzKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNhY3Rpb25TdGF0dXMoc2RrLCBhcmdzKSB7XG4gIGFyZ3MgPSBhZGRTdGF0ZVRva2VuKHNkaywgYXJncyk7XG4gIHJldHVybiBodHRwLnBvc3Qoc2RrLCBzZGsub3B0aW9ucy51cmwgKyAnL2FwaS92MS9hdXRobicsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiByZXN1bWVUcmFuc2FjdGlvbihzZGssIGFyZ3MpIHtcbiAgaWYgKCFhcmdzIHx8ICFhcmdzLnN0YXRlVG9rZW4pIHtcbiAgICB2YXIgc3RhdGVUb2tlbiA9IHNkay50eC5leGlzdHMuX2dldENvb2tpZShjb25maWcuU1RBVEVfVE9LRU5fQ09PS0lFX05BTUUpO1xuICAgIGlmIChzdGF0ZVRva2VuKSB7XG4gICAgICBhcmdzID0ge1xuICAgICAgICBzdGF0ZVRva2VuOiBzdGF0ZVRva2VuXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUS5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignTm8gdHJhbnNhY3Rpb24gdG8gcmVzdW1lJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2RrLnR4LnN0YXR1cyhhcmdzKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgcmV0dXJuIG5ldyBBdXRoVHJhbnNhY3Rpb24oc2RrLCByZXMpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2FjdGlvbkV4aXN0cyhzZGspIHtcbiAgLy8gV2UgaGF2ZSBhIGNvb2tpZSBzdGF0ZSB0b2tlblxuICByZXR1cm4gISFzZGsudHguZXhpc3RzLl9nZXRDb29raWUoY29uZmlnLlNUQVRFX1RPS0VOX0NPT0tJRV9OQU1FKTtcbn1cblxuZnVuY3Rpb24gcG9zdFRvVHJhbnNhY3Rpb24oc2RrLCB1cmwsIGFyZ3MsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGh0dHAucG9zdChzZGssIHVybCwgYXJncywgb3B0aW9ucylcbiAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgIHJldHVybiBuZXcgQXV0aFRyYW5zYWN0aW9uKHNkaywgcmVzKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0UG9sbEZuKHNkaywgcmVzLCByZWYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIGRlbGF5O1xuICAgIHZhciByZW1lbWJlckRldmljZTtcbiAgICB2YXIgYXV0b1B1c2g7XG5cbiAgICBpZiAodXRpbC5pc051bWJlcihvcHRpb25zKSkge1xuICAgICAgZGVsYXkgPSBvcHRpb25zO1xuICAgIH0gZWxzZSBpZiAodXRpbC5pc09iamVjdChvcHRpb25zKSkge1xuICAgICAgZGVsYXkgPSBvcHRpb25zLmRlbGF5O1xuICAgICAgcmVtZW1iZXJEZXZpY2UgPSBvcHRpb25zLnJlbWVtYmVyRGV2aWNlO1xuICAgICAgYXV0b1B1c2ggPSBvcHRpb25zLmF1dG9QdXNoO1xuICAgIH1cblxuICAgIGlmICghZGVsYXkgJiYgZGVsYXkgIT09IDApIHtcbiAgICAgIGRlbGF5ID0gY29uZmlnLkRFRkFVTFRfUE9MTElOR19ERUxBWTtcbiAgICB9XG5cbiAgICAvLyBHZXQgdGhlIHBvbGwgZnVuY3Rpb25cbiAgICB2YXIgcG9sbExpbmsgPSB1dGlsLmdldExpbmsocmVzLCAnbmV4dCcsICdwb2xsJyk7XG4gICAgZnVuY3Rpb24gcG9sbEZuKCkge1xuICAgICAgdmFyIG9wdHMgPSB7fTtcbiAgICAgIGlmICh0eXBlb2YgYXV0b1B1c2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvcHRzLmF1dG9QdXNoID0gISFhdXRvUHVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ0F1dG9QdXNoIHJlc3VsdGVkIGluIGFuIGVycm9yLicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYXV0b1B1c2ggIT09IHVuZGVmaW5lZCAmJiBhdXRvUHVzaCAhPT0gbnVsbCkge1xuICAgICAgICBvcHRzLmF1dG9QdXNoID0gISFhdXRvUHVzaDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgcmVtZW1iZXJEZXZpY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBvcHRzLnJlbWVtYmVyRGV2aWNlID0gISFyZW1lbWJlckRldmljZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ1JlbWVtYmVyRGV2aWNlIHJlc3VsdGVkIGluIGFuIGVycm9yLicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAocmVtZW1iZXJEZXZpY2UgIT09IHVuZGVmaW5lZCAmJiByZW1lbWJlckRldmljZSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRzLnJlbWVtYmVyRGV2aWNlID0gISFyZW1lbWJlckRldmljZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhyZWYgPSBwb2xsTGluay5ocmVmICsgdXRpbC50b1F1ZXJ5UGFyYW1zKG9wdHMpO1xuICAgICAgcmV0dXJuIGh0dHAucG9zdChzZGssIGhyZWYsIGdldFN0YXRlVG9rZW4ocmVzKSwge1xuICAgICAgICBzYXZlQXV0aG5TdGF0ZTogZmFsc2UgIFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVmLmlzUG9sbGluZyA9IHRydWU7XG5cbiAgICB2YXIgcmV0cnlDb3VudCA9IDA7XG4gICAgdmFyIHJlY3Vyc2l2ZVBvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBJZiB0aGUgcG9sbCB3YXMgbWFudWFsbHkgc3RvcHBlZCBkdXJpbmcgdGhlIGRlbGF5XG4gICAgICBpZiAoIXJlZi5pc1BvbGxpbmcpIHtcbiAgICAgICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoUG9sbFN0b3BFcnJvcigpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb2xsRm4oKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocG9sbFJlcykge1xuICAgICAgICAgIC8vIFJlc2V0IG91ciByZXRyeSBjb3VudGVyIG9uIHN1Y2Nlc3NcbiAgICAgICAgICByZXRyeUNvdW50ID0gMDtcblxuICAgICAgICAgIC8vIElmIHdlJ3JlIHN0aWxsIHdhaXRpbmdcbiAgICAgICAgICBpZiAocG9sbFJlcy5mYWN0b3JSZXN1bHQgJiYgcG9sbFJlcy5mYWN0b3JSZXN1bHQgPT09ICdXQUlUSU5HJykge1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcG9sbCB3YXMgbWFudWFsbHkgc3RvcHBlZCB3aGlsZSB0aGUgcG9sbEZuIHdhcyBjYWxsZWRcbiAgICAgICAgICAgIGlmICghcmVmLmlzUG9sbGluZykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgQXV0aFBvbGxTdG9wRXJyb3IoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29udGludWUgcG9sbFxuICAgICAgICAgICAgcmV0dXJuIFEuZGVsYXkoZGVsYXkpXG4gICAgICAgICAgICAgIC50aGVuKHJlY3Vyc2l2ZVBvbGwpO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFueSBub24td2FpdGluZyByZXN1bHQsIGV2ZW4gaWYgcG9sbGluZyB3YXMgc3RvcHBlZFxuICAgICAgICAgICAgLy8gZHVyaW5nIGEgcmVxdWVzdCwgd2lsbCByZXR1cm5cbiAgICAgICAgICAgIHJlZi5pc1BvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXV0aFRyYW5zYWN0aW9uKHNkaywgcG9sbFJlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuZmFpbChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyBFeHBvbmVudGlhbCBiYWNrb2ZmLCB1cCB0byAxNiBzZWNvbmRzXG4gICAgICAgICAgaWYgKGVyci54aHIgJiZcbiAgICAgICAgICAgICAgKGVyci54aHIuc3RhdHVzID09PSAwIHx8IGVyci54aHIuc3RhdHVzID09PSA0MjkpICYmXG4gICAgICAgICAgICAgIHJldHJ5Q291bnQgPD0gNCkge1xuICAgICAgICAgICAgdmFyIGRlbGF5TGVuZ3RoID0gTWF0aC5wb3coMiwgcmV0cnlDb3VudCkgKiAxMDAwO1xuICAgICAgICAgICAgcmV0cnlDb3VudCsrO1xuICAgICAgICAgICAgcmV0dXJuIFEuZGVsYXkoZGVsYXlMZW5ndGgpXG4gICAgICAgICAgICAgIC50aGVuKHJlY3Vyc2l2ZVBvbGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIHJlY3Vyc2l2ZVBvbGwoKVxuICAgICAgLmZhaWwoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHJlZi5pc1BvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxpbmsyZm4oc2RrLCByZXMsIG9iaiwgbGluaywgcmVmKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGxpbmspKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUsIG9wdHMpIHtcbiAgICAgIGlmICghbmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdNdXN0IHByb3ZpZGUgYSBsaW5rIG5hbWUnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxrID0gdXRpbC5maW5kKGxpbmssIHtuYW1lOiBuYW1lfSk7XG4gICAgICBpZiAoIWxrKSB7XG4gICAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ05vIGxpbmsgZm91bmQgZm9yIHRoYXQgbmFtZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluazJmbihzZGssIHJlcywgb2JqLCBsaywgcmVmKShvcHRzKTtcbiAgICB9O1xuXG4gIH0gZWxzZSBpZiAobGluay5oaW50cyAmJlxuICAgICAgbGluay5oaW50cy5hbGxvdyAmJlxuICAgICAgbGluay5oaW50cy5hbGxvdy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgbWV0aG9kID0gbGluay5oaW50cy5hbGxvd1swXTtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuXG4gICAgICBjYXNlICdHRVQnOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGh0dHAuZ2V0KHNkaywgbGluay5ocmVmKTtcbiAgICAgICAgfTtcblxuICAgICAgY2FzZSAnUE9TVCc6XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvcHRzKSB7XG4gICAgICAgICAgaWYgKHJlZiAmJiByZWYuaXNQb2xsaW5nKSB7XG4gICAgICAgICAgICByZWYuaXNQb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRhdGEgPSBhZGRTdGF0ZVRva2VuKHJlcywgb3B0cyk7XG5cbiAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gJ01GQV9FTlJPTEwnKSB7XG4gICAgICAgICAgICAvLyBBZGQgZmFjdG9yVHlwZSBhbmQgcHJvdmlkZXJcbiAgICAgICAgICAgIHV0aWwuZXh0ZW5kKGRhdGEsIHtcbiAgICAgICAgICAgICAgZmFjdG9yVHlwZTogb2JqLmZhY3RvclR5cGUsXG4gICAgICAgICAgICAgIHByb3ZpZGVyOiBvYmoucHJvdmlkZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBwYXJhbXMgPSB7fTtcbiAgICAgICAgICB2YXIgYXV0b1B1c2ggPSBkYXRhLmF1dG9QdXNoO1xuICAgICAgICAgIGlmIChhdXRvUHVzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGF1dG9QdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmF1dG9QdXNoID0gISFhdXRvUHVzaCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ0F1dG9QdXNoIHJlc3VsdGVkIGluIGFuIGVycm9yLicpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXV0b1B1c2ggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcGFyYW1zLmF1dG9QdXNoID0gISFhdXRvUHVzaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEgPSB1dGlsLm9taXQoZGF0YSwgJ2F1dG9QdXNoJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlbWVtYmVyRGV2aWNlID0gZGF0YS5yZW1lbWJlckRldmljZTtcbiAgICAgICAgICBpZiAocmVtZW1iZXJEZXZpY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZW1lbWJlckRldmljZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcmFtcy5yZW1lbWJlckRldmljZSA9ICEhcmVtZW1iZXJEZXZpY2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBRLnJlamVjdChuZXcgQXV0aFNka0Vycm9yKCdSZW1lbWJlckRldmljZSByZXN1bHRlZCBpbiBhbiBlcnJvci4nKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlbWVtYmVyRGV2aWNlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHBhcmFtcy5yZW1lbWJlckRldmljZSA9ICEhcmVtZW1iZXJEZXZpY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhID0gdXRpbC5vbWl0KGRhdGEsICdyZW1lbWJlckRldmljZScpO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnByb2ZpbGUgJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9maWxlLnVwZGF0ZVBob25lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnByb2ZpbGUudXBkYXRlUGhvbmUpIHtcbiAgICAgICAgICAgICAgcGFyYW1zLnVwZGF0ZVBob25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEucHJvZmlsZSA9IHV0aWwub21pdChkYXRhLnByb2ZpbGUsICd1cGRhdGVQaG9uZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaHJlZiA9IGxpbmsuaHJlZiArIHV0aWwudG9RdWVyeVBhcmFtcyhwYXJhbXMpO1xuICAgICAgICAgIHJldHVybiBwb3N0VG9UcmFuc2FjdGlvbihzZGssIGhyZWYsIGRhdGEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsaW5rczJmbnMoc2RrLCByZXMsIG9iaiwgcmVmKSB7XG4gIHZhciBmbnMgPSB7fTtcbiAgZm9yICh2YXIgbGlua05hbWUgaW4gb2JqLl9saW5rcykge1xuICAgIGlmICghb2JqLl9saW5rcy5oYXNPd25Qcm9wZXJ0eShsaW5rTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBsaW5rID0gb2JqLl9saW5rc1tsaW5rTmFtZV07XG4gICAgXG4gICAgaWYgKGxpbmtOYW1lID09PSAnbmV4dCcpIHtcbiAgICAgIGxpbmtOYW1lID0gbGluay5uYW1lO1xuICAgIH1cblxuICAgIGlmIChsaW5rLnR5cGUpIHtcbiAgICAgIGZuc1tsaW5rTmFtZV0gPSBsaW5rO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgc3dpdGNoIChsaW5rTmFtZSkge1xuICAgICAgLy8gcG9sbCBpcyBvbmx5IGZvdW5kIGF0IHRoZSB0cmFuc2FjdGlvblxuICAgICAgLy8gbGV2ZWwsIHNvIHdlIGRvbid0IG5lZWQgdG8gcGFzcyB0aGUgbGlua1xuICAgICAgY2FzZSAncG9sbCc6XG4gICAgICAgIGZucy5wb2xsID0gZ2V0UG9sbEZuKHNkaywgcmVzLCByZWYpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIGZuID0gbGluazJmbihzZGssIHJlcywgb2JqLCBsaW5rLCByZWYpO1xuICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICBmbnNbbGlua05hbWVdID0gZm47XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZucztcbn1cblxuZnVuY3Rpb24gZmxhdHRlbkVtYmVkZGVkKHNkaywgcmVzLCBvYmosIHJlZikge1xuICBvYmogPSBvYmogfHwgcmVzO1xuICBvYmogPSB1dGlsLmNsb25lKG9iaik7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgIHZhciBvYmpBcnIgPSBbXTtcbiAgICBmb3IgKHZhciBvID0gMCwgb2wgPSBvYmoubGVuZ3RoOyBvIDwgb2w7IG8rKykge1xuICAgICAgb2JqQXJyLnB1c2goZmxhdHRlbkVtYmVkZGVkKHNkaywgcmVzLCBvYmpbb10sIHJlZikpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqQXJyO1xuICB9XG5cbiAgdmFyIGVtYmVkZGVkID0gb2JqLl9lbWJlZGRlZCB8fCB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gZW1iZWRkZWQpIHtcbiAgICBpZiAoIWVtYmVkZGVkLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBfZW1iZWRkZWQgb2JqZWN0c1xuICAgIGlmICh1dGlsLmlzT2JqZWN0KGVtYmVkZGVkW2tleV0pIHx8IEFycmF5LmlzQXJyYXkoZW1iZWRkZWRba2V5XSkpIHtcbiAgICAgIGVtYmVkZGVkW2tleV0gPSBmbGF0dGVuRW1iZWRkZWQoc2RrLCByZXMsIGVtYmVkZGVkW2tleV0sIHJlZik7XG4gICAgfVxuICB9XG5cbiAgLy8gQ29udmVydCBhbnkgbGlua3Mgb24gdGhlIGVtYmVkZGVkIG9iamVjdFxuICB2YXIgZm5zID0gbGlua3MyZm5zKHNkaywgcmVzLCBvYmosIHJlZik7XG4gIHV0aWwuZXh0ZW5kKGVtYmVkZGVkLCBmbnMpO1xuXG4gIG9iaiA9IHV0aWwub21pdChvYmosICdfZW1iZWRkZWQnLCAnX2xpbmtzJyk7XG4gIHV0aWwuZXh0ZW5kKG9iaiwgZW1iZWRkZWQpO1xuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBBdXRoVHJhbnNhY3Rpb24oc2RrLCByZXMpIHtcbiAgaWYgKHJlcykge1xuICAgIHRoaXMuZGF0YSA9IHJlcztcbiAgICB1dGlsLmV4dGVuZCh0aGlzLCBmbGF0dGVuRW1iZWRkZWQoc2RrLCByZXMsIHJlcywge30pKTtcbiAgICBkZWxldGUgdGhpcy5zdGF0ZVRva2VuO1xuXG4gICAgLy8gUkVDT1ZFUllfQ0hBTExFTkdFIGhhcyBzb21lIHJlc3BvbnNlcyB3aXRob3V0IF9saW5rcy5cbiAgICAvLyBXaXRob3V0IF9saW5rcywgd2UgZW11bGF0ZSBjYW5jZWwgdG8gbWFrZSBpdCBpbnR1aXRpdmVcbiAgICAvLyB0byByZXR1cm4gdG8gdGhlIHN0YXJ0aW5nIHN0YXRlLiBXZSBtYXkgcmVtb3ZlIHRoaXNcbiAgICAvLyB3aGVuIE9LVEEtNzU0MzQgaXMgcmVzb2x2ZWRcbiAgICBpZiAocmVzLnN0YXR1cyA9PT0gJ1JFQ09WRVJZX0NIQUxMRU5HRScgJiYgIXJlcy5fbGlua3MpIHtcbiAgICAgIHRoaXMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgUShuZXcgQXV0aFRyYW5zYWN0aW9uKHNkaykpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRyYW5zYWN0aW9uU3RhdHVzOiB0cmFuc2FjdGlvblN0YXR1cyxcbiAgcmVzdW1lVHJhbnNhY3Rpb246IHJlc3VtZVRyYW5zYWN0aW9uLFxuICB0cmFuc2FjdGlvbkV4aXN0czogdHJhbnNhY3Rpb25FeGlzdHMsXG4gIHBvc3RUb1RyYW5zYWN0aW9uOiBwb3N0VG9UcmFuc2FjdGlvblxufTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBBdXRoUG9sbFN0b3BFcnJvcigpIHtcbiAgdGhpcy5uYW1lID0gJ0F1dGhQb2xsU3RvcEVycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gJ1RoZSBwb2xsIHdhcyBzdG9wcGVkIGJ5IHRoZSBzZGsnO1xufVxuQXV0aFBvbGxTdG9wRXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aFBvbGxTdG9wRXJyb3I7XG4iLCIvKiFcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgaHR0cCA9IHJlcXVpcmUoJy4vaHR0cCcpO1xuXG5mdW5jdGlvbiBzZXNzaW9uRXhpc3RzKHNkaykge1xuICByZXR1cm4gc2RrLnNlc3Npb24uZ2V0KClcbiAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgIGlmIChyZXMuc3RhdHVzID09PSAnQUNUSVZFJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KVxuICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTZXNzaW9uKHNkaykgeyBcbiAgcmV0dXJuIGh0dHAuZ2V0KHNkaywgJy9hcGkvdjEvc2Vzc2lvbnMvbWUnKVxuICAudGhlbihmdW5jdGlvbihzZXNzaW9uKSB7XG4gICAgdmFyIHJlcyA9IHV0aWwub21pdChzZXNzaW9uLCAnX2xpbmtzJyk7XG5cbiAgICByZXMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGh0dHAucG9zdChzZGssIHV0aWwuZ2V0TGluayhzZXNzaW9uLCAncmVmcmVzaCcpLmhyZWYpO1xuICAgIH07XG5cbiAgICByZXMudXNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGh0dHAuZ2V0KHNkaywgdXRpbC5nZXRMaW5rKHNlc3Npb24sICd1c2VyJykuaHJlZik7XG4gICAgfTtcblxuICAgIHJldHVybiByZXM7XG4gIH0pXG4gIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgIC8vIFJldHVybiBJTkFDVElWRSBzdGF0dXMgb24gZmFpbHVyZVxuICAgIHJldHVybiB7c3RhdHVzOiAnSU5BQ1RJVkUnfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlU2Vzc2lvbihzZGspIHtcbiAgcmV0dXJuIGh0dHAuaHR0cFJlcXVlc3Qoc2RrLCB7XG4gICAgdXJsOiBzZGsub3B0aW9ucy51cmwgKyAnL2FwaS92MS9zZXNzaW9ucy9tZScsXG4gICAgbWV0aG9kOiAnREVMRVRFJ1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaFNlc3Npb24oc2RrKSB7XG4gIHJldHVybiBodHRwLnBvc3Qoc2RrLCAnL2FwaS92MS9zZXNzaW9ucy9tZS9saWZlY3ljbGUvcmVmcmVzaCcpO1xufVxuXG5mdW5jdGlvbiBzZXRDb29raWVBbmRSZWRpcmVjdChzZGssIHNlc3Npb25Ub2tlbiwgcmVkaXJlY3RVcmwpIHtcbiAgcmVkaXJlY3RVcmwgPSByZWRpcmVjdFVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgd2luZG93LmxvY2F0aW9uID0gc2RrLm9wdGlvbnMudXJsICsgJy9sb2dpbi9zZXNzaW9uQ29va2llUmVkaXJlY3QnICtcbiAgICB1dGlsLnRvUXVlcnlQYXJhbXMoe1xuICAgICAgY2hlY2tBY2NvdW50U2V0dXBDb21wbGV0ZTogdHJ1ZSxcbiAgICAgIHRva2VuOiBzZXNzaW9uVG9rZW4sXG4gICAgICByZWRpcmVjdFVybDogcmVkaXJlY3RVcmxcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNlc3Npb25FeGlzdHM6IHNlc3Npb25FeGlzdHMsXG4gIGdldFNlc3Npb246IGdldFNlc3Npb24sXG4gIGNsb3NlU2Vzc2lvbjogY2xvc2VTZXNzaW9uLFxuICByZWZyZXNoU2Vzc2lvbjogcmVmcmVzaFNlc3Npb24sXG4gIHNldENvb2tpZUFuZFJlZGlyZWN0OiBzZXRDb29raWVBbmRSZWRpcmVjdFxufTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSwgbWF4LXN0YXRlbWVudHMgKi9cbnZhciBodHRwICAgICAgICAgID0gcmVxdWlyZSgnLi9odHRwJyk7XG52YXIgdXRpbCAgICAgICAgICA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIG9hdXRoVXRpbCAgICAgPSByZXF1aXJlKCcuL29hdXRoVXRpbCcpO1xudmFyIFEgICAgICAgICAgICAgPSByZXF1aXJlKCdxJyk7XG52YXIgc2RrQ3J5cHRvICAgICA9IHJlcXVpcmUoJy4vY3J5cHRvJyk7XG52YXIgQXV0aFNka0Vycm9yICA9IHJlcXVpcmUoJy4vZXJyb3JzL0F1dGhTZGtFcnJvcicpO1xudmFyIE9BdXRoRXJyb3IgICAgPSByZXF1aXJlKCcuL2Vycm9ycy9PQXV0aEVycm9yJyk7XG52YXIgY29uZmlnICAgICAgICA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG52YXIgY29va2llcyAgICAgICA9IHJlcXVpcmUoJy4vY29va2llcycpO1xuXG5mdW5jdGlvbiBkZWNvZGVUb2tlbih0b2tlbikge1xuICB2YXIgand0ID0gdG9rZW4uc3BsaXQoJy4nKTtcbiAgdmFyIGRlY29kZWRUb2tlbjtcblxuICB0cnkge1xuICAgIGRlY29kZWRUb2tlbiA9IHtcbiAgICAgIGhlYWRlcjogSlNPTi5wYXJzZSh1dGlsLmJhc2U2NFVybFRvU3RyaW5nKGp3dFswXSkpLFxuICAgICAgcGF5bG9hZDogSlNPTi5wYXJzZSh1dGlsLmJhc2U2NFVybFRvU3RyaW5nKGp3dFsxXSkpLFxuICAgICAgc2lnbmF0dXJlOiBqd3RbMl1cbiAgICB9O1xuICB9IGNhdGNoKGUpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdNYWxmb3JtZWQgdG9rZW4nKTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkVG9rZW47XG59XG5cbmZ1bmN0aW9uIHZlcmlmeVRva2VuKHNkaywgdG9rZW4sIHZhbGlkYXRpb25QYXJhbXMpIHtcbiAgcmV0dXJuIG5ldyBRKClcbiAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0b2tlbiB8fCAhdG9rZW4uaWRUb2tlbikge1xuICAgICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignT25seSBpZFRva2VucyBtYXkgYmUgdmVyaWZpZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgand0ID0gZGVjb2RlVG9rZW4odG9rZW4uaWRUb2tlbik7XG5cbiAgICB2YXIgdmFsaWRhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBjbGllbnRJZDogc2RrLm9wdGlvbnMuY2xpZW50SWQsXG4gICAgICBpc3N1ZXI6IHNkay5vcHRpb25zLmlzc3VlciB8fCBzZGsub3B0aW9ucy51cmwsXG4gICAgICBpZ25vcmVTaWduYXR1cmU6IHNkay5vcHRpb25zLmlnbm9yZVNpZ25hdHVyZVxuICAgIH07XG5cbiAgICB1dGlsLmV4dGVuZCh2YWxpZGF0aW9uT3B0aW9ucywgdmFsaWRhdGlvblBhcmFtcyk7XG5cbiAgICAvLyBTdGFuZGFyZCBjbGFpbSB2YWxpZGF0aW9uXG4gICAgb2F1dGhVdGlsLnZhbGlkYXRlQ2xhaW1zKHNkaywgand0LnBheWxvYWQsIHZhbGlkYXRpb25PcHRpb25zKTtcblxuICAgIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBuYXRpdmUgY3J5cHRvIG9yIHdlIGNob29zZSBub3RcbiAgICAvLyB0byB2ZXJpZnkgdGhlIHNpZ25hdHVyZSwgYmFpbCBlYXJseVxuICAgIGlmICh2YWxpZGF0aW9uT3B0aW9ucy5pZ25vcmVTaWduYXR1cmUgPT0gdHJ1ZSB8fCAhc2RrLmZlYXR1cmVzLmlzVG9rZW5WZXJpZnlTdXBwb3J0ZWQoKSkge1xuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cblxuICAgIHJldHVybiBvYXV0aFV0aWwuZ2V0S2V5KHNkaywgdG9rZW4uaXNzdWVyLCBqd3QuaGVhZGVyLmtpZClcbiAgICAudGhlbihmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBzZGtDcnlwdG8udmVyaWZ5VG9rZW4odG9rZW4uaWRUb2tlbiwga2V5KTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uKHZhbGlkKSB7XG4gICAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ1RoZSB0b2tlbiBzaWduYXR1cmUgaXMgbm90IHZhbGlkJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRQb3N0TWVzc2FnZUxpc3RlbmVyKHNkaywgdGltZW91dCwgc3RhdGUpIHtcbiAgdmFyIGRlZmVycmVkID0gUS5kZWZlcigpO1xuXG4gIGZ1bmN0aW9uIHJlc3BvbnNlSGFuZGxlcihlKSB7XG4gICAgaWYgKCFlLmRhdGEgfHxcbiAgICAgICAgZS5vcmlnaW4gIT09IHNkay5vcHRpb25zLnVybCB8fFxuICAgICAgICAoZS5kYXRhICYmIHV0aWwuaXNTdHJpbmcoc3RhdGUpICYmIGUuZGF0YS5zdGF0ZSAhPT0gc3RhdGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlZmVycmVkLnJlc29sdmUoZS5kYXRhKTtcbiAgfVxuXG4gIG9hdXRoVXRpbC5hZGRMaXN0ZW5lcih3aW5kb3csICdtZXNzYWdlJywgcmVzcG9uc2VIYW5kbGVyKTtcblxuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZS50aW1lb3V0KHRpbWVvdXQgfHwgMTIwMDAwLCBuZXcgQXV0aFNka0Vycm9yKCdPQXV0aCBmbG93IHRpbWVkIG91dCcpKVxuICAgIC5maW4oZnVuY3Rpb24oKSB7XG4gICAgICBvYXV0aFV0aWwucmVtb3ZlTGlzdGVuZXIod2luZG93LCAnbWVzc2FnZScsIHJlc3BvbnNlSGFuZGxlcik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEZyYWdtZW50TGlzdGVuZXIoc2RrLCB3aW5kb3dFbCwgdGltZW91dCkge1xuICB2YXIgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cbiAgZnVuY3Rpb24gaGFzaENoYW5nZUhhbmRsZXIoKSB7XG4gICAgLypcbiAgICAgIFdlIGFyZSBvbmx5IGFibGUgdG8gYWNjZXNzIHdpbmRvdy5sb2NhdGlvbi5oYXNoIG9uIGEgd2luZG93XG4gICAgICB0aGF0IGhhcyB0aGUgc2FtZSBkb21haW4uIEEgdHJ5L2NhdGNoIGlzIG5lY2Vzc2FyeSBiZWNhdXNlXG4gICAgICB0aGVyZSdzIG5vIG90aGVyIHdheSB0byBkZXRlcm1pbmUgdGhhdCB0aGUgcG9wdXAgaXMgaW5cbiAgICAgIGFub3RoZXIgZG9tYWluLiBXaGVuIHdlIHRyeSB0byBhY2Nlc3MgYSB3aW5kb3cgb24gYW5vdGhlclxuICAgICAgZG9tYWluLCBhbiBlcnJvciBpcyB0aHJvd24uXG4gICAgKi9cbiAgICB0cnkge1xuICAgICAgaWYgKHdpbmRvd0VsICYmXG4gICAgICAgICAgd2luZG93RWwubG9jYXRpb24gJiZcbiAgICAgICAgICB3aW5kb3dFbC5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUob2F1dGhVdGlsLmhhc2hUb09iamVjdCh3aW5kb3dFbC5sb2NhdGlvbi5oYXNoKSk7XG4gICAgICB9IGVsc2UgaWYgKHdpbmRvd0VsICYmICF3aW5kb3dFbC5jbG9zZWQpIHtcbiAgICAgICAgc2V0VGltZW91dChoYXNoQ2hhbmdlSGFuZGxlciwgNTAwKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHNldFRpbWVvdXQoaGFzaENoYW5nZUhhbmRsZXIsIDUwMCk7XG4gICAgfVxuICB9XG5cbiAgaGFzaENoYW5nZUhhbmRsZXIoKTtcblxuICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZS50aW1lb3V0KHRpbWVvdXQgfHwgMTIwMDAwLCBuZXcgQXV0aFNka0Vycm9yKCdPQXV0aCBmbG93IHRpbWVkIG91dCcpKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlT0F1dGhSZXNwb25zZShzZGssIG9hdXRoUGFyYW1zLCByZXMsIHVybHMpIHtcbiAgdXJscyA9IHVybHMgfHwge307XG5cbiAgdmFyIHRva2VuVHlwZXMgPSBvYXV0aFBhcmFtcy5yZXNwb25zZVR5cGU7XG4gIHZhciBzY29wZXMgPSB1dGlsLmNsb25lKG9hdXRoUGFyYW1zLnNjb3Blcyk7XG4gIHZhciBjbGllbnRJZCA9IG9hdXRoUGFyYW1zLmNsaWVudElkIHx8IHNkay5vcHRpb25zLmNsaWVudElkO1xuXG4gIHJldHVybiBuZXcgUSgpXG4gIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgIGlmIChyZXNbJ2Vycm9yJ10gfHwgcmVzWydlcnJvcl9kZXNjcmlwdGlvbiddKSB7XG4gICAgICB0aHJvdyBuZXcgT0F1dGhFcnJvcihyZXNbJ2Vycm9yJ10sIHJlc1snZXJyb3JfZGVzY3JpcHRpb24nXSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5zdGF0ZSAhPT0gb2F1dGhQYXJhbXMuc3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ09BdXRoIGZsb3cgcmVzcG9uc2Ugc3RhdGUgZG9lc25cXCd0IG1hdGNoIHJlcXVlc3Qgc3RhdGUnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5EaWN0ID0ge307XG5cbiAgICBpZiAocmVzWydhY2Nlc3NfdG9rZW4nXSkge1xuICAgICAgdG9rZW5EaWN0Wyd0b2tlbiddID0ge1xuICAgICAgICBhY2Nlc3NUb2tlbjogcmVzWydhY2Nlc3NfdG9rZW4nXSxcbiAgICAgICAgZXhwaXJlc0F0OiBOdW1iZXIocmVzWydleHBpcmVzX2luJ10pICsgTWF0aC5mbG9vcihEYXRlLm5vdygpLzEwMDApLFxuICAgICAgICB0b2tlblR5cGU6IHJlc1sndG9rZW5fdHlwZSddLFxuICAgICAgICBzY29wZXM6IHNjb3BlcyxcbiAgICAgICAgYXV0aG9yaXplVXJsOiB1cmxzLmF1dGhvcml6ZVVybCxcbiAgICAgICAgdXNlcmluZm9Vcmw6IHVybHMudXNlcmluZm9VcmxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHJlc1snY29kZSddKSB7XG4gICAgICB0b2tlbkRpY3RbJ2NvZGUnXSA9IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbkNvZGU6IHJlc1snY29kZSddXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChyZXNbJ2lkX3Rva2VuJ10pIHtcbiAgICAgIHZhciBqd3QgPSBzZGsudG9rZW4uZGVjb2RlKHJlc1snaWRfdG9rZW4nXSk7XG5cbiAgICAgIHZhciBpZFRva2VuID0ge1xuICAgICAgICBpZFRva2VuOiByZXNbJ2lkX3Rva2VuJ10sXG4gICAgICAgIGNsYWltczogand0LnBheWxvYWQsXG4gICAgICAgIGV4cGlyZXNBdDogand0LnBheWxvYWQuZXhwLFxuICAgICAgICBzY29wZXM6IHNjb3BlcyxcbiAgICAgICAgYXV0aG9yaXplVXJsOiB1cmxzLmF1dGhvcml6ZVVybCxcbiAgICAgICAgaXNzdWVyOiB1cmxzLmlzc3VlcixcbiAgICAgICAgY2xpZW50SWQ6IGNsaWVudElkXG4gICAgICB9O1xuXG4gICAgICB2YXIgdmFsaWRhdGlvblBhcmFtcyA9IHtcbiAgICAgICAgY2xpZW50SWQ6IGNsaWVudElkLFxuICAgICAgICBpc3N1ZXI6IHVybHMuaXNzdWVyLFxuICAgICAgICBub25jZTogb2F1dGhQYXJhbXMubm9uY2UsXG4gICAgICAgIGlnbm9yZVNpZ25hdHVyZTogb2F1dGhQYXJhbXMuaWdub3JlU2lnbmF0dXJlXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdmVyaWZ5VG9rZW4oc2RrLCBpZFRva2VuLCB2YWxpZGF0aW9uUGFyYW1zKVxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHRva2VuRGljdFsnaWRfdG9rZW4nXSA9IGlkVG9rZW47XG4gICAgICAgIHJldHVybiB0b2tlbkRpY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW5EaWN0O1xuICB9KVxuICAudGhlbihmdW5jdGlvbih0b2tlbkRpY3QpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodG9rZW5UeXBlcykpIHtcbiAgICAgIHJldHVybiB0b2tlbkRpY3RbdG9rZW5UeXBlc107XG4gICAgfVxuXG4gICAgaWYgKCF0b2tlbkRpY3RbJ3Rva2VuJ10gJiYgIXRva2VuRGljdFsnaWRfdG9rZW4nXSkge1xuICAgICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVW5hYmxlIHRvIHBhcnNlIE9BdXRoIGZsb3cgcmVzcG9uc2UnKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgdG9rZW4gYXJyYXkgaW4gdGhlIG9yZGVyIG9mIHRoZSByZXNwb25zZVR5cGUgYXJyYXlcbiAgICByZXR1cm4gdG9rZW5UeXBlcy5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIHRva2VuRGljdFtpdGVtXTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRPQXV0aFBhcmFtcyhzZGssIG9hdXRoT3B0aW9ucykge1xuICBvYXV0aE9wdGlvbnMgPSB1dGlsLmNsb25lKG9hdXRoT3B0aW9ucykgfHwge307XG5cbiAgdmFyIGRlZmF1bHRzID0ge1xuICAgIGNsaWVudElkOiBzZGsub3B0aW9ucy5jbGllbnRJZCxcbiAgICByZWRpcmVjdFVyaTogc2RrLm9wdGlvbnMucmVkaXJlY3RVcmkgfHwgd2luZG93LmxvY2F0aW9uLmhyZWYsXG4gICAgcmVzcG9uc2VUeXBlOiAnaWRfdG9rZW4nLFxuICAgIHJlc3BvbnNlTW9kZTogJ29rdGFfcG9zdF9tZXNzYWdlJyxcbiAgICBzdGF0ZTogdXRpbC5nZW5SYW5kb21TdHJpbmcoNjQpLFxuICAgIG5vbmNlOiB1dGlsLmdlblJhbmRvbVN0cmluZyg2NCksXG4gICAgc2NvcGVzOiBbJ29wZW5pZCcsICdlbWFpbCddLFxuICAgIGlnbm9yZVNpZ25hdHVyZTogc2RrLm9wdGlvbnMuaWdub3JlU2lnbmF0dXJlXG4gIH07XG4gIHV0aWwuZXh0ZW5kKGRlZmF1bHRzLCBvYXV0aE9wdGlvbnMpO1xuICByZXR1cm4gZGVmYXVsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRPQXV0aFBhcmFtc1RvUXVlcnlQYXJhbXMob2F1dGhQYXJhbXMpIHtcbiAgLy8gUXVpY2sgdmFsaWRhdGlvblxuICBpZiAoIW9hdXRoUGFyYW1zLmNsaWVudElkKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignQSBjbGllbnRJZCBtdXN0IGJlIHNwZWNpZmllZCBpbiB0aGUgT2t0YUF1dGggY29uc3RydWN0b3IgdG8gZ2V0IGEgdG9rZW4nKTtcbiAgfVxuXG4gIGlmICh1dGlsLmlzU3RyaW5nKG9hdXRoUGFyYW1zLnJlc3BvbnNlVHlwZSkgJiYgb2F1dGhQYXJhbXMucmVzcG9uc2VUeXBlLmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdNdWx0aXBsZSBPQXV0aCByZXNwb25zZVR5cGVzIG11c3QgYmUgZGVmaW5lZCBhcyBhbiBhcnJheScpO1xuICB9XG5cbiAgLy8gQ29udmVydCBvdXIgcGFyYW1zIHRvIHRoZWlyIGFjdHVhbCBPQXV0aCBlcXVpdmFsZW50c1xuICB2YXIgb2F1dGhRdWVyeVBhcmFtcyA9IHV0aWwucmVtb3ZlTmlscyh7XG4gICAgJ2NsaWVudF9pZCc6IG9hdXRoUGFyYW1zLmNsaWVudElkLFxuICAgICdyZWRpcmVjdF91cmknOiBvYXV0aFBhcmFtcy5yZWRpcmVjdFVyaSxcbiAgICAncmVzcG9uc2VfdHlwZSc6IG9hdXRoUGFyYW1zLnJlc3BvbnNlVHlwZSxcbiAgICAncmVzcG9uc2VfbW9kZSc6IG9hdXRoUGFyYW1zLnJlc3BvbnNlTW9kZSxcbiAgICAnc3RhdGUnOiBvYXV0aFBhcmFtcy5zdGF0ZSxcbiAgICAnbm9uY2UnOiBvYXV0aFBhcmFtcy5ub25jZSxcbiAgICAncHJvbXB0Jzogb2F1dGhQYXJhbXMucHJvbXB0LFxuICAgICdkaXNwbGF5Jzogb2F1dGhQYXJhbXMuZGlzcGxheSxcbiAgICAnc2Vzc2lvblRva2VuJzogb2F1dGhQYXJhbXMuc2Vzc2lvblRva2VuLFxuICAgICdpZHAnOiBvYXV0aFBhcmFtcy5pZHAsXG4gICAgJ21heF9hZ2UnOiBvYXV0aFBhcmFtcy5tYXhBZ2VcbiAgfSk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob2F1dGhRdWVyeVBhcmFtc1sncmVzcG9uc2VfdHlwZSddKSkge1xuICAgIG9hdXRoUXVlcnlQYXJhbXNbJ3Jlc3BvbnNlX3R5cGUnXSA9IG9hdXRoUXVlcnlQYXJhbXNbJ3Jlc3BvbnNlX3R5cGUnXS5qb2luKCcgJyk7XG4gIH1cblxuICBpZiAob2F1dGhQYXJhbXMucmVzcG9uc2VUeXBlLmluZGV4T2YoJ2lkX3Rva2VuJykgIT09IC0xICYmXG4gICAgICBvYXV0aFBhcmFtcy5zY29wZXMuaW5kZXhPZignb3BlbmlkJykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignb3BlbmlkIHNjb3BlIG11c3QgYmUgc3BlY2lmaWVkIGluIHRoZSBzY29wZXMgYXJndW1lbnQgd2hlbiByZXF1ZXN0aW5nIGFuIGlkX3Rva2VuJyk7XG4gIH0gZWxzZSB7XG4gICAgb2F1dGhRdWVyeVBhcmFtcy5zY29wZSA9IG9hdXRoUGFyYW1zLnNjb3Blcy5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gb2F1dGhRdWVyeVBhcmFtcztcbn1cblxuZnVuY3Rpb24gYnVpbGRBdXRob3JpemVQYXJhbXMob2F1dGhQYXJhbXMpIHtcbiAgdmFyIG9hdXRoUXVlcnlQYXJhbXMgPSBjb252ZXJ0T0F1dGhQYXJhbXNUb1F1ZXJ5UGFyYW1zKG9hdXRoUGFyYW1zKTtcbiAgcmV0dXJuIHV0aWwudG9RdWVyeVBhcmFtcyhvYXV0aFF1ZXJ5UGFyYW1zKTtcbn1cblxuLypcbiAqIFJldHJpZXZlIGFuIGlkVG9rZW4gZnJvbSBhbiBPa3RhIG9yIGEgdGhpcmQgcGFydHkgaWRwXG4gKlxuICogVHdvIG1haW4gZmxvd3M6XG4gKlxuICogIDEpIEV4Y2hhbmdlIGEgc2Vzc2lvblRva2VuIGZvciBhIHRva2VuXG4gKlxuICogICAgUmVxdWlyZWQ6XG4gKiAgICAgIGNsaWVudElkOiBwYXNzZWQgdmlhIHRoZSBPa3RhQXV0aCBjb25zdHJ1Y3RvciBvciBpbnRvIGdldFRva2VuXG4gKiAgICAgIHNlc3Npb25Ub2tlbjogJ3lvdXJ0b2tlbidcbiAqXG4gKiAgICBPcHRpb25hbDpcbiAqICAgICAgcmVkaXJlY3RVcmk6IGRlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gKiAgICAgIHNjb3BlczogZGVmYXVsdHMgdG8gWydvcGVuaWQnLCAnZW1haWwnXVxuICpcbiAqICAgIEZvcmNlZDpcbiAqICAgICAgcHJvbXB0OiAnbm9uZSdcbiAqICAgICAgcmVzcG9uc2VNb2RlOiAnb2t0YV9wb3N0X21lc3NhZ2UnXG4gKiAgICAgIGRpc3BsYXk6IHVuZGVmaW5lZFxuICpcbiAqICAyKSBHZXQgYSB0b2tlbiBmcm9tIGFuIGlkcFxuICpcbiAqICAgIFJlcXVpcmVkOlxuICogICAgICBjbGllbnRJZDogcGFzc2VkIHZpYSB0aGUgT2t0YUF1dGggY29uc3RydWN0b3Igb3IgaW50byBnZXRUb2tlblxuICpcbiAqICAgIE9wdGlvbmFsOlxuICogICAgICByZWRpcmVjdFVyaTogZGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLmhyZWZcbiAqICAgICAgc2NvcGVzOiBkZWZhdWx0cyB0byBbJ29wZW5pZCcsICdlbWFpbCddXG4gKiAgICAgIGlkcDogZGVmYXVsdHMgdG8gT2t0YSBhcyBhbiBpZHBcbiAqICAgICAgcHJvbXB0OiBubyBkZWZhdWx0LiBQYXNzICdub25lJyB0byB0aHJvdyBhbiBlcnJvciBpZiB1c2VyIGlzIG5vdCBzaWduZWQgaW5cbiAqXG4gKiAgICBGb3JjZWQ6XG4gKiAgICAgIGRpc3BsYXk6ICdwb3B1cCdcbiAqXG4gKiAgT25seSBjb21tb24gb3B0aW9uYWwgcGFyYW1zIHNob3duLiBBbnkgT0F1dGggcGFyYW1ldGVycyBub3QgZXhwbGljaXRseSBmb3JjZWQgYXJlIGF2YWlsYWJsZSB0byBvdmVycmlkZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYXV0aE9wdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb2F1dGhPcHRpb25zLmNsaWVudElkXSBJRCBvZiB0aGlzIGNsaWVudFxuICogQHBhcmFtIHtTdHJpbmd9IFtvYXV0aE9wdGlvbnMucmVkaXJlY3RVcmldIFVSSSB0aGF0IHRoZSBpZnJhbWUgb3IgcG9wdXAgd2lsbCBnbyB0byBvbmNlIGF1dGhlbnRpY2F0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nW119IFtvYXV0aE9wdGlvbnMuc2NvcGVzXSBPQXV0aCAyLjAgc2NvcGVzIHRvIHJlcXVlc3QgKG9wZW5pZCBtdXN0IGJlIHNwZWNpZmllZClcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb2F1dGhPcHRpb25zLmlkcF0gSUQgb2YgYW4gZXh0ZXJuYWwgSWRQIHRvIHVzZSBmb3IgdXNlciBhdXRoZW50aWNhdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtvYXV0aE9wdGlvbnMuc2Vzc2lvblRva2VuXSBCb290c3RyYXAgU2Vzc2lvbiBUb2tlbiByZXR1cm5lZCBieSB0aGUgT2t0YSBBdXRoZW50aWNhdGlvbiBBUElcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb2F1dGhPcHRpb25zLnByb21wdF0gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBPa3RhIGxvZ2luIHdpbGwgYmUgZGlzcGxheWVkIG9uIGZhaWx1cmUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZSAnbm9uZScgdG8gcHJldmVudCB0aGlzIGJlaGF2aW9yXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7SW50ZWdlcn0gW29wdGlvbnMudGltZW91dF0gVGltZSBpbiBtcyBiZWZvcmUgdGhlIGZsb3cgaXMgYXV0b21hdGljYWxseSB0ZXJtaW5hdGVkLiBEZWZhdWx0cyB0byAxMjAwMDBcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5wb3B1cFRpdGxlXSBUaXRsZSBkaXNwYXllZCBpbiB0aGUgcG9wdXAuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gJ0V4dGVybmFsIElkZW50aXR5IFByb3ZpZGVyIFVzZXIgQXV0aGVudGljYXRpb24nXG4gKi9cbmZ1bmN0aW9uIGdldFRva2VuKHNkaywgb2F1dGhPcHRpb25zLCBvcHRpb25zKSB7XG4gIG9hdXRoT3B0aW9ucyA9IG9hdXRoT3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRGVmYXVsdCBPQXV0aCBxdWVyeSBwYXJhbXNcbiAgdmFyIG9hdXRoUGFyYW1zID0gZ2V0RGVmYXVsdE9BdXRoUGFyYW1zKHNkaywgb2F1dGhPcHRpb25zKTtcblxuICAvLyBTdGFydCBvdmVycmlkaW5nIGFueSBvcHRpb25zIHRoYXQgZG9uJ3QgbWFrZSBzZW5zZVxuICB2YXIgc2Vzc2lvblRva2VuT3ZlcnJpZGVzID0ge1xuICAgIHByb21wdDogJ25vbmUnLFxuICAgIHJlc3BvbnNlTW9kZTogJ29rdGFfcG9zdF9tZXNzYWdlJyxcbiAgICBkaXNwbGF5OiBudWxsXG4gIH07XG5cbiAgdmFyIGlkcE92ZXJyaWRlcyA9IHtcbiAgICBkaXNwbGF5OiAncG9wdXAnXG4gIH07XG5cbiAgaWYgKG9hdXRoT3B0aW9ucy5zZXNzaW9uVG9rZW4pIHtcbiAgICB1dGlsLmV4dGVuZChvYXV0aFBhcmFtcywgc2Vzc2lvblRva2VuT3ZlcnJpZGVzKTtcbiAgfSBlbHNlIGlmIChvYXV0aE9wdGlvbnMuaWRwKSB7XG4gICAgdXRpbC5leHRlbmQob2F1dGhQYXJhbXMsIGlkcE92ZXJyaWRlcyk7XG4gIH1cblxuICAvLyBVc2UgdGhlIHF1ZXJ5IHBhcmFtcyB0byBidWlsZCB0aGUgYXV0aG9yaXplIHVybFxuICB2YXIgcmVxdWVzdFVybCxcbiAgICAgIHVybHM7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGF1dGhvcml6ZVVybCBhbmQgaXNzdWVyXG4gICAgdXJscyA9IG9hdXRoVXRpbC5nZXRPQXV0aFVybHMoc2RrLCBvYXV0aFBhcmFtcywgb3B0aW9ucyk7XG4gICAgcmVxdWVzdFVybCA9IHVybHMuYXV0aG9yaXplVXJsICsgYnVpbGRBdXRob3JpemVQYXJhbXMob2F1dGhQYXJhbXMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIFEucmVqZWN0KGUpO1xuICB9XG5cbiAgLy8gRGV0ZXJtaW5lIHRoZSBmbG93IHR5cGVcbiAgdmFyIGZsb3dUeXBlO1xuICBpZiAob2F1dGhQYXJhbXMuc2Vzc2lvblRva2VuIHx8IG9hdXRoUGFyYW1zLmRpc3BsYXkgPT09IG51bGwpIHtcbiAgICBmbG93VHlwZSA9ICdJRlJBTUUnO1xuICB9IGVsc2UgaWYgKG9hdXRoUGFyYW1zLmRpc3BsYXkgPT09ICdwb3B1cCcpIHtcbiAgICBmbG93VHlwZSA9ICdQT1BVUCc7XG4gIH0gZWxzZSB7XG4gICAgZmxvd1R5cGUgPSAnSU1QTElDSVQnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3JpZ2luKHVybCkge1xuICAgIHZhciBvcmlnaW5SZWdleCA9IC9eKGh0dHBzP1xcOlxcL1xcLyk/KFteOlxcLz8jXSooPzpcXDpbMC05XSspPykvO1xuICAgIHJldHVybiBvcmlnaW5SZWdleC5leGVjKHVybClbMF07XG4gIH1cblxuICAvLyBFeGVjdXRlIHRoZSBmbG93IHR5cGVcbiAgc3dpdGNoIChmbG93VHlwZSkge1xuICAgIGNhc2UgJ0lGUkFNRSc6XG4gICAgICB2YXIgaWZyYW1lUHJvbWlzZSA9IGFkZFBvc3RNZXNzYWdlTGlzdGVuZXIoc2RrLCBvcHRpb25zLnRpbWVvdXQsIG9hdXRoUGFyYW1zLnN0YXRlKTtcbiAgICAgIHZhciBpZnJhbWVFbCA9IG9hdXRoVXRpbC5sb2FkRnJhbWUocmVxdWVzdFVybCk7XG4gICAgICByZXR1cm4gaWZyYW1lUHJvbWlzZVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlT0F1dGhSZXNwb25zZShzZGssIG9hdXRoUGFyYW1zLCByZXMsIHVybHMpO1xuICAgICAgICB9KVxuICAgICAgICAuZmluKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGlmcmFtZUVsKSkge1xuICAgICAgICAgICAgaWZyYW1lRWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpZnJhbWVFbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIGNhc2UgJ1BPUFVQJzogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jYXNlLWRlY2xhcmF0aW9uc1xuICAgICAgdmFyIHBvcHVwUHJvbWlzZTtcblxuICAgICAgLy8gQWRkIGxpc3RlbmVyIG9uIHBvc3RNZXNzYWdlIGJlZm9yZSB3aW5kb3cgY3JlYXRpb24sIHNvXG4gICAgICAvLyBwb3N0TWVzc2FnZSBpc24ndCB0cmlnZ2VyZWQgYmVmb3JlIHdlJ3JlIGxpc3RlbmluZ1xuICAgICAgaWYgKG9hdXRoUGFyYW1zLnJlc3BvbnNlTW9kZSA9PT0gJ29rdGFfcG9zdF9tZXNzYWdlJykge1xuICAgICAgICBpZiAoIXNkay5mZWF0dXJlcy5pc1BvcHVwUG9zdE1lc3NhZ2VTdXBwb3J0ZWQoKSkge1xuICAgICAgICAgIHJldHVybiBRLnJlamVjdChuZXcgQXV0aFNka0Vycm9yKCdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IGhhdmUgZnVsbCBwb3N0TWVzc2FnZSBzdXBwb3J0JykpO1xuICAgICAgICB9XG4gICAgICAgIHBvcHVwUHJvbWlzZSA9IGFkZFBvc3RNZXNzYWdlTGlzdGVuZXIoc2RrLCBvcHRpb25zLnRpbWVvdXQsIG9hdXRoUGFyYW1zLnN0YXRlKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIHRoZSB3aW5kb3dcbiAgICAgIHZhciB3aW5kb3dPcHRpb25zID0ge1xuICAgICAgICBwb3B1cFRpdGxlOiBvcHRpb25zLnBvcHVwVGl0bGVcbiAgICAgIH07XG4gICAgICB2YXIgd2luZG93RWwgPSBvYXV0aFV0aWwubG9hZFBvcHVwKHJlcXVlc3RVcmwsIHdpbmRvd09wdGlvbnMpO1xuXG4gICAgICAvLyBQb2xsIHVudGlsIHdlIGdldCBhIHZhbGlkIGhhc2ggZnJhZ21lbnRcbiAgICAgIGlmIChvYXV0aFBhcmFtcy5yZXNwb25zZU1vZGUgPT09ICdmcmFnbWVudCcpIHtcbiAgICAgICAgdmFyIHdpbmRvd09yaWdpbiA9IGdldE9yaWdpbihzZGsuaWRUb2tlbi5hdXRob3JpemUuX2dldExvY2F0aW9uSHJlZigpKTtcbiAgICAgICAgdmFyIHJlZGlyZWN0VXJpT3JpZ2luID0gZ2V0T3JpZ2luKG9hdXRoUGFyYW1zLnJlZGlyZWN0VXJpKTtcbiAgICAgICAgaWYgKHdpbmRvd09yaWdpbiAhPT0gcmVkaXJlY3RVcmlPcmlnaW4pIHtcbiAgICAgICAgICByZXR1cm4gUS5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignVXNpbmcgZnJhZ21lbnQsIHRoZSByZWRpcmVjdFVyaSBvcmlnaW4gKCcgKyByZWRpcmVjdFVyaU9yaWdpbiArXG4gICAgICAgICAgICAnKSBtdXN0IG1hdGNoIHRoZSBvcmlnaW4gb2YgdGhpcyBwYWdlICgnICsgd2luZG93T3JpZ2luICsgJyknKSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9wdXBQcm9taXNlID0gYWRkRnJhZ21lbnRMaXN0ZW5lcihzZGssIHdpbmRvd0VsLCBvcHRpb25zLnRpbWVvdXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBCb3RoIHBvc3RNZXNzYWdlIGFuZCBmcmFnbWVudCByZXF1aXJlIGEgcG9sbCB0byBzZWUgaWYgdGhlIHBvcHVwIGNsb3NlZFxuICAgICAgdmFyIHBvcHVwRGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gICAgICBmdW5jdGlvbiBoYXNDbG9zZWQod2luKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW5uZXItZGVjbGFyYXRpb25zXG4gICAgICAgIGlmICh3aW4uY2xvc2VkKSB7XG4gICAgICAgICAgcG9wdXBEZWZlcnJlZC5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignVW5hYmxlIHRvIHBhcnNlIE9BdXRoIGZsb3cgcmVzcG9uc2UnKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjbG9zZVBvbGxlciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICBoYXNDbG9zZWQod2luZG93RWwpO1xuICAgICAgfSwgNTAwKTtcblxuICAgICAgLy8gUHJveHkgdGhlIHByb21pc2UgcmVzdWx0cyBpbnRvIHRoZSBkZWZlcnJlZFxuICAgICAgcG9wdXBQcm9taXNlXG4gICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgcG9wdXBEZWZlcnJlZC5yZXNvbHZlKHJlcyk7XG4gICAgICB9KVxuICAgICAgLmZhaWwoZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHBvcHVwRGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHBvcHVwRGVmZXJyZWQucHJvbWlzZVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlT0F1dGhSZXNwb25zZShzZGssIG9hdXRoUGFyYW1zLCByZXMsIHVybHMpO1xuICAgICAgICB9KVxuICAgICAgICAuZmluKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmICghd2luZG93RWwuY2xvc2VkKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGNsb3NlUG9sbGVyKTtcbiAgICAgICAgICAgIHdpbmRvd0VsLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gUS5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignVGhlIGZ1bGwgcGFnZSByZWRpcmVjdCBmbG93IGlzIG5vdCBzdXBwb3J0ZWQnKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0V2l0aG91dFByb21wdChzZGssIG9hdXRoT3B0aW9ucywgb3B0aW9ucykge1xuICB2YXIgb2F1dGhQYXJhbXMgPSB1dGlsLmNsb25lKG9hdXRoT3B0aW9ucykgfHwge307XG4gIHV0aWwuZXh0ZW5kKG9hdXRoUGFyYW1zLCB7XG4gICAgcHJvbXB0OiAnbm9uZScsXG4gICAgcmVzcG9uc2VNb2RlOiAnb2t0YV9wb3N0X21lc3NhZ2UnLFxuICAgIGRpc3BsYXk6IG51bGxcbiAgfSk7XG4gIHJldHVybiBnZXRUb2tlbihzZGssIG9hdXRoUGFyYW1zLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2l0aFBvcHVwKHNkaywgb2F1dGhPcHRpb25zLCBvcHRpb25zKSB7XG4gIHZhciBvYXV0aFBhcmFtcyA9IHV0aWwuY2xvbmUob2F1dGhPcHRpb25zKSB8fCB7fTtcbiAgdXRpbC5leHRlbmQob2F1dGhQYXJhbXMsIHtcbiAgICBkaXNwbGF5OiAncG9wdXAnXG4gIH0pO1xuICByZXR1cm4gZ2V0VG9rZW4oc2RrLCBvYXV0aFBhcmFtcywgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhSZWRpcmVjdChzZGssIG9hdXRoT3B0aW9ucywgb3B0aW9ucykge1xuICBvYXV0aE9wdGlvbnMgPSB1dGlsLmNsb25lKG9hdXRoT3B0aW9ucykgfHwge307XG4gIHZhciBvYXV0aFBhcmFtcyA9IGdldERlZmF1bHRPQXV0aFBhcmFtcyhzZGssIG9hdXRoT3B0aW9ucyk7XG4gIC8vIElmIHRoZSB1c2VyIGRpZG4ndCBzcGVjaWZ5IGEgcmVzcG9uc2VNb2RlXG4gIGlmICghb2F1dGhPcHRpb25zLnJlc3BvbnNlTW9kZSkge1xuICAgIC8vIEFuZCBpdCdzIG9ubHkgYW4gYXV0aCBjb2RlIHJlcXVlc3QgKHJlc3BvbnNlVHlwZSBjb3VsZCBiZSBhbiBhcnJheSlcbiAgICB2YXIgcmVzcFR5cGUgPSBvYXV0aFBhcmFtcy5yZXNwb25zZVR5cGU7XG4gICAgaWYgKHJlc3BUeXBlLmluZGV4T2YoJ2NvZGUnKSAhPT0gLTEgJiZcbiAgICAgICAgKHV0aWwuaXNTdHJpbmcocmVzcFR5cGUpIHx8IChBcnJheS5pc0FycmF5KHJlc3BUeXBlKSAmJiByZXNwVHlwZS5sZW5ndGggPT09IDEpKSkge1xuICAgICAgICAvLyBEZWZhdWx0IHRoZSByZXNwb25zZU1vZGUgdG8gcXVlcnlcbiAgICAgICAgdXRpbC5leHRlbmQob2F1dGhQYXJhbXMsIHtcbiAgICAgICAgICByZXNwb25zZU1vZGU6ICdxdWVyeSdcbiAgICAgICAgfSk7XG4gICAgLy8gT3RoZXJ3aXNlLCBkZWZhdWx0IHRvIGZyYWdtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIHV0aWwuZXh0ZW5kKG9hdXRoUGFyYW1zLCB7XG4gICAgICAgIHJlc3BvbnNlTW9kZTogJ2ZyYWdtZW50J1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHVybHMgPSBvYXV0aFV0aWwuZ2V0T0F1dGhVcmxzKHNkaywgb2F1dGhQYXJhbXMsIG9wdGlvbnMpO1xuICB2YXIgcmVxdWVzdFVybCA9IHVybHMuYXV0aG9yaXplVXJsICsgYnVpbGRBdXRob3JpemVQYXJhbXMob2F1dGhQYXJhbXMpO1xuXG4gIC8vIFNldCBzZXNzaW9uIGNvb2tpZSB0byBzdG9yZSB0aGUgb2F1dGhQYXJhbXNcbiAgY29va2llcy5zZXRDb29raWUoY29uZmlnLlJFRElSRUNUX09BVVRIX1BBUkFNU19DT09LSUVfTkFNRSwgSlNPTi5zdHJpbmdpZnkoe1xuICAgIHJlc3BvbnNlVHlwZTogb2F1dGhQYXJhbXMucmVzcG9uc2VUeXBlLFxuICAgIHN0YXRlOiBvYXV0aFBhcmFtcy5zdGF0ZSxcbiAgICBub25jZTogb2F1dGhQYXJhbXMubm9uY2UsXG4gICAgc2NvcGVzOiBvYXV0aFBhcmFtcy5zY29wZXMsXG4gICAgY2xpZW50SWQ6IG9hdXRoUGFyYW1zLmNsaWVudElkLFxuICAgIHVybHM6IHVybHNcbiAgfSkpO1xuXG4gIC8vIFNldCBub25jZSBjb29raWUgZm9yIHNlcnZlcnMgdG8gdmFsaWRhdGUgbm9uY2UgaW4gaWRfdG9rZW5cbiAgY29va2llcy5zZXRDb29raWUoY29uZmlnLlJFRElSRUNUX05PTkNFX0NPT0tJRV9OQU1FLCBvYXV0aFBhcmFtcy5ub25jZSk7XG5cbiAgLy8gU2V0IHN0YXRlIGNvb2tpZSBmb3Igc2VydmVycyB0byB2YWxpZGF0ZSBzdGF0ZVxuICBjb29raWVzLnNldENvb2tpZShjb25maWcuUkVESVJFQ1RfU1RBVEVfQ09PS0lFX05BTUUsIG9hdXRoUGFyYW1zLnN0YXRlKTtcblxuICBzZGsudG9rZW4uZ2V0V2l0aFJlZGlyZWN0Ll9zZXRMb2NhdGlvbihyZXF1ZXN0VXJsKTtcbn1cblxuZnVuY3Rpb24gcmVuZXdUb2tlbihzZGssIHRva2VuKSB7XG4gIGlmICghb2F1dGhVdGlsLmlzVG9rZW4odG9rZW4pKSB7XG4gICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ1JlbmV3IG11c3QgYmUgcGFzc2VkIGEgdG9rZW4gd2l0aCAnICtcbiAgICAgICdhbiBhcnJheSBvZiBzY29wZXMgYW5kIGFuIGFjY2Vzc1Rva2VuIG9yIGlkVG9rZW4nKSk7XG4gIH1cblxuICB2YXIgcmVzcG9uc2VUeXBlO1xuICBpZiAodG9rZW4uYWNjZXNzVG9rZW4pIHtcbiAgICByZXNwb25zZVR5cGUgPSAndG9rZW4nO1xuICB9IGVsc2Uge1xuICAgIHJlc3BvbnNlVHlwZSA9ICdpZF90b2tlbic7XG4gIH1cbiAgcmV0dXJuIHNkay50b2tlbi5nZXRXaXRob3V0UHJvbXB0KHtcbiAgICByZXNwb25zZVR5cGU6IHJlc3BvbnNlVHlwZSxcbiAgICBzY29wZXM6IHRva2VuLnNjb3Blc1xuICB9LCB7XG4gICAgYXV0aG9yaXplVXJsOiB0b2tlbi5hdXRob3JpemVVcmwsXG4gICAgdXNlcmluZm9Vcmw6IHRva2VuLnVzZXJpbmZvVXJsLFxuICAgIGlzc3VlcjogdG9rZW4uaXNzdWVyXG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVIYXNoKHNkaykge1xuICB2YXIgbmF0aXZlSGlzdG9yeSA9IHNkay50b2tlbi5wYXJzZUZyb21VcmwuX2dldEhpc3RvcnkoKTtcbiAgdmFyIG5hdGl2ZURvYyA9IHNkay50b2tlbi5wYXJzZUZyb21VcmwuX2dldERvY3VtZW50KCk7XG4gIHZhciBuYXRpdmVMb2MgPSBzZGsudG9rZW4ucGFyc2VGcm9tVXJsLl9nZXRMb2NhdGlvbigpO1xuICBpZiAobmF0aXZlSGlzdG9yeSAmJiBuYXRpdmVIaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgIG5hdGl2ZUhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG5hdGl2ZURvYy50aXRsZSwgbmF0aXZlTG9jLnBhdGhuYW1lICsgbmF0aXZlTG9jLnNlYXJjaCk7XG4gIH0gZWxzZSB7XG4gICAgbmF0aXZlTG9jLmhhc2ggPSAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUZyb21Vcmwoc2RrLCB1cmwpIHtcbiAgdmFyIG5hdGl2ZUxvYyA9IHNkay50b2tlbi5wYXJzZUZyb21VcmwuX2dldExvY2F0aW9uKCk7XG4gIHZhciBoYXNoID0gbmF0aXZlTG9jLmhhc2g7XG4gIGlmICh1cmwpIHtcbiAgICBoYXNoID0gdXJsLnN1YnN0cmluZyh1cmwuaW5kZXhPZignIycpKTtcbiAgfVxuXG4gIGlmICghaGFzaCkge1xuICAgIHJldHVybiBRLnJlamVjdChuZXcgQXV0aFNka0Vycm9yKCdVbmFibGUgdG8gcGFyc2UgYSB0b2tlbiBmcm9tIHRoZSB1cmwnKSk7XG4gIH1cblxuICB2YXIgb2F1dGhQYXJhbXNDb29raWUgPSBjb29raWVzLmdldENvb2tpZShjb25maWcuUkVESVJFQ1RfT0FVVEhfUEFSQU1TX0NPT0tJRV9OQU1FKTtcbiAgaWYgKCFvYXV0aFBhcmFtc0Nvb2tpZSkge1xuICAgIHJldHVybiBRLnJlamVjdChuZXcgQXV0aFNka0Vycm9yKCdVbmFibGUgdG8gcmV0cmlldmUgT0F1dGggcmVkaXJlY3QgcGFyYW1zIGNvb2tpZScpKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdmFyIG9hdXRoUGFyYW1zID0gSlNPTi5wYXJzZShvYXV0aFBhcmFtc0Nvb2tpZSk7XG4gICAgdmFyIHVybHMgPSBvYXV0aFBhcmFtcy51cmxzO1xuICAgIGRlbGV0ZSBvYXV0aFBhcmFtcy51cmxzO1xuICAgIGNvb2tpZXMuZGVsZXRlQ29va2llKGNvbmZpZy5SRURJUkVDVF9PQVVUSF9QQVJBTVNfQ09PS0lFX05BTUUpO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXR1cm4gUS5yZWplY3QobmV3IEF1dGhTZGtFcnJvcignVW5hYmxlIHRvIHBhcnNlIHRoZSAnICtcbiAgICAgIGNvbmZpZy5SRURJUkVDVF9PQVVUSF9QQVJBTVNfQ09PS0lFX05BTUUgKyAnIGNvb2tpZTogJyArIGUubWVzc2FnZSkpO1xuICB9XG5cbiAgcmV0dXJuIFEucmVzb2x2ZShvYXV0aFV0aWwuaGFzaFRvT2JqZWN0KGhhc2gpKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlcykge1xuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBoYXNoIGZyb20gdGhlIHVybFxuICAgICAgICByZW1vdmVIYXNoKHNkayk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFuZGxlT0F1dGhSZXNwb25zZShzZGssIG9hdXRoUGFyYW1zLCByZXMsIHVybHMpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRVc2VySW5mbyhzZGssIGFjY2Vzc1Rva2VuT2JqZWN0KSB7XG4gIGlmICghYWNjZXNzVG9rZW5PYmplY3QgfHxcbiAgICAgICghb2F1dGhVdGlsLmlzVG9rZW4oYWNjZXNzVG9rZW5PYmplY3QpICYmICFhY2Nlc3NUb2tlbk9iamVjdC5hY2Nlc3NUb2tlbiAmJiAhYWNjZXNzVG9rZW5PYmplY3QudXNlcmluZm9VcmwpKSB7XG4gICAgcmV0dXJuIFEucmVqZWN0KG5ldyBBdXRoU2RrRXJyb3IoJ2dldFVzZXJJbmZvIHJlcXVpcmVzIGFuIGFjY2VzcyB0b2tlbiBvYmplY3QnKSk7XG4gIH1cbiAgcmV0dXJuIGh0dHAuaHR0cFJlcXVlc3Qoc2RrLCB7XG4gICAgdXJsOiBhY2Nlc3NUb2tlbk9iamVjdC51c2VyaW5mb1VybCxcbiAgICBtZXRob2Q6ICdHRVQnLFxuICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbk9iamVjdC5hY2Nlc3NUb2tlblxuICB9KVxuICAuZmFpbChmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAoZXJyLnhociAmJiAoZXJyLnhoci5zdGF0dXMgPT09IDQwMSB8fCBlcnIueGhyLnN0YXR1cyA9PT0gNDAzKSkge1xuICAgICAgdmFyIGF1dGhlbnRpY2F0ZUhlYWRlciA9IGVyci54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ1dXVy1BdXRoZW50aWNhdGUnKTtcbiAgICAgIGlmIChhdXRoZW50aWNhdGVIZWFkZXIpIHtcbiAgICAgICAgdmFyIGVycm9yTWF0Y2hlcyA9IGF1dGhlbnRpY2F0ZUhlYWRlci5tYXRjaCgvZXJyb3I9XCIoLio/KVwiLykgfHwgW107XG4gICAgICAgIHZhciBlcnJvckRlc2NyaXB0aW9uTWF0Y2hlcyA9IGF1dGhlbnRpY2F0ZUhlYWRlci5tYXRjaCgvZXJyb3JfZGVzY3JpcHRpb249XCIoLio/KVwiLykgfHwgW107XG4gICAgICAgIHZhciBlcnJvciA9IGVycm9yTWF0Y2hlc1sxXTtcbiAgICAgICAgdmFyIGVycm9yRGVzY3JpcHRpb24gPSBlcnJvckRlc2NyaXB0aW9uTWF0Y2hlc1sxXTtcbiAgICAgICAgaWYgKGVycm9yICYmIGVycm9yRGVzY3JpcHRpb24pIHtcbiAgICAgICAgICBlcnIgPSBuZXcgT0F1dGhFcnJvcihlcnJvciwgZXJyb3JEZXNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldFRva2VuOiBnZXRUb2tlbixcbiAgZ2V0V2l0aG91dFByb21wdDogZ2V0V2l0aG91dFByb21wdCxcbiAgZ2V0V2l0aFBvcHVwOiBnZXRXaXRoUG9wdXAsXG4gIGdldFdpdGhSZWRpcmVjdDogZ2V0V2l0aFJlZGlyZWN0LFxuICBwYXJzZUZyb21Vcmw6IHBhcnNlRnJvbVVybCxcbiAgZGVjb2RlVG9rZW46IGRlY29kZVRva2VuLFxuICByZW5ld1Rva2VuOiByZW5ld1Rva2VuLFxuICBnZXRVc2VySW5mbzogZ2V0VXNlckluZm8sXG4gIHZlcmlmeVRva2VuOiB2ZXJpZnlUb2tlblxufTtcbiIsIi8qIVxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAqXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5mdW5jdGlvbiB2ZXJpZnlUb2tlbihpZFRva2VuLCBrZXkpIHtcbiAga2V5ID0gdXRpbC5jbG9uZShrZXkpO1xuXG4gIHZhciBmb3JtYXQgPSAnandrJztcbiAgdmFyIGFsZ28gPSB7XG4gICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9XG4gIH07XG4gIHZhciBleHRyYWN0YWJsZSA9IHRydWU7XG4gIHZhciB1c2FnZXMgPSBbJ3ZlcmlmeSddO1xuXG4gIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMjI0MjEwOC93ZWJjcnlwdG9hcGktaW1wb3J0aW5nLWp3ay13aXRoLXVzZS1maWVsZC1mYWlsc1xuICAvLyBUaGlzIGlzIGEgbWV0YWRhdGEgdGFnIHRoYXQgc3BlY2lmaWVzIHRoZSBpbnRlbnQgb2YgaG93IHRoZSBrZXkgc2hvdWxkIGJlIHVzZWQuXG4gIC8vIEl0J3Mgbm90IG5lY2Vzc2FyeSB0byBwcm9wZXJseSB2ZXJpZnkgdGhlIGp3dCdzIHNpZ25hdHVyZS5cbiAgZGVsZXRlIGtleS51c2U7XG5cbiAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgIGZvcm1hdCxcbiAgICBrZXksXG4gICAgYWxnbyxcbiAgICBleHRyYWN0YWJsZSxcbiAgICB1c2FnZXNcbiAgKVxuICAudGhlbihmdW5jdGlvbihjcnlwdG9LZXkpIHtcbiAgICB2YXIgand0ID0gaWRUb2tlbi5zcGxpdCgnLicpO1xuICAgIHZhciBwYXlsb2FkID0gdXRpbC5zdHJpbmdUb0J1ZmZlcihqd3RbMF0gKyAnLicgKyBqd3RbMV0pO1xuICAgIHZhciBiNjRTaWduYXR1cmUgPSB1dGlsLmJhc2U2NFVybERlY29kZShqd3RbMl0pO1xuICAgIHZhciBzaWduYXR1cmUgPSB1dGlsLnN0cmluZ1RvQnVmZmVyKGI2NFNpZ25hdHVyZSk7XG5cbiAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS52ZXJpZnkoXG4gICAgICBhbGdvLFxuICAgICAgY3J5cHRvS2V5LFxuICAgICAgc2lnbmF0dXJlLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmVyaWZ5VG9rZW46IHZlcmlmeVRva2VuXG59O1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIE9BdXRoRXJyb3IoZXJyb3JDb2RlLCBzdW1tYXJ5KSB7XG4gIHRoaXMubmFtZSA9ICdPQXV0aEVycm9yJztcbiAgdGhpcy5tZXNzYWdlID0gc3VtbWFyeTtcblxuICB0aGlzLmVycm9yQ29kZSA9IGVycm9yQ29kZTtcbiAgdGhpcy5lcnJvclN1bW1hcnkgPSBzdW1tYXJ5O1xufVxuT0F1dGhFcnJvci5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPQXV0aEVycm9yO1xuIiwiLyohXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgT2t0YSwgSW5jLiBhbmQvb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGUgT2t0YSBzb2Z0d2FyZSBhY2NvbXBhbmllZCBieSB0aGlzIG5vdGljZSBpcyBwcm92aWRlZCBwdXJzdWFudCB0byB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlLlwiKVxuICpcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAuXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG4vKiBlc2xpbnQgY29tcGxleGl0eTpbMCw4XSBtYXgtc3RhdGVtZW50czpbMCwyMV0gKi9cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgQXV0aFNka0Vycm9yID0gcmVxdWlyZSgnLi9lcnJvcnMvQXV0aFNka0Vycm9yJyk7XG52YXIgc3RvcmFnZVV0aWwgPSByZXF1aXJlKCcuL3N0b3JhZ2VVdGlsJyk7XG52YXIgUSA9IHJlcXVpcmUoJ3EnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgndGlueS1lbWl0dGVyJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnZhciBzdG9yYWdlQnVpbGRlciA9IHJlcXVpcmUoJy4vc3RvcmFnZUJ1aWxkZXInKTtcblxuZnVuY3Rpb24gZW1pdEV4cGlyZWQodG9rZW5NZ210UmVmLCBrZXksIHRva2VuKSB7XG4gIHRva2VuTWdtdFJlZi5lbWl0dGVyLmVtaXQoJ2V4cGlyZWQnLCBrZXksIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yKHRva2VuTWdtdFJlZiwgZXJyb3IpIHtcbiAgdG9rZW5NZ210UmVmLmVtaXR0ZXIuZW1pdCgnZXJyb3InLCBlcnJvcik7XG59XG5cbmZ1bmN0aW9uIGNsZWFyRXhwaXJlRXZlbnRUaW1lb3V0KHRva2VuTWdtdFJlZiwga2V5KSB7XG4gIGNsZWFyVGltZW91dCh0b2tlbk1nbXRSZWYuZXhwaXJlVGltZW91dHNba2V5XSk7XG4gIGRlbGV0ZSB0b2tlbk1nbXRSZWYuZXhwaXJlVGltZW91dHNba2V5XTtcblxuICAvLyBSZW1vdmUgdGhlIHJlbmV3IHByb21pc2UgKGlmIGl0IGV4aXN0cylcbiAgZGVsZXRlIHRva2VuTWdtdFJlZi5yZW5ld1Byb21pc2Vba2V5XTtcbn1cblxuZnVuY3Rpb24gY2xlYXJFeHBpcmVFdmVudFRpbWVvdXRBbGwodG9rZW5NZ210UmVmKSB7XG4gIHZhciBleHBpcmVUaW1lb3V0cyA9IHRva2VuTWdtdFJlZi5leHBpcmVUaW1lb3V0cztcbiAgZm9yICh2YXIga2V5IGluIGV4cGlyZVRpbWVvdXRzKSB7XG4gICAgaWYgKCFleHBpcmVUaW1lb3V0cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY2xlYXJFeHBpcmVFdmVudFRpbWVvdXQodG9rZW5NZ210UmVmLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEV4cGlyZUV2ZW50VGltZW91dChzZGssIHRva2VuTWdtdFJlZiwga2V5LCB0b2tlbikge1xuICB2YXIgY2xvY2tTa2V3ID0gc2RrLm9wdGlvbnMubWF4Q2xvY2tTa2V3ICogMTAwMDtcbiAgdmFyIGV4cGlyZUV2ZW50V2FpdCA9ICh0b2tlbi5leHBpcmVzQXQgKiAxMDAwKSAtIChEYXRlLm5vdygpIC0gY2xvY2tTa2V3KTtcblxuICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZW91dFxuICBjbGVhckV4cGlyZUV2ZW50VGltZW91dCh0b2tlbk1nbXRSZWYsIGtleSk7XG5cbiAgdmFyIGV4cGlyZUV2ZW50VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgZW1pdEV4cGlyZWQodG9rZW5NZ210UmVmLCBrZXksIHRva2VuKTtcbiAgfSwgZXhwaXJlRXZlbnRXYWl0KTtcblxuICAvLyBBZGQgYSBuZXcgdGltZW91dFxuICB0b2tlbk1nbXRSZWYuZXhwaXJlVGltZW91dHNba2V5XSA9IGV4cGlyZUV2ZW50VGltZW91dDtcbn1cblxuZnVuY3Rpb24gc2V0RXhwaXJlRXZlbnRUaW1lb3V0QWxsKHNkaywgdG9rZW5NZ210UmVmLCBzdG9yYWdlKSB7XG4gIHRyeSB7XG4gICAgdmFyIHRva2VuU3RvcmFnZSA9IHN0b3JhZ2UuZ2V0U3RvcmFnZSgpO1xuICB9IGNhdGNoKGUpIHtcbiAgICAvLyBBbnkgZXJyb3JzIHRocm93biBvbiBpbnN0YW50aWF0aW9uIHdpbGwgbm90IGJlIGNhdWdodCxcbiAgICAvLyBiZWNhdXNlIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMgeWV0XG4gICAgZW1pdEVycm9yKHRva2VuTWdtdFJlZiwgZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yKHZhciBrZXkgaW4gdG9rZW5TdG9yYWdlKSB7XG4gICAgaWYgKCF0b2tlblN0b3JhZ2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciB0b2tlbiA9IHRva2VuU3RvcmFnZVtrZXldO1xuICAgIHNldEV4cGlyZUV2ZW50VGltZW91dChzZGssIHRva2VuTWdtdFJlZiwga2V5LCB0b2tlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkKHNkaywgdG9rZW5NZ210UmVmLCBzdG9yYWdlLCBrZXksIHRva2VuKSB7XG4gIHZhciB0b2tlblN0b3JhZ2UgPSBzdG9yYWdlLmdldFN0b3JhZ2UoKTtcbiAgaWYgKCF1dGlsLmlzT2JqZWN0KHRva2VuKSB8fFxuICAgICAgIXRva2VuLnNjb3BlcyB8fFxuICAgICAgKCF0b2tlbi5leHBpcmVzQXQgJiYgdG9rZW4uZXhwaXJlc0F0ICE9PSAwKSB8fFxuICAgICAgKCF0b2tlbi5pZFRva2VuICYmICF0b2tlbi5hY2Nlc3NUb2tlbikpIHtcbiAgICB0aHJvdyBuZXcgQXV0aFNka0Vycm9yKCdUb2tlbiBtdXN0IGJlIGFuIE9iamVjdCB3aXRoIHNjb3BlcywgZXhwaXJlc0F0LCBhbmQgYW4gaWRUb2tlbiBvciBhY2Nlc3NUb2tlbiBwcm9wZXJ0aWVzJyk7XG4gIH1cbiAgdG9rZW5TdG9yYWdlW2tleV0gPSB0b2tlbjtcbiAgc3RvcmFnZS5zZXRTdG9yYWdlKHRva2VuU3RvcmFnZSk7XG4gIHNldEV4cGlyZUV2ZW50VGltZW91dChzZGssIHRva2VuTWdtdFJlZiwga2V5LCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGdldChzdG9yYWdlLCBrZXkpIHtcbiAgdmFyIHRva2VuU3RvcmFnZSA9IHN0b3JhZ2UuZ2V0U3RvcmFnZSgpO1xuICByZXR1cm4gdG9rZW5TdG9yYWdlW2tleV07XG59XG5cbmZ1bmN0aW9uIGdldEFzeW5jKHNkaywgdG9rZW5NZ210UmVmLCBzdG9yYWdlLCBrZXkpIHtcbiAgcmV0dXJuIFEuUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgdmFyIHRva2VuID0gZ2V0KHN0b3JhZ2UsIGtleSk7XG4gICAgdmFyIGNsb2NrU2tldyA9IHNkay5vcHRpb25zLm1heENsb2NrU2tldyAqIDEwMDA7XG4gICAgaWYgKCF0b2tlbiB8fCAodG9rZW4uZXhwaXJlc0F0ICogMTAwMCAtIGNsb2NrU2tldykgPiBEYXRlLm5vdygpKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZSh0b2tlbik7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuUHJvbWlzZSA9IHRva2VuTWdtdFJlZi5hdXRvUmVuZXdcbiAgICAgID8gcmVuZXcoc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UsIGtleSlcbiAgICAgIDogcmVtb3ZlKHRva2VuTWdtdFJlZiwgc3RvcmFnZSwga2V5KTtcblxuICAgIHJldHVybiByZXNvbHZlKHRva2VuUHJvbWlzZSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUodG9rZW5NZ210UmVmLCBzdG9yYWdlLCBrZXkpIHtcbiAgLy8gQ2xlYXIgYW55IGxpc3RlbmVyIGZvciB0aGlzIHRva2VuXG4gIGNsZWFyRXhwaXJlRXZlbnRUaW1lb3V0KHRva2VuTWdtdFJlZiwga2V5KTtcblxuICAvLyBSZW1vdmUgaXQgZnJvbSBzdG9yYWdlXG4gIHZhciB0b2tlblN0b3JhZ2UgPSBzdG9yYWdlLmdldFN0b3JhZ2UoKTtcbiAgZGVsZXRlIHRva2VuU3RvcmFnZVtrZXldO1xuICBzdG9yYWdlLnNldFN0b3JhZ2UodG9rZW5TdG9yYWdlKTtcbn1cblxuZnVuY3Rpb24gcmVuZXcoc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UsIGtleSkge1xuICB0cnkge1xuICAgIHZhciB0b2tlbiA9IGdldChzdG9yYWdlLCBrZXkpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBBdXRoU2RrRXJyb3IoJ1RoZSB0b2tlbk1hbmFnZXIgaGFzIG5vIHRva2VuIGZvciB0aGUga2V5OiAnICsga2V5KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gUS5yZWplY3QoZSk7XG4gIH1cblxuICAvLyBSZW1vdmUgZXhpc3RpbmcgYXV0b1JlbmV3IHRpbWVvdXQgZm9yIHRoaXMga2V5XG4gIGNsZWFyRXhwaXJlRXZlbnRUaW1lb3V0KHRva2VuTWdtdFJlZiwga2V5KTtcblxuICAvLyBTdG9yZSB0aGUgcmVuZXcgcHJvbWlzZSBzdGF0ZSwgdG8gYXZvaWQgcmVuZXdpbmcgYWdhaW5cbiAgaWYgKCF0b2tlbk1nbXRSZWYucmVuZXdQcm9taXNlW2tleV0pIHtcbiAgICB0b2tlbk1nbXRSZWYucmVuZXdQcm9taXNlW2tleV0gPSBzZGsudG9rZW4ucmVuZXcodG9rZW4pXG4gICAgLnRoZW4oZnVuY3Rpb24oZnJlc2hUb2tlbikge1xuICAgICAgaWYgKCFnZXQoc3RvcmFnZSwga2V5KSkge1xuICAgICAgICAvLyBJdCBpcyBwb3NzaWJsZSB0byBlbnRlciBhIHN0YXRlIHdoZXJlIHRoZSB0b2tlbnMgaGF2ZSBiZWVuIGNsZWFyZWRcbiAgICAgICAgLy8gYWZ0ZXIgYSByZW5ld2FsIHJlcXVlc3Qgd2FzIHRyaWdnZXJlZC4gVG8gZW5zdXJlIHdlIGRvIG5vdCBzdG9yZSBhXG4gICAgICAgIC8vIHJlbmV3ZWQgdG9rZW4sIHdlIHZlcmlmeSB0aGUgcHJvbWlzZSBrZXkgZG9lc24ndCBleGlzdCBhbmQgcmV0dXJuLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhZGQoc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UsIGtleSwgZnJlc2hUb2tlbik7XG4gICAgICB0b2tlbk1nbXRSZWYuZW1pdHRlci5lbWl0KCdyZW5ld2VkJywga2V5LCBmcmVzaFRva2VuLCB0b2tlbik7XG4gICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcHJvbWlzZSBrZXlcbiAgICAgIGRlbGV0ZSB0b2tlbk1nbXRSZWYucmVuZXdQcm9taXNlW2tleV07XG4gICAgICByZXR1cm4gZnJlc2hUb2tlbjtcbiAgICB9KVxuICAgIC5mYWlsKGZ1bmN0aW9uKGVycikge1xuICAgICAgaWYgKGVyci5uYW1lID09PSAnT0F1dGhFcnJvcicpIHtcbiAgICAgICAgcmVtb3ZlKHRva2VuTWdtdFJlZiwgc3RvcmFnZSwga2V5KTtcbiAgICAgICAgZW1pdEVycm9yKHRva2VuTWdtdFJlZiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0b2tlbk1nbXRSZWYucmVuZXdQcm9taXNlW2tleV07XG59XG5cbmZ1bmN0aW9uIGNsZWFyKHRva2VuTWdtdFJlZiwgc3RvcmFnZSkge1xuICBjbGVhckV4cGlyZUV2ZW50VGltZW91dEFsbCh0b2tlbk1nbXRSZWYpO1xuICBzdG9yYWdlLmNsZWFyU3RvcmFnZSgpO1xufVxuXG5mdW5jdGlvbiBUb2tlbk1hbmFnZXIoc2RrLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLnN0b3JhZ2UgPSBvcHRpb25zLnN0b3JhZ2UgfHwgJ2xvY2FsU3RvcmFnZSc7XG4gIGlmICghb3B0aW9ucy5hdXRvUmVuZXcgJiYgb3B0aW9ucy5hdXRvUmVuZXcgIT09IGZhbHNlKSB7XG4gICAgb3B0aW9ucy5hdXRvUmVuZXcgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuc3RvcmFnZSA9PT0gJ2xvY2FsU3RvcmFnZScgJiYgIXN0b3JhZ2VVdGlsLmJyb3dzZXJIYXNMb2NhbFN0b3JhZ2UoKSkge1xuICAgIHV0aWwud2FybignVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IGxvY2FsU3RvcmFnZS4gU3dpdGNoaW5nIHRvIHNlc3Npb25TdG9yYWdlLicpO1xuICAgIG9wdGlvbnMuc3RvcmFnZSA9ICdzZXNzaW9uU3RvcmFnZSc7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zdG9yYWdlID09PSAnc2Vzc2lvblN0b3JhZ2UnICYmICFzdG9yYWdlVXRpbC5icm93c2VySGFzU2Vzc2lvblN0b3JhZ2UoKSkge1xuICAgIHV0aWwud2FybignVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHNlc3Npb25TdG9yYWdlLiBTd2l0Y2hpbmcgdG8gY29va2llLWJhc2VkIHN0b3JhZ2UuJyk7XG4gICAgb3B0aW9ucy5zdG9yYWdlID0gJ2Nvb2tpZSc7XG4gIH1cblxuICB2YXIgc3RvcmFnZTtcbiAgc3dpdGNoKG9wdGlvbnMuc3RvcmFnZSkge1xuICAgIGNhc2UgJ2xvY2FsU3RvcmFnZSc6XG4gICAgICBzdG9yYWdlID0gc3RvcmFnZUJ1aWxkZXIobG9jYWxTdG9yYWdlLCBjb25maWcuVE9LRU5fU1RPUkFHRV9OQU1FKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3Nlc3Npb25TdG9yYWdlJzpcbiAgICAgIHN0b3JhZ2UgPSBzdG9yYWdlQnVpbGRlcihzZXNzaW9uU3RvcmFnZSwgY29uZmlnLlRPS0VOX1NUT1JBR0VfTkFNRSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjb29raWUnOlxuICAgICAgc3RvcmFnZSA9IHN0b3JhZ2VCdWlsZGVyKHN0b3JhZ2VVdGlsLmdldENvb2tpZVN0b3JhZ2UoKSwgY29uZmlnLlRPS0VOX1NUT1JBR0VfTkFNRSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEF1dGhTZGtFcnJvcignVW5yZWNvZ25pemVkIHN0b3JhZ2Ugb3B0aW9uJyk7XG4gIH1cblxuICB2YXIgdG9rZW5NZ210UmVmID0ge1xuICAgIGVtaXR0ZXI6IG5ldyBFbWl0dGVyKCksXG4gICAgYXV0b1JlbmV3OiBvcHRpb25zLmF1dG9SZW5ldyxcbiAgICBleHBpcmVUaW1lb3V0czoge30sXG4gICAgcmVuZXdQcm9taXNlOiB7fVxuICB9O1xuXG4gIHRoaXMuYWRkID0gdXRpbC5iaW5kKGFkZCwgdGhpcywgc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UpO1xuICB0aGlzLmdldCA9IHV0aWwuYmluZChnZXRBc3luYywgdGhpcywgc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UpO1xuICB0aGlzLnJlbW92ZSA9IHV0aWwuYmluZChyZW1vdmUsIHRoaXMsIHRva2VuTWdtdFJlZiwgc3RvcmFnZSk7XG4gIHRoaXMuY2xlYXIgPSB1dGlsLmJpbmQoY2xlYXIsIHRoaXMsIHRva2VuTWdtdFJlZiwgc3RvcmFnZSk7XG4gIHRoaXMucmVuZXcgPSB1dGlsLmJpbmQocmVuZXcsIHRoaXMsIHNkaywgdG9rZW5NZ210UmVmLCBzdG9yYWdlKTtcbiAgdGhpcy5vbiA9IHV0aWwuYmluZCh0b2tlbk1nbXRSZWYuZW1pdHRlci5vbiwgdG9rZW5NZ210UmVmLmVtaXR0ZXIpO1xuICB0aGlzLm9mZiA9IHV0aWwuYmluZCh0b2tlbk1nbXRSZWYuZW1pdHRlci5vZmYsIHRva2VuTWdtdFJlZi5lbWl0dGVyKTtcblxuICBzZXRFeHBpcmVFdmVudFRpbWVvdXRBbGwoc2RrLCB0b2tlbk1nbXRSZWYsIHN0b3JhZ2UpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRva2VuTWFuYWdlcjtcbiIsImZ1bmN0aW9uIEUgKCkge1xuICAvLyBLZWVwIHRoaXMgZW1wdHkgc28gaXQncyBlYXNpZXIgdG8gaW5oZXJpdCBmcm9tXG4gIC8vICh2aWEgaHR0cHM6Ly9naXRodWIuY29tL2xpcHNtYWNrIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9pc3N1ZXMvMylcbn1cblxuRS5wcm90b3R5cGUgPSB7XG4gIG9uOiBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2ssIGN0eCkge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG5cbiAgICAoZVtuYW1lXSB8fCAoZVtuYW1lXSA9IFtdKSkucHVzaCh7XG4gICAgICBmbjogY2FsbGJhY2ssXG4gICAgICBjdHg6IGN0eFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgb25jZTogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXIgKCkge1xuICAgICAgc2VsZi5vZmYobmFtZSwgbGlzdGVuZXIpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lci5fID0gY2FsbGJhY2tcbiAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBsaXN0ZW5lciwgY3R4KTtcbiAgfSxcblxuICBlbWl0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBkYXRhID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHZhciBldnRBcnIgPSAoKHRoaXMuZSB8fCAodGhpcy5lID0ge30pKVtuYW1lXSB8fCBbXSkuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGV2dEFyci5sZW5ndGg7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkrKykge1xuICAgICAgZXZ0QXJyW2ldLmZuLmFwcGx5KGV2dEFycltpXS5jdHgsIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9mZjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGUgPSB0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KTtcbiAgICB2YXIgZXZ0cyA9IGVbbmFtZV07XG4gICAgdmFyIGxpdmVFdmVudHMgPSBbXTtcblxuICAgIGlmIChldnRzICYmIGNhbGxiYWNrKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXZ0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoZXZ0c1tpXS5mbiAhPT0gY2FsbGJhY2sgJiYgZXZ0c1tpXS5mbi5fICE9PSBjYWxsYmFjaylcbiAgICAgICAgICBsaXZlRXZlbnRzLnB1c2goZXZ0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGV2ZW50IGZyb20gcXVldWUgdG8gcHJldmVudCBtZW1vcnkgbGVha1xuICAgIC8vIFN1Z2dlc3RlZCBieSBodHRwczovL2dpdGh1Yi5jb20vbGF6ZFxuICAgIC8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL3Njb3R0Y29yZ2FuL3RpbnktZW1pdHRlci9jb21taXQvYzZlYmZhYTliYzk3M2IzM2QxMTBhODRhMzA3NzQyYjdjZjk0Yzk1MyNjb21taXRjb21tZW50LTUwMjQ5MTBcblxuICAgIChsaXZlRXZlbnRzLmxlbmd0aClcbiAgICAgID8gZVtuYW1lXSA9IGxpdmVFdmVudHNcbiAgICAgIDogZGVsZXRlIGVbbmFtZV07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIFwibmFtZVwiOiBcIkBva3RhL29rdGEtcmVhY3RcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4xLjRcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcmVhY3RSb3V0ZXIgPSByZXF1aXJlKCdyZWFjdC1yb3V0ZXInKTtcblxudmFyIF93aXRoQXV0aCA9IHJlcXVpcmUoJy4vd2l0aEF1dGgnKTtcblxudmFyIF93aXRoQXV0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aXRoQXV0aCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCBfd2l0aEF1dGgyLmRlZmF1bHQpKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEltcGxpY2l0Q2FsbGJhY2ssIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEltcGxpY2l0Q2FsbGJhY2socHJvcHMpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJbXBsaWNpdENhbGxiYWNrKTtcblxuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKEltcGxpY2l0Q2FsbGJhY2suX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEltcGxpY2l0Q2FsbGJhY2spKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQ6IG51bGwsXG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSW1wbGljaXRDYWxsYmFjaywgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMucHJvcHMuYXV0aC5oYW5kbGVBdXRoZW50aWNhdGlvbigpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnNldFN0YXRlKHsgYXV0aGVudGljYXRlZDogdHJ1ZSB9KTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5zZXRTdGF0ZSh7IGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLCBlcnJvcjogZXJyLnRvU3RyaW5nKCkgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5hdXRoZW50aWNhdGVkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVmZXJyZXJLZXkgPSAnc2VjdXJlUm91dGVyUmVmZXJyZXJQYXRoJztcbiAgICAgIHZhciBsb2NhdGlvbiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocmVmZXJyZXJLZXkpIHx8ICd7IFwicGF0aG5hbWVcIjogXCIvXCIgfScpO1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0ocmVmZXJyZXJLZXkpO1xuXG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5hdXRoZW50aWNhdGVkID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0Um91dGVyLlJlZGlyZWN0LCB7IHRvOiBsb2NhdGlvbiB9KSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAncCcsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMuc3RhdGUuZXJyb3JcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJbXBsaWNpdENhbGxiYWNrO1xufShfcmVhY3QuQ29tcG9uZW50KSk7IC8qXG4gICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE3LVByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICAgICAgICAgICAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcbiAgICAgICAgICAgICAgICAgICAgICAgKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICAgICAgICAgICAgICAgICAgICAgICAqLyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNy1QcmVzZW50LCBPa3RhLCBJbmMuIGFuZC9vciBpdHMgYWZmaWxpYXRlcy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoZSBPa3RhIHNvZnR3YXJlIGFjY29tcGFuaWVkIGJ5IHRoaXMgbm90aWNlIGlzIHByb3ZpZGVkIHB1cnN1YW50IHRvIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2UuXCIpXG4gKlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMC5cbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVFxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICpcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIFNlY3VyZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFNlY3VyZSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2VjdXJlKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFNlY3VyZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFNlY3VyZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2VjdXJlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTZWN1cmUsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmVuZGVyKHtcbiAgICAgICAgYXV0aDogdGhpcy5jb250ZXh0LmF1dGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2VjdXJlO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuU2VjdXJlLmNvbnRleHRUeXBlcyA9IHtcbiAgYXV0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IFNlY3VyZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVnZW5lcmF0b3IgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yJyk7XG5cbnZhciBfcmVnZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVnZW5lcmF0b3IpO1xuXG52YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3InKTtcblxudmFyIF9hc3luY1RvR2VuZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FzeW5jVG9HZW5lcmF0b3IyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdFJvdXRlciA9IHJlcXVpcmUoJ3JlYWN0LXJvdXRlcicpO1xuXG52YXIgX3dpdGhBdXRoID0gcmVxdWlyZSgnLi93aXRoQXV0aCcpO1xuXG52YXIgX3dpdGhBdXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpdGhBdXRoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFJlbmRlcldyYXBwZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShSZW5kZXJXcmFwcGVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZW5kZXJXcmFwcGVyKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlbmRlcldyYXBwZXIpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChSZW5kZXJXcmFwcGVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShSZW5kZXJXcmFwcGVyKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZW5kZXJXcmFwcGVyLCBbe1xuICAgIGtleTogJ2NoZWNrQXV0aGVudGljYXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjaGVja0F1dGhlbnRpY2F0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0aGVudGljYXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5sb2dpbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kZXByZWNhdGVkICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMuY2hlY2tBdXRoZW50aWNhdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuY2hlY2tBdXRoZW50aWNhdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5hdXRoZW50aWNhdGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgQyA9IHRoaXMucHJvcHMuY29tcG9uZW50O1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMucmVuZGVyID8gdGhpcy5wcm9wcy5yZW5kZXIodGhpcy5wcm9wcy5yZW5kZXJQcm9wcykgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDLCB0aGlzLnByb3BzLnJlbmRlclByb3BzKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFJlbmRlcldyYXBwZXI7XG59KF9yZWFjdC5Db21wb25lbnQpOyAvKlxuICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IChjKSAyMDE3LVByZXNlbnQsIE9rdGEsIEluYy4gYW5kL29yIGl0cyBhZmZpbGlhdGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICAgICAgICAgICAgICAgICAgICAgICogVGhlIE9rdGEgc29mdHdhcmUgYWNjb21wYW5pZWQgYnkgdGhpcyBub3RpY2UgaXMgcHJvdmlkZWQgcHVyc3VhbnQgdG8gdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZS5cIilcbiAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wLlxuICAgICAgICAgICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXG4gICAgICAgICAgICAgICAgICAgICAgKiBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAgICAgICAgICAgICAgICAgICAgICAqL1xuXG52YXIgU2VjdXJlUm91dGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoU2VjdXJlUm91dGUsIF9Db21wb25lbnQyKTtcblxuICBmdW5jdGlvbiBTZWN1cmVSb3V0ZShwcm9wcykge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFNlY3VyZVJvdXRlKTtcblxuICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChTZWN1cmVSb3V0ZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2VjdXJlUm91dGUpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICBhdXRoZW50aWNhdGVkOiBudWxsXG4gICAgfTtcblxuICAgIF90aGlzMi5jaGVja0F1dGhlbnRpY2F0aW9uID0gX3RoaXMyLmNoZWNrQXV0aGVudGljYXRpb24uYmluZChfdGhpczIpO1xuICAgIF90aGlzMi5jcmVhdGVSZW5kZXJXcmFwcGVyID0gX3RoaXMyLmNyZWF0ZVJlbmRlcldyYXBwZXIuYmluZChfdGhpczIpO1xuXG4gICAgX3RoaXMyLmNoZWNrQXV0aGVudGljYXRpb24oKTtcbiAgICByZXR1cm4gX3RoaXMyO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU2VjdXJlUm91dGUsIFt7XG4gICAga2V5OiAnY2hlY2tBdXRoZW50aWNhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfcmVmID0gKDAsIF9hc3luY1RvR2VuZXJhdG9yMy5kZWZhdWx0KSggLyojX19QVVJFX18qL19yZWdlbmVyYXRvcjIuZGVmYXVsdC5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHZhciBhdXRoZW50aWNhdGVkO1xuICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yMi5kZWZhdWx0LndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuYXV0aC5pc0F1dGhlbnRpY2F0ZWQoKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgYXV0aGVudGljYXRlZCA9IF9jb250ZXh0LnNlbnQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXV0aGVudGljYXRlZCAhPT0gdGhpcy5zdGF0ZS5hdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgYXV0aGVudGljYXRlZDogYXV0aGVudGljYXRlZCB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gY2hlY2tBdXRoZW50aWNhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoZWNrQXV0aGVudGljYXRpb247XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmNoZWNrQXV0aGVudGljYXRpb24oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVSZW5kZXJXcmFwcGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUmVuZGVyV3JhcHBlcihyZW5kZXJQcm9wcykge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlbmRlcldyYXBwZXIsIHtcbiAgICAgICAgYXV0aGVudGljYXRlZDogdGhpcy5zdGF0ZS5hdXRoZW50aWNhdGVkLFxuICAgICAgICBsb2dpbjogdGhpcy5wcm9wcy5hdXRoLmxvZ2luLFxuICAgICAgICBjb21wb25lbnQ6IHRoaXMucHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXI6IHRoaXMucHJvcHMucmVuZGVyLFxuICAgICAgICByZW5kZXJQcm9wczogcmVuZGVyUHJvcHNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RSb3V0ZXIuUm91dGUsIHtcbiAgICAgICAgcGF0aDogdGhpcy5wcm9wcy5wYXRoLFxuICAgICAgICBleGFjdDogdGhpcy5wcm9wcy5leGFjdCxcbiAgICAgICAgc3RyaWN0OiB0aGlzLnByb3BzLnN0cmljdCxcbiAgICAgICAgc2Vuc2l0aXZlOiB0aGlzLnByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgcmVuZGVyOiB0aGlzLmNyZWF0ZVJlbmRlcldyYXBwZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2VjdXJlUm91dGU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX3dpdGhBdXRoMi5kZWZhdWx0KShTZWN1cmVSb3V0ZSk7IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xuICB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfUGFwZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9QYXBlclwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgUGFwZXJcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGJhY2tncm91bmRDb2xvckRlZmF1bHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyB0aGVtZS5wYWxldHRlLmdyZXlbMTAwXSA6IHRoZW1lLnBhbGV0dGUuZ3JleVs5MDBdO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAvLyBQcmV2ZW50IHBhZGRpbmcgaXNzdWUgd2l0aCB0aGUgTW9kYWwgYW5kIGZpeGVkIHBvc2l0aW9uZWQgQXBwQmFyLlxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguYXBwQmFyLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cImZpeGVkXCJgLiAqL1xuICAgIHBvc2l0aW9uRml4ZWQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwicmVsYXRpdmVcImAuICovXG4gICAgcG9zaXRpb25SZWxhdGl2ZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBBcHBCYXIocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcInBvc2l0aW9uXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXNbXCJwb3NpdGlvblwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkocG9zaXRpb24pKV0sIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdpbmhlcml0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCAnbXVpLWZpeGVkJywgcG9zaXRpb24gPT09ICdmaXhlZCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUGFwZXIuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkFwcEJhci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdkZWZhdWx0J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgcG9zaXRpb25pbmcgdHlwZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWRcbiAgICogW2hlcmVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vQ1NTL0NTU19sYXlvdXQvUG9zaXRpb25pbmcpLlxuICAgKiBOb3RlOiBgc3RpY2t5YCBpcyBub3QgdW5pdmVyc2FsbHkgc3VwcG9ydGVkIGFuZCB3aWxsIGZhbGwgYmFjayB0byBgc3RhdGljYCB3aGVuIHVuYXZhaWxhYmxlLlxuICAgKi9cbiAgcG9zaXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2ZpeGVkJywgJ2Fic29sdXRlJywgJ3N0aWNreScsICdzdGF0aWMnLCAncmVsYXRpdmUnXSlcbn0gOiB7fTtcbkFwcEJhci5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbG9yOiAncHJpbWFyeScsXG4gIHBvc2l0aW9uOiAnZml4ZWQnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInXG59KShBcHBCYXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZ2V0RHluYW1pY1N0eWxlcztcbi8qKlxuICogRXh0cmFjdHMgYSBzdHlsZXMgb2JqZWN0IHdpdGggb25seSBwcm9wcyB0aGF0IGNvbnRhaW4gZnVuY3Rpb24gdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXREeW5hbWljU3R5bGVzKHN0eWxlcykge1xuICB2YXIgdG8gPSBudWxsO1xuXG4gIGZvciAodmFyIGtleSBpbiBzdHlsZXMpIHtcbiAgICB2YXIgdmFsdWUgPSBzdHlsZXNba2V5XTtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICB0b1trZXldID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHZhciBleHRyYWN0ZWQgPSBnZXREeW5hbWljU3R5bGVzKHZhbHVlKTtcbiAgICAgIGlmIChleHRyYWN0ZWQpIHtcbiAgICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgICAgdG9ba2V5XSA9IGV4dHJhY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG87XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNNYW5hZ2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaGVldHNNYW5hZ2VyKTtcblxuICAgIHRoaXMuc2hlZXRzID0gW107XG4gICAgdGhpcy5yZWZzID0gW107XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzTWFuYWdlciwgW3tcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmtleXMuaW5kZXhPZihrZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuc2hlZXRzW2luZGV4XTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhZGQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgICAgdmFyIHNoZWV0cyA9IHRoaXMuc2hlZXRzLFxuICAgICAgICAgIHJlZnMgPSB0aGlzLnJlZnMsXG4gICAgICAgICAga2V5cyA9IHRoaXMua2V5cztcblxuICAgICAgdmFyIGluZGV4ID0gc2hlZXRzLmluZGV4T2Yoc2hlZXQpO1xuXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSByZXR1cm4gaW5kZXg7XG5cbiAgICAgIHNoZWV0cy5wdXNoKHNoZWV0KTtcbiAgICAgIHJlZnMucHVzaCgwKTtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuXG4gICAgICByZXR1cm4gc2hlZXRzLmxlbmd0aCAtIDE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbWFuYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFuYWdlKGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXRzW2luZGV4XTtcbiAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID09PSAwKSBzaGVldC5hdHRhY2goKTtcbiAgICAgIHRoaXMucmVmc1tpbmRleF0rKztcbiAgICAgIGlmICghdGhpcy5rZXlzW2luZGV4XSkgdGhpcy5rZXlzLnNwbGljZShpbmRleCwgMCwga2V5KTtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd1bm1hbmFnZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgLy8gZXNsaW50LWlnbm9yZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCBcIlNoZWV0c01hbmFnZXI6IGNhbid0IGZpbmQgc2hlZXQgdG8gdW5tYW5hZ2VcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID4gMCkge1xuICAgICAgICB0aGlzLnJlZnNbaW5kZXhdLS07XG4gICAgICAgIGlmICh0aGlzLnJlZnNbaW5kZXhdID09PSAwKSB0aGlzLnNoZWV0c1tpbmRleF0uZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2l6ZScsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2hlZXRzTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gY2xvbmVTdHlsZTtcblxudmFyIF9pc09ic2VydmFibGUgPSByZXF1aXJlKCcuL2lzT2JzZXJ2YWJsZScpO1xuXG52YXIgX2lzT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09ic2VydmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNsb25lU3R5bGUoc3R5bGUpIHtcbiAgLy8gU3VwcG9ydCBlbXB0eSB2YWx1ZXMgaW4gY2FzZSB1c2VyIGVuZHMgdXAgd2l0aCB0aGVtIGJ5IGFjY2lkZW50LlxuICBpZiAoc3R5bGUgPT0gbnVsbCkgcmV0dXJuIHN0eWxlO1xuXG4gIC8vIFN1cHBvcnQgc3RyaW5nIHZhbHVlIGZvciBTaW1wbGVSdWxlLlxuICB2YXIgdHlwZU9mU3R5bGUgPSB0eXBlb2Ygc3R5bGUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHN0eWxlKTtcblxuICBpZiAodHlwZU9mU3R5bGUgPT09ICdzdHJpbmcnIHx8IHR5cGVPZlN0eWxlID09PSAnbnVtYmVyJyB8fCB0eXBlT2ZTdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIC8vIFN1cHBvcnQgYXJyYXkgZm9yIEZvbnRGYWNlUnVsZS5cbiAgaWYgKGlzQXJyYXkoc3R5bGUpKSByZXR1cm4gc3R5bGUubWFwKGNsb25lU3R5bGUpO1xuXG4gIC8vIFN1cHBvcnQgT2JzZXJ2YWJsZSBzdHlsZXMuICBPYnNlcnZhYmxlcyBhcmUgaW1tdXRhYmxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvXG4gIC8vIGNvcHkgdGhlbS5cbiAgaWYgKCgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKShzdHlsZSkpIHJldHVybiBzdHlsZTtcblxuICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZSkge1xuICAgIHZhciB2YWx1ZSA9IHN0eWxlW25hbWVdO1xuICAgIGlmICgodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih2YWx1ZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBuZXdTdHlsZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG5ld1N0eWxlO1xufSIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIENTUyA9IGdsb2JhbC5DU1M7XG5cbnZhciBlbnYgPSBwcm9jZXNzLmVudi5OT0RFX0VOVjtcblxudmFyIGVzY2FwZVJlZ2V4ID0gLyhbW1xcXS4jKiQ+PCt+PXxeOigpLFwiJ2BdKS9nO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoc3RyKSB7XG4gIC8vIFdlIGRvbid0IG5lZWQgdG8gZXNjYXBlIGl0IGluIHByb2R1Y3Rpb24sIGJlY2F1c2Ugd2UgYXJlIG5vdCB1c2luZyB1c2VyJ3NcbiAgLy8gaW5wdXQgZm9yIHNlbGVjdG9ycywgd2UgYXJlIGdlbmVyYXRpbmcgYSB2YWxpZCBzZWxlY3Rvci5cbiAgaWYgKGVudiA9PT0gJ3Byb2R1Y3Rpb24nKSByZXR1cm4gc3RyO1xuXG4gIGlmICghQ1NTIHx8ICFDU1MuZXNjYXBlKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG4gIH1cblxuICByZXR1cm4gQ1NTLmVzY2FwZShzdHIpO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgbnMgPSAnMmYxYWNjNmMzYTYwNmIwODJlNWVlZjVlNTQ0MTRmZmInO1xuaWYgKGdsb2JhbFtuc10gPT0gbnVsbCkgZ2xvYmFsW25zXSA9IDA7XG5cbi8vIEJ1bmRsZSBtYXkgY29udGFpbiBtdWx0aXBsZSBKU1MgdmVyc2lvbnMgYXQgdGhlIHNhbWUgdGltZS4gSW4gb3JkZXIgdG8gaWRlbnRpZnlcbi8vIHRoZSBjdXJyZW50IHZlcnNpb24gd2l0aCBqdXN0IG9uZSBzaG9ydCBudW1iZXIgYW5kIHVzZSBpdCBmb3IgY2xhc3NlcyBnZW5lcmF0aW9uXG4vLyB3ZSB1c2UgYSBjb3VudGVyLiBBbHNvIGl0IGlzIG1vcmUgYWNjdXJhdGUsIGJlY2F1c2UgdXNlciBjYW4gbWFudWFsbHkgcmVldmFsdWF0ZVxuLy8gdGhlIG1vZHVsZS5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdsb2JhbFtuc10rKzsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9pc0luQnJvd3NlciA9IHJlcXVpcmUoJ2lzLWluLWJyb3dzZXInKTtcblxudmFyIF9pc0luQnJvd3NlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0luQnJvd3Nlcik7XG5cbnZhciBfU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4vU3R5bGVTaGVldCcpO1xuXG52YXIgX1N0eWxlU2hlZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVTaGVldCk7XG5cbnZhciBfUGx1Z2luc1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9QbHVnaW5zUmVnaXN0cnknKTtcblxudmFyIF9QbHVnaW5zUmVnaXN0cnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGx1Z2luc1JlZ2lzdHJ5KTtcblxudmFyIF9ydWxlcyA9IHJlcXVpcmUoJy4vcGx1Z2lucy9ydWxlcycpO1xuXG52YXIgX3J1bGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3J1bGVzKTtcblxudmFyIF9vYnNlcnZhYmxlcyA9IHJlcXVpcmUoJy4vcGx1Z2lucy9vYnNlcnZhYmxlcycpO1xuXG52YXIgX29ic2VydmFibGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29ic2VydmFibGVzKTtcblxudmFyIF9mdW5jdGlvbnMgPSByZXF1aXJlKCcuL3BsdWdpbnMvZnVuY3Rpb25zJyk7XG5cbnZhciBfZnVuY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Z1bmN0aW9ucyk7XG5cbnZhciBfc2hlZXRzID0gcmVxdWlyZSgnLi9zaGVldHMnKTtcblxudmFyIF9zaGVldHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hlZXRzKTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuL3J1bGVzL1N0eWxlUnVsZScpO1xuXG52YXIgX1N0eWxlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZVJ1bGUpO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lID0gcmVxdWlyZSgnLi91dGlscy9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZScpO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKTtcblxudmFyIF9jcmVhdGVSdWxlMiA9IHJlcXVpcmUoJy4vdXRpbHMvY3JlYXRlUnVsZScpO1xuXG52YXIgX2NyZWF0ZVJ1bGUzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUnVsZTIpO1xuXG52YXIgX0RvbVJlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMvRG9tUmVuZGVyZXInKTtcblxudmFyIF9Eb21SZW5kZXJlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Eb21SZW5kZXJlcik7XG5cbnZhciBfVmlydHVhbFJlbmRlcmVyID0gcmVxdWlyZSgnLi9yZW5kZXJlcnMvVmlydHVhbFJlbmRlcmVyJyk7XG5cbnZhciBfVmlydHVhbFJlbmRlcmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1ZpcnR1YWxSZW5kZXJlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRlZmF1bHRQbHVnaW5zID0gX3J1bGVzMlsnZGVmYXVsdCddLmNvbmNhdChbX29ic2VydmFibGVzMlsnZGVmYXVsdCddLCBfZnVuY3Rpb25zMlsnZGVmYXVsdCddXSk7XG5cbnZhciBpbnN0YW5jZUNvdW50ZXIgPSAwO1xuXG52YXIgSnNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBKc3MpO1xuXG4gICAgdGhpcy5pZCA9IGluc3RhbmNlQ291bnRlcisrO1xuICAgIHRoaXMudmVyc2lvbiA9IFwiOS44LjdcIjtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgX1BsdWdpbnNSZWdpc3RyeTJbJ2RlZmF1bHQnXSgpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lOiBfY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUyWydkZWZhdWx0J10sXG4gICAgICBSZW5kZXJlcjogX2lzSW5Ccm93c2VyMlsnZGVmYXVsdCddID8gX0RvbVJlbmRlcmVyMlsnZGVmYXVsdCddIDogX1ZpcnR1YWxSZW5kZXJlcjJbJ2RlZmF1bHQnXSxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlQ2xhc3NOYW1lID0gKDAsIF9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZTJbJ2RlZmF1bHQnXSkoKTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgdGhpcy51c2UuYXBwbHkodGhpcywgZGVmYXVsdFBsdWdpbnMpO1xuICAgIHRoaXMuc2V0dXAob3B0aW9ucyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoSnNzLCBbe1xuICAgIGtleTogJ3NldHVwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWU7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUNsYXNzTmFtZSA9IG9wdGlvbnMuY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcbiAgICAgIGlmIChvcHRpb25zLnZpcnR1YWwgfHwgb3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMuUmVuZGVyZXIgPSBvcHRpb25zLlJlbmRlcmVyIHx8IChvcHRpb25zLnZpcnR1YWwgPyBfVmlydHVhbFJlbmRlcmVyMlsnZGVmYXVsdCddIDogX0RvbVJlbmRlcmVyMlsnZGVmYXVsdCddKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICAgIGlmIChvcHRpb25zLnBsdWdpbnMpIHRoaXMudXNlLmFwcGx5KHRoaXMsIG9wdGlvbnMucGx1Z2lucyk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIFN0eWxlIFNoZWV0LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVTdHlsZVNoZWV0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlU3R5bGVTaGVldChzdHlsZXMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgdmFyIGluZGV4ID0gb3B0aW9ucy5pbmRleDtcbiAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICAgIGluZGV4ID0gX3NoZWV0czJbJ2RlZmF1bHQnXS5pbmRleCA9PT0gMCA/IDAgOiBfc2hlZXRzMlsnZGVmYXVsdCddLmluZGV4ICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciBzaGVldCA9IG5ldyBfU3R5bGVTaGVldDJbJ2RlZmF1bHQnXShzdHlsZXMsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgIGpzczogdGhpcyxcbiAgICAgICAgZ2VuZXJhdGVDbGFzc05hbWU6IG9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWUgfHwgdGhpcy5nZW5lcmF0ZUNsYXNzTmFtZSxcbiAgICAgICAgaW5zZXJ0aW9uUG9pbnQ6IHRoaXMub3B0aW9ucy5pbnNlcnRpb25Qb2ludCxcbiAgICAgICAgUmVuZGVyZXI6IHRoaXMub3B0aW9ucy5SZW5kZXJlcixcbiAgICAgICAgaW5kZXg6IGluZGV4XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnBsdWdpbnMub25Qcm9jZXNzU2hlZXQoc2hlZXQpO1xuXG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIHRoZSBTdHlsZSBTaGVldCBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlZ2lzdHJ5LlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW1vdmVTdHlsZVNoZWV0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU3R5bGVTaGVldChzaGVldCkge1xuICAgICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgICBfc2hlZXRzMlsnZGVmYXVsdCddLnJlbW92ZShzaGVldCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBydWxlIHdpdGhvdXQgYSBTdHlsZSBTaGVldC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSkge1xuICAgICAgdmFyIHN0eWxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgICAgLy8gRW5hYmxlIHJ1bGUgd2l0aG91dCBuYW1lIGZvciBpbmxpbmUgc3R5bGVzLlxuICAgICAgaWYgKCh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobmFtZSkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0gc3R5bGU7XG4gICAgICAgIHN0eWxlID0gbmFtZTtcbiAgICAgICAgbmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FzdCBmcm9tIFJ1bGVGYWN0b3J5T3B0aW9ucyB0byBSdWxlT3B0aW9uc1xuICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgICB2YXIgcnVsZU9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICBydWxlT3B0aW9ucy5qc3MgPSB0aGlzO1xuICAgICAgcnVsZU9wdGlvbnMuUmVuZGVyZXIgPSB0aGlzLm9wdGlvbnMuUmVuZGVyZXI7XG4gICAgICBpZiAoIXJ1bGVPcHRpb25zLmdlbmVyYXRlQ2xhc3NOYW1lKSBydWxlT3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZSA9IHRoaXMuZ2VuZXJhdGVDbGFzc05hbWU7XG4gICAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlM1snZGVmYXVsdCddKShuYW1lLCBzdHlsZSwgcnVsZU9wdGlvbnMpO1xuXG4gICAgICBpZiAoIXJ1bGVPcHRpb25zLnNlbGVjdG9yICYmIHJ1bGUgaW5zdGFuY2VvZiBfU3R5bGVSdWxlMlsnZGVmYXVsdCddKSB7XG4gICAgICAgIHJ1bGUuc2VsZWN0b3IgPSAnLicgKyBydWxlT3B0aW9ucy5nZW5lcmF0ZUNsYXNzTmFtZShydWxlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHBsdWdpbi4gUGFzc2VkIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGEgcnVsZSBpbnN0YW5jZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXNlKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBsdWdpbnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgICAgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLnBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuICAgICAgICAgIF90aGlzLm9wdGlvbnMucGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBKc3M7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEpzczsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBQbHVnaW5zUmVnaXN0cnkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1Z2luc1JlZ2lzdHJ5KTtcblxuICAgIHRoaXMuaG9va3MgPSB7XG4gICAgICBvbkNyZWF0ZVJ1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzUnVsZTogW10sXG4gICAgICBvblByb2Nlc3NTdHlsZTogW10sXG4gICAgICBvblByb2Nlc3NTaGVldDogW10sXG4gICAgICBvbkNoYW5nZVZhbHVlOiBbXSxcbiAgICAgIG9uVXBkYXRlOiBbXVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGwgYG9uQ3JlYXRlUnVsZWAgaG9va3MgYW5kIHJldHVybiBhbiBvYmplY3QgaWYgcmV0dXJuZWQgYnkgYSBob29rLlxuICAgICAgICovXG4gICAgfTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQbHVnaW5zUmVnaXN0cnksIFt7XG4gICAga2V5OiAnb25DcmVhdGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vbkNyZWF0ZVJ1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHJ1bGUgPSB0aGlzLmhvb2tzLm9uQ3JlYXRlUnVsZVtpXShuYW1lLCBkZWNsLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25Qcm9jZXNzUnVsZWAgaG9va3MuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ29uUHJvY2Vzc1J1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2Nlc3NSdWxlKHJ1bGUpIHtcbiAgICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgICB2YXIgc2hlZXQgPSBydWxlLm9wdGlvbnMuc2hlZXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ob29rcy5vblByb2Nlc3NSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuaG9va3Mub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgICB9XG5cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGlmIChydWxlLnN0eWxlKSB0aGlzLm9uUHJvY2Vzc1N0eWxlKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcblxuICAgICAgcnVsZS5pc1Byb2Nlc3NlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCBgb25Qcm9jZXNzU3R5bGVgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvblByb2Nlc3NTdHlsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgICAgdmFyIG5leHRTdHlsZSA9IHN0eWxlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25Qcm9jZXNzU3R5bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV4dFN0eWxlID0gdGhpcy5ob29rcy5vblByb2Nlc3NTdHlsZVtpXShuZXh0U3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBydWxlLnN0eWxlID0gbmV4dFN0eWxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25Qcm9jZXNzU2hlZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uUHJvY2Vzc1NoZWV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuaG9va3Mub25Qcm9jZXNzU2hlZXRbaV0oc2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgYG9uVXBkYXRlYCBob29rcy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnb25VcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlLCBzaGVldCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhvb2tzLm9uVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuaG9va3Mub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGwgYG9uQ2hhbmdlVmFsdWVgIGhvb2tzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdvbkNoYW5nZVZhbHVlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCwgcnVsZSkge1xuICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaG9va3Mub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcm9jZXNzZWRWYWx1ZSA9IHRoaXMuaG9va3Mub25DaGFuZ2VWYWx1ZVtpXShwcm9jZXNzZWRWYWx1ZSwgcHJvcCwgcnVsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAgICogSWYgZnVuY3Rpb24gaXMgcGFzc2VkLCBpdCBpcyBhIHNob3J0Y3V0IGZvciBge29uUHJvY2Vzc1J1bGV9YC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXNlKHBsdWdpbikge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwbHVnaW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaG9va3NbbmFtZV0pIHRoaXMuaG9va3NbbmFtZV0ucHVzaChwbHVnaW5bbmFtZV0pO2Vsc2UgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIFVua25vd24gaG9vayBcIiVzXCIuJywgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBsdWdpbnNSZWdpc3RyeTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUGx1Z2luc1JlZ2lzdHJ5OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9TaW1wbGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU2ltcGxlUnVsZScpO1xuXG52YXIgX1NpbXBsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2ltcGxlUnVsZSk7XG5cbnZhciBfS2V5ZnJhbWVzUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0tleWZyYW1lc1J1bGUnKTtcblxudmFyIF9LZXlmcmFtZXNSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0tleWZyYW1lc1J1bGUpO1xuXG52YXIgX0NvbmRpdGlvbmFsUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0NvbmRpdGlvbmFsUnVsZScpO1xuXG52YXIgX0NvbmRpdGlvbmFsUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25kaXRpb25hbFJ1bGUpO1xuXG52YXIgX0ZvbnRGYWNlUnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL0ZvbnRGYWNlUnVsZScpO1xuXG52YXIgX0ZvbnRGYWNlUnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Gb250RmFjZVJ1bGUpO1xuXG52YXIgX1ZpZXdwb3J0UnVsZSA9IHJlcXVpcmUoJy4uL3J1bGVzL1ZpZXdwb3J0UnVsZScpO1xuXG52YXIgX1ZpZXdwb3J0UnVsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9WaWV3cG9ydFJ1bGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBjbGFzc2VzID0ge1xuICAnQGNoYXJzZXQnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BpbXBvcnQnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BuYW1lc3BhY2UnOiBfU2ltcGxlUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BrZXlmcmFtZXMnOiBfS2V5ZnJhbWVzUnVsZTJbJ2RlZmF1bHQnXSxcbiAgJ0BtZWRpYSc6IF9Db25kaXRpb25hbFJ1bGUyWydkZWZhdWx0J10sXG4gICdAc3VwcG9ydHMnOiBfQ29uZGl0aW9uYWxSdWxlMlsnZGVmYXVsdCddLFxuICAnQGZvbnQtZmFjZSc6IF9Gb250RmFjZVJ1bGUyWydkZWZhdWx0J10sXG4gICdAdmlld3BvcnQnOiBfVmlld3BvcnRSdWxlMlsnZGVmYXVsdCddLFxuICAnQC1tcy12aWV3cG9ydCc6IF9WaWV3cG9ydFJ1bGUyWydkZWZhdWx0J11cblxuICAvKipcbiAgICogR2VuZXJhdGUgcGx1Z2lucyB3aGljaCB3aWxsIHJlZ2lzdGVyIGFsbCBydWxlcy5cbiAgICovXG59O1xudmFyIHBsdWdpbnMgPSBPYmplY3Qua2V5cyhjbGFzc2VzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAvLyBodHRwczovL2pzcGVyZi5jb20vaW5kZXhvZi12cy1zdWJzdHItdnMtcmVnZXgtYXQtdGhlLWJlZ2lubmluZy0zXG4gIHZhciByZSA9IG5ldyBSZWdFeHAoJ14nICsga2V5KTtcbiAgdmFyIFJ1bGVDbGFzcyA9IGNsYXNzZXNba2V5XTtcbiAgdmFyIG9uQ3JlYXRlUnVsZSA9IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlLnRlc3QobmFtZSkgPyBuZXcgUnVsZUNsYXNzKG5hbWUsIGRlY2wsIG9wdGlvbnMpIDogbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHsgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUgfTtcbn0pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBwbHVnaW5zOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFNpbXBsZVJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTaW1wbGVSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdzaW1wbGUnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG4gIF9jcmVhdGVDbGFzcyhTaW1wbGVSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgdmFyIHN0ciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy52YWx1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyAnICcgKyB0aGlzLnZhbHVlW2luZGV4XSArICc7JztcbiAgICAgICAgICBpZiAodGhpcy52YWx1ZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMua2V5ICsgJyAnICsgdGhpcy52YWx1ZSArICc7JztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2ltcGxlUnVsZTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xudmFyIEtleWZyYW1lc1J1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgS2V5ZnJhbWVzUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMucnVsZXMgPSBuZXcgX1J1bGVMaXN0MlsnZGVmYXVsdCddKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IHBhcmVudDogdGhpcyB9KSk7XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGZyYW1lcykge1xuICAgICAgdGhpcy5ydWxlcy5hZGQobmFtZSwgZnJhbWVzW25hbWVdLCBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLCB7XG4gICAgICAgIHBhcmVudDogdGhpcyxcbiAgICAgICAgc2VsZWN0b3I6IG5hbWVcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhLZXlmcmFtZXNSdWxlLCBbe1xuICAgIGtleTogJ3RvU3RyaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogeyBpbmRlbnQ6IDEgfTtcblxuICAgICAgdmFyIGlubmVyID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICAgIGlmIChpbm5lcikgaW5uZXIgKz0gJ1xcbic7XG4gICAgICByZXR1cm4gdGhpcy5rZXkgKyAnIHtcXG4nICsgaW5uZXIgKyAnfSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEtleWZyYW1lc1J1bGU7XG59KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEtleWZyYW1lc1J1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX1J1bGVMaXN0ID0gcmVxdWlyZSgnLi4vUnVsZUxpc3QnKTtcblxudmFyIF9SdWxlTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SdWxlTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBDb25kaXRpb25hbCBydWxlIGZvciBAbWVkaWEsIEBzdXBwb3J0c1xuICovXG52YXIgQ29uZGl0aW9uYWxSdWxlID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29uZGl0aW9uYWxSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdjb25kaXRpb25hbCc7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJ1bGVzID0gbmV3IF9SdWxlTGlzdDJbJ2RlZmF1bHQnXShfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBwYXJlbnQ6IHRoaXMgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgcnVsZS5cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoQ29uZGl0aW9uYWxSdWxlLCBbe1xuICAgIGtleTogJ2dldFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgaW5kZXggb2YgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZihydWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbmQgcmVnaXN0ZXIgcnVsZSwgcnVuIHBsdWdpbnMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FkZFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRSdWxlKG5hbWUsIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlLCBvcHRpb25zKTtcbiAgICAgIHRoaXMub3B0aW9ucy5qc3MucGx1Z2lucy5vblByb2Nlc3NSdWxlKHJ1bGUpO1xuICAgICAgcmV0dXJuIHJ1bGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7IGluZGVudDogMSB9O1xuXG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLnJ1bGVzLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGlubmVyID8gdGhpcy5rZXkgKyAnIHtcXG4nICsgaW5uZXIgKyAnXFxufScgOiAnJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29uZGl0aW9uYWxSdWxlO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBDb25kaXRpb25hbFJ1bGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3RvQ3NzID0gcmVxdWlyZSgnLi4vdXRpbHMvdG9Dc3MnKTtcblxudmFyIF90b0NzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90b0Nzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIEZvbnRGYWNlUnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9udEZhY2VSdWxlKTtcblxuICAgIHRoaXMudHlwZSA9ICdmb250LWZhY2UnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEZvbnRGYWNlUnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICAgIHZhciBzdHIgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuc3R5bGUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgc3RyICs9ICgwLCBfdG9Dc3MyWydkZWZhdWx0J10pKHRoaXMua2V5LCB0aGlzLnN0eWxlW2luZGV4XSk7XG4gICAgICAgICAgaWYgKHRoaXMuc3R5bGVbaW5kZXggKyAxXSkgc3RyICs9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZvbnRGYWNlUnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRm9udEZhY2VSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90b0NzcyA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzJyk7XG5cbnZhciBfdG9Dc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9Dc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBWaWV3cG9ydFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpZXdwb3J0UnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFZpZXdwb3J0UnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKFZpZXdwb3J0UnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiAoMCwgX3RvQ3NzMlsnZGVmYXVsdCddKSh0aGlzLmtleSwgdGhpcy5zdHlsZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFZpZXdwb3J0UnVsZTtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gVmlld3BvcnRSdWxlOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jcmVhdGVSdWxlID0gcmVxdWlyZSgnLi4vdXRpbHMvY3JlYXRlUnVsZScpO1xuXG52YXIgX2NyZWF0ZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUnVsZSk7XG5cbnZhciBfaXNPYnNlcnZhYmxlID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNPYnNlcnZhYmxlJyk7XG5cbnZhciBfaXNPYnNlcnZhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzT2JzZXJ2YWJsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgaWYgKCEoMCwgX2lzT2JzZXJ2YWJsZTJbJ2RlZmF1bHQnXSkoZGVjbCkpIHJldHVybiBudWxsO1xuXG4gICAgLy8gQ2FzdCBgZGVjbGAgdG8gYE9ic2VydmFibGVgLCBzaW5jZSBpdCBwYXNzZWQgdGhlIHR5cGUgZ3VhcmQuXG4gICAgdmFyIHN0eWxlJCA9IGRlY2w7XG5cbiAgICB2YXIgcnVsZSA9ICgwLCBfY3JlYXRlUnVsZTJbJ2RlZmF1bHQnXSkobmFtZSwge30sIG9wdGlvbnMpO1xuXG4gICAgLy8gVE9ET1xuICAgIC8vIENhbGwgYHN0cmVhbS5zdWJzY3JpYmUoKWAgcmV0dXJucyBhIHN1YnNjcmlwdGlvbiwgd2hpY2ggc2hvdWxkIGJlIGV4cGxpY2l0bHlcbiAgICAvLyB1bnN1YnNjcmliZWQgZnJvbSB3aGVuIHdlIGtub3cgdGhpcyBzaGVldCBpcyBubyBsb25nZXIgbmVlZGVkLlxuICAgIHN0eWxlJC5zdWJzY3JpYmUoZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHJ1bGUucHJvcChwcm9wLCBzdHlsZVtwcm9wXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcnVsZTtcbiAgfSxcbiAgb25Qcm9jZXNzUnVsZTogZnVuY3Rpb24gb25Qcm9jZXNzUnVsZShydWxlKSB7XG4gICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pKSByZXR1cm47XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIHN0eWxlID0gc3R5bGVSdWxlLnN0eWxlO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AocHJvcCkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICBpZiAoISgwLCBfaXNPYnNlcnZhYmxlMlsnZGVmYXVsdCddKSh2YWx1ZSkpIHJldHVybiAnY29udGludWUnO1xuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgdmFsdWUuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChuZXh0VmFsdWUpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChwcm9wLCBuZXh0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChwcm9wKTtcblxuICAgICAgaWYgKF9yZXQgPT09ICdjb250aW51ZScpIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfUnVsZUxpc3QgPSByZXF1aXJlKCcuLi9SdWxlTGlzdCcpO1xuXG52YXIgX1J1bGVMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1J1bGVMaXN0KTtcblxudmFyIF9TdHlsZVJ1bGUgPSByZXF1aXJlKCcuLi9ydWxlcy9TdHlsZVJ1bGUnKTtcblxudmFyIF9TdHlsZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3R5bGVSdWxlKTtcblxudmFyIF9jcmVhdGVSdWxlID0gcmVxdWlyZSgnLi4vdXRpbHMvY3JlYXRlUnVsZScpO1xuXG52YXIgX2NyZWF0ZVJ1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUnVsZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gQSBzeW1ib2wgcmVwbGFjZW1lbnQuXG52YXIgbm93ID0gRGF0ZS5ub3coKTtcblxudmFyIGZuVmFsdWVzTnMgPSAnZm5WYWx1ZXMnICsgbm93O1xudmFyIGZuU3R5bGVOcyA9ICdmblN0eWxlJyArICsrbm93O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgIHZhciBydWxlID0gKDAsIF9jcmVhdGVSdWxlMlsnZGVmYXVsdCddKShuYW1lLCB7fSwgb3B0aW9ucyk7XG4gICAgcnVsZVtmblN0eWxlTnNdID0gZGVjbDtcbiAgICByZXR1cm4gcnVsZTtcbiAgfSxcbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgdmFyIGZuID0ge307XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgICAgIGZuW3Byb3BdID0gdmFsdWU7XG4gICAgfVxuICAgIHJ1bGUgPSBydWxlO1xuICAgIHJ1bGVbZm5WYWx1ZXNOc10gPSBmbjtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhLCBydWxlKSB7XG4gICAgLy8gSXQgaXMgYSBydWxlcyBjb250YWluZXIgbGlrZSBmb3IgZS5nLiBDb25kaXRpb25hbFJ1bGUuXG4gICAgaWYgKHJ1bGUucnVsZXMgaW5zdGFuY2VvZiBfUnVsZUxpc3QyWydkZWZhdWx0J10pIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgX1N0eWxlUnVsZTJbJ2RlZmF1bHQnXSkpIHJldHVybjtcblxuICAgIHJ1bGUgPSBydWxlO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIGZuIHZhbHVlcyBtYXAsIGl0IGlzIGEgcnVsZSB3aXRoIGZ1bmN0aW9uIHZhbHVlcy5cbiAgICBpZiAocnVsZVtmblZhbHVlc05zXSkge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBydWxlW2ZuVmFsdWVzTnNdKSB7XG4gICAgICAgIHJ1bGUucHJvcChwcm9wLCBydWxlW2ZuVmFsdWVzTnNdW3Byb3BdKGRhdGEpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBydWxlID0gcnVsZTtcblxuICAgIHZhciBmblN0eWxlID0gcnVsZVtmblN0eWxlTnNdO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBhIHN0eWxlIGZ1bmN0aW9uLCB0aGUgZW50aXJlIHJ1bGUgaXMgZHluYW1pYyBhbmQgc3R5bGUgb2JqZWN0XG4gICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG4gICAgaWYgKGZuU3R5bGUpIHtcbiAgICAgIHZhciBzdHlsZSA9IGZuU3R5bGUoZGF0YSk7XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBzdHlsZSkge1xuICAgICAgICBydWxlLnByb3AoX3Byb3AsIHN0eWxlW19wcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfc2hlZXRzID0gcmVxdWlyZSgnLi4vc2hlZXRzJyk7XG5cbnZhciBfc2hlZXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoZWV0cyk7XG5cbnZhciBfU3R5bGVSdWxlID0gcmVxdWlyZSgnLi4vcnVsZXMvU3R5bGVSdWxlJyk7XG5cbnZhciBfU3R5bGVSdWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0eWxlUnVsZSk7XG5cbnZhciBfdG9Dc3NWYWx1ZSA9IHJlcXVpcmUoJy4uL3V0aWxzL3RvQ3NzVmFsdWUnKTtcblxudmFyIF90b0Nzc1ZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvQ3NzVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxuICogQ2FjaGUgdGhlIHZhbHVlIGZyb20gdGhlIGZpcnN0IHRpbWUgYSBmdW5jdGlvbiBpcyBjYWxsZWQuXG4gKi9cbnZhciBtZW1vaXplID0gZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2YWx1ZSkgdmFsdWUgPSBmbigpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogR2V0IGEgc3R5bGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIHJldHVybiBjc3NSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIElFIG1heSB0aHJvdyBpZiBwcm9wZXJ0eSBpcyB1bmtub3duLlxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9ICgwLCBfdG9Dc3NWYWx1ZTJbJ2RlZmF1bHQnXSkodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBJRSBtYXkgdGhyb3cgaWYgcHJvcGVydHkgaXMgdW5rbm93bi5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgc3R5bGUgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVByb3BlcnR5KGNzc1J1bGUsIHByb3ApIHtcbiAgdHJ5IHtcbiAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAoMCwgX3dhcm5pbmcyWydkZWZhdWx0J10pKGZhbHNlLCAnW0pTU10gRE9NRXhjZXB0aW9uIFwiJXNcIiB3YXMgdGhyb3duLiBUcmllZCB0byByZW1vdmUgcHJvcGVydHkgXCIlc1wiLicsIGVyci5tZXNzYWdlLCBwcm9wKTtcbiAgfVxufVxuXG52YXIgQ1NTUnVsZVR5cGVzID0ge1xuICBTVFlMRV9SVUxFOiAxLFxuICBLRVlGUkFNRVNfUlVMRTogN1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIENTUyBSdWxlIGtleS5cbiAgICovXG5cbn07dmFyIGdldEtleSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV4dHJhY3RLZXkgPSBmdW5jdGlvbiBleHRyYWN0S2V5KGNzc1RleHQpIHtcbiAgICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICByZXR1cm4gY3NzVGV4dC5zdWJzdHIoZnJvbSwgY3NzVGV4dC5pbmRleE9mKCd7JykgLSAxKTtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24gKGNzc1J1bGUpIHtcbiAgICBpZiAoY3NzUnVsZS50eXBlID09PSBDU1NSdWxlVHlwZXMuU1RZTEVfUlVMRSkgcmV0dXJuIGNzc1J1bGUuc2VsZWN0b3JUZXh0O1xuICAgIGlmIChjc3NSdWxlLnR5cGUgPT09IENTU1J1bGVUeXBlcy5LRVlGUkFNRVNfUlVMRSkge1xuICAgICAgdmFyIG5hbWUgPSBjc3NSdWxlLm5hbWU7XG5cbiAgICAgIGlmIChuYW1lKSByZXR1cm4gJ0BrZXlmcmFtZXMgJyArIG5hbWU7XG5cbiAgICAgIC8vIFRoZXJlIGlzIG5vIHJ1bGUubmFtZSBpbiB0aGUgZm9sbG93aW5nIGJyb3dzZXJzOlxuICAgICAgLy8gLSBJRSA5XG4gICAgICAvLyAtIFNhZmFyaSA3LjEuOFxuICAgICAgLy8gLSBNb2JpbGUgU2FmYXJpIDkuMC4wXG4gICAgICB2YXIgY3NzVGV4dCA9IGNzc1J1bGUuY3NzVGV4dDtcblxuICAgICAgcmV0dXJuICdAJyArIGV4dHJhY3RLZXkoY3NzVGV4dCwgY3NzVGV4dC5pbmRleE9mKCdrZXlmcmFtZXMnKSk7XG4gICAgfVxuXG4gICAgLy8gQ29uZGl0aW9uYWxzLlxuICAgIHJldHVybiBleHRyYWN0S2V5KGNzc1J1bGUuY3NzVGV4dCk7XG4gIH07XG59KCk7XG5cbi8qKlxuICogU2V0IHRoZSBzZWxlY3Rvci5cbiAqL1xuZnVuY3Rpb24gc2V0U2VsZWN0b3IoY3NzUnVsZSwgc2VsZWN0b3JUZXh0KSB7XG4gIGNzc1J1bGUuc2VsZWN0b3JUZXh0ID0gc2VsZWN0b3JUZXh0O1xuXG4gIC8vIFJldHVybiBmYWxzZSBpZiBzZXR0ZXIgd2FzIG5vdCBzdWNjZXNzZnVsLlxuICAvLyBDdXJyZW50bHkgd29ya3MgaW4gY2hyb21lIG9ubHkuXG4gIHJldHVybiBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9PT0gc2VsZWN0b3JUZXh0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqL1xudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbn0pO1xuXG4vKipcbiAqIEdldHMgYSBtYXAgb2YgcnVsZSBrZXlzLCB3aGVyZSB0aGUgcHJvcGVydHkgaXMgYW4gdW5lc2NhcGVkIGtleSBhbmQgdmFsdWVcbiAqIGlzIGEgcG90ZW50aWFsbHkgZXNjYXBlZCBvbmUuXG4gKiBJdCBpcyB1c2VkIHRvIGlkZW50aWZ5IENTUyBydWxlcyBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgSlNTIHJ1bGVzLiBBcyBhbiBpZGVudGlmaWVyXG4gKiBmb3IgQ1NTU3R5bGVSdWxlIHdlIG5vcm1hbGx5IHVzZSBgc2VsZWN0b3JUZXh0YC4gVGhvdWdoIGlmIG9yaWdpbmFsIHNlbGVjdG9yIHRleHRcbiAqIGNvbnRhaW5zIGVzY2FwZWQgY29kZSBwb2ludHMgZS5nLiBgOm5vdCgjXFxcXDIwKWAsIENTU09NIHdpbGwgY29tcGlsZSBpdCB0byBgOm5vdCgjIClgXG4gKiBhbmQgc28gQ1NTIHJ1bGUncyBgc2VsZWN0b3JUZXh0YCB3b24ndCBtYXRjaCBKU1MgcnVsZSBzZWxlY3Rvci5cbiAqXG4gKiBodHRwczovL3d3dy53My5vcmcvSW50ZXJuYXRpb25hbC9xdWVzdGlvbnMvcWEtZXNjYXBlcyNjc3Nlc2NhcGVzXG4gKi9cbnZhciBnZXRVbmVzY2FwZWRLZXlzTWFwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3R5bGUgPSB2b2lkIDA7XG4gIHZhciBpc0F0dGFjaGVkID0gZmFsc2U7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlcykge1xuICAgIHZhciBtYXAgPSB7fTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuICAgIGlmICghc3R5bGUpIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHJ1bGVzW2ldO1xuICAgICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIF9TdHlsZVJ1bGUyWydkZWZhdWx0J10pKSBjb250aW51ZTtcbiAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3I7XG4gICAgICAvLyBPbmx5IHVuZXNjYXBlIHNlbGVjdG9yIG92ZXIgQ1NTT00gaWYgaXQgY29udGFpbnMgYSBiYWNrIHNsYXNoLlxuXG4gICAgICBpZiAoc2VsZWN0b3IgJiYgc2VsZWN0b3IuaW5kZXhPZignXFxcXCcpICE9PSAtMSkge1xuICAgICAgICAvLyBMYXppbGx5IGF0dGFjaCB3aGVuIG5lZWRlZC5cbiAgICAgICAgaWYgKCFpc0F0dGFjaGVkKSB7XG4gICAgICAgICAgZ2V0SGVhZCgpLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgICAgICBpc0F0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZS50ZXh0Q29udGVudCA9IHNlbGVjdG9yICsgJyB7fSc7XG4gICAgICAgIHZhciBfc3R5bGUgPSBzdHlsZSxcbiAgICAgICAgICAgIHNoZWV0ID0gX3N0eWxlLnNoZWV0O1xuXG4gICAgICAgIGlmIChzaGVldCkge1xuICAgICAgICAgIHZhciBjc3NSdWxlcyA9IHNoZWV0LmNzc1J1bGVzO1xuXG4gICAgICAgICAgaWYgKGNzc1J1bGVzKSBtYXBbY3NzUnVsZXNbMF0uc2VsZWN0b3JUZXh0XSA9IHJ1bGUua2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0F0dGFjaGVkKSB7XG4gICAgICBnZXRIZWFkKCkucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuICAgICAgaXNBdHRhY2hlZCA9IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9O1xufSgpO1xuXG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCBhbiBpbmRleCBoaWdoZXIgdGhhbiB0aGUgcGFzc2VkIG9uZS5cbiAqL1xuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbmRleCA+IG9wdGlvbnMuaW5kZXggJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggdGhlIGhpZ2hlc3QgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG4gICAgaWYgKHNoZWV0LmF0dGFjaGVkICYmIHNoZWV0Lm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgPT09IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQpIHtcbiAgICAgIHJldHVybiBzaGVldDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIGNvbW1lbnQgd2l0aCBcImpzc1wiIGluc2lkZS5cbiAqL1xuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGVhZC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBoZWFkLmNoaWxkTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkgPSBfc2hlZXRzMlsnZGVmYXVsdCddLnJlZ2lzdHJ5O1xuXG5cbiAgaWYgKHJlZ2lzdHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKTtcbiAgICBpZiAoc2hlZXQpIHJldHVybiBzaGVldC5yZW5kZXJlci5lbGVtZW50O1xuXG4gICAgLy8gT3RoZXJ3aXNlIGluc2VydCBhZnRlciB0aGUgbGFzdCBhdHRhY2hlZC5cbiAgICBzaGVldCA9IGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpO1xuICAgIGlmIChzaGVldCkgcmV0dXJuIHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG5cbiAgLy8gVHJ5IHRvIGZpbmQgYSBjb21tZW50IHBsYWNlaG9sZGVyIGlmIHJlZ2lzdHJ5IGlzIGVtcHR5LlxuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBmaW5kQ29tbWVudE5vZGUoaW5zZXJ0aW9uUG9pbnQpO1xuICAgIGlmIChjb21tZW50KSByZXR1cm4gY29tbWVudC5uZXh0U2libGluZztcbiAgICAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoaW5zZXJ0aW9uUG9pbnQgPT09ICdqc3MnLCAnW0pTU10gSW5zZXJ0aW9uIHBvaW50IFwiJXNcIiBub3QgZm91bmQuJywgaW5zZXJ0aW9uUG9pbnQpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byB0aGUgRE9NLlxuICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuXG4gIHZhciBwcmV2Tm9kZSA9IGZpbmRQcmV2Tm9kZShvcHRpb25zKTtcblxuICBpZiAocHJldk5vZGUpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHByZXZOb2RlLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50Tm9kZSkgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc3R5bGUsIHByZXZOb2RlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBXb3JrcyB3aXRoIGlmcmFtZXMgYW5kIGFueSBub2RlIHR5cGVzLlxuICBpZiAoaW5zZXJ0aW9uUG9pbnQgJiYgdHlwZW9mIGluc2VydGlvblBvaW50Lm5vZGVUeXBlID09PSAnbnVtYmVyJykge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxMzI4NzI4L2ZvcmNlLWNhc3RpbmctaW4tZmxvd1xuICAgIHZhciBpbnNlcnRpb25Qb2ludEVsZW1lbnQgPSBpbnNlcnRpb25Qb2ludDtcbiAgICB2YXIgX3BhcmVudE5vZGUgPSBpbnNlcnRpb25Qb2ludEVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIGlmIChfcGFyZW50Tm9kZSkgX3BhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuaW5zZXJ0QmVmb3JlKHN0eWxlLCBwcmV2Tm9kZSk7XG59XG5cbi8qKlxuICogUmVhZCBqc3Mgbm9uY2Ugc2V0dGluZyBmcm9tIHRoZSBwYWdlIGlmIHRoZSB1c2VyIGhhcyBzZXQgaXQuXG4gKi9cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgRG9tUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERvbVJlbmRlcmVyKHNoZWV0KSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERvbVJlbmRlcmVyKTtcblxuICAgIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZSA9IGdldFByb3BlcnR5VmFsdWU7XG4gICAgdGhpcy5zZXRQcm9wZXJ0eSA9IHNldFByb3BlcnR5O1xuICAgIHRoaXMucmVtb3ZlUHJvcGVydHkgPSByZW1vdmVQcm9wZXJ0eTtcbiAgICB0aGlzLnNldFNlbGVjdG9yID0gc2V0U2VsZWN0b3I7XG4gICAgdGhpcy5nZXRLZXkgPSBnZXRLZXk7XG4gICAgdGhpcy5nZXRVbmVzY2FwZWRLZXlzTWFwID0gZ2V0VW5lc2NhcGVkS2V5c01hcDtcbiAgICB0aGlzLmhhc0luc2VydGVkUnVsZXMgPSBmYWxzZTtcblxuICAgIC8vIFRoZXJlIGlzIG5vIHNoZWV0IHdoZW4gdGhlIHJlbmRlcmVyIGlzIHVzZWQgZnJvbSBhIHN0YW5kYWxvbmUgU3R5bGVSdWxlLlxuICAgIGlmIChzaGVldCkgX3NoZWV0czJbJ2RlZmF1bHQnXS5hZGQoc2hlZXQpO1xuXG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0IHN0eWxlIGVsZW1lbnQgaW50byByZW5kZXIgdHJlZS5cbiAgICovXG5cblxuICAvLyBIVE1MU3R5bGVFbGVtZW50IG5lZWRzIGZpeGluZyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjY5NlxuXG5cbiAgX2NyZWF0ZUNsYXNzKERvbVJlbmRlcmVyLCBbe1xuICAgIGtleTogJ2F0dGFjaCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF0dGFjaCgpIHtcbiAgICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICAgIGlmICh0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSB8fCAhdGhpcy5zaGVldCkgcmV0dXJuO1xuXG4gICAgICAvLyBXaGVuIHJ1bGVzIGFyZSBpbnNlcnRlZCB1c2luZyBgaW5zZXJ0UnVsZWAgQVBJLCBhZnRlciBgc2hlZXQuZGV0YWNoKCkuYXR0YWNoKClgXG4gICAgICAvLyBicm93c2VycyByZW1vdmUgdGhvc2UgcnVsZXMuXG4gICAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgaWYgaXRzIGEgYnVnIGFuZCBpZiBpdCBpcyBrbm93bi5cbiAgICAgIC8vIFdvcmthcm91bmQgaXMgdG8gcmVkZXBsb3kgdGhlIHNoZWV0IGJlZm9yZSBhdHRhY2hpbmcgYXMgYSBzdHJpbmcuXG4gICAgICBpZiAodGhpcy5oYXNJbnNlcnRlZFJ1bGVzKSB7XG4gICAgICAgIHRoaXMuZGVwbG95KCk7XG4gICAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHN0eWxlIGVsZW1lbnQgZnJvbSByZW5kZXIgdHJlZS5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGV0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbmplY3QgQ1NTIHN0cmluZyBpbnRvIGVsZW1lbnQuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlcGxveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcGxveSgpIHtcbiAgICAgIGlmICghdGhpcy5zaGVldCkgcmV0dXJuO1xuICAgICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gJ1xcbicgKyB0aGlzLnNoZWV0LnRvU3RyaW5nKCkgKyAnXFxuJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaW5zZXJ0UnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgpIHtcbiAgICAgIHZhciBzaGVldCA9IHRoaXMuZWxlbWVudC5zaGVldDtcbiAgICAgIHZhciBjc3NSdWxlcyA9IHNoZWV0LmNzc1J1bGVzO1xuXG4gICAgICB2YXIgc3RyID0gcnVsZS50b1N0cmluZygpO1xuICAgICAgaWYgKCFpbmRleCkgaW5kZXggPSBjc3NSdWxlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghc3RyKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUoc3RyLCBpbmRleCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMlsnZGVmYXVsdCddKShmYWxzZSwgJ1tKU1NdIENhbiBub3QgaW5zZXJ0IGFuIHVuc3VwcG9ydGVkIHJ1bGUgXFxuXFxyJXMnLCBydWxlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIGNzc1J1bGVzW2luZGV4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgYSBydWxlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUnVsZShjc3NSdWxlKSB7XG4gICAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG5cbiAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICAgIHNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGluZGV4IG9mIGEgQ1NTIFJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKGNzc1J1bGUpIHtcbiAgICAgIHZhciBjc3NSdWxlcyA9IHRoaXMuZWxlbWVudC5zaGVldC5jc3NSdWxlcztcblxuICAgICAgZm9yICh2YXIgX2luZGV4ID0gMDsgX2luZGV4IDwgY3NzUnVsZXMubGVuZ3RoOyBfaW5kZXgrKykge1xuICAgICAgICBpZiAoY3NzUnVsZSA9PT0gY3NzUnVsZXNbX2luZGV4XSkgcmV0dXJuIF9pbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG5ldyBDU1MgcnVsZSBhbmQgcmVwbGFjZSB0aGUgZXhpc3Rpbmcgb25lLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBsYWNlUnVsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VSdWxlKGNzc1J1bGUsIHJ1bGUpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICAgIHZhciBuZXdDc3NSdWxlID0gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgICAgIHRoaXMuZWxlbWVudC5zaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICAgIHJldHVybiBuZXdDc3NSdWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgcnVsZXMgZWxlbWVudHMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFJ1bGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UnVsZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gRG9tUmVuZGVyZXI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5cbi8qKlxuICogUmVuZGVyaW5nIGJhY2tlbmQgdG8gZG8gbm90aGluZyBpbiBub2RlanMuXG4gKi9cbnZhciBWaXJ0dWFsUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFZpcnR1YWxSZW5kZXJlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVmlydHVhbFJlbmRlcmVyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhWaXJ0dWFsUmVuZGVyZXIsIFt7XG4gICAga2V5OiAnc2V0UHJvcGVydHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQcm9wZXJ0eSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFByb3BlcnR5VmFsdWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbW92ZVByb3BlcnR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlUHJvcGVydHkoKSB7fVxuICB9LCB7XG4gICAga2V5OiAnc2V0U2VsZWN0b3InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEtleScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEtleSgpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdHRhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRhY2goKSB7fVxuICB9LCB7XG4gICAga2V5OiAnZGV0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0YWNoKCkge31cbiAgfSwge1xuICAgIGtleTogJ2RlcGxveScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlcGxveSgpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdpbnNlcnRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5zZXJ0UnVsZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWxldGVSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlUnVsZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcGxhY2VSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbGFjZVJ1bGUoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0UnVsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlcygpIHt9XG4gIH0sIHtcbiAgICBrZXk6ICdpbmRleE9mJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5kZXhPZigpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVmlydHVhbFJlbmRlcmVyO1xufSgpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBWaXJ0dWFsUmVuZGVyZXI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBTaGFyZSB0aGUgc2FtZSB2YWx1ZXMgdGhhbiBpblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3JlYWN0LWpzcy9zcmMvbnMuanNcbnZhciBucyA9IHtcbiAganNzOiAnNjRhNTVkNTc4Zjg1NmQyNThkYzM0NWIwOTRhMmEyYjMnLFxuICBzaGVldHNSZWdpc3RyeTogJ2Q0YmQwYmFhY2JjNTJiYmQ0OGJiYjllYjI0MzQ0ZWNkJyxcbiAgc2hlZXRPcHRpb25zOiAnNmZjNTcwZDZiZDYxMzgzODE5ZDBmOWU3NDA3YzQ1MmQnXG59O1xudmFyIF9kZWZhdWx0ID0gbnM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGpzc0dsb2JhbDtcblxudmFyIF9qc3MgPSByZXF1aXJlKCdqc3MnKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHByb3BLZXkgPSAnQGdsb2JhbCc7XG52YXIgcHJlZml4S2V5ID0gJ0BnbG9iYWwgJztcblxudmFyIEdsb2JhbENvbnRhaW5lclJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR2xvYmFsQ29udGFpbmVyUnVsZSk7XG5cbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBfanNzLlJ1bGVMaXN0KF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHRoaXNcbiAgICB9KSk7XG5cbiAgICBmb3IgKHZhciBzZWxlY3RvciBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKHNlbGVjdG9yLCBzdHlsZXNbc2VsZWN0b3JdLCB7IHNlbGVjdG9yOiBzZWxlY3RvciB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzLnByb2Nlc3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBydWxlLlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhHbG9iYWxDb250YWluZXJSdWxlLCBbe1xuICAgIGtleTogJ2dldFJ1bGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRSdWxlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gICAgICB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luZGV4T2YnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndG9TdHJpbmcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnRvU3RyaW5nKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdsb2JhbENvbnRhaW5lclJ1bGU7XG59KCk7XG5cbnZhciBHbG9iYWxQcmVmaXhlZFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHbG9iYWxQcmVmaXhlZFJ1bGUpO1xuXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHZhciBzZWxlY3RvciA9IG5hbWUuc3Vic3RyKHByZWZpeEtleS5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEdsb2JhbFByZWZpeGVkUnVsZSwgW3tcbiAgICBrZXk6ICd0b1N0cmluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bGUudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdsb2JhbFByZWZpeGVkUnVsZTtcbn0oKTtcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcblxuZnVuY3Rpb24gYWRkU2NvcGUoc2VsZWN0b3IsIHNjb3BlKSB7XG4gIHZhciBwYXJ0cyA9IHNlbGVjdG9yLnNwbGl0KHNlcGFyYXRvclJlZ0V4cCk7XG4gIHZhciBzY29wZWQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArICcgJyArIHBhcnRzW2ldLnRyaW0oKTtcbiAgICBpZiAocGFydHNbaSArIDFdKSBzY29wZWQgKz0gJywgJztcbiAgfVxuICByZXR1cm4gc2NvcGVkO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlKHJ1bGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgdmFyIHJ1bGVzID0gc3R5bGVbcHJvcEtleV07XG5cbiAgaWYgKCFydWxlcykgcmV0dXJuO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcnVsZXMpIHtcbiAgICBvcHRpb25zLnNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbcHJvcEtleV07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlKSB7XG4gIHZhciBvcHRpb25zID0gcnVsZS5vcHRpb25zLFxuICAgICAgc3R5bGUgPSBydWxlLnN0eWxlO1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICBpZiAocHJvcC5zdWJzdHIoMCwgcHJvcEtleS5sZW5ndGgpICE9PSBwcm9wS2V5KSBjb250aW51ZTtcblxuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKHByb3BLZXkubGVuZ3RoKSwgcnVsZS5zZWxlY3Rvcik7XG4gICAgb3B0aW9ucy5zaGVldC5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclxuICAgIH0pKTtcbiAgICBkZWxldGUgc3R5bGVbcHJvcF07XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBqc3NHbG9iYWwoKSB7XG4gIGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZSA9PT0gcHJvcEtleSkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBwcmVmaXhLZXkubGVuZ3RoKSA9PT0gcHJlZml4S2V5KSB7XG4gICAgICByZXR1cm4gbmV3IEdsb2JhbFByZWZpeGVkUnVsZShuYW1lLCBzdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC50eXBlID09PSAnZ2xvYmFsJyB8fCBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5nbG9iYWwgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmdsb2JhbCkgb3B0aW9ucy5zZWxlY3RvciA9IG5hbWU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybjtcblxuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSk7XG4gICAgaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlKHJ1bGUpO1xuICB9XG5cbiAgcmV0dXJuIHsgb25DcmVhdGVSdWxlOiBvbkNyZWF0ZVJ1bGUsIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGpzc05lc3RlZDtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG52YXIgcGFyZW50UmVnRXhwID0gLyYvZztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24ganNzTmVzdGVkKCkge1xuICAvLyBHZXQgYSBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciAkcmVmIHJlcGxhY2VtZW50LlxuICBmdW5jdGlvbiBnZXRSZXBsYWNlUmVmKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ1tKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgJXMgaW4gJXMuJywga2V5LCBjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lcik7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICB2YXIgaGFzQW5kID0gZnVuY3Rpb24gaGFzQW5kKHN0cikge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZignJicpICE9PSAtMTtcbiAgfTtcblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuXG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnRTZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRTZWxlY3RvcnNbaV07XG5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmVzdGVkU2VsZWN0b3JzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBuZXN0ZWQgPSBuZXN0ZWRTZWxlY3RvcnNbal07XG4gICAgICAgIGlmIChyZXN1bHQpIHJlc3VsdCArPSAnLCAnO1xuICAgICAgICAvLyBSZXBsYWNlIGFsbCAmIGJ5IHRoZSBwYXJlbnQgb3IgcHJlZml4ICYgd2l0aCB0aGUgcGFyZW50LlxuICAgICAgICByZXN1bHQgKz0gaGFzQW5kKG5lc3RlZCkgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyAnICcgKyBuZXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wdGlvbnMocnVsZSwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChvcHRpb25zKSByZXR1cm4gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHsgaW5kZXg6IG9wdGlvbnMuaW5kZXggKyAxIH0pO1xuXG4gICAgdmFyIG5lc3RpbmdMZXZlbCA9IHJ1bGUub3B0aW9ucy5uZXN0aW5nTGV2ZWw7XG5cbiAgICBuZXN0aW5nTGV2ZWwgPSBuZXN0aW5nTGV2ZWwgPT09IHVuZGVmaW5lZCA/IDEgOiBuZXN0aW5nTGV2ZWwgKyAxO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHJ1bGUub3B0aW9ucy5wYXJlbnQ7XG4gICAgdmFyIG9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdmFyIHJlcGxhY2VSZWYgPSB2b2lkIDA7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIGlzTmVzdGVkID0gaGFzQW5kKHByb3ApO1xuICAgICAgdmFyIGlzTmVzdGVkQ29uZGl0aW9uYWwgPSBwcm9wWzBdID09PSAnQCc7XG5cbiAgICAgIGlmICghaXNOZXN0ZWQgJiYgIWlzTmVzdGVkQ29uZGl0aW9uYWwpIGNvbnRpbnVlO1xuXG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoaXNOZXN0ZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gcmVwbGFjZVBhcmVudFJlZnMocHJvcCwgcnVsZS5zZWxlY3RvclxuICAgICAgICAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG4gICAgICAgICk7aWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXJcbiAgICAgICAgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG4gICAgICAgICk7c2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG5cbiAgICAgICAgY29udGFpbmVyLmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBzZWxlY3Rvcjogc2VsZWN0b3IgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIGNvbnRhaW5lclxuICAgICAgICAvLyBQbGFjZSBjb25kaXRpb25hbCByaWdodCBhZnRlciB0aGUgcGFyZW50IHJ1bGUgdG8gZW5zdXJlIHJpZ2h0IG9yZGVyaW5nLlxuICAgICAgICAuYWRkUnVsZShwcm9wLCBudWxsLCBvcHRpb25zKS5hZGRSdWxlKHJ1bGUua2V5LCBzdHlsZVtwcm9wXSwgeyBzZWxlY3RvcjogcnVsZS5zZWxlY3RvciB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSB9O1xufSIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gY2FtZWxDYXNlO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2h5cGhlbmF0ZS1zdHlsZS1uYW1lJyk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h5cGhlbmF0ZVN0eWxlTmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBDb252ZXJ0IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIHRvIGRhc2ggc2VwYXJhdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0Q2FzZShzdHlsZSkge1xuICB2YXIgY29udmVydGVkID0ge307XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGNvbnZlcnRlZFsoMCwgX2h5cGhlbmF0ZVN0eWxlTmFtZTJbJ2RlZmF1bHQnXSkocHJvcCldID0gc3R5bGVbcHJvcF07XG4gIH1cblxuICBpZiAoc3R5bGUuZmFsbGJhY2tzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGUuZmFsbGJhY2tzKSkgY29udmVydGVkLmZhbGxiYWNrcyA9IHN0eWxlLmZhbGxiYWNrcy5tYXAoY29udmVydENhc2UpO2Vsc2UgY29udmVydGVkLmZhbGxiYWNrcyA9IGNvbnZlcnRDYXNlKHN0eWxlLmZhbGxiYWNrcyk7XG4gIH1cblxuICByZXR1cm4gY29udmVydGVkO1xufVxuXG4vKipcbiAqIEFsbG93IGNhbWVsIGNhc2VkIHByb3BlcnR5IG5hbWVzIGJ5IGNvbnZlcnRpbmcgdGhlbSBiYWNrIHRvIGRhc2hlcml6ZWQuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKi9cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlO1xuICAgIH1cblxuICAgIHJldHVybiBjb252ZXJ0Q2FzZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyWydkZWZhdWx0J10pKHByb3ApO1xuXG4gICAgLy8gVGhlcmUgd2FzIG5vIGNhbWVsIGNhc2UgaW4gcGxhY2VcbiAgICBpZiAocHJvcCA9PT0gaHlwaGVuYXRlZFByb3ApIHJldHVybiB2YWx1ZTtcblxuICAgIHJ1bGUucHJvcChoeXBoZW5hdGVkUHJvcCwgdmFsdWUpO1xuXG4gICAgLy8gQ29yZSB3aWxsIGlnbm9yZSB0aGF0IHByb3BlcnR5IHZhbHVlIHdlIHNldCB0aGUgcHJvcGVyIG9uZSBhYm92ZS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7IG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSwgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZSB9O1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG52YXIgY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcgaW4gY2FjaGVcbiAgICA/IGNhY2hlW3N0cmluZ11cbiAgICA6IGNhY2hlW3N0cmluZ10gPSBzdHJpbmdcbiAgICAgIC5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJCYnKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKG1zUGF0dGVybiwgJy1tcy0nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZGVmYXVsdFVuaXQ7XG5cbnZhciBfZGVmYXVsdFVuaXRzID0gcmVxdWlyZSgnLi9kZWZhdWx0VW5pdHMnKTtcblxudmFyIF9kZWZhdWx0VW5pdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmYXVsdFVuaXRzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICAgIHJldHVybiBzdHJbMV0udG9VcHBlckNhc2UoKTtcbiAgfTtcbiAgdmFyIG5ld09iaiA9IHt9O1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICBuZXdPYmpba2V5LnJlcGxhY2UocmVnRXhwLCByZXBsYWNlKV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gbmV3T2JqO1xufVxuXG52YXIgdW5pdHMgPSBhZGRDYW1lbENhc2VkVmVyc2lvbihfZGVmYXVsdFVuaXRzMlsnZGVmYXVsdCddKTtcblxuLyoqXG4gKiBSZWN1cnNpdmUgZGVlcCBzdHlsZSBwYXNzaW5nIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGN1cnJlbnQgcHJvcGVydHlcbiAqIEBwYXJhbSB7KE9iamVjdHxBcnJheXxOdW1iZXJ8U3RyaW5nKX0gcHJvcGVydHkgdmFsdWVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHsoT2JqZWN0fEFycmF5fE51bWJlcnxTdHJpbmcpfSByZXN1bHRpbmcgdmFsdWVcbiAqL1xuZnVuY3Rpb24gaXRlcmF0ZShwcm9wLCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG5cbiAgdmFyIGNvbnZlcnRlZFZhbHVlID0gdmFsdWU7XG5cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKTtcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB0eXBlID0gJ2FycmF5JztcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnKSB7XG4gICAgICAgIGZvciAodmFyIGlubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICAgIHZhbHVlW2lubmVyUHJvcF0gPSBpdGVyYXRlKGlubmVyUHJvcCwgdmFsdWVbaW5uZXJQcm9wXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfaW5uZXJQcm9wIGluIHZhbHVlKSB7XG4gICAgICAgIHZhbHVlW19pbm5lclByb3BdID0gaXRlcmF0ZShwcm9wICsgJy0nICsgX2lubmVyUHJvcCwgdmFsdWVbX2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYXJyYXknOlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWx1ZVtpXSA9IGl0ZXJhdGUocHJvcCwgdmFsdWVbaV0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgICBjb252ZXJ0ZWRWYWx1ZSA9IHZhbHVlICsgKG9wdGlvbnNbcHJvcF0gfHwgdW5pdHNbcHJvcF0gfHwgJycpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZFZhbHVlO1xufVxuXG4vKipcbiAqIEFkZCB1bml0IHRvIG51bWVyaWMgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBkZWZhdWx0VW5pdCgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4geyBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIEdlbmVyYXRlZCBqc3MtZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5leHBvcnRzWydkZWZhdWx0J10gPSB7XG4gICdhbmltYXRpb24tZGVsYXknOiAnbXMnLFxuICAnYW5pbWF0aW9uLWR1cmF0aW9uJzogJ21zJyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiAncHgnLFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi14JzogJ3B4JyxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teSc6ICdweCcsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiAncHgnLFxuICBib3JkZXI6ICdweCcsXG4gICdib3JkZXItYm90dG9tJzogJ3B4JyxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiAncHgnLFxuICAnYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMnOiAncHgnLFxuICAnYm9yZGVyLWJvdHRvbS13aWR0aCc6ICdweCcsXG4gICdib3JkZXItbGVmdCc6ICdweCcsXG4gICdib3JkZXItbGVmdC13aWR0aCc6ICdweCcsXG4gICdib3JkZXItcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci1yaWdodCc6ICdweCcsXG4gICdib3JkZXItcmlnaHQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXNwYWNpbmcnOiAncHgnLFxuICAnYm9yZGVyLXRvcCc6ICdweCcsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci10b3AtcmlnaHQtcmFkaXVzJzogJ3B4JyxcbiAgJ2JvcmRlci10b3Atd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1hZnRlci13aWR0aCc6ICdweCcsXG4gICdib3JkZXItYmVmb3JlLXdpZHRoJzogJ3B4JyxcbiAgJ2JvcmRlci1lbmQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLWhvcml6b250YWwtc3BhY2luZyc6ICdweCcsXG4gICdib3JkZXItc3RhcnQtd2lkdGgnOiAncHgnLFxuICAnYm9yZGVyLXZlcnRpY2FsLXNwYWNpbmcnOiAncHgnLFxuICBib3R0b206ICdweCcsXG4gICdib3gtc2hhZG93JzogJ3B4JyxcbiAgJ2NvbHVtbi1nYXAnOiAncHgnLFxuICAnY29sdW1uLXJ1bGUnOiAncHgnLFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiAncHgnLFxuICAnY29sdW1uLXdpZHRoJzogJ3B4JyxcbiAgJ2ZsZXgtYmFzaXMnOiAncHgnLFxuICAnZm9udC1zaXplJzogJ3B4JyxcbiAgJ2ZvbnQtc2l6ZS1kZWx0YSc6ICdweCcsXG4gIGhlaWdodDogJ3B4JyxcbiAgbGVmdDogJ3B4JyxcbiAgJ2xldHRlci1zcGFjaW5nJzogJ3B4JyxcbiAgJ2xvZ2ljYWwtaGVpZ2h0JzogJ3B4JyxcbiAgJ2xvZ2ljYWwtd2lkdGgnOiAncHgnLFxuICBtYXJnaW46ICdweCcsXG4gICdtYXJnaW4tYWZ0ZXInOiAncHgnLFxuICAnbWFyZ2luLWJlZm9yZSc6ICdweCcsXG4gICdtYXJnaW4tYm90dG9tJzogJ3B4JyxcbiAgJ21hcmdpbi1sZWZ0JzogJ3B4JyxcbiAgJ21hcmdpbi1yaWdodCc6ICdweCcsXG4gICdtYXJnaW4tdG9wJzogJ3B4JyxcbiAgJ21heC1oZWlnaHQnOiAncHgnLFxuICAnbWF4LXdpZHRoJzogJ3B4JyxcbiAgJ21hcmdpbi1lbmQnOiAncHgnLFxuICAnbWFyZ2luLXN0YXJ0JzogJ3B4JyxcbiAgJ21hc2stcG9zaXRpb24teCc6ICdweCcsXG4gICdtYXNrLXBvc2l0aW9uLXknOiAncHgnLFxuICAnbWFzay1zaXplJzogJ3B4JyxcbiAgJ21heC1sb2dpY2FsLWhlaWdodCc6ICdweCcsXG4gICdtYXgtbG9naWNhbC13aWR0aCc6ICdweCcsXG4gICdtaW4taGVpZ2h0JzogJ3B4JyxcbiAgJ21pbi13aWR0aCc6ICdweCcsXG4gICdtaW4tbG9naWNhbC1oZWlnaHQnOiAncHgnLFxuICAnbWluLWxvZ2ljYWwtd2lkdGgnOiAncHgnLFxuICBtb3Rpb246ICdweCcsXG4gICdtb3Rpb24tb2Zmc2V0JzogJ3B4JyxcbiAgb3V0bGluZTogJ3B4JyxcbiAgJ291dGxpbmUtb2Zmc2V0JzogJ3B4JyxcbiAgJ291dGxpbmUtd2lkdGgnOiAncHgnLFxuICBwYWRkaW5nOiAncHgnLFxuICAncGFkZGluZy1ib3R0b20nOiAncHgnLFxuICAncGFkZGluZy1sZWZ0JzogJ3B4JyxcbiAgJ3BhZGRpbmctcmlnaHQnOiAncHgnLFxuICAncGFkZGluZy10b3AnOiAncHgnLFxuICAncGFkZGluZy1hZnRlcic6ICdweCcsXG4gICdwYWRkaW5nLWJlZm9yZSc6ICdweCcsXG4gICdwYWRkaW5nLWVuZCc6ICdweCcsXG4gICdwYWRkaW5nLXN0YXJ0JzogJ3B4JyxcbiAgJ3BlcnNwZWN0aXZlLW9yaWdpbi14JzogJyUnLFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiAnJScsXG4gIHBlcnNwZWN0aXZlOiAncHgnLFxuICByaWdodDogJ3B4JyxcbiAgJ3NoYXBlLW1hcmdpbic6ICdweCcsXG4gIHNpemU6ICdweCcsXG4gICd0ZXh0LWluZGVudCc6ICdweCcsXG4gICd0ZXh0LXN0cm9rZSc6ICdweCcsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6ICdweCcsXG4gIHRvcDogJ3B4JyxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAnJScsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiAnJScsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXknOiAnJScsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXonOiAnJScsXG4gICd0cmFuc2l0aW9uLWRlbGF5JzogJ21zJyxcbiAgJ3RyYW5zaXRpb24tZHVyYXRpb24nOiAnbXMnLFxuICAndmVydGljYWwtYWxpZ24nOiAncHgnLFxuICB3aWR0aDogJ3B4JyxcbiAgJ3dvcmQtc3BhY2luZyc6ICdweCcsXG4gIC8vIE5vdCBleGlzdGluZyBwcm9wZXJ0aWVzLlxuICAvLyBVc2VkIHRvIGF2b2lkIGlzc3VlcyB3aXRoIGpzcy1leHBhbmQgaW50ZXJncmF0aW9uLlxuICAnYm94LXNoYWRvdy14JzogJ3B4JyxcbiAgJ2JveC1zaGFkb3cteSc6ICdweCcsXG4gICdib3gtc2hhZG93LWJsdXInOiAncHgnLFxuICAnYm94LXNoYWRvdy1zcHJlYWQnOiAncHgnLFxuICAnZm9udC1saW5lLWhlaWdodCc6ICdweCcsXG4gICd0ZXh0LXNoYWRvdy14JzogJ3B4JyxcbiAgJ3RleHQtc2hhZG93LXknOiAncHgnLFxuICAndGV4dC1zaGFkb3ctYmx1cic6ICdweCdcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0ganNzVmVuZG9yUHJlZml4ZXI7XG5cbnZhciBfY3NzVmVuZG9yID0gcmVxdWlyZSgnY3NzLXZlbmRvcicpO1xuXG52YXIgdmVuZG9yID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2Nzc1ZlbmRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbi8qKlxuICogQWRkIHZlbmRvciBwcmVmaXggdG8gYSBwcm9wZXJ0eSBuYW1lIHdoZW4gbmVlZGVkLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24ganNzVmVuZG9yUHJlZml4ZXIoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICBydWxlLmtleSA9ICdAJyArIHZlbmRvci5wcmVmaXguY3NzICsgcnVsZS5rZXkuc3Vic3RyKDEpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIHZhciBjaGFuZ2VQcm9wID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkUHJvcCA9IHZlbmRvci5zdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuXG4gICAgICB2YXIgY2hhbmdlVmFsdWUgPSBmYWxzZTtcbiAgICAgIHZhciBzdXBwb3J0ZWRWYWx1ZSA9IHZlbmRvci5zdXBwb3J0ZWRWYWx1ZShzdXBwb3J0ZWRQcm9wLCB2YWx1ZSk7XG4gICAgICBpZiAoc3VwcG9ydGVkVmFsdWUgJiYgc3VwcG9ydGVkVmFsdWUgIT09IHZhbHVlKSBjaGFuZ2VWYWx1ZSA9IHRydWU7XG5cbiAgICAgIGlmIChjaGFuZ2VQcm9wIHx8IGNoYW5nZVZhbHVlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VQcm9wKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHN0eWxlW3N1cHBvcnRlZFByb3AgfHwgcHJvcF0gPSBzdXBwb3J0ZWRWYWx1ZSB8fCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHZlbmRvci5zdXBwb3J0ZWRWYWx1ZShwcm9wLCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4geyBvblByb2Nlc3NSdWxlOiBvblByb2Nlc3NSdWxlLCBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWUgfTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN1cHBvcnRlZFZhbHVlID0gZXhwb3J0cy5zdXBwb3J0ZWRQcm9wZXJ0eSA9IGV4cG9ydHMucHJlZml4ID0gdW5kZWZpbmVkO1xuXG52YXIgX3ByZWZpeCA9IHJlcXVpcmUoJy4vcHJlZml4Jyk7XG5cbnZhciBfcHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ByZWZpeCk7XG5cbnZhciBfc3VwcG9ydGVkUHJvcGVydHkgPSByZXF1aXJlKCcuL3N1cHBvcnRlZC1wcm9wZXJ0eScpO1xuXG52YXIgX3N1cHBvcnRlZFByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N1cHBvcnRlZFByb3BlcnR5KTtcblxudmFyIF9zdXBwb3J0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vc3VwcG9ydGVkLXZhbHVlJyk7XG5cbnZhciBfc3VwcG9ydGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3VwcG9ydGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHtcbiAgcHJlZml4OiBfcHJlZml4MlsnZGVmYXVsdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogX3N1cHBvcnRlZFByb3BlcnR5MlsnZGVmYXVsdCddLFxuICBzdXBwb3J0ZWRWYWx1ZTogX3N1cHBvcnRlZFZhbHVlMlsnZGVmYXVsdCddXG59OyAvKipcbiAgICAqIENTUyBWZW5kb3IgcHJlZml4IGRldGVjdGlvbiBhbmQgcHJvcGVydHkgZmVhdHVyZSB0ZXN0aW5nLlxuICAgICpcbiAgICAqIEBjb3B5cmlnaHQgT2xlZyBTbG9ib2Rza29pIDIwMTVcbiAgICAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9qc3N0eWxlcy9jc3MtdmVuZG9yXG4gICAgKiBAbGljZW5zZSBNSVRcbiAgICAqL1xuXG5leHBvcnRzLnByZWZpeCA9IF9wcmVmaXgyWydkZWZhdWx0J107XG5leHBvcnRzLnN1cHBvcnRlZFByb3BlcnR5ID0gX3N1cHBvcnRlZFByb3BlcnR5MlsnZGVmYXVsdCddO1xuZXhwb3J0cy5zdXBwb3J0ZWRWYWx1ZSA9IF9zdXBwb3J0ZWRWYWx1ZTJbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBzdXBwb3J0ZWRQcm9wZXJ0eTtcblxudmFyIF9pc0luQnJvd3NlciA9IHJlcXVpcmUoJ2lzLWluLWJyb3dzZXInKTtcblxudmFyIF9pc0luQnJvd3NlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0luQnJvd3Nlcik7XG5cbnZhciBfcHJlZml4ID0gcmVxdWlyZSgnLi9wcmVmaXgnKTtcblxudmFyIF9wcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4KTtcblxudmFyIF9jYW1lbGl6ZSA9IHJlcXVpcmUoJy4vY2FtZWxpemUnKTtcblxudmFyIF9jYW1lbGl6ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jYW1lbGl6ZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIGVsID0gdm9pZCAwO1xudmFyIGNhY2hlID0ge307XG5cbmlmIChfaXNJbkJyb3dzZXIyWydkZWZhdWx0J10pIHtcbiAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cbiAgLyoqXG4gICAqIFdlIHRlc3QgZXZlcnkgcHJvcGVydHkgb24gdmVuZG9yIHByZWZpeCByZXF1aXJlbWVudC5cbiAgICogT25jZSB0ZXN0ZWQsIHJlc3VsdCBpcyBjYWNoZWQuIEl0IGdpdmVzIHVzIHVwIHRvIDcwJSBwZXJmIGJvb3N0LlxuICAgKiBodHRwOi8vanNwZXJmLmNvbS9lbGVtZW50LXN0eWxlLW9iamVjdC1hY2Nlc3MtdnMtcGxhaW4tb2JqZWN0XG4gICAqXG4gICAqIFByZWZpbGwgY2FjaGUgd2l0aCBrbm93biBjc3MgcHJvcGVydGllcyB0byByZWR1Y2UgYW1vdW50IG9mXG4gICAqIHByb3BlcnRpZXMgd2UgbmVlZCB0byBmZWF0dXJlIHRlc3QgYXQgcnVudGltZS5cbiAgICogaHR0cDovL2Rhdmlkd2Fsc2gubmFtZS92ZW5kb3ItcHJlZml4XG4gICAqL1xuICB2YXIgY29tcHV0ZWQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgaWYgKCFpc05hTihrZXkpKSBjYWNoZVtjb21wdXRlZFtrZXldXSA9IGNvbXB1dGVkW2tleV07XG4gIH1cbn1cblxuLyoqXG4gKiBUZXN0IGlmIGEgcHJvcGVydHkgaXMgc3VwcG9ydGVkLCByZXR1cm5zIHN1cHBvcnRlZCBwcm9wZXJ0eSB3aXRoIHZlbmRvclxuICogcHJlZml4IGlmIHJlcXVpcmVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgbm90IHN1cHBvcnRlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBkYXNoIHNlcGFyYXRlZFxuICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIGlmICghZWwpIHJldHVybiBwcm9wO1xuXG4gIC8vIFdlIGhhdmUgbm90IHRlc3RlZCB0aGlzIHByb3AgeWV0LCBsZXRzIGRvIHRoZSB0ZXN0LlxuICBpZiAoY2FjaGVbcHJvcF0gIT0gbnVsbCkgcmV0dXJuIGNhY2hlW3Byb3BdO1xuXG4gIC8vIENhbWVsaXphdGlvbiBpcyByZXF1aXJlZCBiZWNhdXNlIHdlIGNhbid0IHRlc3QgdXNpbmdcbiAgLy8gY3NzIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cbiAgLy8gVGVzdCBpZiBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQgYXMgaXQgaXMuXG4gIGlmICgoMCwgX2NhbWVsaXplMlsnZGVmYXVsdCddKShwcm9wKSBpbiBlbC5zdHlsZSkge1xuICAgIGNhY2hlW3Byb3BdID0gcHJvcDtcbiAgfVxuICAvLyBUZXN0IGlmIHByb3BlcnR5IGlzIHN1cHBvcnRlZCB3aXRoIHZlbmRvciBwcmVmaXguXG4gIGVsc2UgaWYgKF9wcmVmaXgyWydkZWZhdWx0J10uanMgKyAoMCwgX2NhbWVsaXplMlsnZGVmYXVsdCddKSgnLScgKyBwcm9wKSBpbiBlbC5zdHlsZSkge1xuICAgICAgY2FjaGVbcHJvcF0gPSBfcHJlZml4MlsnZGVmYXVsdCddLmNzcyArIHByb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlW3Byb3BdID0gZmFsc2U7XG4gICAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBjYW1lbGl6ZTtcbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0IGRhc2ggc2VwYXJhdGVkIHN0cmluZ3MgdG8gY2FtZWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ0V4cCwgdG9VcHBlcik7XG59XG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBzdXBwb3J0ZWRWYWx1ZTtcblxudmFyIF9pc0luQnJvd3NlciA9IHJlcXVpcmUoJ2lzLWluLWJyb3dzZXInKTtcblxudmFyIF9pc0luQnJvd3NlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc0luQnJvd3Nlcik7XG5cbnZhciBfcHJlZml4ID0gcmVxdWlyZSgnLi9wcmVmaXgnKTtcblxudmFyIF9wcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBlbCA9IHZvaWQgMDtcblxuaWYgKF9pc0luQnJvd3NlcjJbJ2RlZmF1bHQnXSkgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG5cbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRlZFZhbHVlKHByb3BlcnR5LCB2YWx1ZSkge1xuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gdmFsdWU7XG5cbiAgLy8gSXQgaXMgYSBzdHJpbmcgb3IgYSBudW1iZXIgYXMgYSBzdHJpbmcgbGlrZSAnMScuXG4gIC8vIFdlIHdhbnQgb25seSBwcmVmaXhhYmxlIHZhbHVlcyBoZXJlLlxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCAhaXNOYU4ocGFyc2VJbnQodmFsdWUsIDEwKSkpIHJldHVybiB2YWx1ZTtcblxuICB2YXIgY2FjaGVLZXkgPSBwcm9wZXJ0eSArIHZhbHVlO1xuXG4gIGlmIChjYWNoZVtjYWNoZUtleV0gIT0gbnVsbCkgcmV0dXJuIGNhY2hlW2NhY2hlS2V5XTtcblxuICAvLyBJRSBjYW4gZXZlbiB0aHJvdyBhbiBlcnJvciBpbiBzb21lIGNhc2VzLCBmb3IgZS5nLiBzdHlsZS5jb250ZW50ID0gJ2JhcidcbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjYWNoZVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBWYWx1ZSBpcyBzdXBwb3J0ZWQgYXMgaXQgaXMuXG4gIGlmIChlbC5zdHlsZVtwcm9wZXJ0eV0gIT09ICcnKSB7XG4gICAgY2FjaGVbY2FjaGVLZXldID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGVzdCB2YWx1ZSB3aXRoIHZlbmRvciBwcmVmaXguXG4gICAgdmFsdWUgPSBfcHJlZml4MlsnZGVmYXVsdCddLmNzcyArIHZhbHVlO1xuXG4gICAgLy8gSGFyZGNvZGUgdGVzdCB0byBjb252ZXJ0IFwiZmxleFwiIHRvIFwiLW1zLWZsZXhib3hcIiBmb3IgSUUxMC5cbiAgICBpZiAodmFsdWUgPT09ICctbXMtZmxleCcpIHZhbHVlID0gJy1tcy1mbGV4Ym94JztcblxuICAgIGVsLnN0eWxlW3Byb3BlcnR5XSA9IHZhbHVlO1xuXG4gICAgLy8gVmFsdWUgaXMgc3VwcG9ydGVkIHdpdGggdmVuZG9yIHByZWZpeC5cbiAgICBpZiAoZWwuc3R5bGVbcHJvcGVydHldICE9PSAnJykgY2FjaGVbY2FjaGVLZXldID0gdmFsdWU7XG4gIH1cblxuICBpZiAoIWNhY2hlW2NhY2hlS2V5XSkgY2FjaGVbY2FjaGVLZXldID0gZmFsc2U7XG5cbiAgLy8gUmVzZXQgc3R5bGUgdmFsdWUuXG4gIGVsLnN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuXG4gIHJldHVybiBjYWNoZVtjYWNoZUtleV07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0ganNzUHJvcHNTb3J0O1xuLyoqXG4gKiBTb3J0IHByb3BzIGJ5IGxlbmd0aC5cbiAqL1xuZnVuY3Rpb24ganNzUHJvcHNTb3J0KCkge1xuICBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIHJldHVybiBwcm9wMC5sZW5ndGggLSBwcm9wMS5sZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScpIHJldHVybiBzdHlsZTtcblxuICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKHN0eWxlKS5zb3J0KHNvcnQpO1xuICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcbiAgICAgIG5ld1N0eWxlW3Byb3BzW3Byb3BdXSA9IHN0eWxlW3Byb3BzW3Byb3BdXTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0eWxlO1xuICB9XG5cbiAgcmV0dXJuIHsgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG4vLyBVc2VkIGh0dHBzOi8vZ2l0aHViLmNvbS90aGlua2xvb3AvbXVsdGkta2V5LWNhY2hlIGFzIGluc3BpcmF0aW9uXG52YXIgbXVsdGlLZXlTdG9yZSA9IHtcbiAgc2V0OiBmdW5jdGlvbiBzZXQoY2FjaGUsIGtleTEsIGtleTIsIHZhbHVlKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuXG4gICAgaWYgKCFzdWJDYWNoZSkge1xuICAgICAgc3ViQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBjYWNoZS5zZXQoa2V5MSwgc3ViQ2FjaGUpO1xuICAgIH1cblxuICAgIHN1YkNhY2hlLnNldChrZXkyLCB2YWx1ZSk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gZ2V0KGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHJldHVybiBzdWJDYWNoZSA/IHN1YkNhY2hlLmdldChrZXkyKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKGNhY2hlLCBrZXkxLCBrZXkyKSB7XG4gICAgdmFyIHN1YkNhY2hlID0gY2FjaGUuZ2V0KGtleTEpO1xuICAgIHN1YkNhY2hlLmRlbGV0ZShrZXkyKTtcbiAgfVxufTtcbnZhciBfZGVmYXVsdCA9IG11bHRpS2V5U3RvcmU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCIvKiFcbiAqIGlzLXBsYWluLW9iamVjdCA8aHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJ2lzb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0T2JqZWN0KG8pIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG8pID09PSB0cnVlXG4gICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgdmFyIGN0b3IscHJvdDtcblxuICBpZiAoaXNPYmplY3RPYmplY3QobykgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG4gIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgIT09ICdmdW5jdGlvbicpIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG4gIHByb3QgPSBjdG9yLnByb3RvdHlwZTtcbiAgaWYgKGlzT2JqZWN0T2JqZWN0KHByb3QpID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuICBpZiAocHJvdC5oYXNPd25Qcm9wZXJ0eSgnaXNQcm90b3R5cGVPZicpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIE1vc3QgbGlrZWx5IGEgcGxhaW4gT2JqZWN0XG4gIHJldHVybiB0cnVlO1xufTtcbiIsIi8qIVxuICogaXNvYmplY3QgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzb2JqZWN0PlxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNC0yMDE3LCBKb24gU2NobGlua2VydC5cbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiBBcnJheS5pc0FycmF5KHZhbCkgPT09IGZhbHNlO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1peGlucztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgc3BhY2luZywgbWl4aW5zKSB7XG4gIHZhciBfdG9vbGJhcjtcblxuICByZXR1cm4gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgZ3V0dGVyczogZnVuY3Rpb24gZ3V0dGVycygpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZy51bml0ICogMixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nLnVuaXQgKiAyXG4gICAgICB9LCBzdHlsZXMsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBicmVha3BvaW50cy51cCgnc20nKSwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBzcGFjaW5nLnVuaXQgKiAzLFxuICAgICAgICBwYWRkaW5nUmlnaHQ6IHNwYWNpbmcudW5pdCAqIDNcbiAgICAgIH0sIHN0eWxlc1ticmVha3BvaW50cy51cCgnc20nKV0pKSk7XG4gICAgfSxcbiAgICB0b29sYmFyOiAoX3Rvb2xiYXIgPSB7XG4gICAgICBtaW5IZWlnaHQ6IDU2XG4gICAgfSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF90b29sYmFyLCBicmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgbWluSGVpZ2h0OiA2NFxuICAgIH0pLCBfdG9vbGJhcilcbiAgfSwgbWl4aW5zKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQYWxldHRlO1xuZXhwb3J0cy5kYXJrID0gZXhwb3J0cy5saWdodCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2RlZXBtZXJnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlZXBtZXJnZVwiKSk7XG5cbnZhciBfaW5kaWdvID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2luZGlnb1wiKSk7XG5cbnZhciBfcGluayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9waW5rXCIpKTtcblxudmFyIF9ncmV5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2dyZXlcIikpO1xuXG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xuXG52YXIgX2NvbW1vbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9jb21tb25cIikpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi9jb2xvck1hbmlwdWxhdG9yXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxudmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IF9jb21tb24uZGVmYXVsdC53aGl0ZSxcbiAgICBkZWZhdWx0OiBfZ3JleS5kZWZhdWx0WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjE0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKSdcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbnZhciBkYXJrID0ge1xuICB0ZXh0OiB7XG4gICAgcHJpbWFyeTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIHNlY29uZGFyeTogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGhpbnQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknLFxuICAgIGljb246ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknXG4gIH0sXG4gIGRpdmlkZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTIpJyxcbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfZ3JleS5kZWZhdWx0WzgwMF0sXG4gICAgZGVmYXVsdDogJyMzMDMwMzAnXG4gIH0sXG4gIGFjdGlvbjoge1xuICAgIGFjdGl2ZTogX2NvbW1vbi5kZWZhdWx0LndoaXRlLFxuICAgIGhvdmVyOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMSxcbiAgICBzZWxlY3RlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKScsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknXG4gIH1cbn07XG5leHBvcnRzLmRhcmsgPSBkYXJrO1xuXG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikoaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gJ2RhcmsnKSB7XG4gICAgICBpbnRlbnQuZGFyayA9ICgwLCBfY29sb3JNYW5pcHVsYXRvci5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldCAqIDEuNSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhbGV0dGUocGFsZXR0ZSkge1xuICB2YXIgX3BhbGV0dGUkcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSxcbiAgICAgIHByaW1hcnkgPSBfcGFsZXR0ZSRwcmltYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IF9pbmRpZ28uZGVmYXVsdFszMDBdLFxuICAgIG1haW46IF9pbmRpZ28uZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9pbmRpZ28uZGVmYXVsdFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRwcmltYXJ5LFxuICAgICAgX3BhbGV0dGUkc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnkgPSBfcGFsZXR0ZSRzZWNvbmRhcnkgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3BpbmsuZGVmYXVsdC5BMjAwLFxuICAgIG1haW46IF9waW5rLmRlZmF1bHQuQTQwMCxcbiAgICBkYXJrOiBfcGluay5kZWZhdWx0LkE3MDBcbiAgfSA6IF9wYWxldHRlJHNlY29uZGFyeSxcbiAgICAgIF9wYWxldHRlJGVycm9yID0gcGFsZXR0ZS5lcnJvcixcbiAgICAgIGVycm9yID0gX3BhbGV0dGUkZXJyb3IgPT09IHZvaWQgMCA/IHtcbiAgICBsaWdodDogX3JlZC5kZWZhdWx0WzMwMF0sXG4gICAgbWFpbjogX3JlZC5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX3JlZC5kZWZhdWx0WzcwMF1cbiAgfSA6IF9wYWxldHRlJGVycm9yLFxuICAgICAgX3BhbGV0dGUkdHlwZSA9IHBhbGV0dGUudHlwZSxcbiAgICAgIHR5cGUgPSBfcGFsZXR0ZSR0eXBlID09PSB2b2lkIDAgPyAnbGlnaHQnIDogX3BhbGV0dGUkdHlwZSxcbiAgICAgIF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9IHBhbGV0dGUuY29udHJhc3RUaHJlc2hvbGQsXG4gICAgICBjb250cmFzdFRocmVzaG9sZCA9IF9wYWxldHRlJGNvbnRyYXN0VGhyZSA9PT0gdm9pZCAwID8gMyA6IF9wYWxldHRlJGNvbnRyYXN0VGhyZSxcbiAgICAgIF9wYWxldHRlJHRvbmFsT2Zmc2V0ID0gcGFsZXR0ZS50b25hbE9mZnNldCxcbiAgICAgIHRvbmFsT2Zmc2V0ID0gX3BhbGV0dGUkdG9uYWxPZmZzZXQgPT09IHZvaWQgMCA/IDAuMiA6IF9wYWxldHRlJHRvbmFsT2Zmc2V0LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwYWxldHRlLCBbXCJwcmltYXJ5XCIsIFwic2Vjb25kYXJ5XCIsIFwiZXJyb3JcIiwgXCJ0eXBlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXSk7XG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgICAvLyBCb290c3RyYXA6IGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iLzFkNmUzNzEwZGQ0NDdkZTFhMjAwZjI5ZThmYTUyMWY4YTA5MDhmNzAvc2Nzcy9fZnVuY3Rpb25zLnNjc3MjTDU5XG4gICAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICAgIHZhciBjb250cmFzdFRleHQgPSAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZ2V0Q29udHJhc3RSYXRpbykoYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyYXN0ID0gKDAsIF9jb2xvck1hbmlwdWxhdG9yLmdldENvbnRyYXN0UmF0aW8pKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY29udHJhc3QgPj0gMywgW1wiTWF0ZXJpYWwtVUk6IHRoZSBjb250cmFzdCByYXRpbyBvZiBcIi5jb25jYXQoY29udHJhc3QsIFwiOjEgZm9yIFwiKS5jb25jYXQoY29udHJhc3RUZXh0LCBcIiBvbiBcIikuY29uY2F0KGJhY2tncm91bmQpLCAnZmFsbHMgYmVsb3cgdGhlIFdBQ0cgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udHJhc3RUZXh0O1xuICB9XG5cbiAgZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuXG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb2xvci5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoWydNYXRlcmlhbC1VSTogdGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC4nLCBcIlRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgYXVnbWVudENvbG9yKHByaW1hcnkpO1xuICBhdWdtZW50Q29sb3Ioc2Vjb25kYXJ5LCAnQTQwMCcsICdBMjAwJywgJ0E3MDAnKTtcbiAgYXVnbWVudENvbG9yKGVycm9yKTtcbiAgdmFyIHR5cGVzID0ge1xuICAgIGRhcms6IGRhcmssXG4gICAgbGlnaHQ6IGxpZ2h0XG4gIH07XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSh0eXBlc1t0eXBlXSwgXCJNYXRlcmlhbC1VSTogdGhlIHBhbGV0dGUgdHlwZSBgXCIuY29uY2F0KHR5cGUsIFwiYCBpcyBub3Qgc3VwcG9ydGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBwYWxldHRlT3V0cHV0ID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBfY29tbW9uLmRlZmF1bHQsXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogcHJpbWFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IHNlY29uZGFyeSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBlcnJvcixcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogX2dyZXkuZGVmYXVsdCxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW4gdGhlIGJhY2tncm91bmQgYW5kXG4gICAgLy8gdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQ6IGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2UgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm4gdGhlIGNvbG9yIG9mIHRoZSB0ZXh0IHRvIG1heGltaXplIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQ6IGdldENvbnRyYXN0VGV4dCxcbiAgICAvLyBHZW5lcmF0ZSBhIHJpY2ggY29sb3Igb2JqZWN0LlxuICAgIGF1Z21lbnRDb2xvcjogYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldDogdG9uYWxPZmZzZXRcbiAgfSwgdHlwZXNbdHlwZV0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG52YXIgX2RlZmF1bHQgPSBpbmRpZ287XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBwaW5rID0ge1xuICA1MDogJyNmY2U0ZWMnLFxuICAxMDA6ICcjZjhiYmQwJyxcbiAgMjAwOiAnI2Y0OGZiMScsXG4gIDMwMDogJyNmMDYyOTInLFxuICA0MDA6ICcjZWM0MDdhJyxcbiAgNTAwOiAnI2U5MWU2MycsXG4gIDYwMDogJyNkODFiNjAnLFxuICA3MDA6ICcjYzIxODViJyxcbiAgODAwOiAnI2FkMTQ1NycsXG4gIDkwMDogJyM4ODBlNGYnLFxuICBBMTAwOiAnI2ZmODBhYicsXG4gIEEyMDA6ICcjZmY0MDgxJyxcbiAgQTQwMDogJyNmNTAwNTcnLFxuICBBNzAwOiAnI2M1MTE2Midcbn07XG52YXIgX2RlZmF1bHQgPSBwaW5rO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xudmFyIF9kZWZhdWx0ID0gZ3JleTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xudmFyIF9kZWZhdWx0ID0gcmVkO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gY29tbW9uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHlwb2dyYXBoeTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL21lcmdlIGlzID4gM2tiLlxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRodG1sRm9udFNpemUgPSBfcmVmLmh0bWxGb250U2l6ZSxcbiAgICAgIGh0bWxGb250U2l6ZSA9IF9yZWYkaHRtbEZvbnRTaXplID09PSB2b2lkIDAgPyAxNiA6IF9yZWYkaHRtbEZvbnRTaXplLFxuICAgICAgX3JlZiR1c2VOZXh0VmFyaWFudHMgPSBfcmVmLnVzZU5leHRWYXJpYW50cyxcbiAgICAgIHVzZU5leHRWYXJpYW50cyA9IF9yZWYkdXNlTmV4dFZhcmlhbnRzID09PSB2b2lkIDAgPyBCb29sZWFuKF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9VU0VfTkVYVF9UWVBPR1JBUEhZX1ZBUklBTlRTX18pIDogX3JlZiR1c2VOZXh0VmFyaWFudHMsXG4gICAgICBfcmVmJHN1cHByZXNzV2FybmluZyA9IF9yZWYuc3VwcHJlc3NXYXJuaW5nLFxuICAgICAgc3VwcHJlc3NXYXJuaW5nID0gX3JlZiRzdXBwcmVzc1dhcm5pbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzdXBwcmVzc1dhcm5pbmcsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImh0bWxGb250U2l6ZVwiLCBcInVzZU5leHRWYXJpYW50c1wiLCBcInN1cHByZXNzV2FybmluZ1wiLCBcImFsbFZhcmlhbnRzXCJdKTtcblxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodXNlTmV4dFZhcmlhbnRzIHx8IHN1cHByZXNzV2FybmluZywgJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHVzaW5nIHRoZSBkZXByZWNhdGVkIHR5cG9ncmFwaHkgdmFyaWFudHMgJyArICd0aGF0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLicgKyAnXFxuUGxlYXNlIHJlYWQgdGhlIG1pZ3JhdGlvbiBndWlkZSB1bmRlciBodHRwczovL21hdGVyaWFsLXVpLmNvbS9zdHlsZS90eXBvZ3JhcGh5I21pZ3JhdGlvbi10by10eXBvZ3JhcGh5LXYyJykgOiB2b2lkIDA7XG4gIHZhciBjb2VmID0gZm9udFNpemUgLyAxNDtcblxuICB2YXIgcHhUb1JlbSA9IGZ1bmN0aW9uIHB4VG9SZW0oc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodCxcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgICAgLy8gVW5pdGxlc3MgZm9sbG93aW5nIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICAgIGxpbmVIZWlnaHQ6IGxpbmVIZWlnaHRcbiAgICB9LCBmb250RmFtaWx5ID09PSBkZWZhdWx0Rm9udEZhbWlseSA/IHtcbiAgICAgIGxldHRlclNwYWNpbmc6IFwiXCIuY29uY2F0KHJvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKSwgXCJlbVwiKVxuICAgIH0gOiB7fSwgY2FzaW5nLCBhbGxWYXJpYW50cyk7XG4gIH07XG5cbiAgdmFyIG5leHRWYXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEsIC0xLjUpLFxuICAgIGgyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodExpZ2h0LCA2MCwgMSwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMDQsIDApLFxuICAgIGg0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDM0LCAxLjE3LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMywgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5Mk5leHQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTQsIDEuNSwgMC4xNSksXG4gICAgYnV0dG9uTmV4dDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb25OZXh0OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAxLjY2LCAwLjQpLFxuICAgIG92ZXJsaW5lOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDEyLCAyLjY2LCAxLCBjYXNlQWxsQ2FwcylcbiAgfTsgLy8gVG8gcmVtb3ZlIGluIHY0XG5cbiAgdmFyIG9sZFZhcmlhbnRzID0ge1xuICAgIGRpc3BsYXk0OiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDExMiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGV0dGVyU3BhY2luZzogJy0uMDRlbScsXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgxMjggLyAxMTIpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDRlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MzogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg1NiksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAnLS4wMmVtJyxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDczIC8gNTYpLCBcImVtXCIpLFxuICAgICAgbWFyZ2luTGVmdDogJy0uMDJlbScsXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBkaXNwbGF5MjogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSg0NSksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCg1MSAvIDQ1KSwgXCJlbVwiKSxcbiAgICAgIG1hcmdpbkxlZnQ6ICctLjAyZW0nLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgZGlzcGxheTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMzQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoNDEgLyAzNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBoZWFkbGluZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBmb250U2l6ZTogcHhUb1JlbSgyNCksXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRGYW1pbHk6IGZvbnRGYW1pbHksXG4gICAgICBsaW5lSGVpZ2h0OiBcIlwiLmNvbmNhdChyb3VuZCgzMi41IC8gMjQpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIHRpdGxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDIxKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQuNSAvIDIxKSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBzdWJoZWFkaW5nOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE2KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDI0IC8gMTYpLCBcImVtXCIpLFxuICAgICAgY29sb3I6IHBhbGV0dGUudGV4dC5wcmltYXJ5XG4gICAgfSwgYWxsVmFyaWFudHMpLFxuICAgIGJvZHkyOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDE0KSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjQgLyAxNCksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LCBhbGxWYXJpYW50cyksXG4gICAgYm9keTE6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgZm9udFdlaWdodDogZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgbGluZUhlaWdodDogXCJcIi5jb25jYXQocm91bmQoMjAuNSAvIDE0KSwgXCJlbVwiKSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBjYXB0aW9uOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvbnRTaXplOiBweFRvUmVtKDEyKSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGxpbmVIZWlnaHQ6IFwiXCIuY29uY2F0KHJvdW5kKDE2LjUgLyAxMiksIFwiZW1cIiksXG4gICAgICBjb2xvcjogcGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKSxcbiAgICBidXR0b246ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgZm9udFNpemU6IHB4VG9SZW0oMTQpLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICBmb250V2VpZ2h0OiBmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiBwYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sIGFsbFZhcmlhbnRzKVxuICB9O1xuICByZXR1cm4gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgcHhUb1JlbTogcHhUb1JlbSxcbiAgICByb3VuZDogcm91bmQsXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW1cbiAgfSwgb2xkVmFyaWFudHMsIG5leHRWYXJpYW50cywgdXNlTmV4dFZhcmlhbnRzID8ge1xuICAgIGJvZHkxOiBuZXh0VmFyaWFudHMuYm9keTFOZXh0LFxuICAgIGJvZHkyOiBuZXh0VmFyaWFudHMuYm9keTJOZXh0LFxuICAgIGJ1dHRvbjogbmV4dFZhcmlhbnRzLmJ1dHRvbk5leHQsXG4gICAgY2FwdGlvbjogbmV4dFZhcmlhbnRzLmNhcHRpb25OZXh0XG4gIH0gOiB7fSwge1xuICAgIHVzZU5leHRWYXJpYW50czogdXNlTmV4dFZhcmlhbnRzXG4gIH0pLCBvdGhlciwge1xuICAgIGNsb25lOiBmYWxzZSAvLyBObyBuZWVkIHRvIGNsb25lIGRlZXBcblxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBzaGFkb3dLZXlVbWJyYU9wYWNpdHkgPSAwLjI7XG52YXIgc2hhZG93S2V5UGVudW1icmFPcGFjaXR5ID0gMC4xNDtcbnZhciBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5cbmZ1bmN0aW9uIGNyZWF0ZVNoYWRvdygpIHtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDUgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDYgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNl0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDcgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbN10sIFwicHggcmdiYSgwLCAwLCAwLCBcIikuY29uY2F0KHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSwgXCIpXCIpLCBcIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDggPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOF0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDkgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbOV0sIFwicHggXCIpLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoIDw9IDEwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzEwXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTFdLCBcInB4IHJnYmEoMCwgMCwgMCwgXCIpLmNvbmNhdChzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSwgXCIpXCIpXS5qb2luKCcsJyk7XG59XG5cbnZhciBzaGFkb3dzID0gWydub25lJywgY3JlYXRlU2hhZG93KDAsIDEsIDMsIDAsIDAsIDEsIDEsIDAsIDAsIDIsIDEsIC0xKSwgY3JlYXRlU2hhZG93KDAsIDEsIDUsIDAsIDAsIDIsIDIsIDAsIDAsIDMsIDEsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDEsIDgsIDAsIDAsIDMsIDQsIDAsIDAsIDMsIDMsIC0yKSwgY3JlYXRlU2hhZG93KDAsIDIsIDQsIC0xLCAwLCA0LCA1LCAwLCAwLCAxLCAxMCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNSwgOCwgMCwgMCwgMSwgMTQsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgNSwgLTEsIDAsIDYsIDEwLCAwLCAwLCAxLCAxOCwgMCksIGNyZWF0ZVNoYWRvdygwLCA0LCA1LCAtMiwgMCwgNywgMTAsIDEsIDAsIDIsIDE2LCAxKSwgY3JlYXRlU2hhZG93KDAsIDUsIDUsIC0zLCAwLCA4LCAxMCwgMSwgMCwgMywgMTQsIDIpLCBjcmVhdGVTaGFkb3coMCwgNSwgNiwgLTMsIDAsIDksIDEyLCAxLCAwLCAzLCAxNiwgMiksIGNyZWF0ZVNoYWRvdygwLCA2LCA2LCAtMywgMCwgMTAsIDE0LCAxLCAwLCA0LCAxOCwgMyksIGNyZWF0ZVNoYWRvdygwLCA2LCA3LCAtNCwgMCwgMTEsIDE1LCAxLCAwLCA0LCAyMCwgMyksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTIsIDE3LCAyLCAwLCA1LCAyMiwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA4LCAtNCwgMCwgMTMsIDE5LCAyLCAwLCA1LCAyNCwgNCksIGNyZWF0ZVNoYWRvdygwLCA3LCA5LCAtNCwgMCwgMTQsIDIxLCAyLCAwLCA1LCAyNiwgNCksIGNyZWF0ZVNoYWRvdygwLCA4LCA5LCAtNSwgMCwgMTUsIDIyLCAyLCAwLCA2LCAyOCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMCwgLTUsIDAsIDE2LCAyNCwgMiwgMCwgNiwgMzAsIDUpLCBjcmVhdGVTaGFkb3coMCwgOCwgMTEsIC01LCAwLCAxNywgMjYsIDIsIDAsIDYsIDMyLCA1KSwgY3JlYXRlU2hhZG93KDAsIDksIDExLCAtNSwgMCwgMTgsIDI4LCAyLCAwLCA3LCAzNCwgNiksIGNyZWF0ZVNoYWRvdygwLCA5LCAxMiwgLTYsIDAsIDE5LCAyOSwgMiwgMCwgNywgMzYsIDYpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDEzLCAtNiwgMCwgMjAsIDMxLCAzLCAwLCA4LCAzOCwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMSwgMzMsIDMsIDAsIDgsIDQwLCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxNCwgLTYsIDAsIDIyLCAzNSwgMywgMCwgOCwgNDIsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTEsIDE0LCAtNywgMCwgMjMsIDM2LCAzLCAwLCA5LCA0NCwgOCksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTUsIC03LCAwLCAyNCwgMzgsIDMsIDAsIDksIDQ2LCA4KV07XG52YXIgX2RlZmF1bHQgPSBzaGFkb3dzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc2hhcGUgPSB7XG4gIGJvcmRlclJhZGl1czogNFxufTtcbnZhciBfZGVmYXVsdCA9IHNoYXBlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgc3BhY2luZyA9IHtcbiAgLy8gQWxsIGNvbXBvbmVudHMgYWxpZ24gdG8gYW4gOGRwIHNxdWFyZSBiYXNlbGluZSBncmlkIGZvciBtb2JpbGUsIHRhYmxldCwgYW5kIGRlc2t0b3AuXG4gIC8vIGh0dHBzOi8vbWF0ZXJpYWwuaW8vZGVzaWduL2xheW91dC91bmRlcnN0YW5kaW5nLWxheW91dC5odG1sI3BpeGVsLWRlbnNpdHlcbiAgdW5pdDogOFxufTtcbnZhciBfZGVmYXVsdCA9IHNwYWNpbmc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbnZhciBfZGVmYXVsdCA9IHpJbmRleDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdHlwZW9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfZGVlcG1lcmdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZGVlcG1lcmdlXCIpKTtcblxuLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9tZXJnZSBpcyA+IDNrYi5cbi8vIFN1cHBvcnQgZm9yIHRoZSBqc3MtZXhwYW5kIHBsdWdpbi5cbmZ1bmN0aW9uIGFycmF5TWVyZ2UoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICByZXR1cm4gc291cmNlO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgdGhlbWluZ0VuYWJsZWQgPSB0eXBlb2Ygc3R5bGVzT3JDcmVhdG9yID09PSAnZnVuY3Rpb24nO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoKDAsIF90eXBlb2YyLmRlZmF1bHQpKHN0eWxlc09yQ3JlYXRvcikgPT09ICdvYmplY3QnIHx8IHRoZW1pbmdFbmFibGVkLCBbJ01hdGVyaWFsLVVJOiB0aGUgZmlyc3QgYXJndW1lbnQgcHJvdmlkZWQgdG8gd2l0aFN0eWxlcygpIGlzIGludmFsaWQuJywgJ1lvdSBuZWVkIHRvIHByb3ZpZGUgYSBmdW5jdGlvbiBnZW5lcmF0aW5nIHRoZSBzdHlsZXMgb3IgYSBzdHlsZXMgb2JqZWN0LiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcblxuICBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICB2YXIgc3R5bGVzID0gdGhlbWluZ0VuYWJsZWQgPyBzdHlsZXNPckNyZWF0b3IodGhlbWUpIDogc3R5bGVzT3JDcmVhdG9yO1xuXG4gICAgaWYgKCFuYW1lIHx8ICF0aGVtZS5vdmVycmlkZXMgfHwgIXRoZW1lLm92ZXJyaWRlc1tuYW1lXSkge1xuICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9XG5cbiAgICB2YXIgb3ZlcnJpZGVzID0gdGhlbWUub3ZlcnJpZGVzW25hbWVdO1xuICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3R5bGVzKTtcbiAgICBPYmplY3Qua2V5cyhvdmVycmlkZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgWydNYXRlcmlhbC1VSTogeW91IGFyZSB0cnlpbmcgdG8gb3ZlcnJpZGUgYSBzdHlsZSB0aGF0IGRvZXMgbm90IGV4aXN0LicsIFwiRml4IHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGtleSBvZiBgdGhlbWUub3ZlcnJpZGVzLlwiKS5jb25jYXQobmFtZSwgXCJgLlwiKV0uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gKDAsIF9kZWVwbWVyZ2UuZGVmYXVsdCkoc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldLCBvdmVycmlkZXNba2V5XSwge1xuICAgICAgICBhcnJheU1lcmdlOiBhcnJheU1lcmdlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBjcmVhdGUsXG4gICAgb3B0aW9uczoge30sXG4gICAgdGhlbWluZ0VuYWJsZWQ6IHRoZW1pbmdFbmFibGVkXG4gIH07XG59XG5cbnZhciBfZGVmYXVsdCA9IGdldFN0eWxlc0NyZWF0b3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1zeW50YXggKi9cbmZ1bmN0aW9uIGdldFRoZW1lUHJvcHMocGFyYW1zKSB7XG4gIHZhciB0aGVtZSA9IHBhcmFtcy50aGVtZSxcbiAgICAgIG5hbWUgPSBwYXJhbXMubmFtZSxcbiAgICAgIHByb3BzID0gcGFyYW1zLnByb3BzO1xuXG4gIGlmICghdGhlbWUucHJvcHMgfHwgIW5hbWUgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbnZhciBfZGVmYXVsdCA9IGdldFRoZW1lUHJvcHM7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBlbGV2YXRpb25zID0ge307XG4gIHRoZW1lLnNoYWRvd3MuZm9yRWFjaChmdW5jdGlvbiAoc2hhZG93LCBpbmRleCkge1xuICAgIGVsZXZhdGlvbnNbXCJlbGV2YXRpb25cIi5jb25jYXQoaW5kZXgpXSA9IHtcbiAgICAgIGJveFNoYWRvdzogc2hhZG93XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLnBhcGVyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNxdWFyZT17ZmFsc2V9YC4gKi9cbiAgICByb3VuZGVkOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHRoZW1lLnNoYXBlLmJvcmRlclJhZGl1c1xuICAgIH1cbiAgfSwgZWxldmF0aW9ucyk7XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gUGFwZXIocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIHNxdWFyZSA9IHByb3BzLnNxdWFyZSxcbiAgICAgIGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzcXVhcmVcIiwgXCJlbGV2YXRpb25cIl0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoZWxldmF0aW9uID49IDAgJiYgZWxldmF0aW9uIDwgMjUsIFwiTWF0ZXJpYWwtVUk6IHRoaXMgZWxldmF0aW9uIGBcIi5jb25jYXQoZWxldmF0aW9uLCBcImAgaXMgbm90IGltcGxlbWVudGVkLlwiKSkgOiB2b2lkIDA7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5yb3VuZGVkLCAhc3F1YXJlKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSwgb3RoZXIpKTtcbn1cblxuUGFwZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBTaGFkb3cgZGVwdGgsIGNvcnJlc3BvbmRzIHRvIGBkcGAgaW4gdGhlIHNwZWMuXG4gICAqIEl0J3MgYWNjZXB0aW5nIHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDI0IGluY2x1c2l2ZS5cbiAgICovXG4gIGVsZXZhdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByb3VuZGVkIGNvcm5lcnMgYXJlIGRpc2FibGVkLlxuICAgKi9cbiAgc3F1YXJlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuUGFwZXIuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBlbGV2YXRpb246IDIsXG4gIHNxdWFyZTogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBhcGVyJ1xufSkoUGFwZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e2ZhbHNlfWAuICovXG4gICAgZ3V0dGVyczogdGhlbWUubWl4aW5zLmd1dHRlcnMoKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyZWd1bGFyXCJgLiAqL1xuICAgIHJlZ3VsYXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRlbnNlXCJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFRvb2xiYXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IHByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlc1t2YXJpYW50XSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMuZ3V0dGVycywgIWRpc2FibGVHdXR0ZXJzKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5Ub29sYmFyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRvb2xiYXIgY2hpbGRyZW4sIHVzdWFsbHkgYSBtaXh0dXJlIG9mIGBJY29uQnV0dG9uYCwgYEJ1dHRvbmAgYW5kIGBUeXBvZ3JhcGh5YC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgZGlzYWJsZXMgZ3V0dGVyIHBhZGRpbmcuXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3JlZ3VsYXInLCAnZGVuc2UnXSlcbn0gOiB7fTtcblRvb2xiYXIuZGVmYXVsdFByb3BzID0ge1xuICBkaXNhYmxlR3V0dGVyczogZmFsc2UsXG4gIHZhcmlhbnQ6ICdyZWd1bGFyJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVG9vbGJhcidcbn0pKFRvb2xiYXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICBmb250U2l6ZTogMjQsXG4gICAgICB3aWR0aDogJzFlbScsXG4gICAgICBoZWlnaHQ6ICcxZW0nLFxuICAgICAgLy8gQ2hyb21lIGZpeCBmb3IgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODIwNTQxXG4gICAgICAvLyBUbyByZW1vdmUgYXQgc29tZSBwb2ludC5cbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIGZsZXhTaHJpbms6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiAyMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiAzNlxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBJY29uKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImZvbnRTaXplXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgnbWF0ZXJpYWwtaWNvbnMnLCBjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdpbmhlcml0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGZvbnRTaXplKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkljb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGljb24gZm9udCBsaWdhdHVyZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5JywgJ2FjdGlvbicsICdlcnJvcicsICdkaXNhYmxlZCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIFRoZSBmb250U2l6ZSBhcHBsaWVkIHRvIHRoZSBpY29uLiBEZWZhdWx0cyB0byAyNHB4LCBidXQgY2FuIGJlIGNvbmZpZ3VyZSB0byBpbmhlcml0IGZvbnQgc2l6ZS5cbiAgICovXG4gIGZvbnRTaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydpbmhlcml0JywgJ2RlZmF1bHQnLCAnc21hbGwnLCAnbGFyZ2UnXSlcbn0gOiB7fTtcbkljb24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2luaGVyaXQnLFxuICBjb21wb25lbnQ6ICdzcGFuJyxcbiAgZm9udFNpemU6ICdkZWZhdWx0J1xufTtcbkljb24ubXVpTmFtZSA9ICdJY29uJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpSWNvbidcbn0pKEljb24pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfY29sb3JNYW5pcHVsYXRvciA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvclwiKTtcblxudmFyIF9CdXR0b25CYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vQnV0dG9uQmFzZVwiKSk7XG5cbnZhciBfY2hhaW5Qcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jaGFpblByb3BUeXBlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEJ1dHRvbkJhc2VcbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRoZW1lLnR5cG9ncmFwaHkuYnV0dG9uLCB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIG1pbkhlaWdodDogMzYsXG4gICAgICBwYWRkaW5nOiAnOHB4IDE2cHgnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoWydiYWNrZ3JvdW5kLWNvbG9yJywgJ2JveC1zaGFkb3cnLCAnYm9yZGVyJ10sIHtcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0XG4gICAgICB9KSxcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9LFxuICAgICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzcGFuIGVsZW1lbnQgdGhhdCB3cmFwcyB0aGUgY2hpbGRyZW4uICovXG4gICAgbGFiZWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAvLyBhc3N1cmUgdGhlIGNvcnJlY3Qgd2lkdGggZm9yIGlPUyBTYWZhcmlcbiAgICAgIGRpc3BsYXk6ICdpbmhlcml0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAuICovXG4gICAgdGV4dDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwidGV4dFwiYCBhbmQgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICB0ZXh0UHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInRleHRcImAgYW5kIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICB0ZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmFyaWFudCBuYW1pbmcuICovXG4gICAgZmxhdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICBmbGF0UHJpbWFyeToge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICBmbGF0U2Vjb25kYXJ5OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBvdXRsaW5lZDoge1xuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ3JnYmEoMCwgMCwgMCwgMC4yMyknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yMyknKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgb3V0bGluZWRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCgoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluKSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoMCwgX2NvbG9yTWFuaXB1bGF0b3IuZmFkZSkodGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sIHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyT3BhY2l0eSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZClcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgb3V0bGluZWRTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4sIDAuNSkpLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW4pLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJbY29udGFpbmVkIHwgZmFiXVwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmdldENvbnRyYXN0VGV4dCh0aGVtZS5wYWxldHRlLmdyZXlbMzAwXSksXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZ3JleVszMDBdLFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzJdLFxuICAgICAgJyYkZm9jdXNWaXNpYmxlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbNl1cbiAgICAgIH0sXG4gICAgICAnJjphY3RpdmUnOiB7XG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1s4XVxuICAgICAgfSxcbiAgICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWQsXG4gICAgICAgIGJveFNoYWRvdzogdGhlbWUuc2hhZG93c1swXSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmdyZXkuQTEwMCxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5ncmV5WzMwMF1cbiAgICAgICAgfSxcbiAgICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZEJhY2tncm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiW2NvbnRhaW5lZCB8IGZhYl1cImAgYW5kIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29udGFpbmVkUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHQsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmRhcmssXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIltjb250YWluZWQgfCBmYWJdXCJgIGFuZCBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29udGFpbmVkU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuY29udHJhc3RUZXh0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkuZGFyayxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZhcmlhbnQgbmFtaW5nLiAqL1xuICAgIHJhaXNlZDoge30sXG4gICAgLy8gbGVnYWN5XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIGxlZ2FjeSB2YXJpYW50IG5hbWluZy4gKi9cbiAgICByYWlzZWRQcmltYXJ5OiB7fSxcbiAgICAvLyBsZWdhY3lcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZhcmlhbnQgbmFtaW5nLiAqL1xuICAgIHJhaXNlZFNlY29uZGFyeToge30sXG4gICAgLy8gbGVnYWN5XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiW2ZhYiB8IGV4dGVuZGVkRmFiXVwiYC4gKi9cbiAgICBmYWI6IHtcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICB3aWR0aDogNTYsXG4gICAgICBoZWlnaHQ6IDU2LFxuICAgICAgYm94U2hhZG93OiB0aGVtZS5zaGFkb3dzWzZdLFxuICAgICAgJyY6YWN0aXZlJzoge1xuICAgICAgICBib3hTaGFkb3c6IHRoZW1lLnNoYWRvd3NbMTJdXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJleHRlbmRlZEZhYlwiYC4gKi9cbiAgICBleHRlbmRlZEZhYjoge1xuICAgICAgYm9yZGVyUmFkaXVzOiA0OCAvIDIsXG4gICAgICBwYWRkaW5nOiAnMCAxNnB4JyxcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBtaW5XaWR0aDogNDgsXG4gICAgICBoZWlnaHQ6IDQ4XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBCdXR0b25CYXNlIHJvb3QgZWxlbWVudCBpZiB0aGUgYnV0dG9uIGlzIGtleWJvYXJkIGZvY3VzZWQuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibWluaVwiYCAmIGB2YXJpYW50PVwiW2ZhYiB8IGV4dGVuZGVkRmFiXVwiYC4gKi9cbiAgICBtaW5pOiB7XG4gICAgICB3aWR0aDogNDAsXG4gICAgICBoZWlnaHQ6IDQwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNpemU9XCJzbWFsbFwiYC4gKi9cbiAgICBzaXplU21hbGw6IHtcbiAgICAgIHBhZGRpbmc6ICc3cHggOHB4JyxcbiAgICAgIG1pbldpZHRoOiA2NCxcbiAgICAgIG1pbkhlaWdodDogMzIsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzaXplPVwibGFyZ2VcImAuICovXG4gICAgc2l6ZUxhcmdlOiB7XG4gICAgICBwYWRkaW5nOiAnOHB4IDI0cHgnLFxuICAgICAgbWluV2lkdGg6IDExMixcbiAgICAgIG1pbkhlaWdodDogNDAsXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE1KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmdWxsV2lkdGg9e3RydWV9YC4gKi9cbiAgICBmdWxsV2lkdGg6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQnV0dG9uKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZUZvY3VzUmlwcGxlID0gcHJvcHMuZGlzYWJsZUZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgZnVsbFdpZHRoID0gcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgbWluaSA9IHByb3BzLm1pbmksXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlZFwiLCBcImRpc2FibGVGb2N1c1JpcHBsZVwiLCBcImZvY3VzVmlzaWJsZUNsYXNzTmFtZVwiLCBcImZ1bGxXaWR0aFwiLCBcIm1pbmlcIiwgXCJzaXplXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBmYWIgPSB2YXJpYW50ID09PSAnZmFiJyB8fCB2YXJpYW50ID09PSAnZXh0ZW5kZWRGYWInO1xuICB2YXIgY29udGFpbmVkID0gdmFyaWFudCA9PT0gJ2NvbnRhaW5lZCcgfHwgdmFyaWFudCA9PT0gJ3JhaXNlZCc7XG4gIHZhciB0ZXh0ID0gdmFyaWFudCA9PT0gJ3RleHQnIHx8IHZhcmlhbnQgPT09ICdmbGF0JztcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mYWIsIGZhYiksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm1pbmksIGZhYiAmJiBtaW5pKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZXh0ZW5kZWRGYWIsIHZhcmlhbnQgPT09ICdleHRlbmRlZEZhYicpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy50ZXh0LCB0ZXh0KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMudGV4dFByaW1hcnksIHRleHQgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnRleHRTZWNvbmRhcnksIHRleHQgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmxhdCwgdmFyaWFudCA9PT0gJ3RleHQnIHx8IHZhcmlhbnQgPT09ICdmbGF0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZsYXRQcmltYXJ5LCAodmFyaWFudCA9PT0gJ3RleHQnIHx8IHZhcmlhbnQgPT09ICdmbGF0JykgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZsYXRTZWNvbmRhcnksICh2YXJpYW50ID09PSAndGV4dCcgfHwgdmFyaWFudCA9PT0gJ2ZsYXQnKSAmJiBjb2xvciA9PT0gJ3NlY29uZGFyeScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb250YWluZWQsIGNvbnRhaW5lZCB8fCBmYWIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5jb250YWluZWRQcmltYXJ5LCAoY29udGFpbmVkIHx8IGZhYikgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbnRhaW5lZFNlY29uZGFyeSwgKGNvbnRhaW5lZCB8fCBmYWIpICYmIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJhaXNlZCwgY29udGFpbmVkIHx8IGZhYiksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJhaXNlZFByaW1hcnksIChjb250YWluZWQgfHwgZmFiKSAmJiBjb2xvciA9PT0gJ3ByaW1hcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucmFpc2VkU2Vjb25kYXJ5LCAoY29udGFpbmVkIHx8IGZhYikgJiYgY29sb3IgPT09ICdzZWNvbmRhcnknKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMub3V0bGluZWQsIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5vdXRsaW5lZFByaW1hcnksIHZhcmlhbnQgPT09ICdvdXRsaW5lZCcgJiYgY29sb3IgPT09ICdwcmltYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLm91dGxpbmVkU2Vjb25kYXJ5LCB2YXJpYW50ID09PSAnb3V0bGluZWQnICYmIGNvbG9yID09PSAnc2Vjb25kYXJ5JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoc2l6ZSkpXSwgc2l6ZSAhPT0gJ21lZGl1bScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mdWxsV2lkdGgsIGZ1bGxXaWR0aCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmNvbG9ySW5oZXJpdCwgY29sb3IgPT09ICdpbmhlcml0JyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9CdXR0b25CYXNlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBmb2N1c1Zpc2libGVDbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lKVxuICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMubGFiZWxcbiAgfSwgY2hpbGRyZW4pKTtcbn1cblxuQnV0dG9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBidXR0b24uXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgIGtleWJvYXJkIGZvY3VzIHJpcHBsZSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKiBgZGlzYWJsZVJpcHBsZWAgbXVzdCBhbHNvIGJlIHRydWUuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBidXR0b24gd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIGxpbmsgdG8gd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuXG4gICAqIElmIGRlZmluZWQsIGFuIGBhYCBlbGVtZW50IHdpbGwgYmUgdXNlZCBhcyB0aGUgcm9vdCBub2RlLlxuICAgKi9cbiAgaHJlZjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhbmQgYHZhcmlhbnRgIGlzIGAnZmFiJ2AsIHdpbGwgdXNlIG1pbmkgZmxvYXRpbmcgYWN0aW9uIGJ1dHRvbiBzdHlsaW5nLlxuICAgKi9cbiAgbWluaTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBidXR0b24uXG4gICAqIGBzbWFsbGAgaXMgZXF1aXZhbGVudCB0byB0aGUgZGVuc2UgYnV0dG9uIHN0eWxpbmcuXG4gICAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzbWFsbCcsICdtZWRpdW0nLCAnbGFyZ2UnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICogX19XQVJOSU5HX186IGBmbGF0YCBhbmQgYHJhaXNlZGAgYXJlIGRlcHJlY2F0ZWQuXG4gICAqIEluc3RlYWQgdXNlIGB0ZXh0YCBhbmQgYGNvbnRhaW5lZGAgcmVzcGVjdGl2ZWx5LlxuICAgKi9cbiAgdmFyaWFudDogKDAsIF9jaGFpblByb3BUeXBlcy5kZWZhdWx0KShfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0ZXh0JywgJ2ZsYXQnLCAnb3V0bGluZWQnLCAnY29udGFpbmVkJywgJ3JhaXNlZCcsICdmYWInLCAnZXh0ZW5kZWRGYWInXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wcy52YXJpYW50ID09PSAnZmxhdCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSBgZmxhdGAgdmFyaWFudCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS4gJyArICdgdGV4dGAgaXMgZXF1aXZhbGVudCBhbmQgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudmFyaWFudCA9PT0gJ3JhaXNlZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1RoZSBgcmFpc2VkYCB2YXJpYW50IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiAnICsgJ2Bjb250YWluZWRgIGlzIGVxdWl2YWxlbnQgYW5kIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0pXG59IDoge307XG5CdXR0b24uZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2RlZmF1bHQnLFxuICBjb21wb25lbnQ6ICdidXR0b24nLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGRpc2FibGVGb2N1c1JpcHBsZTogZmFsc2UsXG4gIGZ1bGxXaWR0aDogZmFsc2UsXG4gIG1pbmk6IGZhbHNlLFxuICBzaXplOiAnbWVkaXVtJyxcbiAgdHlwZTogJ2J1dHRvbicsXG4gIHZhcmlhbnQ6ICd0ZXh0J1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQnV0dG9uJ1xufSkoQnV0dG9uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfa2V5Y29kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImtleWNvZGVcIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfTm9Tc3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Ob1NzclwiKSk7XG5cbnZhciBfZm9jdXNWaXNpYmxlID0gcmVxdWlyZShcIi4vZm9jdXNWaXNpYmxlXCIpO1xuXG52YXIgX1RvdWNoUmlwcGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub3VjaFJpcHBsZVwiKSk7XG5cbnZhciBfY3JlYXRlUmlwcGxlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlUmlwcGxlSGFuZGxlclwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAvLyBSZW1vdmUgZ3JleSBoaWdobGlnaHRcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJvcmRlcjogMCxcbiAgICBtYXJnaW46IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gU2FmYXJpXG4gICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgLy8gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIEZpcmVmb3hcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAvLyBSZXNldFxuICAgICctd2Via2l0LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgIC8vIFNvIHdlIHRha2UgcHJlY2VkZW50IG92ZXIgdGhlIHN0eWxlIG9mIGEgbmF0aXZlIDxhIC8+IGVsZW1lbnQuXG4gICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAnJjo6LW1vei1mb2N1cy1pbm5lcic6IHtcbiAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScgLy8gUmVtb3ZlIEZpcmVmb3ggZG90dGVkIG91dGxpbmUuXG5cbiAgICB9LFxuICAgICcmJGRpc2FibGVkJzoge1xuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgLy8gRGlzYWJsZSBsaW5rIGludGVyYWN0aW9uc1xuICAgICAgY3Vyc29yOiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgZGlzYWJsZWQ6IHt9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIV9yZWFjdC5kZWZhdWx0LmNyZWF0ZUNvbnRleHQpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogcmVhY3RAMTYuMy4wIG9yIGdyZWF0ZXIgaXMgcmVxdWlyZWQuJyk7XG59XG4vKipcbiAqIGBCdXR0b25CYXNlYCBjb250YWlucyBhcyBmZXcgc3R5bGVzIGFzIHBvc3NpYmxlLlxuICogSXQgYWltcyB0byBiZSBhIHNpbXBsZSBidWlsZGluZyBibG9jayBmb3IgY3JlYXRpbmcgYSBidXR0b24uXG4gKiBJdCBjb250YWlucyBhIGxvYWQgb2Ygc3R5bGUgcmVzZXQgYW5kIHNvbWUgZm9jdXMvcmlwcGxlIGxvZ2ljLlxuICovXG5cblxudmFyIEJ1dHRvbkJhc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQnV0dG9uQmFzZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uQmFzZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEJ1dHRvbkJhc2UpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKEJ1dHRvbkJhc2UpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVDaGVja1RpbWUgPSA1MDtcbiAgICBfdGhpcy5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzID0gNTtcbiAgICBfdGhpcy5oYW5kbGVNb3VzZURvd24gPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VEb3duJywgJ3N0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmZvY3VzVmlzaWJsZVRpbWVvdXQpO1xuXG4gICAgICBpZiAoX3RoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLmhhbmRsZU1vdXNlVXAgPSAoMCwgX2NyZWF0ZVJpcHBsZUhhbmRsZXIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLCAnTW91c2VVcCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdNb3VzZUxlYXZlJywgJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoU3RhcnQnLCAnc3RhcnQnKTtcbiAgICBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdUb3VjaEVuZCcsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlVG91Y2hNb3ZlID0gKDAsIF9jcmVhdGVSaXBwbGVIYW5kbGVyLmRlZmF1bHQpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgJ1RvdWNoTW92ZScsICdzdG9wJyk7XG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9ICgwLCBfY3JlYXRlUmlwcGxlSGFuZGxlci5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksICdCbHVyJywgJ3N0b3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjbGVhclRpbWVvdXQoX3RoaXMuZm9jdXNWaXNpYmxlVGltZW91dCk7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5mb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfdGhpcy5vblJpcHBsZVJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBfdGhpcy5yaXBwbGUgPSBub2RlO1xuICAgIH07XG5cbiAgICBfdGhpcy5vbkZvY3VzVmlzaWJsZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLmtleURvd24gPSBmYWxzZTtcblxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c1Zpc2libGU6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1c1Zpc2libGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfdGhpcyRwcm9wcy5mb2N1c1JpcHBsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wcy5vbktleURvd24sXG4gICAgICAgICAgb25DbGljayA9IF90aGlzJHByb3BzLm9uQ2xpY2s7XG4gICAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KTsgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcblxuICAgICAgaWYgKGZvY3VzUmlwcGxlICYmICFfdGhpcy5rZXlEb3duICYmIF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSAmJiBfdGhpcy5yaXBwbGUgJiYga2V5ID09PSAnc3BhY2UnKSB7XG4gICAgICAgIF90aGlzLmtleURvd24gPSB0cnVlO1xuICAgICAgICBldmVudC5wZXJzaXN0KCk7XG5cbiAgICAgICAgX3RoaXMucmlwcGxlLnN0b3AoZXZlbnQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5yaXBwbGUuc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uS2V5RG93bikge1xuICAgICAgICBvbktleURvd24oZXZlbnQpO1xuICAgICAgfSAvLyBLZXlib2FyZCBhY2Nlc3NpYmlsaXR5IGZvciBub24gaW50ZXJhY3RpdmUgZWxlbWVudHNcblxuXG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBldmVudC5jdXJyZW50VGFyZ2V0ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQgIT09ICdidXR0b24nICYmIChrZXkgPT09ICdzcGFjZScgfHwga2V5ID09PSAnZW50ZXInKSAmJiAhKF90aGlzLmJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgX3RoaXMuYnV0dG9uLmhyZWYpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKG9uQ2xpY2spIHtcbiAgICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmZvY3VzUmlwcGxlICYmICgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkgPT09ICdzcGFjZScgJiYgX3RoaXMucmlwcGxlICYmIF90aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSkge1xuICAgICAgICBfdGhpcy5rZXlEb3duID0gZmFsc2U7XG4gICAgICAgIGV2ZW50LnBlcnNpc3QoKTtcblxuICAgICAgICBfdGhpcy5yaXBwbGUuc3RvcChldmVudCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnJpcHBsZS5wdWxzYXRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbktleVVwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uS2V5VXAoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRml4IGZvciBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzc3NjlcblxuXG4gICAgICBpZiAoIV90aGlzLmJ1dHRvbikge1xuICAgICAgICBfdGhpcy5idXR0b24gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgICAgfVxuXG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICAoMCwgX2ZvY3VzVmlzaWJsZS5kZXRlY3RGb2N1c1Zpc2libGUpKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoX3RoaXMpKSwgX3RoaXMuYnV0dG9uLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLm9uRm9jdXNWaXNpYmxlSGFuZGxlcihldmVudCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRm9jdXMpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEJ1dHRvbkJhc2UsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuYnV0dG9uID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgICAoMCwgX2ZvY3VzVmlzaWJsZS5saXN0ZW5Gb3JGb2N1c0tleXMpKCgwLCBfb3duZXJXaW5kb3cuZGVmYXVsdCkodGhpcy5idXR0b24pKTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuYWN0aW9uKSB7XG4gICAgICAgIHRoaXMucHJvcHMuYWN0aW9uKHtcbiAgICAgICAgICBmb2N1c1Zpc2libGU6IGZ1bmN0aW9uIGZvY3VzVmlzaWJsZSgpIHtcbiAgICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIGZvY3VzVmlzaWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF90aGlzMi5idXR0b24uZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5mb2N1c1JpcHBsZSAmJiAhdGhpcy5wcm9wcy5kaXNhYmxlUmlwcGxlICYmICFwcmV2U3RhdGUuZm9jdXNWaXNpYmxlICYmIHRoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIHRoaXMucmlwcGxlLnB1bHNhdGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5mb2N1c1Zpc2libGVUaW1lb3V0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHMyLmFjdGlvbixcbiAgICAgICAgICBidXR0b25SZWYgPSBfdGhpcyRwcm9wczIuYnV0dG9uUmVmLFxuICAgICAgICAgIGNlbnRlclJpcHBsZSA9IF90aGlzJHByb3BzMi5jZW50ZXJSaXBwbGUsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczIuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzMi5jbGFzc2VzLFxuICAgICAgICAgIGNsYXNzTmFtZVByb3AgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIGNvbXBvbmVudCA9IF90aGlzJHByb3BzMi5jb21wb25lbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZVJpcHBsZSA9IF90aGlzJHByb3BzMi5kaXNhYmxlUmlwcGxlLFxuICAgICAgICAgIGRpc2FibGVUb3VjaFJpcHBsZSA9IF90aGlzJHByb3BzMi5kaXNhYmxlVG91Y2hSaXBwbGUsXG4gICAgICAgICAgZm9jdXNSaXBwbGUgPSBfdGhpcyRwcm9wczIuZm9jdXNSaXBwbGUsXG4gICAgICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gX3RoaXMkcHJvcHMyLmZvY3VzVmlzaWJsZUNsYXNzTmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczIub25CbHVyLFxuICAgICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wczIub25Gb2N1cyxcbiAgICAgICAgICBvbkZvY3VzVmlzaWJsZSA9IF90aGlzJHByb3BzMi5vbkZvY3VzVmlzaWJsZSxcbiAgICAgICAgICBvbktleURvd24gPSBfdGhpcyRwcm9wczIub25LZXlEb3duLFxuICAgICAgICAgIG9uS2V5VXAgPSBfdGhpcyRwcm9wczIub25LZXlVcCxcbiAgICAgICAgICBvbk1vdXNlRG93biA9IF90aGlzJHByb3BzMi5vbk1vdXNlRG93bixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wczIub25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uTW91c2VVcCA9IF90aGlzJHByb3BzMi5vbk1vdXNlVXAsXG4gICAgICAgICAgb25Ub3VjaEVuZCA9IF90aGlzJHByb3BzMi5vblRvdWNoRW5kLFxuICAgICAgICAgIG9uVG91Y2hNb3ZlID0gX3RoaXMkcHJvcHMyLm9uVG91Y2hNb3ZlLFxuICAgICAgICAgIG9uVG91Y2hTdGFydCA9IF90aGlzJHByb3BzMi5vblRvdWNoU3RhcnQsXG4gICAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wczIudGFiSW5kZXgsXG4gICAgICAgICAgVG91Y2hSaXBwbGVQcm9wcyA9IF90aGlzJHByb3BzMi5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wczIudHlwZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiYWN0aW9uXCIsIFwiYnV0dG9uUmVmXCIsIFwiY2VudGVyUmlwcGxlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlUmlwcGxlXCIsIFwiZGlzYWJsZVRvdWNoUmlwcGxlXCIsIFwiZm9jdXNSaXBwbGVcIiwgXCJmb2N1c1Zpc2libGVDbGFzc05hbWVcIiwgXCJvbkJsdXJcIiwgXCJvbkZvY3VzXCIsIFwib25Gb2N1c1Zpc2libGVcIiwgXCJvbktleURvd25cIiwgXCJvbktleVVwXCIsIFwib25Nb3VzZURvd25cIiwgXCJvbk1vdXNlTGVhdmVcIiwgXCJvbk1vdXNlVXBcIiwgXCJvblRvdWNoRW5kXCIsIFwib25Ub3VjaE1vdmVcIiwgXCJvblRvdWNoU3RhcnRcIiwgXCJ0YWJJbmRleFwiLCBcIlRvdWNoUmlwcGxlUHJvcHNcIiwgXCJ0eXBlXCJdKTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGlzYWJsZWQsIGRpc2FibGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9jdXNWaXNpYmxlLCB0aGlzLnN0YXRlLmZvY3VzVmlzaWJsZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBmb2N1c1Zpc2libGVDbGFzc05hbWUsIHRoaXMuc3RhdGUuZm9jdXNWaXNpYmxlKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICAgIHZhciBDb21wb25lbnRQcm9wID0gY29tcG9uZW50O1xuXG4gICAgICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgb3RoZXIuaHJlZikge1xuICAgICAgICBDb21wb25lbnRQcm9wID0gJ2EnO1xuICAgICAgfVxuXG4gICAgICB2YXIgYnV0dG9uUHJvcHMgPSB7fTtcblxuICAgICAgaWYgKENvbXBvbmVudFByb3AgPT09ICdidXR0b24nKSB7XG4gICAgICAgIGJ1dHRvblByb3BzLnR5cGUgPSB0eXBlIHx8ICdidXR0b24nO1xuICAgICAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uUHJvcHMucm9sZSA9ICdidXR0b24nO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnRQcm9wLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICAgIG9uQmx1cjogdGhpcy5oYW5kbGVCbHVyLFxuICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25LZXlVcDogdGhpcy5oYW5kbGVLZXlVcCxcbiAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlTW91c2VEb3duLFxuICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlTW91c2VMZWF2ZSxcbiAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZU1vdXNlVXAsXG4gICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgIG9uVG91Y2hNb3ZlOiB0aGlzLmhhbmRsZVRvdWNoTW92ZSxcbiAgICAgICAgb25Ub3VjaFN0YXJ0OiB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsXG4gICAgICAgIHJlZjogYnV0dG9uUmVmLFxuICAgICAgICB0YWJJbmRleDogZGlzYWJsZWQgPyAnLTEnIDogdGFiSW5kZXhcbiAgICAgIH0sIGJ1dHRvblByb3BzLCBvdGhlciksIGNoaWxkcmVuLCAhZGlzYWJsZVJpcHBsZSAmJiAhZGlzYWJsZWQgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ob1Nzci5kZWZhdWx0LCBudWxsLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Ub3VjaFJpcHBsZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgaW5uZXJSZWY6IHRoaXMub25SaXBwbGVSZWYsXG4gICAgICAgIGNlbnRlcjogY2VudGVyUmlwcGxlXG4gICAgICB9LCBUb3VjaFJpcHBsZVByb3BzKSkpIDogbnVsbCk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZvY3VzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgbGFzdERpc2FibGVkOiBuZXh0UHJvcHMuZGlzYWJsZWRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gVGhlIGJsdXIgd29uJ3QgZmlyZSB3aGVuIHRoZSBkaXNhYmxlZCBzdGF0ZSBpcyBzZXQgb24gYSBmb2N1c2VkIGlucHV0LlxuICAgICAgLy8gV2UgbmVlZCB0byBib29rIGtlZXAgdGhlIGZvY3VzZWQgc3RhdGUgbWFudWFsbHkuXG5cblxuICAgICAgaWYgKCFwcmV2U3RhdGUucHJldlN0YXRlICYmIG5leHRQcm9wcy5kaXNhYmxlZCAmJiBwcmV2U3RhdGUuZm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYXN0RGlzYWJsZWQ6IG5leHRQcm9wcy5kaXNhYmxlZFxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEJ1dHRvbkJhc2U7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkJ1dHRvbkJhc2UucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50cy5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyBgZm9jdXNWaXNpYmxlKClgIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc3NpYmxlIGFjdGlvbnNcbiAgICogdGhhdCBjYW4gYmUgdHJpZ2dlcmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqL1xuICBhY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICovXG4gIGJ1dHRvblJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgcmlwcGxlcyB3aWxsIGJlIGNlbnRlcmVkLlxuICAgKiBUaGV5IHdvbid0IHN0YXJ0IGF0IHRoZSBjdXJzb3IgaW50ZXJhY3Rpb24gcG9zaXRpb24uXG4gICAqL1xuICBjZW50ZXJSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0b3VjaCByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlVG91Y2hSaXBwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYXNlIGJ1dHRvbiB3aWxsIGhhdmUgYSBrZXlib2FyZCBmb2N1cyByaXBwbGUuXG4gICAqIGBkaXNhYmxlUmlwcGxlYCBtdXN0IGFsc28gYmUgYGZhbHNlYC5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBjYW4gaGVscCBhIHBlcnNvbiBrbm93IHdoaWNoIGVsZW1lbnQgaGFzIHRoZSBrZXlib2FyZCBmb2N1cy5cbiAgICogVGhlIGNsYXNzIG5hbWUgd2lsbCBiZSBhcHBsaWVkIHdoZW4gdGhlIGVsZW1lbnQgZ2FpbiB0aGUgZm9jdXMgdGhyb3VnaCBhIGtleWJvYXJkIGludGVyYWN0aW9uLlxuICAgKiBJdCdzIGEgcG9seWZpbGwgZm9yIHRoZSBbQ1NTIDpmb2N1cy12aXNpYmxlIGZlYXR1cmVdKGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9zZWxlY3RvcnMtNC8jdGhlLWZvY3VzLXZpc2libGUtcHNldWRvKS5cbiAgICogVGhlIHJhdGlvbmFsIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW4gaGVyZV0oaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvZm9jdXMtdmlzaWJsZS9ibG9iL21hc3Rlci9leHBsYWluZXIubWQpLlxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkNsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJvbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgYFRvdWNoUmlwcGxlYCBlbGVtZW50LlxuICAgKi9cbiAgVG91Y2hSaXBwbGVQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlZCB0byBjb250cm9sIHRoZSBidXR0b24ncyBwdXJwb3NlLlxuICAgKiBUaGlzIHByb3BlcnR5IHBhc3NlcyB0aGUgdmFsdWUgdG8gdGhlIGB0eXBlYCBhdHRyaWJ1dGUgb2YgdGhlIG5hdGl2ZSBidXR0b24gY29tcG9uZW50LlxuICAgKiBWYWxpZCBwcm9wZXJ0eSB2YWx1ZXMgaW5jbHVkZSBgYnV0dG9uYCwgYHN1Ym1pdGAsIGFuZCBgcmVzZXRgLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSA6IHt9O1xuQnV0dG9uQmFzZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlclJpcHBsZTogZmFsc2UsXG4gIGNvbXBvbmVudDogJ2J1dHRvbicsXG4gIGRpc2FibGVSaXBwbGU6IGZhbHNlLFxuICBkaXNhYmxlVG91Y2hSaXBwbGU6IGZhbHNlLFxuICBmb2N1c1JpcHBsZTogZmFsc2UsXG4gIHRhYkluZGV4OiAnMCcsXG4gIHR5cGU6ICdidXR0b24nXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX05vU3NyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX05vU3NyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ob1NzclwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbi8qKlxuICogTm9Tc3IgcHVycG9zZWx5IHJlbW92ZXMgY29tcG9uZW50cyBmcm9tIHRoZSBzdWJqZWN0IG9mIFNlcnZlciBTaWRlIFJlbmRlcmluZyAoU1NSKS5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBjYW4gYmUgdXNlZnVsIGluIGEgdmFyaWV0eSBvZiBzaXR1YXRpb25zOlxuICogLSBFc2NhcGUgaGF0Y2ggZm9yIGJyb2tlbiBkZXBlbmRlbmNpZXMgbm90IHN1cHBvcnRpbmcgU1NSLlxuICogLSBJbXByb3ZlIHRoZSB0aW1lLXRvLWZpcnN0IHBhaW50IG9uIHRoZSBjbGllbnQgYnkgb25seSByZW5kZXJpbmcgYWJvdmUgdGhlIGZvbGQuXG4gKiAtIFJlZHVjZSB0aGUgcmVuZGVyaW5nIHRpbWUgb24gdGhlIHNlcnZlci5cbiAqIC0gVW5kZXIgdG9vIGhlYXZ5IHNlcnZlciBsb2FkLCB5b3UgY2FuIHR1cm4gb24gc2VydmljZSBkZWdyYWRhdGlvbi5cbiAqL1xudmFyIE5vU3NyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKE5vU3NyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBOb1NzcigpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE5vU3NyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSAoMCwgX2dldFByb3RvdHlwZU9mMy5kZWZhdWx0KShOb1NzcikpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1vdW50ZWQ6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShOb1NzciwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5tb3VudGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMuZGVmZXIpIHtcbiAgICAgICAgLy8gV29uZGVyaW5nIHdoeSB3ZSB1c2UgdHdvIFJBRnM/IENoZWNrIHRoaXMgdmlkZW8gb3V0OlxuICAgICAgICAvLyBodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWNDT0w3TUM0UGwwXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gVGhlIGJyb3dzZXIgc2hvdWxkIGJlIGFib3V0IHRvIHJlbmRlciB0aGUgRE9NIHRoYXQgUmVhY3QgY29tbWl0ZWQgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGludGVycnVwdC4gTGV0J3Mgd2FpdCB0aGUgbmV4dCByYWYuXG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczIubW91bnRlZCkge1xuICAgICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG1vdW50ZWQ6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbW91bnRlZDogdHJ1ZVxuICAgICAgICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZmFsbGJhY2sgPSBfdGhpcyRwcm9wcy5mYWxsYmFjaztcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLm1vdW50ZWQgPyBjaGlsZHJlbiA6IGZhbGxiYWNrO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTm9Tc3I7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk5vU3NyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIG5vdCBvbmx5IHByZXZlbnQgc2VydmVyIHNpZGUgcmVuZGVyaW5nLlxuICAgKiBJdCB3aWxsIGFsc28gZGVmZXIgdGhlIHJlbmRlcmluZyBvZiB0aGUgY2hpbGRyZW4gaW50byBhIGRpZmZlcmVudCBzY3JlZW4gZnJhbWUuXG4gICAqL1xuICBkZWZlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBmYWxsYmFjayBjb250ZW50IHRvIGRpc3BsYXkuXG4gICAqL1xuICBmYWxsYmFjazogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGVcbn0gOiB7fTtcbk5vU3NyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfdXRpbHMuZXhhY3RQcm9wKShOb1Nzci5wcm9wVHlwZXMpIDoge307XG5Ob1Nzci5kZWZhdWx0UHJvcHMgPSB7XG4gIGRlZmVyOiBmYWxzZSxcbiAgZmFsbGJhY2s6IG51bGxcbn07XG52YXIgX2RlZmF1bHQgPSBOb1NzcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGV0ZWN0Rm9jdXNWaXNpYmxlID0gZGV0ZWN0Rm9jdXNWaXNpYmxlO1xuZXhwb3J0cy5saXN0ZW5Gb3JGb2N1c0tleXMgPSBsaXN0ZW5Gb3JGb2N1c0tleXM7XG5cbnZhciBfa2V5Y29kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImtleWNvZGVcIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9vd25lckRvY3VtZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJEb2N1bWVudFwiKSk7XG5cbnZhciBpbnRlcm5hbCA9IHtcbiAgZm9jdXNLZXlQcmVzc2VkOiBmYWxzZSxcbiAga2V5VXBFdmVudFRpbWVvdXQ6IC0xXG59O1xuXG5mdW5jdGlvbiBmaW5kQWN0aXZlRWxlbWVudChkb2MpIHtcbiAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2MuYWN0aXZlRWxlbWVudDtcblxuICB3aGlsZSAoYWN0aXZlRWxlbWVudCAmJiBhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBhY3RpdmVFbGVtZW50ID0gYWN0aXZlRWxlbWVudC5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gYWN0aXZlRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZGV0ZWN0Rm9jdXNWaXNpYmxlKGluc3RhbmNlLCBlbGVtZW50LCBjYWxsYmFjaykge1xuICB2YXIgYXR0ZW1wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGluc3RhbmNlLmZvY3VzVmlzaWJsZUNoZWNrVGltZSwgJ01hdGVyaWFsLVVJOiBtaXNzaW5nIGluc3RhbmNlLmZvY3VzVmlzaWJsZUNoZWNrVGltZS4nKSA6IHZvaWQgMDtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGluc3RhbmNlLmZvY3VzVmlzaWJsZU1heENoZWNrVGltZXMsICdNYXRlcmlhbC1VSTogbWlzc2luZyBpbnN0YW5jZS5mb2N1c1Zpc2libGVNYXhDaGVja1RpbWVzLicpIDogdm9pZCAwO1xuICBpbnN0YW5jZS5mb2N1c1Zpc2libGVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvYyA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShlbGVtZW50KTtcbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9IGZpbmRBY3RpdmVFbGVtZW50KGRvYyk7XG5cbiAgICBpZiAoaW50ZXJuYWwuZm9jdXNLZXlQcmVzc2VkICYmIChhY3RpdmVFbGVtZW50ID09PSBlbGVtZW50IHx8IGVsZW1lbnQuY29udGFpbnMoYWN0aXZlRWxlbWVudCkpKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZWxzZSBpZiAoYXR0ZW1wdCA8IGluc3RhbmNlLmZvY3VzVmlzaWJsZU1heENoZWNrVGltZXMpIHtcbiAgICAgIGRldGVjdEZvY3VzVmlzaWJsZShpbnN0YW5jZSwgZWxlbWVudCwgY2FsbGJhY2ssIGF0dGVtcHQgKyAxKTtcbiAgICB9XG4gIH0sIGluc3RhbmNlLmZvY3VzVmlzaWJsZUNoZWNrVGltZSk7XG59XG5cbnZhciBGT0NVU19LRVlTID0gWyd0YWInLCAnZW50ZXInLCAnc3BhY2UnLCAnZXNjJywgJ3VwJywgJ2Rvd24nLCAnbGVmdCcsICdyaWdodCddO1xuXG5mdW5jdGlvbiBpc0ZvY3VzS2V5KGV2ZW50KSB7XG4gIHJldHVybiBGT0NVU19LRVlTLmluZGV4T2YoKDAsIF9rZXljb2RlLmRlZmF1bHQpKGV2ZW50KSkgPiAtMTtcbn1cblxudmFyIGhhbmRsZUtleVVwRXZlbnQgPSBmdW5jdGlvbiBoYW5kbGVLZXlVcEV2ZW50KGV2ZW50KSB7XG4gIGlmIChpc0ZvY3VzS2V5KGV2ZW50KSkge1xuICAgIGludGVybmFsLmZvY3VzS2V5UHJlc3NlZCA9IHRydWU7IC8vIExldCdzIGNvbnNpZGVyIHRoYXQgdGhlIHVzZXIgaXMgdXNpbmcgYSBrZXlib2FyZCBkdXJpbmcgYSB3aW5kb3cgZnJhbWUgb2YgMXMuXG5cbiAgICBjbGVhclRpbWVvdXQoaW50ZXJuYWwua2V5VXBFdmVudFRpbWVvdXQpO1xuICAgIGludGVybmFsLmtleVVwRXZlbnRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpbnRlcm5hbC5mb2N1c0tleVByZXNzZWQgPSBmYWxzZTtcbiAgICB9LCAxZTMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBsaXN0ZW5Gb3JGb2N1c0tleXMod2luKSB7XG4gIC8vIFRoZSBldmVudCBsaXN0ZW5lciB3aWxsIG9ubHkgYmUgYWRkZWQgb25jZSBwZXIgd2luZG93LlxuICAvLyBEdXBsaWNhdGUgZXZlbnQgbGlzdGVuZXJzIHdpbGwgYmUgaWdub3JlZCBieSBhZGRFdmVudExpc3RlbmVyLlxuICAvLyBBbHNvLCB0aGlzIGxvZ2ljIGlzIGNsaWVudCBzaWRlIG9ubHksIHdlIGRvbid0IG5lZWQgYSB0ZWFyZG93bi5cbiAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlS2V5VXBFdmVudCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSBleHBvcnRzLkRFTEFZX1JJUFBMRSA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX1RyYW5zaXRpb25Hcm91cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbkdyb3VwXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9SaXBwbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JpcHBsZVwiKSk7XG5cbnZhciBEVVJBVElPTiA9IDU1MDtcbnZhciBERUxBWV9SSVBQTEUgPSA4MDtcbmV4cG9ydHMuREVMQVlfUklQUExFID0gREVMQVlfUklQUExFO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBib3JkZXJSYWRpdXM6ICdpbmhlcml0JyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB6SW5kZXg6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlOiB7XG4gICAgICB3aWR0aDogNTAsXG4gICAgICBoZWlnaHQ6IDUwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgcmlwcGxlVmlzaWJsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlVmlzaWJsZToge1xuICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgYW5pbWF0aW9uOiBcIm11aS1yaXBwbGUtZW50ZXIgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVB1bHNhdGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVB1bHNhdGU6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIlwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCBcIm1zXCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZGAgY2xhc3MuICovXG4gICAgY2hpbGQ6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkTGVhdmluZ2AgY2xhc3MuICovXG4gICAgY2hpbGRMZWF2aW5nOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYW5pbWF0aW9uOiBcIm11aS1yaXBwbGUtZXhpdCBcIi5jb25jYXQoRFVSQVRJT04sIFwibXMgXCIpLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW50ZXJuYWwgYFJpcHBsZWAgY29tcG9uZW50cyBgY2hpbGRQdWxzYXRlYCBjbGFzcy4gKi9cbiAgICBjaGlsZFB1bHNhdGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGFuaW1hdGlvbjogXCJtdWktcmlwcGxlLXB1bHNhdGUgMjUwMG1zIFwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZUluT3V0LCBcIiAyMDBtcyBpbmZpbml0ZVwiKVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgbXVpLXJpcHBsZS1lbnRlcic6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCknLFxuICAgICAgICBvcGFjaXR5OiAwLjFcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknLFxuICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgIH1cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1yaXBwbGUtZXhpdCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcmlwcGxlLXB1bHNhdGUnOiB7XG4gICAgICAnMCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJ1xuICAgICAgfSxcbiAgICAgICc1MCUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDAuOTIpJ1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIFRvdWNoUmlwcGxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUb3VjaFJpcHBsZSwgX1JlYWN0JFB1cmVDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRvdWNoUmlwcGxlKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgVG91Y2hSaXBwbGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKFRvdWNoUmlwcGxlKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3Qvbm8tdW51c2VkLXN0YXRlXG4gICAgICBuZXh0S2V5OiAwLFxuICAgICAgcmlwcGxlczogW11cbiAgICB9O1xuXG4gICAgX3RoaXMucHVsc2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnN0YXJ0KHt9LCB7XG4gICAgICAgIHB1bHNhdGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBfb3B0aW9ucyRwdWxzYXRlID0gb3B0aW9ucy5wdWxzYXRlLFxuICAgICAgICAgIHB1bHNhdGUgPSBfb3B0aW9ucyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHB1bHNhdGUsXG4gICAgICAgICAgX29wdGlvbnMkY2VudGVyID0gb3B0aW9ucy5jZW50ZXIsXG4gICAgICAgICAgY2VudGVyID0gX29wdGlvbnMkY2VudGVyID09PSB2b2lkIDAgPyBfdGhpcy5wcm9wcy5jZW50ZXIgfHwgb3B0aW9ucy5wdWxzYXRlIDogX29wdGlvbnMkY2VudGVyLFxuICAgICAgICAgIF9vcHRpb25zJGZha2VFbGVtZW50ID0gb3B0aW9ucy5mYWtlRWxlbWVudCxcbiAgICAgICAgICBmYWtlRWxlbWVudCA9IF9vcHRpb25zJGZha2VFbGVtZW50ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGZha2VFbGVtZW50O1xuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgX3RoaXMuaWdub3JpbmdNb3VzZURvd24pIHtcbiAgICAgICAgX3RoaXMuaWdub3JpbmdNb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICAgIF90aGlzLmlnbm9yaW5nTW91c2VEb3duID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSBmYWtlRWxlbWVudCA/IG51bGwgOiBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuICAgICAgdmFyIHJlY3QgPSBlbGVtZW50ID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAwXG4gICAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgICB2YXIgcmlwcGxlWDtcbiAgICAgIHZhciByaXBwbGVZO1xuICAgICAgdmFyIHJpcHBsZVNpemU7XG5cbiAgICAgIGlmIChjZW50ZXIgfHwgZXZlbnQuY2xpZW50WCA9PT0gMCAmJiBldmVudC5jbGllbnRZID09PSAwIHx8ICFldmVudC5jbGllbnRYICYmICFldmVudC50b3VjaGVzKSB7XG4gICAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKHJlY3Qud2lkdGggLyAyKTtcbiAgICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjbGllbnRYID0gZXZlbnQuY2xpZW50WCA/IGV2ZW50LmNsaWVudFggOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XG4gICAgICAgIHZhciBjbGllbnRZID0gZXZlbnQuY2xpZW50WSA/IGV2ZW50LmNsaWVudFkgOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFk7XG4gICAgICAgIHJpcHBsZVggPSBNYXRoLnJvdW5kKGNsaWVudFggLSByZWN0LmxlZnQpO1xuICAgICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoKDIgKiBNYXRoLnBvdyhyZWN0LndpZHRoLCAyKSArIE1hdGgucG93KHJlY3QuaGVpZ2h0LCAyKSkgLyAzKTsgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaWYgZXZlbi5cblxuICAgICAgICBpZiAocmlwcGxlU2l6ZSAlIDIgPT09IDApIHtcbiAgICAgICAgICByaXBwbGVTaXplICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzaXplWCA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRXaWR0aCA6IDApIC0gcmlwcGxlWCksIHJpcHBsZVgpICogMiArIDI7XG4gICAgICAgIHZhciBzaXplWSA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwKSAtIHJpcHBsZVkpLCByaXBwbGVZKSAqIDIgKyAyO1xuICAgICAgICByaXBwbGVTaXplID0gTWF0aC5zcXJ0KE1hdGgucG93KHNpemVYLCAyKSArIE1hdGgucG93KHNpemVZLCAyKSk7XG4gICAgICB9IC8vIFRvdWNoZSBkZXZpY2VzXG5cblxuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5zdGFydENvbW1pdCh7XG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICAgICAgY2I6IGNiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH07IC8vIERlcGxheSB0aGUgZXhlY3V0aW9uIG9mIHRoZSByaXBwbGUgZWZmZWN0LlxuXG5cbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5zdGFydFRpbWVyQ29tbWl0KSB7XG4gICAgICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0KCk7XG5cbiAgICAgICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgREVMQVlfUklQUExFKTsgLy8gV2UgaGF2ZSB0byBtYWtlIGEgdHJhZGVvZmYgd2l0aCB0aGlzIHZhbHVlLlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuc3RhcnRDb21taXQoe1xuICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgY2I6IGNiXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5zdGFydENvbW1pdCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIHZhciBwdWxzYXRlID0gcGFyYW1zLnB1bHNhdGUsXG4gICAgICAgICAgcmlwcGxlWCA9IHBhcmFtcy5yaXBwbGVYLFxuICAgICAgICAgIHJpcHBsZVkgPSBwYXJhbXMucmlwcGxlWSxcbiAgICAgICAgICByaXBwbGVTaXplID0gcGFyYW1zLnJpcHBsZVNpemUsXG4gICAgICAgICAgY2IgPSBwYXJhbXMuY2I7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5leHRLZXk6IHN0YXRlLm5leHRLZXkgKyAxLFxuICAgICAgICAgIHJpcHBsZXM6ICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKHN0YXRlLnJpcHBsZXMpLmNvbmNhdChbX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmlwcGxlLmRlZmF1bHQsIHtcbiAgICAgICAgICAgIGtleTogc3RhdGUubmV4dEtleSxcbiAgICAgICAgICAgIGNsYXNzZXM6IF90aGlzLnByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgICB0aW1lb3V0OiB7XG4gICAgICAgICAgICAgIGV4aXQ6IERVUkFUSU9OLFxuICAgICAgICAgICAgICBlbnRlcjogRFVSQVRJT05cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICAgICAgcmlwcGxlWDogcmlwcGxlWCxcbiAgICAgICAgICAgIHJpcHBsZVk6IHJpcHBsZVksXG4gICAgICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICAgICAgfSldKVxuICAgICAgICB9O1xuICAgICAgfSwgY2IpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zdG9wID0gZnVuY3Rpb24gKGV2ZW50LCBjYikge1xuICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnN0YXJ0VGltZXIpO1xuICAgICAgdmFyIHJpcHBsZXMgPSBfdGhpcy5zdGF0ZS5yaXBwbGVzOyAvLyBUaGUgdG91Y2ggaW50ZXJhY3Rpb24gb2NjdXJzIHRvbyBxdWlja2x5LlxuICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzaG93IHJpcHBsZSBlZmZlY3QuXG5cbiAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIF90aGlzLnN0YXJ0VGltZXJDb21taXQpIHtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuXG4gICAgICAgIF90aGlzLnN0YXJ0VGltZXJDb21taXQoKTtcblxuICAgICAgICBfdGhpcy5zdGFydFRpbWVyQ29tbWl0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuc3RhcnRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzLnN0b3AoZXZlbnQsIGNiKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc3RhcnRUaW1lckNvbW1pdCA9IG51bGw7XG5cbiAgICAgIGlmIChyaXBwbGVzICYmIHJpcHBsZXMubGVuZ3RoKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICByaXBwbGVzOiByaXBwbGVzLnNsaWNlKDEpXG4gICAgICAgIH0sIGNiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVG91Y2hSaXBwbGUsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3RhcnRUaW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNlbnRlciA9IF90aGlzJHByb3BzLmNlbnRlcixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiY2VudGVyXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjb21wb25lbnQ6IFwic3BhblwiLFxuICAgICAgICBlbnRlcjogdHJ1ZSxcbiAgICAgICAgZXhpdDogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gICAgICB9LCBvdGhlciksIHRoaXMuc3RhdGUucmlwcGxlcyk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUb3VjaFJpcHBsZTtcbn0oX3JlYWN0LmRlZmF1bHQuUHVyZUNvbXBvbmVudCk7XG5cblRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5Ub3VjaFJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNlbnRlcjogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlUb3VjaFJpcHBsZSdcbn0pKFRvdWNoUmlwcGxlKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3RMaWZlY3ljbGVzQ29tcGF0ID0gcmVxdWlyZShcInJlYWN0LWxpZmVjeWNsZXMtY29tcGF0XCIpO1xuXG52YXIgX0NoaWxkTWFwcGluZyA9IHJlcXVpcmUoXCIuL3V0aWxzL0NoaWxkTWFwcGluZ1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogYDxUcmFuc2l0aW9uR3JvdXA+YCByZW5kZXJzIGEgYDxkaXY+YCBieSBkZWZhdWx0LiBZb3UgY2FuIGNoYW5nZSB0aGlzXG4gICAqIGJlaGF2aW9yIGJ5IHByb3ZpZGluZyBhIGBjb21wb25lbnRgIHByb3AuXG4gICAqIElmIHlvdSB1c2UgUmVhY3QgdjE2KyBhbmQgd291bGQgbGlrZSB0byBhdm9pZCBhIHdyYXBwaW5nIGA8ZGl2PmAgZWxlbWVudFxuICAgKiB5b3UgY2FuIHBhc3MgaW4gYGNvbXBvbmVudD17bnVsbH1gLiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgd3JhcHBpbmcgZGl2XG4gICAqIGJvcmtzIHlvdXIgY3NzIHN0eWxlcy5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0LmFueSxcblxuICAvKipcbiAgICogQSBzZXQgb2YgYDxUcmFuc2l0aW9uPmAgY29tcG9uZW50cywgdGhhdCBhcmUgdG9nZ2xlZCBgaW5gIGFuZCBvdXQgYXMgdGhleVxuICAgKiBsZWF2ZS4gdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgd2lsbCBpbmplY3Qgc3BlY2lmaWMgdHJhbnNpdGlvbiBwcm9wcywgc29cbiAgICogcmVtZW1iZXIgdG8gc3ByZWFkIHRoZW0gdGhyb3VnaCBpZiB5b3UgYXJlIHdyYXBwaW5nIHRoZSBgPFRyYW5zaXRpb24+YCBhc1xuICAgKiB3aXRoIG91ciBgPEZhZGU+YCBleGFtcGxlLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGFwcGVhciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBhcHBlYXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBIGNvbnZlbmllbmNlIHByb3AgdGhhdCBlbmFibGVzIG9yIGRpc2FibGVzIGVudGVyIGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBleGl0IGFuaW1hdGlvbnNcbiAgICogZm9yIGFsbCBjaGlsZHJlbi4gTm90ZSB0aGF0IHNwZWNpZnlpbmcgdGhpcyB3aWxsIG92ZXJyaWRlIGFueSBkZWZhdWx0cyBzZXRcbiAgICogb24gaW5kaXZpZHVhbCBjaGlsZHJlbiBUcmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBZb3UgbWF5IG5lZWQgdG8gYXBwbHkgcmVhY3RpdmUgdXBkYXRlcyB0byBhIGNoaWxkIGFzIGl0IGlzIGV4aXRpbmcuXG4gICAqIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmUgYnkgdXNpbmcgYGNsb25lRWxlbWVudGAgaG93ZXZlciBpbiB0aGUgY2FzZSBvZiBhbiBleGl0aW5nXG4gICAqIGNoaWxkIHRoZSBlbGVtZW50IGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBhbmQgbm90IGFjY2Vzc2libGUgdG8gdGhlIGNvbnN1bWVyLlxuICAgKlxuICAgKiBJZiB5b3UgZG8gbmVlZCB0byB1cGRhdGUgYSBjaGlsZCBhcyBpdCBsZWF2ZXMgeW91IGNhbiBwcm92aWRlIGEgYGNoaWxkRmFjdG9yeWBcbiAgICogdG8gd3JhcCBldmVyeSBjaGlsZCwgZXZlbiB0aGUgb25lcyB0aGF0IGFyZSBsZWF2aW5nLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihjaGlsZDogUmVhY3RFbGVtZW50KSAtPiBSZWFjdEVsZW1lbnRcbiAgICovXG4gIGNoaWxkRmFjdG9yeTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn0gOiB7fTs7XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuICAvKipcbiAgICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gICAqIChgPFRyYW5zaXRpb24+YCBhbmQgYDxDU1NUcmFuc2l0aW9uPmApIGluIGEgbGlzdC4gTGlrZSB3aXRoIHRoZSB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudHMsIGA8VHJhbnNpdGlvbkdyb3VwPmAgaXMgYSBzdGF0ZSBtYWNoaW5lIGZvciBtYW5hZ2luZyB0aGUgbW91bnRpbmdcbiAgICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gICAqXG4gICAqIENvbnNpZGVyIHRoZSBleGFtcGxlIGJlbG93LiBBcyBpdGVtcyBhcmUgcmVtb3ZlZCBvciBhZGRlZCB0byB0aGUgVG9kb0xpc3QgdGhlXG4gICAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgPFRyYW5zaXRpb25Hcm91cD5gICBkb2VzIG5vdCBkZWZpbmUgYW55IGFuaW1hdGlvbiBiZWhhdmlvciFcbiAgICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gICAqIGNvbXBvbmVudC4gVGhpcyBtZWFucyB5b3UgY2FuIG1peCBhbmQgbWF0Y2ggYW5pbWF0aW9ucyBhY3Jvc3MgZGlmZmVyZW50IGxpc3RcbiAgICogaXRlbXMuXG4gICAqL1xuXG59O1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSkpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBoYW5kbGVFeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICAgIGZpcnN0UmVuZGVyOiB0cnVlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbkdyb3VwLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB0cmFuc2l0aW9uR3JvdXA6IHtcbiAgICAgICAgaXNNb3VudGluZzogIXRoaXMuYXBwZWFyZWRcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuYXBwZWFyZWQgPSB0cnVlO1xuICB9O1xuXG4gIFRyYW5zaXRpb25Hcm91cC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHByZXZDaGlsZE1hcHBpbmcgPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgICBoYW5kbGVFeGl0ZWQgPSBfcmVmLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgZmlyc3RSZW5kZXIgPSBfcmVmLmZpcnN0UmVuZGVyO1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogZmlyc3RSZW5kZXIgPyAoMCwgX0NoaWxkTWFwcGluZy5nZXRJbml0aWFsQ2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiAoMCwgX0NoaWxkTWFwcGluZy5nZXROZXh0Q2hpbGRNYXBwaW5nKShuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIGhhbmRsZUV4aXRlZCksXG4gICAgICBmaXJzdFJlbmRlcjogZmFsc2VcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9ICgwLCBfQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZykodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgaWYgKGNoaWxkLmtleSBpbiBjdXJyZW50Q2hpbGRNYXBwaW5nKSByZXR1cm47XG5cbiAgICBpZiAoY2hpbGQucHJvcHMub25FeGl0ZWQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uRXhpdGVkKG5vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBfZXh0ZW5kcyh7fSwgc3RhdGUuY2hpbGRyZW4pO1xuXG4gICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNoaWxkcmVuID0gdmFsdWVzKHRoaXMuc3RhdGUuY2hpbGRyZW4pLm1hcChjaGlsZEZhY3RvcnkpO1xuICAgIGRlbGV0ZSBwcm9wcy5hcHBlYXI7XG4gICAgZGVsZXRlIHByb3BzLmVudGVyO1xuICAgIGRlbGV0ZSBwcm9wcy5leGl0O1xuXG4gICAgaWYgKENvbXBvbmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKTtcbiAgfTtcblxuICByZXR1cm4gVHJhbnNpdGlvbkdyb3VwO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uR3JvdXAuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHRyYW5zaXRpb25Hcm91cDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuVHJhbnNpdGlvbkdyb3VwLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdExpZmVjeWNsZXNDb21wYXQucG9seWZpbGwpKFRyYW5zaXRpb25Hcm91cCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZ2V0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5tZXJnZUNoaWxkTWFwcGluZ3MgPSBtZXJnZUNoaWxkTWFwcGluZ3M7XG5leHBvcnRzLmdldEluaXRpYWxDaGlsZE1hcHBpbmcgPSBnZXRJbml0aWFsQ2hpbGRNYXBwaW5nO1xuZXhwb3J0cy5nZXROZXh0Q2hpbGRNYXBwaW5nID0gZ2V0TmV4dENoaWxkTWFwcGluZztcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcblxuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGM7XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgLy8gcnVuIHRoZSBtYXAgZnVuY3Rpb24gaGVyZSBpbnN0ZWFkIHNvIHRoYXQgdGhlIGtleSBpcyB0aGUgY29tcHV0ZWQgb25lXG4gICAgcmVzdWx0W2NoaWxkLmtleV0gPSBtYXBwZXIoY2hpbGQpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogV2hlbiB5b3UncmUgYWRkaW5nIG9yIHJlbW92aW5nIGNoaWxkcmVuIHNvbWUgbWF5IGJlIGFkZGVkIG9yIHJlbW92ZWQgaW4gdGhlXG4gKiBzYW1lIHJlbmRlciBwYXNzLiBXZSB3YW50IHRvIHNob3cgKmJvdGgqIHNpbmNlIHdlIHdhbnQgdG8gc2ltdWx0YW5lb3VzbHlcbiAqIGFuaW1hdGUgZWxlbWVudHMgaW4gYW5kIG91dC4gVGhpcyBmdW5jdGlvbiB0YWtlcyBhIHByZXZpb3VzIHNldCBvZiBrZXlzXG4gKiBhbmQgYSBuZXcgc2V0IG9mIGtleXMgYW5kIG1lcmdlcyB0aGVtIHdpdGggaXRzIGJlc3QgZ3Vlc3Mgb2YgdGhlIGNvcnJlY3RcbiAqIG9yZGVyaW5nLiBJbiB0aGUgZnV0dXJlIHdlIG1heSBleHBvc2Ugc29tZSBvZiB0aGUgdXRpbGl0aWVzIGluXG4gKiBSZWFjdE11bHRpQ2hpbGQgdG8gbWFrZSB0aGlzIGVhc3ksIGJ1dCBmb3Igbm93IFJlYWN0IGl0c2VsZiBkb2VzIG5vdFxuICogZGlyZWN0bHkgaGF2ZSB0aGlzIGNvbmNlcHQgb2YgdGhlIHVuaW9uIG9mIHByZXZDaGlsZHJlbiBhbmQgbmV4dENoaWxkcmVuXG4gKiBzbyB3ZSBpbXBsZW1lbnQgaXQgaGVyZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gcHJldiBwcmV2IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHBhcmFtIHtvYmplY3R9IG5leHQgbmV4dCBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEByZXR1cm4ge29iamVjdH0gYSBrZXkgc2V0IHRoYXQgY29udGFpbnMgYWxsIGtleXMgaW4gYHByZXZgIGFuZCBhbGwga2V5c1xuICogaW4gYG5leHRgIGluIGEgcmVhc29uYWJsZSBvcmRlci5cbiAqL1xuXG5cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5IGluIG5leHQgPyBuZXh0W2tleV0gOiBwcmV2W2tleV07XG4gIH0gLy8gRm9yIGVhY2gga2V5IG9mIGBuZXh0YCwgdGhlIGxpc3Qgb2Yga2V5cyB0byBpbnNlcnQgYmVmb3JlIHRoYXQga2V5IGluXG4gIC8vIHRoZSBjb21iaW5lZCBsaXN0XG5cblxuICB2YXIgbmV4dEtleXNQZW5kaW5nID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHBlbmRpbmdLZXlzID0gW107XG5cbiAgZm9yICh2YXIgcHJldktleSBpbiBwcmV2KSB7XG4gICAgaWYgKHByZXZLZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaTtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuXG4gIGZvciAodmFyIG5leHRLZXkgaW4gbmV4dCkge1xuICAgIGlmIChuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuZXh0S2V5c1BlbmRpbmdbbmV4dEtleV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBlbmRpbmdOZXh0S2V5ID0gbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldO1xuICAgICAgICBjaGlsZE1hcHBpbmdbbmV4dEtleXNQZW5kaW5nW25leHRLZXldW2ldXSA9IGdldFZhbHVlRm9yS2V5KHBlbmRpbmdOZXh0S2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjaGlsZE1hcHBpbmdbbmV4dEtleV0gPSBnZXRWYWx1ZUZvcktleShuZXh0S2V5KTtcbiAgfSAvLyBGaW5hbGx5LCBhZGQgdGhlIGtleXMgd2hpY2ggZGlkbid0IGFwcGVhciBiZWZvcmUgYW55IGtleSBpbiBgbmV4dGBcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9wKGNoaWxkLCBwcm9wLCBwcm9wcykge1xuICByZXR1cm4gcHJvcHNbcHJvcF0gIT0gbnVsbCA/IHByb3BzW3Byb3BdIDogY2hpbGQucHJvcHNbcHJvcF07XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxDaGlsZE1hcHBpbmcocHJvcHMsIG9uRXhpdGVkKSB7XG4gIHJldHVybiBnZXRDaGlsZE1hcHBpbmcocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgIGluOiB0cnVlLFxuICAgICAgYXBwZWFyOiBnZXRQcm9wKGNoaWxkLCAnYXBwZWFyJywgcHJvcHMpLFxuICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIHByb3BzKSxcbiAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgcHJvcHMpXG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgb25FeGl0ZWQpIHtcbiAgdmFyIG5leHRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmcobmV4dFByb3BzLmNoaWxkcmVuKTtcbiAgdmFyIGNoaWxkcmVuID0gbWVyZ2VDaGlsZE1hcHBpbmdzKHByZXZDaGlsZE1hcHBpbmcsIG5leHRDaGlsZE1hcHBpbmcpO1xuICBPYmplY3Qua2V5cyhjaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5ba2V5XTtcbiAgICBpZiAoISgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSkgcmV0dXJuO1xuICAgIHZhciBoYXNQcmV2ID0ga2V5IGluIHByZXZDaGlsZE1hcHBpbmc7XG4gICAgdmFyIGhhc05leHQgPSBrZXkgaW4gbmV4dENoaWxkTWFwcGluZztcbiAgICB2YXIgcHJldkNoaWxkID0gcHJldkNoaWxkTWFwcGluZ1trZXldO1xuICAgIHZhciBpc0xlYXZpbmcgPSAoMCwgX3JlYWN0LmlzVmFsaWRFbGVtZW50KShwcmV2Q2hpbGQpICYmICFwcmV2Q2hpbGQucHJvcHMuaW47IC8vIGl0ZW0gaXMgbmV3IChlbnRlcmluZylcblxuICAgIGlmIChoYXNOZXh0ICYmICghaGFzUHJldiB8fCBpc0xlYXZpbmcpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZygnZW50ZXJpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkLCB7XG4gICAgICAgIG9uRXhpdGVkOiBvbkV4aXRlZC5iaW5kKG51bGwsIGNoaWxkKSxcbiAgICAgICAgaW46IHRydWUsXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIWhhc05leHQgJiYgaGFzUHJldiAmJiAhaXNMZWF2aW5nKSB7XG4gICAgICAvLyBpdGVtIGlzIG9sZCAoZXhpdGluZylcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdsZWF2aW5nJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBpbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaGFzTmV4dCAmJiBoYXNQcmV2ICYmICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKHByZXZDaGlsZCkpIHtcbiAgICAgIC8vIGl0ZW0gaGFzbid0IGNoYW5nZWQgdHJhbnNpdGlvbiBzdGF0ZXNcbiAgICAgIC8vIGNvcHkgb3ZlciB0aGUgbGFzdCB0cmFuc2l0aW9uIHByb3BzO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3VuY2hhbmdlZCcsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogcHJldkNoaWxkLnByb3BzLmluLFxuICAgICAgICBleGl0OiBnZXRQcm9wKGNoaWxkLCAnZXhpdCcsIG5leHRQcm9wcyksXG4gICAgICAgIGVudGVyOiBnZXRQcm9wKGNoaWxkLCAnZW50ZXInLCBuZXh0UHJvcHMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2hpbGRyZW47XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cbnZhciBSaXBwbGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoUmlwcGxlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSaXBwbGUoKSB7XG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBSaXBwbGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKFJpcHBsZSkpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICBsZWF2aW5nOiBmYWxzZVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxlYXZpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShSaXBwbGUsIFt7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWVQcm9wID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHB1bHNhdGUgPSBfdGhpcyRwcm9wcy5wdWxzYXRlLFxuICAgICAgICAgIHJpcHBsZVggPSBfdGhpcyRwcm9wcy5yaXBwbGVYLFxuICAgICAgICAgIHJpcHBsZVkgPSBfdGhpcyRwcm9wcy5yaXBwbGVZLFxuICAgICAgICAgIHJpcHBsZVNpemUgPSBfdGhpcyRwcm9wcy5yaXBwbGVTaXplLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJwdWxzYXRlXCIsIFwicmlwcGxlWFwiLCBcInJpcHBsZVlcIiwgXCJyaXBwbGVTaXplXCJdKTtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgdmlzaWJsZSA9IF90aGlzJHN0YXRlLnZpc2libGUsXG4gICAgICAgICAgbGVhdmluZyA9IF90aGlzJHN0YXRlLmxlYXZpbmc7XG4gICAgICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucmlwcGxlLCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucmlwcGxlVmlzaWJsZSwgdmlzaWJsZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnJpcHBsZVB1bHNhdGUsIHB1bHNhdGUpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIHJpcHBsZVN0eWxlcyA9IHtcbiAgICAgICAgd2lkdGg6IHJpcHBsZVNpemUsXG4gICAgICAgIGhlaWdodDogcmlwcGxlU2l6ZSxcbiAgICAgICAgdG9wOiAtKHJpcHBsZVNpemUgLyAyKSArIHJpcHBsZVksXG4gICAgICAgIGxlZnQ6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWFxuICAgICAgfTtcbiAgICAgIHZhciBjaGlsZENsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLmNoaWxkLCAoX2NsYXNzTmFtZXMyID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIGxlYXZpbmcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lczIsIGNsYXNzZXMuY2hpbGRQdWxzYXRlLCBwdWxzYXRlKSwgX2NsYXNzTmFtZXMyKSk7XG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgICAgb25FeGl0OiB0aGlzLmhhbmRsZUV4aXRcbiAgICAgIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IHJpcHBsZUNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IHJpcHBsZVN0eWxlc1xuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNoaWxkQ2xhc3NOYW1lXG4gICAgICB9KSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUmlwcGxlO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5SaXBwbGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBwdWxzYXRlcywgdHlwaWNhbGx5IGluZGljYXRpbmcgdGhlIGtleWJvYXJkIGZvY3VzIHN0YXRlIG9mIGFuIGVsZW1lbnQuXG4gICAqL1xuICBwdWxzYXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRGlhbWV0ZXIgb2YgdGhlIHJpcHBsZS5cbiAgICovXG4gIHJpcHBsZVNpemU6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVYOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBwb3NpdGlvbiBvZiB0aGUgcmlwcGxlIGNlbnRlci5cbiAgICovXG4gIHJpcHBsZVk6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbn0gOiB7fTtcblJpcHBsZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1bHNhdGU6IGZhbHNlXG59O1xudmFyIF9kZWZhdWx0ID0gUmlwcGxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG5leHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdHJhbnNpdGlvblRpbWVvdXQodHJhbnNpdGlvblR5cGUpIHtcbiAgdmFyIHRpbWVvdXRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlICsgJ1RpbWVvdXQnO1xuICB2YXIgZW5hYmxlZFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGU7XG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvLyBJZiB0aGUgdHJhbnNpdGlvbiBpcyBlbmFibGVkXG4gICAgaWYgKHByb3BzW2VuYWJsZWRQcm9wTmFtZV0pIHtcbiAgICAgIC8vIElmIG5vIHRpbWVvdXQgZHVyYXRpb24gaXMgcHJvdmlkZWRcbiAgICAgIGlmIChwcm9wc1t0aW1lb3V0UHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIHdhc25cXCd0IHN1cHBsaWVkIHRvIENTU1RyYW5zaXRpb25Hcm91cDogJyArICd0aGlzIGNhbiBjYXVzZSB1bnJlbGlhYmxlIGFuaW1hdGlvbnMgYW5kIHdvblxcJ3QgYmUgc3VwcG9ydGVkIGluICcgKyAnYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hbmltYXRpb24tdHJhbnNpdGlvbi1ncm91cC10aW1lb3V0IGZvciBtb3JlICcgKyAnaW5mb3JtYXRpb24uJyk7IC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcHNbdGltZW91dFByb3BOYW1lXSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIG11c3QgYmUgYSBudW1iZXIgKGluIG1pbGxpc2Vjb25kcyknKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIHRpbWVvdXRzU2hhcGUgPSBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcbiAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxufSkuaXNSZXF1aXJlZF0pO1xuXG5leHBvcnRzLnRpbWVvdXRzU2hhcGUgPSB0aW1lb3V0c1NoYXBlO1xuXG52YXIgY2xhc3NOYW1lc1NoYXBlID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSksIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBlbnRlckRvbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyQWN0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBleGl0RG9uZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgZXhpdEFjdGl2ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZ1xufSldKTtcblxuZXhwb3J0cy5jbGFzc05hbWVzU2hhcGUgPSBjbGFzc05hbWVzU2hhcGU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHMgKi9cbnZhciBjcmVhdGVSaXBwbGVIYW5kbGVyID0gZnVuY3Rpb24gY3JlYXRlUmlwcGxlSGFuZGxlcihpbnN0YW5jZSwgZXZlbnROYW1lLCBhY3Rpb24sIGNiKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiLmNhbGwoaW5zdGFuY2UsIGV2ZW50KTtcbiAgICB9XG5cbiAgICB2YXIgaWdub3JlID0gZmFsc2U7IC8vIElnbm9yZSBldmVudHMgdGhhdCBoYXZlIGJlZW4gYGV2ZW50LnByZXZlbnREZWZhdWx0KClgIG1hcmtlZC5cblxuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBpZ25vcmUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZS5wcm9wcy5kaXNhYmxlVG91Y2hSaXBwbGUgJiYgZXZlbnROYW1lICE9PSAnQmx1cicpIHtcbiAgICAgIGlnbm9yZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFpZ25vcmUgJiYgaW5zdGFuY2UucmlwcGxlKSB7XG4gICAgICBpbnN0YW5jZS5yaXBwbGVbYWN0aW9uXShldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5wcm9wc1tcIm9uXCIuY29uY2F0KGV2ZW50TmFtZSldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnN0YW5jZS5wcm9wc1tcIm9uXCIuY29uY2F0KGV2ZW50TmFtZSldKGV2ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn07XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY3JlYXRlUmlwcGxlSGFuZGxlciA9IGZ1bmN0aW9uIGNyZWF0ZVJpcHBsZUhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBjcmVhdGVSaXBwbGVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5NdWlUaGVtZVByb3ZpZGVyT2xkID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX2JyY2FzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImJyY2FzdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG52YXIgX3RoZW1lTGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi90aGVtZUxpc3RlbmVyXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB0YWtlcyBhIGB0aGVtZWAgcHJvcGVydHkuXG4gKiBJdCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZSB0aGFua3MgdG8gUmVhY3QgY29udGV4dC5cbiAqIFRoaXMgY29tcG9uZW50IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cbnZhciBNdWlUaGVtZVByb3ZpZGVyT2xkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXJPbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIC8vIFdlIGFyZSBub3QgdXNpbmcgdGhlIFJlYWN0IHN0YXRlIGluIG9yZGVyIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHJlcmVuZGVyLlxuICBmdW5jdGlvbiBNdWlUaGVtZVByb3ZpZGVyT2xkKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTXVpVGhlbWVQcm92aWRlck9sZCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKE11aVRoZW1lUHJvdmlkZXJPbGQpLmNhbGwodGhpcykpOyAvLyBHZXQgdGhlIG91dGVyIHRoZW1lIGZyb20gdGhlIGNvbnRleHQsIGNhbiBiZSBudWxsXG5cbiAgICBfdGhpcy5icm9hZGNhc3QgPSAoMCwgX2JyY2FzdC5kZWZhdWx0KSgpO1xuICAgIF90aGlzLm91dGVyVGhlbWUgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmluaXRpYWwoY29udGV4dCk7IC8vIFByb3BhZ2F0ZSB0aGUgdGhlbWUgc28gaXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IHRoZSBjaGlsZHJlblxuXG4gICAgX3RoaXMuYnJvYWRjYXN0LnNldFN0YXRlKF90aGlzLm1lcmdlT3V0ZXJMb2NhbFRoZW1lKHByb3BzLnRoZW1lKSk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShNdWlUaGVtZVByb3ZpZGVyT2xkLCBbe1xuICAgIGtleTogXCJnZXRDaGlsZENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gPSBfdGhpcyRwcm9wcy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbixcbiAgICAgICAgICBzaGVldHNDYWNoZSA9IF90aGlzJHByb3BzLnNoZWV0c0NhY2hlLFxuICAgICAgICAgIHNoZWV0c01hbmFnZXIgPSBfdGhpcyRwcm9wcy5zaGVldHNNYW5hZ2VyO1xuICAgICAgdmFyIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lUHJvdmlkZXJPcHRpb25zIHx8IHt9O1xuXG4gICAgICBpZiAoZGlzYWJsZVN0eWxlc0dlbmVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5kaXNhYmxlU3R5bGVzR2VuZXJhdGlvbiA9IGRpc2FibGVTdHlsZXNHZW5lcmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hlZXRzQ2FjaGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9ucy5zaGVldHNDYWNoZSA9IHNoZWV0c0NhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hlZXRzTWFuYWdlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zLnNoZWV0c01hbmFnZXIgPSBzaGVldHNNYW5hZ2VyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlZiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfcmVmLCBfdGhlbWVMaXN0ZW5lci5DSEFOTkVMLCB0aGlzLmJyb2FkY2FzdCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9yZWYsIFwibXVpVGhlbWVQcm92aWRlck9wdGlvbnNcIiwgbXVpVGhlbWVQcm92aWRlck9wdGlvbnMpLCBfcmVmO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBTdWJzY3JpYmUgb24gdGhlIG91dGVyIHRoZW1lLCBpZiBwcmVzZW50XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlSWQgPSBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIGZ1bmN0aW9uIChvdXRlclRoZW1lKSB7XG4gICAgICAgIF90aGlzMi5vdXRlclRoZW1lID0gb3V0ZXJUaGVtZTsgLy8gRm9yd2FyZCB0aGUgcGFyZW50IHRoZW1lIHVwZGF0ZSB0byB0aGUgY2hpbGRyZW5cblxuICAgICAgICBfdGhpczIuYnJvYWRjYXN0LnNldFN0YXRlKF90aGlzMi5tZXJnZU91dGVyTG9jYWxUaGVtZShfdGhpczIucHJvcHMudGhlbWUpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgLy8gUHJvcGFnYXRlIGEgbG9jYWwgdGhlbWUgdXBkYXRlXG4gICAgICBpZiAodGhpcy5wcm9wcy50aGVtZSAhPT0gcHJldlByb3BzLnRoZW1lKSB7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0LnNldFN0YXRlKHRoaXMubWVyZ2VPdXRlckxvY2FsVGhlbWUodGhpcy5wcm9wcy50aGVtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlSWQgIT09IG51bGwpIHtcbiAgICAgICAgX3RoZW1lTGlzdGVuZXIuZGVmYXVsdC51bnN1YnNjcmliZSh0aGlzLmNvbnRleHQsIHRoaXMudW5zdWJzY3JpYmVJZCk7XG4gICAgICB9XG4gICAgfSAvLyBTaW1wbGUgbWVyZ2UgYmV0d2VlbiB0aGUgb3V0ZXIgdGhlbWUgYW5kIHRoZSBsb2NhbCB0aGVtZVxuXG4gIH0sIHtcbiAgICBrZXk6IFwibWVyZ2VPdXRlckxvY2FsVGhlbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWVyZ2VPdXRlckxvY2FsVGhlbWUobG9jYWxUaGVtZSkge1xuICAgICAgLy8gVG8gc3VwcG9ydCBjb21wb3NpdGlvbiBvZiB0aGVtZS5cbiAgICAgIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkodGhpcy5vdXRlclRoZW1lLCBbJ01hdGVyaWFsLVVJOiB5b3UgYXJlIHByb3ZpZGluZyBhIHRoZW1lIGZ1bmN0aW9uIHByb3BlcnR5ICcgKyAndG8gdGhlIE11aVRoZW1lUHJvdmlkZXIgY29tcG9uZW50OicsICc8TXVpVGhlbWVQcm92aWRlciB0aGVtZT17b3V0ZXJUaGVtZSA9PiBvdXRlclRoZW1lfSAvPicsICdIb3dldmVyLCBubyBvdXRlciB0aGVtZSBpcyBwcmVzZW50LicsICdNYWtlIHN1cmUgYSB0aGVtZSBpcyBhbHJlYWR5IGluamVjdGVkIGhpZ2hlciBpbiB0aGUgUmVhY3QgdHJlZSAnICsgJ29yIHByb3ZpZGUgYSB0aGVtZSBvYmplY3QuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gbG9jYWxUaGVtZSh0aGlzLm91dGVyVGhlbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3V0ZXJUaGVtZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxUaGVtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRoaXMub3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAvLyBUT0RPIG1vdmUgdGhlIHNoZWV0c01hbmFnZXIgcHJvcGVydHkgdG8gYSBkaWZmZXJlbnQgY29tcG9uZW50LlxuICAgICAgLy8gd2FybmluZyhcbiAgICAgIC8vICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgfHwgdGhpcy5wcm9wcy5zaGVldHNNYW5hZ2VyLFxuICAgICAgLy8gICBbXG4gICAgICAvLyAgICAgJ01hdGVyaWFsLVVJOiB5b3UgbmVlZCB0byBwcm92aWRlIGEgc2hlZXRzTWFuYWdlciB0byB0aGUgTXVpVGhlbWVQcm92aWRlciAnICtcbiAgICAgIC8vICAgICAgICd3aGVuIHJlbmRlcmluZyBvbiB0aGUgc2VydmVyLicsXG4gICAgICAvLyAgICAgJ0lmIHlvdSBkbyBub3QsIHlvdSBtaWdodCBleHBlcmllbmNlIGEgbWVtb3J5IGxlYWsnLFxuICAgICAgLy8gICBdLmpvaW4oJ1xcbicpLFxuICAgICAgLy8gKTtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTXVpVGhlbWVQcm92aWRlck9sZDtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuZXhwb3J0cy5NdWlUaGVtZVByb3ZpZGVyT2xkID0gTXVpVGhlbWVQcm92aWRlck9sZDtcbk11aVRoZW1lUHJvdmlkZXJPbGQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogWW91IGNhbiB3cmFwIGEgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBZb3UgY2FuIGRpc2FibGUgdGhlIGdlbmVyYXRpb24gb2YgdGhlIHN0eWxlcyB3aXRoIHRoaXMgb3B0aW9uLlxuICAgKiBJdCBjYW4gYmUgdXNlZnVsIHdoZW4gdHJhdmVyc2luZyB0aGUgUmVhY3QgdHJlZSBvdXRzaWRlIG9mIHRoZSBIVE1MXG4gICAqIHJlbmRlcmluZyBzdGVwIG9uIHRoZSBzZXJ2ZXIuXG4gICAqIExldCdzIHNheSB5b3UgYXJlIHVzaW5nIHJlYWN0LWFwb2xsbyB0byBleHRyYWN0IGFsbFxuICAgKiB0aGUgcXVlcmllcyBtYWRlIGJ5IHRoZSBpbnRlcmZhY2Ugc2VydmVyIHNpZGUuXG4gICAqIFlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIGRpc2FibGVTdHlsZXNHZW5lcmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBJbiBiZXRhLlxuICAgKi9cbiAgc2hlZXRzQ2FjaGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQSB0aGVtZSBvYmplY3QuXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKS5pc1JlcXVpcmVkXG59IDoge307XG5NdWlUaGVtZVByb3ZpZGVyT2xkLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfdXRpbHMuZXhhY3RQcm9wKShNdWlUaGVtZVByb3ZpZGVyT2xkLnByb3BUeXBlcykgOiB7fTtcbk11aVRoZW1lUHJvdmlkZXJPbGQuY2hpbGRDb250ZXh0VHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBfdGhlbWVMaXN0ZW5lci5kZWZhdWx0LmNvbnRleHRUeXBlcywge1xuICBtdWlUaGVtZVByb3ZpZGVyT3B0aW9uczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSk7XG5NdWlUaGVtZVByb3ZpZGVyT2xkLmNvbnRleHRUeXBlcyA9ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF90aGVtZUxpc3RlbmVyLmRlZmF1bHQuY29udGV4dFR5cGVzLCB7XG4gIG11aVRoZW1lUHJvdmlkZXJPcHRpb25zOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59KTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5pZiAoIV91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXykge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18gPSB7fTtcbn1cblxuaWYgKCFfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18uTXVpVGhlbWVQcm92aWRlcikge1xuICBfdXRpbHMucG9ueWZpbGxHbG9iYWwuX19NVUlfU1RZTEVTX18uTXVpVGhlbWVQcm92aWRlciA9IE11aVRoZW1lUHJvdmlkZXJPbGQ7XG59XG5cbnZhciBfZGVmYXVsdCA9IF91dGlscy5wb255ZmlsbEdsb2JhbC5fX01VSV9TVFlMRVNfXy5NdWlUaGVtZVByb3ZpZGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXdPYmogPSB7fTtcblxuICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9O1xuXG4gICAgICAgICAgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdPYmpba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIG5ld09iai5kZWZhdWx0ID0gb2JqO1xuICAgIHJldHVybiBuZXdPYmo7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJmdW5jdGlvbiBjcmVhdGVCcm9hZGNhc3QgKGluaXRpYWxTdGF0ZSkge1xuICB2YXIgbGlzdGVuZXJzID0ge307XG4gIHZhciBpZCA9IDE7XG4gIHZhciBfc3RhdGUgPSBpbml0aWFsU3RhdGU7XG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUgKCkge1xuICAgIHJldHVybiBfc3RhdGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0YXRlIChzdGF0ZSkge1xuICAgIF9zdGF0ZSA9IHN0YXRlO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobGlzdGVuZXJzKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIC8vIGlmIGEgbGlzdGVuZXIgZ2V0cyB1bnN1YnNjcmliZWQgZHVyaW5nIHNldFN0YXRlIHdlIGp1c3Qgc2tpcCBpdFxuICAgICAgaWYgKGxpc3RlbmVyc1trZXlzW2ldXSkgeyBsaXN0ZW5lcnNba2V5c1tpXV0oc3RhdGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc3Vic2NyaWJlIHRvIGNoYW5nZXMgYW5kIHJldHVybiB0aGUgc3Vic2NyaXB0aW9uSWRcbiAgZnVuY3Rpb24gc3Vic2NyaWJlIChsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uLicpXG4gICAgfVxuICAgIHZhciBjdXJyZW50SWQgPSBpZDtcbiAgICBsaXN0ZW5lcnNbY3VycmVudElkXSA9IGxpc3RlbmVyO1xuICAgIGlkICs9IDE7XG4gICAgcmV0dXJuIGN1cnJlbnRJZFxuICB9XG5cbiAgLy8gcmVtb3ZlIHN1YnNjcmlwdGlvbiBieSByZW1vdmluZyB0aGUgbGlzdGVuZXIgZnVuY3Rpb25cbiAgZnVuY3Rpb24gdW5zdWJzY3JpYmUgKGlkKSB7XG4gICAgbGlzdGVuZXJzW2lkXSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiB7IGdldFN0YXRlOiBnZXRTdGF0ZSwgc2V0U3RhdGU6IHNldFN0YXRlLCBzdWJzY3JpYmU6IHN1YnNjcmliZSwgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvYWRjYXN0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVTdHlsZXM7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlcyhzdHlsZXMpIHtcbiAgcmV0dXJuIHN0eWxlcztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzSG9yaXpvbnRhbCA9IGlzSG9yaXpvbnRhbDtcbmV4cG9ydHMuZ2V0QW5jaG9yID0gZ2V0QW5jaG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfTW9kYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Nb2RhbFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9TbGlkZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1NsaWRlXCIpKTtcblxudmFyIF9QYXBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BhcGVyXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKFwiLi4vc3R5bGVzL3RyYW5zaXRpb25zXCIpO1xuXG52YXIgb3Bwb3NpdGVEaXJlY3Rpb24gPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIHRvcDogJ2Rvd24nLFxuICBib3R0b206ICd1cCdcbn07XG5cbmZ1bmN0aW9uIGlzSG9yaXpvbnRhbChwcm9wcykge1xuICByZXR1cm4gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihwcm9wcy5hbmNob3IpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0QW5jaG9yKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy50aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnICYmIGlzSG9yaXpvbnRhbChwcm9wcykgPyBvcHBvc2l0ZURpcmVjdGlvbltwcm9wcy5hbmNob3JdIDogcHJvcHMuYW5jaG9yO1xufVxuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJwZXJtYW5lbnQgb3IgcGVyc2lzdGVudFwiYC4gKi9cbiAgICBkb2NrZWQ6IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICAgIHBhcGVyOiB7XG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBmbGV4OiAnMSAwIGF1dG8nLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIC8vIHRlbXBvcmFyeSBzdHlsZVxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gICAgICBvdXRsaW5lOiAnbm9uZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJsZWZ0XCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yTGVmdDoge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAnYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJyaWdodFwiYC4gKi9cbiAgICBwYXBlckFuY2hvclJpZ2h0OiB7XG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cInRvcFwiYC4gKi9cbiAgICBwYXBlckFuY2hvclRvcDoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIGJvdHRvbTogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwiYm90dG9tXCJgLiAqL1xuICAgIHBhcGVyQW5jaG9yQm90dG9tOiB7XG4gICAgICB0b3A6ICdhdXRvJyxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgbWF4SGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJsZWZ0XCJgICYgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkTGVmdDoge1xuICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgICYgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkVG9wOiB7XG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwicmlnaHRcImAgJiBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRSaWdodDoge1xuICAgICAgYm9yZGVyTGVmdDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJib3R0b21cImAgJiBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRCb3R0b206IHtcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBNb2RhbGAgY29tcG9uZW50LiAqL1xuICAgIG1vZGFsOiB7fVxuICB9O1xufTtcbi8qKlxuICogVGhlIHByb3BlcnRpZXMgb2YgdGhlIFtNb2RhbF0oL2FwaS9tb2RhbC8pIGNvbXBvbmVudCBhcmUgYXZhaWxhYmxlXG4gKiB3aGVuIGB2YXJpYW50PVwidGVtcG9yYXJ5XCJgIGlzIHNldC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgRHJhd2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKERyYXdlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhd2VyKCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgRHJhd2VyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKF9nZXRQcm90b3R5cGVPZjIgPSAoMCwgX2dldFByb3RvdHlwZU9mMy5kZWZhdWx0KShEcmF3ZXIpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcbiAgICBfdGhpcy5tb3VudGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoRHJhd2VyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGFuY2hvclByb3AgPSBfdGhpcyRwcm9wcy5hbmNob3IsXG4gICAgICAgICAgQmFja2Ryb3BQcm9wcyA9IF90aGlzJHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZWxldmF0aW9uID0gX3RoaXMkcHJvcHMuZWxldmF0aW9uLFxuICAgICAgICAgIF90aGlzJHByb3BzJE1vZGFsUHJvcCA9IF90aGlzJHByb3BzLk1vZGFsUHJvcHM7XG4gICAgICBfdGhpcyRwcm9wcyRNb2RhbFByb3AgPSBfdGhpcyRwcm9wcyRNb2RhbFByb3AgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMkTW9kYWxQcm9wO1xuICAgICAgdmFyIEJhY2tkcm9wUHJvcHNQcm9wID0gX3RoaXMkcHJvcHMkTW9kYWxQcm9wLkJhY2tkcm9wUHJvcHMsXG4gICAgICAgICAgTW9kYWxQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzJE1vZGFsUHJvcCwgW1wiQmFja2Ryb3BQcm9wc1wiXSksXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb3BlbiA9IF90aGlzJHByb3BzLm9wZW4sXG4gICAgICAgICAgUGFwZXJQcm9wcyA9IF90aGlzJHByb3BzLlBhcGVyUHJvcHMsXG4gICAgICAgICAgU2xpZGVQcm9wcyA9IF90aGlzJHByb3BzLlNsaWRlUHJvcHMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZSxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImVsZXZhdGlvblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJTbGlkZVByb3BzXCIsIFwidGhlbWVcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcbiAgICAgIHZhciBhbmNob3IgPSBnZXRBbmNob3IodGhpcy5wcm9wcyk7XG5cbiAgICAgIHZhciBkcmF3ZXIgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYXBlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgZWxldmF0aW9uOiB2YXJpYW50ID09PSAndGVtcG9yYXJ5JyA/IGVsZXZhdGlvbiA6IDAsXG4gICAgICAgIHNxdWFyZTogdHJ1ZSxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5wYXBlciwgY2xhc3Nlc1tcInBhcGVyQW5jaG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShhbmNob3IpKV0sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzW1wicGFwZXJBbmNob3JEb2NrZWRcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGFuY2hvcikpXSwgdmFyaWFudCAhPT0gJ3RlbXBvcmFyeScpKVxuICAgICAgfSwgUGFwZXJQcm9wcyksIGNoaWxkcmVuKTtcblxuICAgICAgaWYgKHZhcmlhbnQgPT09ICdwZXJtYW5lbnQnKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSlcbiAgICAgICAgfSwgb3RoZXIpLCBkcmF3ZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGluZ0RyYXdlciA9IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1NsaWRlLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBpbjogb3BlbixcbiAgICAgICAgZGlyZWN0aW9uOiBvcHBvc2l0ZURpcmVjdGlvblthbmNob3JdLFxuICAgICAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIGFwcGVhcjogdGhpcy5tb3VudGVkXG4gICAgICB9LCBTbGlkZVByb3BzKSwgZHJhd2VyKTtcblxuICAgICAgaWYgKHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50Jykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzZXMuZG9ja2VkLCBjbGFzc05hbWUpXG4gICAgICAgIH0sIG90aGVyKSwgc2xpZGluZ0RyYXdlcik7XG4gICAgICB9IC8vIHZhcmlhbnQgPT09IHRlbXBvcmFyeVxuXG5cbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Nb2RhbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgQmFja2Ryb3BQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgQmFja2Ryb3BQcm9wcywgQmFja2Ryb3BQcm9wc1Byb3AsIHtcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvblxuICAgICAgICB9KSxcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc2VzLm1vZGFsLCBjbGFzc05hbWUpLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBvbkNsb3NlOiBvbkNsb3NlXG4gICAgICB9LCBvdGhlciwgTW9kYWxQcm9wcyksIHNsaWRpbmdEcmF3ZXIpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRHJhd2VyO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5EcmF3ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2lkZSBmcm9tIHdoaWNoIHRoZSBkcmF3ZXIgd2lsbCBhcHBlYXIuXG4gICAqL1xuICBhbmNob3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBkcmF3ZXIuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBkcmF3ZXIuXG4gICAqL1xuICBlbGV2YXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BNb2RhbGBdKC9hcGkvbW9kYWwvKSBlbGVtZW50LlxuICAgKi9cbiAgTW9kYWxQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJhd2VyIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYFBhcGVyYF0oL2FwaS9wYXBlci8pIGVsZW1lbnQuXG4gICAqL1xuICBQYXBlclByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgU2xpZGVgXSgvYXBpL3NsaWRlLykgZWxlbWVudC5cbiAgICovXG4gIFNsaWRlUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRoZW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBmb3IgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucywgb3IgaW5kaXZpZHVhbGx5IHdpdGggYW4gb2JqZWN0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDoge307XG5EcmF3ZXIuZGVmYXVsdFByb3BzID0ge1xuICBhbmNob3I6ICdsZWZ0JyxcbiAgZWxldmF0aW9uOiAxNixcbiAgb3BlbjogZmFsc2UsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfSxcbiAgdmFyaWFudDogJ3RlbXBvcmFyeScgLy8gTW9iaWxlIGZpcnN0LlxuXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlEcmF3ZXInLFxuICBmbGlwOiBmYWxzZSxcbiAgd2l0aFRoZW1lOiB0cnVlXG59KShEcmF3ZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfa2V5Y29kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImtleWNvZGVcIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9vd25lckRvY3VtZW50XCIpKTtcblxudmFyIF9Sb290UmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUm9vdFJlZlwiKSk7XG5cbnZhciBfUG9ydGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUG9ydGFsXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9Nb2RhbE1hbmFnZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL01vZGFsTWFuYWdlclwiKSk7XG5cbnZhciBfQmFja2Ryb3AgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9CYWNrZHJvcFwiKSk7XG5cbnZhciBfbWFuYWdlQXJpYUhpZGRlbiA9IHJlcXVpcmUoXCIuL21hbmFnZUFyaWFIaWRkZW5cIik7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIsIGRlZmF1bHRDb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXgubW9kYWwsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgYE1vZGFsYCBoYXMgZXhpdGVkLiAqL1xuICAgIGhpZGRlbjoge1xuICAgICAgdmlzaWJpbGl0eTogJ2hpZGRlbidcbiAgICB9XG4gIH07XG59O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFfcmVhY3QuZGVmYXVsdC5jcmVhdGVDb250ZXh0KSB7XG4gIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IHJlYWN0QDE2LjMuMCBvciBncmVhdGVyIGlzIHJlcXVpcmVkLicpO1xufVxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBzaGFyZXMgbWFueSBjb25jZXB0cyB3aXRoIFtyZWFjdC1vdmVybGF5c10oaHR0cHM6Ly9yZWFjdC1ib290c3RyYXAuZ2l0aHViLmlvL3JlYWN0LW92ZXJsYXlzLyNtb2RhbHMpLlxuICovXG5cblxudmFyIE1vZGFsID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKE1vZGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNb2RhbChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE1vZGFsKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTW9kYWwpLmNhbGwodGhpcykpO1xuICAgIF90aGlzLm1vdW50ZWQgPSBmYWxzZTtcblxuICAgIF90aGlzLmhhbmRsZU9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKF90aGlzLm1vdW50Tm9kZSk7XG4gICAgICB2YXIgY29udGFpbmVyID0gZ2V0Q29udGFpbmVyKF90aGlzLnByb3BzLmNvbnRhaW5lciwgZG9jLmJvZHkpO1xuXG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLmFkZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSksIGNvbnRhaW5lcik7XG5cbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX3RoaXMuaGFuZGxlRG9jdW1lbnRLZXlEb3duKTtcbiAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIF90aGlzLmVuZm9yY2VGb2N1cywgdHJ1ZSk7XG5cbiAgICAgIGlmIChfdGhpcy5kaWFsb2dSZWYpIHtcbiAgICAgICAgX3RoaXMuaGFuZGxlT3BlbmVkKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlbmRlcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uUmVuZGVyZWQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25SZW5kZXJlZCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3Blbikge1xuICAgICAgICBfdGhpcy5oYW5kbGVPcGVuZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfbWFuYWdlQXJpYUhpZGRlbi5hcmlhSGlkZGVuKShfdGhpcy5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU9wZW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmF1dG9Gb2N1cygpOyAvLyBGaXggYSBidWcgb24gQ2hyb21lIHdoZXJlIHRoZSBzY3JvbGwgaXNuJ3QgaW5pdGlhbGx5IDAuXG5cblxuICAgICAgX3RoaXMubW9kYWxSZWYuc2Nyb2xsVG9wID0gMDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5wcm9wcy5tYW5hZ2VyLnJlbW92ZSgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIuZGVmYXVsdCkoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyLmRlZmF1bHQpKF90aGlzKSkpO1xuXG4gICAgICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKF90aGlzLm1vdW50Tm9kZSk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIF90aGlzLmhhbmRsZURvY3VtZW50S2V5RG93bik7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBfdGhpcy5lbmZvcmNlRm9jdXMsIHRydWUpO1xuXG4gICAgICBfdGhpcy5yZXN0b3JlTGFzdEZvY3VzKCk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CYWNrZHJvcENsaWNrKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlQmFja2Ryb3BDbGljayAmJiBfdGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZURvY3VtZW50S2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgLy8gSWdub3JlIGV2ZW50cyB0aGF0IGhhdmUgYmVlbiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgbWFya2VkLlxuICAgICAgaWYgKCgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCkgIT09ICdlc2MnIHx8ICFfdGhpcy5pc1RvcE1vZGFsKCkgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVzY2FwZUtleURvd24pIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Fc2NhcGVLZXlEb3duKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5kaXNhYmxlRXNjYXBlS2V5RG93biAmJiBfdGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmVuZm9yY2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFRoZSBNb2RhbCBtaWdodCBub3QgYWxyZWFkeSBiZSBtb3VudGVkLlxuICAgICAgaWYgKCFfdGhpcy5pc1RvcE1vZGFsKCkgfHwgX3RoaXMucHJvcHMuZGlzYWJsZUVuZm9yY2VGb2N1cyB8fCAhX3RoaXMubW91bnRlZCB8fCAhX3RoaXMuZGlhbG9nUmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVFbGVtZW50ID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKF90aGlzLm1vdW50Tm9kZSkuYWN0aXZlRWxlbWVudDtcblxuICAgICAgaWYgKCFfdGhpcy5kaWFsb2dSZWYuY29udGFpbnMoY3VycmVudEFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIF90aGlzLmRpYWxvZ1JlZi5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVQb3J0YWxSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5tb3VudE5vZGUgPSByZWYgPyByZWYuZ2V0TW91bnROb2RlKCkgOiByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZU1vZGFsUmVmID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMubW9kYWxSZWYgPSByZWY7XG4gICAgfTtcblxuICAgIF90aGlzLm9uUm9vdFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIF90aGlzLmRpYWxvZ1JlZiA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBleGl0ZWQ6ICFwcm9wcy5vcGVuXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShNb2RhbCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlT3BlbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnREaWRVcGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgICAgaWYgKHByZXZQcm9wcy5vcGVuICYmICF0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDbG9zZSgpO1xuICAgICAgfSBlbHNlIGlmICghcHJldlByb3BzLm9wZW4gJiYgdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHRoaXMubGFzdEZvY3VzID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKHRoaXMubW91bnROb2RlKS5hY3RpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLmhhbmRsZU9wZW4oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcblxuICAgICAgaWYgKHRoaXMucHJvcHMub3BlbiB8fCBnZXRIYXNUcmFuc2l0aW9uKHRoaXMucHJvcHMpICYmICF0aGlzLnN0YXRlLmV4aXRlZCkge1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImF1dG9Gb2N1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRvRm9jdXMoKSB7XG4gICAgICAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlQXV0b0ZvY3VzIHx8ICF0aGlzLmRpYWxvZ1JlZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjdXJyZW50QWN0aXZlRWxlbWVudCA9ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSh0aGlzLm1vdW50Tm9kZSkuYWN0aXZlRWxlbWVudDtcblxuICAgICAgaWYgKCF0aGlzLmRpYWxvZ1JlZi5jb250YWlucyhjdXJyZW50QWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpYWxvZ1JlZi5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoZmFsc2UsIFsnTWF0ZXJpYWwtVUk6IHRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSkgOiB2b2lkIDA7XG4gICAgICAgICAgdGhpcy5kaWFsb2dSZWYuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdEZvY3VzID0gY3VycmVudEFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZGlhbG9nUmVmLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3RvcmVMYXN0Rm9jdXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZUxhc3RGb2N1cygpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVSZXN0b3JlRm9jdXMgfHwgIXRoaXMubGFzdEZvY3VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gTm90IGFsbCBlbGVtZW50cyBpbiBJRSAxMSBoYXZlIGEgZm9jdXMgbWV0aG9kLlxuICAgICAgLy8gQmVjYXVzZSBJRSAxMSBtYXJrZXQgc2hhcmUgaXMgbG93LCB3ZSBhY2NlcHQgdGhlIHJlc3RvcmUgZm9jdXMgYmVpbmcgYnJva2VuXG4gICAgICAvLyBhbmQgd2Ugc2lsZW50IHRoZSBpc3N1ZS5cblxuXG4gICAgICBpZiAodGhpcy5sYXN0Rm9jdXMuZm9jdXMpIHtcbiAgICAgICAgdGhpcy5sYXN0Rm9jdXMuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXN0Rm9jdXMgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1RvcE1vZGFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzVG9wTW9kYWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5tYW5hZ2VyLmlzVG9wTW9kYWwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIEJhY2tkcm9wQ29tcG9uZW50ID0gX3RoaXMkcHJvcHMuQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICAgICAgQmFja2Ryb3BQcm9wcyA9IF90aGlzJHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgY29udGFpbmVyID0gX3RoaXMkcHJvcHMuY29udGFpbmVyLFxuICAgICAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfdGhpcyRwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgICAgIGRpc2FibGVCYWNrZHJvcENsaWNrID0gX3RoaXMkcHJvcHMuZGlzYWJsZUJhY2tkcm9wQ2xpY2ssXG4gICAgICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF90aGlzJHByb3BzLmRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZUVzY2FwZUtleURvd24gPSBfdGhpcyRwcm9wcy5kaXNhYmxlRXNjYXBlS2V5RG93bixcbiAgICAgICAgICBkaXNhYmxlUG9ydGFsID0gX3RoaXMkcHJvcHMuZGlzYWJsZVBvcnRhbCxcbiAgICAgICAgICBkaXNhYmxlUmVzdG9yZUZvY3VzID0gX3RoaXMkcHJvcHMuZGlzYWJsZVJlc3RvcmVGb2N1cyxcbiAgICAgICAgICBoaWRlQmFja2Ryb3AgPSBfdGhpcyRwcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICAgICAga2VlcE1vdW50ZWQgPSBfdGhpcyRwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgICAgICBtYW5hZ2VyID0gX3RoaXMkcHJvcHMubWFuYWdlcixcbiAgICAgICAgICBvbkJhY2tkcm9wQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbkJhY2tkcm9wQ2xpY2ssXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgICAgb25Fc2NhcGVLZXlEb3duID0gX3RoaXMkcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgICAgIG9uUmVuZGVyZWQgPSBfdGhpcyRwcm9wcy5vblJlbmRlcmVkLFxuICAgICAgICAgIG9wZW4gPSBfdGhpcyRwcm9wcy5vcGVuLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcIkJhY2tkcm9wQ29tcG9uZW50XCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbnRhaW5lclwiLCBcImRpc2FibGVBdXRvRm9jdXNcIiwgXCJkaXNhYmxlQmFja2Ryb3BDbGlja1wiLCBcImRpc2FibGVFbmZvcmNlRm9jdXNcIiwgXCJkaXNhYmxlRXNjYXBlS2V5RG93blwiLCBcImRpc2FibGVQb3J0YWxcIiwgXCJkaXNhYmxlUmVzdG9yZUZvY3VzXCIsIFwiaGlkZUJhY2tkcm9wXCIsIFwia2VlcE1vdW50ZWRcIiwgXCJtYW5hZ2VyXCIsIFwib25CYWNrZHJvcENsaWNrXCIsIFwib25DbG9zZVwiLCBcIm9uRXNjYXBlS2V5RG93blwiLCBcIm9uUmVuZGVyZWRcIiwgXCJvcGVuXCJdKTtcbiAgICAgIHZhciBleGl0ZWQgPSB0aGlzLnN0YXRlLmV4aXRlZDtcbiAgICAgIHZhciBoYXNUcmFuc2l0aW9uID0gZ2V0SGFzVHJhbnNpdGlvbih0aGlzLnByb3BzKTtcblxuICAgICAgaWYgKCFrZWVwTW91bnRlZCAmJiAhb3BlbiAmJiAoIWhhc1RyYW5zaXRpb24gfHwgZXhpdGVkKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkUHJvcHMgPSB7fTsgLy8gSXQncyBhIFRyYW5zaXRpb24gbGlrZSBjb21wb25lbnRcblxuICAgICAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgY2hpbGRQcm9wcy5vbkV4aXRlZCA9ICgwLCBfaGVscGVycy5jcmVhdGVDaGFpbmVkRnVuY3Rpb24pKHRoaXMuaGFuZGxlRXhpdGVkLCBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGlsZHJlbi5wcm9wcy5yb2xlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2hpbGRQcm9wcy5yb2xlID0gY2hpbGRyZW4ucHJvcHMucm9sZSB8fCAnZG9jdW1lbnQnO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggfHwgJy0xJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcnRhbC5kZWZhdWx0LCB7XG4gICAgICAgIHJlZjogdGhpcy5oYW5kbGVQb3J0YWxSZWYsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgICBkaXNhYmxlUG9ydGFsOiBkaXNhYmxlUG9ydGFsLFxuICAgICAgICBvblJlbmRlcmVkOiB0aGlzLmhhbmRsZVJlbmRlcmVkXG4gICAgICB9LCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByZWY6IHRoaXMuaGFuZGxlTW9kYWxSZWYsXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh7fSwgY2xhc3Nlcy5oaWRkZW4sIGV4aXRlZCkpXG4gICAgICB9LCBvdGhlciksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KEJhY2tkcm9wQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrXG4gICAgICB9LCBCYWNrZHJvcFByb3BzKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1Jvb3RSZWYuZGVmYXVsdCwge1xuICAgICAgICByb290UmVmOiB0aGlzLm9uUm9vdFJlZlxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBjaGlsZFByb3BzKSkpKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhpdGVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdldEhhc1RyYW5zaXRpb24obmV4dFByb3BzKSkge1xuICAgICAgICAvLyBPdGhlcndpc2UgbGV0IGhhbmRsZUV4aXRlZCB0YWtlIGNhcmUgb2YgbWFya2luZyBleGl0ZWQuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZXhpdGVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTW9kYWw7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1vZGFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEEgYmFja2Ryb3AgY29tcG9uZW50LiBUaGlzIHByb3BlcnR5IGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuZWxlbWVudCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEEgbm9kZSwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqL1xuICBjb250YWluZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBhbnkgY2FsbGJhY2suXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSBtb2RhbCB3aGlsZSBvcGVuLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlRW5mb3JjZUZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoaXR0aW5nIGVzY2FwZSB3aWxsIG5vdCBmaXJlIGFueSBjYWxsYmFjay5cbiAgICovXG4gIGRpc2FibGVFc2NhcGVLZXlEb3duOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCByZXN0b3JlIGZvY3VzIHRvIHByZXZpb3VzbHkgZm9jdXNlZCBlbGVtZW50IG9uY2VcbiAgICogbW9kYWwgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIG5vdCByZW5kZXJlZC5cbiAgICovXG4gIGhpZGVCYWNrZHJvcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEFsd2F5cyBrZWVwIHRoZSBjaGlsZHJlbiBpbiB0aGUgRE9NLlxuICAgKiBUaGlzIHByb3BlcnR5IGNhbiBiZSB1c2VmdWwgaW4gU0VPIHNpdHVhdGlvbiBvclxuICAgKiB3aGVuIHlvdSB3YW50IHRvIG1heGltaXplIHRoZSByZXNwb25zaXZlbmVzcyBvZiB0aGUgTW9kYWwuXG4gICAqL1xuICBrZWVwTW91bnRlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW5cbiAgICogTW9kYWxzLiBUaGlzIGVuYWJsZXMgY3VzdG9taXppbmcgaG93IG1vZGFscyBpbnRlcmFjdCB3aXRoaW4gYSBjb250YWluZXIuXG4gICAqL1xuICBtYW5hZ2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgY29tcG9uZW50IHJlcXVlc3RzIHRvIGJlIGNsb3NlZC5cbiAgICogVGhlIGByZWFzb25gIHBhcmFtZXRlciBjYW4gb3B0aW9uYWxseSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHJlc3BvbnNlIHRvIGBvbkNsb3NlYC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gQ2FuIGJlOmBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImBcbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQsXG4gICAqIGBkaXNhYmxlRXNjYXBlS2V5RG93bmAgaXMgZmFsc2UgYW5kIHRoZSBtb2RhbCBpcyBpbiBmb2N1cy5cbiAgICovXG4gIG9uRXNjYXBlS2V5RG93bjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqIEl0IHNpZ25hbHMgdGhhdCB0aGUgYG9wZW49e3RydWV9YCBwcm9wZXJ0eSB0b29rIGVmZmVjdC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZFxufSA6IHt9O1xuTW9kYWwuZGVmYXVsdFByb3BzID0ge1xuICBCYWNrZHJvcENvbXBvbmVudDogX0JhY2tkcm9wLmRlZmF1bHQsXG4gIGRpc2FibGVBdXRvRm9jdXM6IGZhbHNlLFxuICBkaXNhYmxlQmFja2Ryb3BDbGljazogZmFsc2UsXG4gIGRpc2FibGVFbmZvcmNlRm9jdXM6IGZhbHNlLFxuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogZmFsc2UsXG4gIGRpc2FibGVQb3J0YWw6IGZhbHNlLFxuICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBmYWxzZSxcbiAgaGlkZUJhY2tkcm9wOiBmYWxzZSxcbiAga2VlcE1vdW50ZWQ6IGZhbHNlLFxuICAvLyBNb2RhbHMgZG9uJ3Qgb3BlbiBvbiB0aGUgc2VydmVyIHNvIHRoaXMgd29uJ3QgY29uZmxpY3Qgd2l0aCBjb25jdXJyZW50IHJlcXVlc3RzLlxuICBtYW5hZ2VyOiBuZXcgX01vZGFsTWFuYWdlci5kZWZhdWx0KClcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgZmxpcDogZmFsc2UsXG4gIG5hbWU6ICdNdWlNb2RhbCdcbn0pKE1vZGFsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUm9vdFJlZi5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Sb290UmVmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Sb290UmVmXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0RG9tID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbnZhciBfcmVhY3RIZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL3JlYWN0SGVscGVyc1wiKTtcblxuLyoqXG4gKiBIZWxwZXIgY29tcG9uZW50IHRvIGFsbG93IGF0dGFjaGluZyBhIHJlZiB0byBhXG4gKiB3cmFwcGVkIGVsZW1lbnQgdG8gYWNjZXNzIHRoZSB1bmRlcmx5aW5nIERPTSBlbGVtZW50LlxuICpcbiAqIEl0J3MgaGlnaGx5IGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE0MDEjaXNzdWVjb21tZW50LTM0MDU0MzgwMS5cbiAqIEZvciBleGFtcGxlOlxuICogYGBganN4XG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IFJvb3RSZWYgZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvUm9vdFJlZic7XG4gKlxuICogY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICogICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICBzdXBlcigpO1xuICogICAgIHRoaXMuZG9tUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gKiAgIH1cbiAqXG4gKiAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICogICAgIGNvbnNvbGUubG9nKHRoaXMuZG9tUmVmLmN1cnJlbnQpOyAvLyBET00gbm9kZVxuICogICB9XG4gKlxuICogICByZW5kZXIoKSB7XG4gKiAgICAgcmV0dXJuIChcbiAqICAgICAgIDxSb290UmVmIHJvb3RSZWY9e3RoaXMuZG9tUmVmfT5cbiAqICAgICAgICAgPFNvbWVDaGlsZENvbXBvbmVudCAvPlxuICogICAgICAgPC9Sb290UmVmPlxuICogICAgICk7XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG52YXIgUm9vdFJlZiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShSb290UmVmLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb290UmVmKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFJvb3RSZWYpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFJvb3RSZWYpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoUm9vdFJlZiwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlZiA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgKDAsIF9yZWFjdEhlbHBlcnMuc2V0UmVmKSh0aGlzLnByb3BzLnJvb3RSZWYsIHRoaXMucmVmKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkVXBkYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIHZhciByZWYgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcblxuICAgICAgaWYgKHByZXZQcm9wcy5yb290UmVmICE9PSB0aGlzLnByb3BzLnJvb3RSZWYgfHwgdGhpcy5yZWYgIT09IHJlZikge1xuICAgICAgICBpZiAocHJldlByb3BzLnJvb3RSZWYgIT09IHRoaXMucHJvcHMucm9vdFJlZikge1xuICAgICAgICAgICgwLCBfcmVhY3RIZWxwZXJzLnNldFJlZikocHJldlByb3BzLnJvb3RSZWYsIG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWYgPSByZWY7XG4gICAgICAgICgwLCBfcmVhY3RIZWxwZXJzLnNldFJlZikodGhpcy5wcm9wcy5yb290UmVmLCB0aGlzLnJlZik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5yZWYgPSBudWxsO1xuICAgICAgKDAsIF9yZWFjdEhlbHBlcnMuc2V0UmVmKSh0aGlzLnByb3BzLnJvb3RSZWYsIG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSb290UmVmO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Sb290UmVmLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSB3cmFwcGVkIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogUHJvdmlkZSBhIHdheSB0byBhY2Nlc3MgdGhlIERPTSBub2RlIG9mIHRoZSB3cmFwcGVkIGVsZW1lbnQuXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIGNhbGxiYWNrIHJlZiBvciBhIGBSZWFjdC5jcmVhdGVSZWYoKWAgcmVmLlxuICAgKi9cbiAgcm9vdFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKS5pc1JlcXVpcmVkXG59IDoge307XG5Sb290UmVmLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfdXRpbHMuZXhhY3RQcm9wKShSb290UmVmLnByb3BUeXBlcykgOiB7fTtcbnZhciBfZGVmYXVsdCA9IFJvb3RSZWY7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qb3J0YWwuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfUG9ydGFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Qb3J0YWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX293bmVyRG9jdW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9vd25lckRvY3VtZW50XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIik7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIsIGRlZmF1bHRDb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyO1xuICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoY29udGFpbmVyKSB8fCBkZWZhdWx0Q29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KShfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShlbGVtZW50KSk7XG59XG4vKipcbiAqIFBvcnRhbHMgcHJvdmlkZSBhIGZpcnN0LWNsYXNzIHdheSB0byByZW5kZXIgY2hpbGRyZW4gaW50byBhIERPTSBub2RlXG4gKiB0aGF0IGV4aXN0cyBvdXRzaWRlIHRoZSBET00gaGllcmFyY2h5IG9mIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuICovXG5cblxudmFyIFBvcnRhbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFBvcnRhbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gKDAsIF9nZXRQcm90b3R5cGVPZjMuZGVmYXVsdCkoUG9ydGFsKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG5cbiAgICBfdGhpcy5nZXRNb3VudE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMubW91bnROb2RlO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShQb3J0YWwsIFt7XG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5zZXRNb3VudE5vZGUodGhpcy5wcm9wcy5jb250YWluZXIpOyAvLyBPbmx5IHJlcmVuZGVyIGlmIG5lZWRlZFxuXG4gICAgICBpZiAoIXRoaXMucHJvcHMuZGlzYWJsZVBvcnRhbCkge1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKHRoaXMucHJvcHMub25SZW5kZXJlZCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLmNvbnRhaW5lciAhPT0gdGhpcy5wcm9wcy5jb250YWluZXIgfHwgcHJldlByb3BzLmRpc2FibGVQb3J0YWwgIT09IHRoaXMucHJvcHMuZGlzYWJsZVBvcnRhbCkge1xuICAgICAgICB0aGlzLnNldE1vdW50Tm9kZSh0aGlzLnByb3BzLmNvbnRhaW5lcik7IC8vIE9ubHkgcmVyZW5kZXIgaWYgbmVlZGVkXG5cbiAgICAgICAgaWYgKCF0aGlzLnByb3BzLmRpc2FibGVQb3J0YWwpIHtcbiAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKHRoaXMucHJvcHMub25SZW5kZXJlZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLm1vdW50Tm9kZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldE1vdW50Tm9kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRNb3VudE5vZGUoY29udGFpbmVyKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5kaXNhYmxlUG9ydGFsKSB7XG4gICAgICAgIHRoaXMubW91bnROb2RlID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcykucGFyZW50RWxlbWVudDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1vdW50Tm9kZSA9IGdldENvbnRhaW5lcihjb250YWluZXIsIGdldE93bmVyRG9jdW1lbnQodGhpcykuYm9keSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZGlzYWJsZVBvcnRhbCA9IF90aGlzJHByb3BzLmRpc2FibGVQb3J0YWw7XG5cbiAgICAgIGlmIChkaXNhYmxlUG9ydGFsKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubW91bnROb2RlID8gX3JlYWN0RG9tLmRlZmF1bHQuY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCB0aGlzLm1vdW50Tm9kZSkgOiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUG9ydGFsO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBBIG5vZGUsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKSxcblxuICAvKipcbiAgICogRGlzYWJsZSB0aGUgcG9ydGFsIGJlaGF2aW9yLlxuICAgKiBUaGUgY2hpbGRyZW4gc3RheSB3aXRoaW4gaXQncyBwYXJlbnQgRE9NIGhpZXJhcmNoeS5cbiAgICovXG4gIGRpc2FibGVQb3J0YWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBvbmNlIHRoZSBjaGlsZHJlbiBoYXMgYmVlbiBtb3VudGVkIGludG8gdGhlIGBjb250YWluZXJgLlxuICAgKi9cbiAgb25SZW5kZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNcbn0gOiB7fTtcblBvcnRhbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVQb3J0YWw6IGZhbHNlXG59O1xuUG9ydGFsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfdXRpbHMuZXhhY3RQcm9wKShQb3J0YWwucHJvcFR5cGVzKSA6IHt9O1xudmFyIF9kZWZhdWx0ID0gUG9ydGFsO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlsL2h5cGhlbmF0ZVN0eWxlXCIpKTtcblxudmFyIF9nZXRDb21wdXRlZFN0eWxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0Q29tcHV0ZWRTdHlsZVwiKSk7XG5cbnZhciBfcmVtb3ZlU3R5bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3JlbW92ZVN0eWxlXCIpKTtcblxudmFyIF9wcm9wZXJ0aWVzID0gcmVxdWlyZShcIi4uL3RyYW5zaXRpb24vcHJvcGVydGllc1wiKTtcblxudmFyIF9pc1RyYW5zZm9ybSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RyYW5zaXRpb24vaXNUcmFuc2Zvcm1cIikpO1xuXG5mdW5jdGlvbiBzdHlsZShub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgdmFyIGNzcyA9ICcnO1xuICB2YXIgdHJhbnNmb3JtcyA9ICcnO1xuICB2YXIgcHJvcHMgPSBwcm9wZXJ0eTtcblxuICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnc3RyaW5nJykge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbm9kZS5zdHlsZVsoMCwgX2NhbWVsaXplU3R5bGUuZGVmYXVsdCkocHJvcGVydHkpXSB8fCAoMCwgX2dldENvbXB1dGVkU3R5bGUyLmRlZmF1bHQpKG5vZGUpLmdldFByb3BlcnR5VmFsdWUoKDAsIF9oeXBoZW5hdGVTdHlsZS5kZWZhdWx0KShwcm9wZXJ0eSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAocHJvcHMgPSB7fSlbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHByb3BzW2tleV07XG5cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICAoMCwgX3JlbW92ZVN0eWxlLmRlZmF1bHQpKG5vZGUsICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSk7XG4gICAgfSBlbHNlIGlmICgoMCwgX2lzVHJhbnNmb3JtLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgIHRyYW5zZm9ybXMgKz0ga2V5ICsgXCIoXCIgKyB2YWx1ZSArIFwiKSBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgY3NzICs9ICgwLCBfaHlwaGVuYXRlU3R5bGUuZGVmYXVsdCkoa2V5KSArIFwiOiBcIiArIHZhbHVlICsgXCI7XCI7XG4gICAgfVxuICB9KTtcblxuICBpZiAodHJhbnNmb3Jtcykge1xuICAgIGNzcyArPSBfcHJvcGVydGllcy50cmFuc2Zvcm0gKyBcIjogXCIgKyB0cmFuc2Zvcm1zICsgXCI7XCI7XG4gIH1cblxuICBub2RlLnN0eWxlLmNzc1RleHQgKz0gJzsnICsgY3NzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FtZWxpemU7XG52YXIgckh5cGhlbiA9IC8tKC4pL2c7XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2Uockh5cGhlbiwgZnVuY3Rpb24gKF8sIGNocikge1xuICAgIHJldHVybiBjaHIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG52YXIgX2h5cGhlbmF0ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaHlwaGVuYXRlXCIpKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzJhZWI4YTJhNmJlYjAwNjE3YTQyMTdmN2Y4Mjg0OTI0ZmEyYWQ4MTkvc3JjL3ZlbmRvci9jb3JlL2h5cGhlbmF0ZVN0eWxlTmFtZS5qc1xuICovXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gIHJldHVybiAoMCwgX2h5cGhlbmF0ZS5kZWZhdWx0KShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlO1xudmFyIHJVcHBlciA9IC8oW0EtWl0pL2c7XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJVcHBlciwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2dldENvbXB1dGVkU3R5bGU7XG5cbnZhciBfY2FtZWxpemVTdHlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvY2FtZWxpemVTdHlsZVwiKSk7XG5cbnZhciBycG9zaXRpb24gPSAvXih0b3B8cmlnaHR8Ym90dG9tfGxlZnQpJC87XG52YXIgcm51bW5vbnB4ID0gL14oWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpKSg/IXB4KVthLXolXSskL2k7XG5cbmZ1bmN0aW9uIF9nZXRDb21wdXRlZFN0eWxlKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBFbGVtZW50IHBhc3NlZCB0byBgZ2V0Q29tcHV0ZWRTdHlsZSgpYCcpO1xuICB2YXIgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICByZXR1cm4gJ2RlZmF1bHRWaWV3JyBpbiBkb2MgPyBkb2MuZGVmYXVsdFZpZXcub3BlbmVyID8gbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgOiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSA6IHtcbiAgICAvL2llIDggXCJtYWdpY1wiIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMS4xMS1zdGFibGUvc3JjL2Nzcy9jdXJDU1MuanMjTDcyXG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShwcm9wKSB7XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgcHJvcCA9ICgwLCBfY2FtZWxpemVTdHlsZS5kZWZhdWx0KShwcm9wKTtcbiAgICAgIGlmIChwcm9wID09ICdmbG9hdCcpIHByb3AgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGUuY3VycmVudFN0eWxlW3Byb3BdIHx8IG51bGw7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlW3Byb3BdKSBjdXJyZW50ID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChybnVtbm9ucHgudGVzdChjdXJyZW50KSAmJiAhcnBvc2l0aW9uLnRlc3QocHJvcCkpIHtcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuICAgICAgICB2YXIgbGVmdCA9IHN0eWxlLmxlZnQ7XG4gICAgICAgIHZhciBydW5TdHlsZSA9IG5vZGUucnVudGltZVN0eWxlO1xuICAgICAgICB2YXIgcnNMZWZ0ID0gcnVuU3R5bGUgJiYgcnVuU3R5bGUubGVmdDsgLy8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXG4gICAgICAgIGlmIChyc0xlZnQpIHJ1blN0eWxlLmxlZnQgPSBub2RlLmN1cnJlbnRTdHlsZS5sZWZ0O1xuICAgICAgICBzdHlsZS5sZWZ0ID0gcHJvcCA9PT0gJ2ZvbnRTaXplJyA/ICcxZW0nIDogY3VycmVudDtcbiAgICAgICAgY3VycmVudCA9IHN0eWxlLnBpeGVsTGVmdCArICdweCc7IC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblxuICAgICAgICBzdHlsZS5sZWZ0ID0gbGVmdDtcbiAgICAgICAgaWYgKHJzTGVmdCkgcnVuU3R5bGUubGVmdCA9IHJzTGVmdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVtb3ZlU3R5bGU7XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlKG5vZGUsIGtleSkge1xuICByZXR1cm4gJ3JlbW92ZVByb3BlcnR5JyBpbiBub2RlLnN0eWxlID8gbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpIDogbm9kZS5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLmFuaW1hdGlvbkVuZCA9IGV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBleHBvcnRzLmFuaW1hdGlvbk5hbWUgPSBleHBvcnRzLnRyYW5zaXRpb25FbmQgPSBleHBvcnRzLnRyYW5zaXRpb25EdXJhdGlvbiA9IGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gZXhwb3J0cy50cmFuc2l0aW9uVGltaW5nID0gZXhwb3J0cy50cmFuc2l0aW9uUHJvcGVydHkgPSBleHBvcnRzLnRyYW5zZm9ybSA9IHZvaWQgMDtcblxudmFyIF9pbkRPTSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWwvaW5ET01cIikpO1xuXG52YXIgdHJhbnNmb3JtID0gJ3RyYW5zZm9ybSc7XG5leHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbnZhciBwcmVmaXgsIHRyYW5zaXRpb25FbmQsIGFuaW1hdGlvbkVuZDtcbmV4cG9ydHMuYW5pbWF0aW9uRW5kID0gYW5pbWF0aW9uRW5kO1xuZXhwb3J0cy50cmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZDtcbnZhciB0cmFuc2l0aW9uUHJvcGVydHksIHRyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvblRpbWluZywgdHJhbnNpdGlvbkRlbGF5O1xuZXhwb3J0cy50cmFuc2l0aW9uRGVsYXkgPSB0cmFuc2l0aW9uRGVsYXk7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nO1xuZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG5leHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eTtcbnZhciBhbmltYXRpb25OYW1lLCBhbmltYXRpb25EdXJhdGlvbiwgYW5pbWF0aW9uVGltaW5nLCBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uRGVsYXkgPSBhbmltYXRpb25EZWxheTtcbmV4cG9ydHMuYW5pbWF0aW9uVGltaW5nID0gYW5pbWF0aW9uVGltaW5nO1xuZXhwb3J0cy5hbmltYXRpb25EdXJhdGlvbiA9IGFuaW1hdGlvbkR1cmF0aW9uO1xuZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZTtcblxuaWYgKF9pbkRPTS5kZWZhdWx0KSB7XG4gIHZhciBfZ2V0VHJhbnNpdGlvblByb3BlcnQgPSBnZXRUcmFuc2l0aW9uUHJvcGVydGllcygpO1xuXG4gIHByZWZpeCA9IF9nZXRUcmFuc2l0aW9uUHJvcGVydC5wcmVmaXg7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkVuZCA9IHRyYW5zaXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQudHJhbnNpdGlvbkVuZDtcbiAgZXhwb3J0cy5hbmltYXRpb25FbmQgPSBhbmltYXRpb25FbmQgPSBfZ2V0VHJhbnNpdGlvblByb3BlcnQuYW5pbWF0aW9uRW5kO1xuICBleHBvcnRzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybSA9IHByZWZpeCArIFwiLVwiICsgdHJhbnNmb3JtO1xuICBleHBvcnRzLnRyYW5zaXRpb25Qcm9wZXJ0eSA9IHRyYW5zaXRpb25Qcm9wZXJ0eSA9IHByZWZpeCArIFwiLXRyYW5zaXRpb24tcHJvcGVydHlcIjtcbiAgZXhwb3J0cy50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24gPSBwcmVmaXggKyBcIi10cmFuc2l0aW9uLWR1cmF0aW9uXCI7XG4gIGV4cG9ydHMudHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5ID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLnRyYW5zaXRpb25UaW1pbmcgPSB0cmFuc2l0aW9uVGltaW5nID0gcHJlZml4ICsgXCItdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cIjtcbiAgZXhwb3J0cy5hbmltYXRpb25OYW1lID0gYW5pbWF0aW9uTmFtZSA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1uYW1lXCI7XG4gIGV4cG9ydHMuYW5pbWF0aW9uRHVyYXRpb24gPSBhbmltYXRpb25EdXJhdGlvbiA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kdXJhdGlvblwiO1xuICBleHBvcnRzLmFuaW1hdGlvblRpbWluZyA9IGFuaW1hdGlvblRpbWluZyA9IHByZWZpeCArIFwiLWFuaW1hdGlvbi1kZWxheVwiO1xuICBleHBvcnRzLmFuaW1hdGlvbkRlbGF5ID0gYW5pbWF0aW9uRGVsYXkgPSBwcmVmaXggKyBcIi1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uXCI7XG59XG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gIGVuZDogdHJhbnNpdGlvbkVuZCxcbiAgcHJvcGVydHk6IHRyYW5zaXRpb25Qcm9wZXJ0eSxcbiAgdGltaW5nOiB0cmFuc2l0aW9uVGltaW5nLFxuICBkZWxheTogdHJhbnNpdGlvbkRlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wZXJ0aWVzKCkge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgdmFyIHZlbmRvck1hcCA9IHtcbiAgICBPOiBmdW5jdGlvbiBPKGUpIHtcbiAgICAgIHJldHVybiBcIm9cIiArIGUudG9Mb3dlckNhc2UoKTtcbiAgICB9LFxuICAgIE1vejogZnVuY3Rpb24gTW96KGUpIHtcbiAgICAgIHJldHVybiBlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICBXZWJraXQ6IGZ1bmN0aW9uIFdlYmtpdChlKSB7XG4gICAgICByZXR1cm4gXCJ3ZWJraXRcIiArIGU7XG4gICAgfSxcbiAgICBtczogZnVuY3Rpb24gbXMoZSkge1xuICAgICAgcmV0dXJuIFwiTVNcIiArIGU7XG4gICAgfVxuICB9O1xuICB2YXIgdmVuZG9ycyA9IE9iamVjdC5rZXlzKHZlbmRvck1hcCk7XG4gIHZhciB0cmFuc2l0aW9uRW5kLCBhbmltYXRpb25FbmQ7XG4gIHZhciBwcmVmaXggPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmVuZG9yID0gdmVuZG9yc1tpXTtcblxuICAgIGlmICh2ZW5kb3IgKyBcIlRyYW5zaXRpb25Qcm9wZXJ0eVwiIGluIHN0eWxlKSB7XG4gICAgICBwcmVmaXggPSBcIi1cIiArIHZlbmRvci50b0xvd2VyQ2FzZSgpO1xuICAgICAgdHJhbnNpdGlvbkVuZCA9IHZlbmRvck1hcFt2ZW5kb3JdKCdUcmFuc2l0aW9uRW5kJyk7XG4gICAgICBhbmltYXRpb25FbmQgPSB2ZW5kb3JNYXBbdmVuZG9yXSgnQW5pbWF0aW9uRW5kJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXRyYW5zaXRpb25FbmQgJiYgJ3RyYW5zaXRpb25Qcm9wZXJ0eScgaW4gc3R5bGUpIHRyYW5zaXRpb25FbmQgPSAndHJhbnNpdGlvbmVuZCc7XG4gIGlmICghYW5pbWF0aW9uRW5kICYmICdhbmltYXRpb25OYW1lJyBpbiBzdHlsZSkgYW5pbWF0aW9uRW5kID0gJ2FuaW1hdGlvbmVuZCc7XG4gIHN0eWxlID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBhbmltYXRpb25FbmQ6IGFuaW1hdGlvbkVuZCxcbiAgICB0cmFuc2l0aW9uRW5kOiB0cmFuc2l0aW9uRW5kLFxuICAgIHByZWZpeDogcHJlZml4XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1RyYW5zZm9ybTtcbnZhciBzdXBwb3J0ZWRUcmFuc2Zvcm1zID0gL14oKHRyYW5zbGF0ZXxyb3RhdGV8c2NhbGUpKFh8WXxafDNkKT98bWF0cml4KDNkKT98cGVyc3BlY3RpdmV8c2tldyhYfFkpPykkL2k7XG5cbmZ1bmN0aW9uIGlzVHJhbnNmb3JtKHByb3BlcnR5KSB7XG4gIHJldHVybiAhIShwcm9wZXJ0eSAmJiBzdXBwb3J0ZWRUcmFuc2Zvcm1zLnRlc3QocHJvcGVydHkpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmlzQm9keSA9IGlzQm9keTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT3ZlcmZsb3dpbmc7XG5cbnZhciBfaXNXaW5kb3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJkb20taGVscGVycy9xdWVyeS9pc1dpbmRvd1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG5mdW5jdGlvbiBpc0JvZHkobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZHknO1xufSAvLyBEbyB3ZSBoYXZlIGEgdmVydGljYWwgc2Nyb2xsIGJhcj9cblxuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgZG9jID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKGNvbnRhaW5lcik7XG4gIHZhciB3aW4gPSAoMCwgX293bmVyV2luZG93LmRlZmF1bHQpKGRvYyk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgaWYgKCEoMCwgX2lzV2luZG93LmRlZmF1bHQpKGRvYykgJiYgIWlzQm9keShjb250YWluZXIpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5zY3JvbGxIZWlnaHQgPiBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuICB9IC8vIFRha2VzIGluIGFjY291bnQgcG90ZW50aWFsIG5vbiB6ZXJvIG1hcmdpbiBvbiB0aGUgYm9keS5cblxuXG4gIHZhciBzdHlsZSA9IHdpbi5nZXRDb21wdXRlZFN0eWxlKGRvYy5ib2R5KTtcbiAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUludChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpLCAxMCk7XG4gIHZhciBtYXJnaW5SaWdodCA9IHBhcnNlSW50KHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpLCAxMCk7XG4gIHJldHVybiBtYXJnaW5MZWZ0ICsgZG9jLmJvZHkuY2xpZW50V2lkdGggKyBtYXJnaW5SaWdodCA8IHdpbi5pbm5lcldpZHRoO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0V2luZG93O1xuXG5mdW5jdGlvbiBnZXRXaW5kb3cobm9kZSkge1xuICByZXR1cm4gbm9kZSA9PT0gbm9kZS53aW5kb3cgPyBub2RlIDogbm9kZS5ub2RlVHlwZSA9PT0gOSA/IG5vZGUuZGVmYXVsdFZpZXcgfHwgbm9kZS5wYXJlbnRXaW5kb3cgOiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9CYWNrZHJvcC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9CYWNrZHJvcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQmFja2Ryb3BcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9GYWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRmFkZVwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB6SW5kZXg6IC0xLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIC8vIFJlbW92ZSBncmV5IGhpZ2hsaWdodFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIC8vIERpc2FibGUgc2Nyb2xsIGNhcGFiaWxpdGllcy5cbiAgICB0b3VjaEFjdGlvbjogJ25vbmUnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEJhY2tkcm9wKHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImludmlzaWJsZVwiLCBcIm9wZW5cIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRmFkZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBpbjogb3BlbixcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmludmlzaWJsZSwgaW52aXNpYmxlKSwgY2xhc3NOYW1lKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0pKTtcbn1cblxuQmFja2Ryb3AucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KV0pXG59IDoge307XG5CYWNrZHJvcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGludmlzaWJsZTogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJhY2tkcm9wJ1xufSkoQmFja2Ryb3ApO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9GYWRlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0ZhZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ZhZGVcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX1RyYW5zaXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwL1RyYW5zaXRpb25cIikpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZShcIi4uL3N0eWxlcy90cmFuc2l0aW9uc1wiKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFRoZW1lXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBUcmFuc2l0aW9uXG52YXIgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDFcbiAgfSxcbiAgZW50ZXJlZDoge1xuICAgIG9wYWNpdHk6IDFcbiAgfVxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC91dGlscy9tb2RhbC8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIEZhZGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoRmFkZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRmFkZSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIEZhZGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKEZhZGUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgKDAsIF91dGlscy5yZWZsb3cpKG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZW50ZXInXG4gICAgICB9KTtcbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZXhpdCdcbiAgICAgIH0pO1xuICAgICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5JywgdHJhbnNpdGlvblByb3BzKTtcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXQpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0KG5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShGYWRlLCBbe1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIG9uRW50ZXIgPSBfdGhpcyRwcm9wcy5vbkVudGVyLFxuICAgICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgICBzdHlsZVByb3AgPSBfdGhpcyRwcm9wcy5zdHlsZSxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzLnRoZW1lLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwib25FbnRlclwiLCBcIm9uRXhpdFwiLCBcInN0eWxlXCIsIFwidGhlbWVcIl0pO1xuICAgICAgdmFyIHN0eWxlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3R5bGVQcm9wLCBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5wcm9wcy5zdHlsZSA6IHt9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0XG4gICAgICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgd2lsbENoYW5nZTogJ29wYWNpdHknXG4gICAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUpXG4gICAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRmFkZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuRmFkZS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSldKVxufSA6IHt9O1xuRmFkZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHRpbWVvdXQ6IHtcbiAgICBlbnRlcjogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuLFxuICAgIGV4aXQ6IF90cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gIH1cbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFRoZW1lLmRlZmF1bHQpKCkoRmFkZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1NsaWRlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NsaWRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TbGlkZVwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5zZXRUcmFuc2xhdGVWYWx1ZSA9IHNldFRyYW5zbGF0ZVZhbHVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWV2ZW50LWxpc3RlbmVyXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKTtcblxudmFyIF9vd25lcldpbmRvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyV2luZG93XCIpKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFRoZW1lXCIpKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvdHJhbnNpdGlvbnNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdHJhbnNpdGlvbnMvdXRpbHNcIik7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgVHJhbnNpdGlvblxuLy8gPCAxa2IgcGF5bG9hZCBvdmVyaGVhZCB3aGVuIGxvZGFzaC9kZWJvdW5jZSBpcyA+IDNrYi5cbnZhciBHVVRURVIgPSAyNDsgLy8gVHJhbnNsYXRlIHRoZSBub2RlIHNvIGhlIGNhbid0IGJlIHNlZW4gb24gdGhlIHNjcmVlbi5cbi8vIExhdGVyLCB3ZSBnb25uYSB0cmFuc2xhdGUgYmFjayB0aGUgbm9kZSB0byBoaXMgb3JpZ2luYWwgbG9jYXRpb25cbi8vIHdpdGggYHRyYW5zbGF0ZTNkKDAsIDAsIDApYC5gXG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZVZhbHVlKHByb3BzLCBub2RlKSB7XG4gIHZhciBkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb247XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAobm9kZS5mYWtlVHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtID0gbm9kZS5mYWtlVHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gKDAsIF9vd25lcldpbmRvdy5kZWZhdWx0KShub2RlKS5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHRyYW5zZm9ybSA9IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnLXdlYmtpdC10cmFuc2Zvcm0nKSB8fCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpO1xuICB9XG5cbiAgdmFyIG9mZnNldFggPSAwO1xuICB2YXIgb2Zmc2V0WSA9IDA7XG5cbiAgaWYgKHRyYW5zZm9ybSAmJiB0cmFuc2Zvcm0gIT09ICdub25lJyAmJiB0eXBlb2YgdHJhbnNmb3JtID09PSAnc3RyaW5nJykge1xuICAgIHZhciB0cmFuc2Zvcm1WYWx1ZXMgPSB0cmFuc2Zvcm0uc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJyk7XG4gICAgb2Zmc2V0WCA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s0XSwgMTApO1xuICAgIG9mZnNldFkgPSBwYXJzZUludCh0cmFuc2Zvcm1WYWx1ZXNbNV0sIDEwKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdsZWZ0Jykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVgoMTAwdncpIHRyYW5zbGF0ZVgoLVwiLmNvbmNhdChyZWN0LmxlZnQgLSBvZmZzZXRYLCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCArIEdVVFRFUiAtIG9mZnNldFgsIFwicHgpXCIpO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVkoMTAwdmgpIHRyYW5zbGF0ZVkoLVwiLmNvbmNhdChyZWN0LnRvcCAtIG9mZnNldFksIFwicHgpXCIpO1xuICB9IC8vIGRpcmVjdGlvbiA9PT0gJ2Rvd24nXG5cblxuICByZXR1cm4gXCJ0cmFuc2xhdGVZKC1cIi5jb25jYXQocmVjdC50b3AgKyByZWN0LmhlaWdodCArIEdVVFRFUiAtIG9mZnNldFksIFwicHgpXCIpO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGVWYWx1ZShwcm9wcywgbm9kZSkge1xuICB2YXIgdHJhbnNmb3JtID0gZ2V0VHJhbnNsYXRlVmFsdWUocHJvcHMsIG5vZGUpO1xuXG4gIGlmICh0cmFuc2Zvcm0pIHtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxuLyoqXG4gKiBUaGUgU2xpZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbU25hY2tiYXJdKC9kZW1vcy9zbmFja2JhcnMvKSBjb21wb25lbnQuXG4gKiBJdCB1c2VzIFtyZWFjdC10cmFuc2l0aW9uLWdyb3VwXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwKSBpbnRlcm5hbGx5LlxuICovXG5cblxudmFyIFNsaWRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFNsaWRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTbGlkZSgpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBTbGlkZSk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFNsaWRlKS5jYWxsKHRoaXMpKTtcbiAgICBfdGhpcy5tb3VudGVkID0gZmFsc2U7XG5cbiAgICBfdGhpcy5oYW5kbGVFbnRlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGVWYWx1ZShfdGhpcy5wcm9wcywgbm9kZSk7XG4gICAgICAoMCwgX3V0aWxzLnJlZmxvdykobm9kZSk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciB0aGVtZSA9IF90aGlzLnByb3BzLnRoZW1lO1xuICAgICAgdmFyIHRyYW5zaXRpb25Qcm9wcyA9ICgwLCBfdXRpbHMuZ2V0VHJhbnNpdGlvblByb3BzKShfdGhpcy5wcm9wcywge1xuICAgICAgICBtb2RlOiAnZW50ZXInXG4gICAgICB9KTtcbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnLXdlYmtpdC10cmFuc2Zvcm0nLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSkpO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSkpO1xuICAgICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAndHJhbnNsYXRlKDAsIDApJztcbiAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgwLCAwKSc7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyaW5nKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUV4aXQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIHRoZW1lID0gX3RoaXMucHJvcHMudGhlbWU7XG4gICAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdleGl0J1xuICAgICAgfSk7XG4gICAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLnNoYXJwXG4gICAgICB9KSk7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycFxuICAgICAgfSkpO1xuICAgICAgc2V0VHJhbnNsYXRlVmFsdWUoX3RoaXMucHJvcHMsIG5vZGUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIC8vIE5vIG5lZWQgZm9yIHRyYW5zaXRpb25zIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBoaWRkZW5cbiAgICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnO1xuICAgICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRlZChub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSAoMCwgX2RlYm91bmNlLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5pbiB8fCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdkb3duJyB8fCBfdGhpcy5wcm9wcy5kaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3RoaXMudHJhbnNpdGlvblJlZikge1xuICAgICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKF90aGlzLnByb3BzLCBfdGhpcy50cmFuc2l0aW9uUmVmKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTY2KTsgLy8gQ29ycmVzcG9uZHMgdG8gMTAgZnJhbWVzIGF0IDYwIEh6LlxuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKFNsaWRlLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7IC8vIHN0YXRlLm1vdW50ZWQgaGFuZGxlIFNTUiwgb25jZSB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQsIHdlIG5lZWRcbiAgICAgIC8vIHRvIHByb3Blcmx5IGhpZGUgaXQuXG5cbiAgICAgIGlmICghdGhpcy5wcm9wcy5pbikge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHNldCBpbml0aWFsIHRyYW5zbGF0ZSB2YWx1ZXMgb2YgdHJhbnNpdGlvbiBlbGVtZW50XG4gICAgICAgIC8vIG90aGVyd2lzZSBjb21wb25lbnQgd2lsbCBiZSBzaG93biB3aGVuIGluPWZhbHNlLlxuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAocHJldlByb3BzLmRpcmVjdGlvbiAhPT0gdGhpcy5wcm9wcy5kaXJlY3Rpb24gJiYgIXRoaXMucHJvcHMuaW4pIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byB1cGRhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkcmF3ZXIgd2hlbiB0aGUgZGlyZWN0aW9uIGNoYW5nZSBhbmRcbiAgICAgICAgLy8gd2hlbiBpdCdzIGhpZGRlbi5cbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNsZWFyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVwZGF0ZVBvc2l0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKCkge1xuICAgICAgaWYgKHRoaXMudHJhbnNpdGlvblJlZikge1xuICAgICAgICB0aGlzLnRyYW5zaXRpb25SZWYuc3R5bGUudmlzaWJpbGl0eSA9ICdpbmhlcml0JztcbiAgICAgICAgc2V0VHJhbnNsYXRlVmFsdWUodGhpcy5wcm9wcywgdGhpcy50cmFuc2l0aW9uUmVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzLm9uRW50ZXJpbmcsXG4gICAgICAgICAgb25FeGl0ID0gX3RoaXMkcHJvcHMub25FeGl0LFxuICAgICAgICAgIG9uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgICAgc3R5bGVQcm9wID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FeGl0XCIsIFwib25FeGl0ZWRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgICAgIHZhciBzdHlsZSA9IHt9OyAvLyBXZSB1c2UgdGhpcyBzdGF0ZSB0byBoYW5kbGUgdGhlIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICAgIC8vIFdlIGRvbid0IGtub3cgdGhlIHdpZHRoIG9mIHRoZSBjaGlsZHJlbiBhaGVhZCBvZiB0aW1lLlxuICAgICAgLy8gV2UgbmVlZCB0byByZW5kZXIgaXQuXG5cbiAgICAgIGlmICghdGhpcy5wcm9wcy5pbiAmJiAhdGhpcy5tb3VudGVkKSB7XG4gICAgICAgIHN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIH1cblxuICAgICAgc3R5bGUgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBzdHlsZSwgc3R5bGVQcm9wLCBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5wcm9wcy5zdHlsZSA6IHt9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEV2ZW50TGlzdGVuZXIuZGVmYXVsdCwge1xuICAgICAgICB0YXJnZXQ6IFwid2luZG93XCIsXG4gICAgICAgIG9uUmVzaXplOiB0aGlzLmhhbmRsZVJlc2l6ZVxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbi5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb25FbnRlcjogdGhpcy5oYW5kbGVFbnRlcixcbiAgICAgICAgb25FbnRlcmluZzogdGhpcy5oYW5kbGVFbnRlcmluZyxcbiAgICAgICAgb25FeGl0OiB0aGlzLmhhbmRsZUV4aXQsXG4gICAgICAgIG9uRXhpdGVkOiB0aGlzLmhhbmRsZUV4aXRlZCxcbiAgICAgICAgYXBwZWFyOiB0cnVlLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICBfdGhpczIudHJhbnNpdGlvblJlZiA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF9yZWYpO1xuICAgICAgICB9XG4gICAgICB9LCBvdGhlciksIGNoaWxkcmVuKSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTbGlkZTtcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuU2xpZGUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBzaW5nbGUgY2hpbGQgY29udGVudCBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ3VwJywgJ2Rvd24nXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSldKVxufSA6IHt9O1xuU2xpZGUuZGVmYXVsdFByb3BzID0ge1xuICBkaXJlY3Rpb246ICdkb3duJyxcbiAgdGltZW91dDoge1xuICAgIGVudGVyOiBfdHJhbnNpdGlvbnMuZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gICAgZXhpdDogX3RyYW5zaXRpb25zLmR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbiAgfVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoVGhlbWUuZGVmYXVsdCkoKShTbGlkZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9MaXN0Q29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGlzdENvbnRleHRcIikpO1xuXG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgbGlzdFN0eWxlOiAnbm9uZScsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlUGFkZGluZz17ZmFsc2V9YC4gKi9cbiAgcGFkZGluZzoge1xuICAgIHBhZGRpbmdUb3A6IDgsXG4gICAgcGFkZGluZ0JvdHRvbTogOFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRlbnNlPXt0cnVlfWAgJiBgZGlzYWJsZVBhZGRpbmc9e2ZhbHNlfWAuICovXG4gIGRlbnNlOiB7XG4gICAgcGFkZGluZ1RvcDogNCxcbiAgICBwYWRkaW5nQm90dG9tOiA0XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBhIGBzdWJoZWFkZXJgIGlzIHByb3ZpZGVkLiAqL1xuICBzdWJoZWFkZXI6IHtcbiAgICBwYWRkaW5nVG9wOiAwXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTGlzdChwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGRlbnNlID0gcHJvcHMuZGVuc2UsXG4gICAgICBkaXNhYmxlUGFkZGluZyA9IHByb3BzLmRpc2FibGVQYWRkaW5nLFxuICAgICAgc3ViaGVhZGVyID0gcHJvcHMuc3ViaGVhZGVyLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiZGVuc2VcIiwgXCJkaXNhYmxlUGFkZGluZ1wiLCBcInN1YmhlYWRlclwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGVuc2UsIGRlbnNlICYmICFkaXNhYmxlUGFkZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnBhZGRpbmcsICFkaXNhYmxlUGFkZGluZyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnN1YmhlYWRlciwgc3ViaGVhZGVyKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdENvbnRleHQuZGVmYXVsdC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB7XG4gICAgICBkZW5zZTogZGVuc2VcbiAgICB9XG4gIH0sIHN1YmhlYWRlciwgY2hpbGRyZW4pKTtcbn1cblxuTGlzdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkIGZvclxuICAgKiB0aGUgbGlzdCBhbmQgbGlzdCBpdGVtcy4gVGhlIHByb3BlcnR5IGlzIGF2YWlsYWJsZSB0byBkZXNjZW5kYW50IGNvbXBvbmVudHMgYXMgdGhlXG4gICAqIGBkZW5zZWAgY29udGV4dC5cbiAgICovXG4gIGRlbnNlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB2ZXJ0aWNhbCBwYWRkaW5nIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBsaXN0LlxuICAgKi9cbiAgZGlzYWJsZVBhZGRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgc3ViaGVhZGVyLCBub3JtYWxseSBgTGlzdFN1YmhlYWRlcmAuXG4gICAqL1xuICBzdWJoZWFkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlXG59IDoge307XG5MaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAndWwnLFxuICBkZW5zZTogZmFsc2UsXG4gIGRpc2FibGVQYWRkaW5nOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdCdcbn0pKExpc3QpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICc0OHB4JyxcbiAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDE0KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJpbmhlcml0XCJgLiAqL1xuICAgIGNvbG9ySW5oZXJpdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW5uZXIgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgZGlzYWJsZUd1dHRlcnM9e2ZhbHNlfWAuICovXG4gICAgZ3V0dGVyczogdGhlbWUubWl4aW5zLmd1dHRlcnMoKSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGluc2V0PXt0cnVlfWAuICovXG4gICAgaW5zZXQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiA3MlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlU3RpY2t5PXtmYWxzZX1gLiAqL1xuICAgIHN0aWNreToge1xuICAgICAgcG9zaXRpb246ICdzdGlja3knLFxuICAgICAgdG9wOiAwLFxuICAgICAgekluZGV4OiAxLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTGlzdFN1YmhlYWRlcihwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gcHJvcHMuZGlzYWJsZUd1dHRlcnMsXG4gICAgICBkaXNhYmxlU3RpY2t5ID0gcHJvcHMuZGlzYWJsZVN0aWNreSxcbiAgICAgIGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlR3V0dGVyc1wiLCBcImRpc2FibGVTdGlja3lcIiwgXCJpbnNldFwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnZGVmYXVsdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5pbnNldCwgaW5zZXQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zdGlja3ksICFkaXNhYmxlU3RpY2t5KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZ3V0dGVycywgIWRpc2FibGVHdXR0ZXJzKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSk7XG59XG5cbkxpc3RTdWJoZWFkZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnaW5oZXJpdCddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIHdpbGwgbm90IGhhdmUgZ3V0dGVycy5cbiAgICovXG4gIGRpc2FibGVHdXR0ZXJzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgTGlzdCBTdWJoZWFkZXIgd2lsbCBub3Qgc3RpY2sgdG8gdGhlIHRvcCBkdXJpbmcgc2Nyb2xsLlxuICAgKi9cbiAgZGlzYWJsZVN0aWNreTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIExpc3QgU3ViaGVhZGVyIHdpbGwgYmUgaW5kZW50ZWQuXG4gICAqL1xuICBpbnNldDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbkxpc3RTdWJoZWFkZXIuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ2RlZmF1bHQnLFxuICBjb21wb25lbnQ6ICdsaScsXG4gIGRpc2FibGVHdXR0ZXJzOiBmYWxzZSxcbiAgZGlzYWJsZVN0aWNreTogZmFsc2UsXG4gIGluc2V0OiBmYWxzZVxufTtcbkxpc3RTdWJoZWFkZXIubXVpTmFtZSA9ICdMaXN0U3ViaGVhZGVyJztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpTGlzdFN1YmhlYWRlcidcbn0pKExpc3RTdWJoZWFkZXIpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfQnV0dG9uQmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0J1dHRvbkJhc2VcIikpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbnZhciBfTWVyZ2VMaXN0Q29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTWVyZ2VMaXN0Q29udGV4dFwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgKG5vcm1hbGx5IHJvb3QpIGBjb21wb25lbnRgIGVsZW1lbnQuIE1heSBiZSB3cmFwcGVkIGJ5IGEgYGNvbnRhaW5lcmAuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0JyxcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBwYWRkaW5nVG9wOiAxMSxcbiAgICAgIC8vIFRvIHVzZSAxMHB4IGluIHY0LjAuMFxuICAgICAgcGFkZGluZ0JvdHRvbTogMTEsXG4gICAgICAvLyBUbyB1c2UgMTBweCBpbiB2NC4wLjBcbiAgICAgICcmJHNlbGVjdGVkLCAmJHNlbGVjdGVkOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLnNlbGVjdGVkXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgY29udGFpbmVyYCBlbGVtZW50IGlmIGBjaGlsZHJlbmAgaW5jbHVkZXMgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYC4gKi9cbiAgICBjb250YWluZXI6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcbiAgICAvLyBUT0RPOiBTYW5pdHkgY2hlY2sgdGhpcyAtIHdoeSBpcyBmb2N1c1Zpc2libGVDbGFzc05hbWUgcHJvcCBhcHBhcmVudGx5IGFwcGxpZWQgdG8gYSBkaXY/XG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAncyBgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lYCBwcm9wZXJ0eSBpZiBgYnV0dG9uPXt0cnVlfWAuICovXG4gICAgZm9jdXNWaXNpYmxlOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmhvdmVyXG4gICAgfSxcblxuICAgIC8qIExlZ2FjeSBzdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiBVc2UgYHJvb3RgIGluc3RlYWQuICovXG4gICAgZGVmYXVsdDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgZGVuc2U9e3RydWV9YCBvciBgY2hpbGRyZW5gIGluY2x1ZGVzIGBBdmF0YXJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBwYWRkaW5nVG9wOiA4LFxuICAgICAgcGFkZGluZ0JvdHRvbTogOFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgaW5uZXIgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge1xuICAgICAgb3BhY2l0eTogMC41XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXZpZGVyPXt0cnVlfWAuICovXG4gICAgZGl2aWRlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS5kaXZpZGVyKSxcbiAgICAgIGJhY2tncm91bmRDbGlwOiAncGFkZGluZy1ib3gnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbm5lciBgY29tcG9uZW50YCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiB0aGVtZS5taXhpbnMuZ3V0dGVycygpLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGlubmVyIGBjb21wb25lbnRgIGVsZW1lbnQgaWYgYGJ1dHRvbj17dHJ1ZX1gLiAqL1xuICAgIGJ1dHRvbjoge1xuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXIsXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNvbXBvbmVudGAgZWxlbWVudCBpZiBgY2hpbGRyZW5gIGluY2x1ZGVzIGBMaXN0SXRlbVNlY29uZGFyeUFjdGlvbmAuICovXG4gICAgc2Vjb25kYXJ5QWN0aW9uOiB7XG4gICAgICAvLyBBZGQgc29tZSBzcGFjZSB0byBhdm9pZCBjb2xsaXNpb24gYXMgYExpc3RJdGVtU2Vjb25kYXJ5QWN0aW9uYFxuICAgICAgLy8gaXMgYWJzb2x1dGVseSBwb3NpdGlvbm5lZC5cbiAgICAgIHBhZGRpbmdSaWdodDogMzJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2VsZWN0ZWQ9e3RydWV9YC4gKi9cbiAgICBzZWxlY3RlZDoge31cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBMaXN0SXRlbShwcm9wcykge1xuICB2YXIgYnV0dG9uID0gcHJvcHMuYnV0dG9uLFxuICAgICAgY2hpbGRyZW5Qcm9wID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb21wb25lbnRQcm9wID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgQ29udGFpbmVyQ29tcG9uZW50ID0gcHJvcHMuQ29udGFpbmVyQ29tcG9uZW50LFxuICAgICAgX3Byb3BzJENvbnRhaW5lclByb3BzID0gcHJvcHMuQ29udGFpbmVyUHJvcHM7XG4gIF9wcm9wcyRDb250YWluZXJQcm9wcyA9IF9wcm9wcyRDb250YWluZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcHJvcHMkQ29udGFpbmVyUHJvcHM7XG4gIHZhciBDb250YWluZXJDbGFzc05hbWUgPSBfcHJvcHMkQ29udGFpbmVyUHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29udGFpbmVyUHJvcHMgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfcHJvcHMkQ29udGFpbmVyUHJvcHMsIFtcImNsYXNzTmFtZVwiXSksXG4gICAgICBkZW5zZVByb3AgPSBwcm9wcy5kZW5zZSxcbiAgICAgIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlR3V0dGVycyA9IHByb3BzLmRpc2FibGVHdXR0ZXJzLFxuICAgICAgZGl2aWRlciA9IHByb3BzLmRpdmlkZXIsXG4gICAgICBmb2N1c1Zpc2libGVDbGFzc05hbWUgPSBwcm9wcy5mb2N1c1Zpc2libGVDbGFzc05hbWUsXG4gICAgICBzZWxlY3RlZCA9IHByb3BzLnNlbGVjdGVkLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiYnV0dG9uXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCIsIFwiQ29udGFpbmVyQ29tcG9uZW50XCIsIFwiQ29udGFpbmVyUHJvcHNcIiwgXCJkZW5zZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUd1dHRlcnNcIiwgXCJkaXZpZGVyXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwic2VsZWN0ZWRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTWVyZ2VMaXN0Q29udGV4dC5kZWZhdWx0LCB7XG4gICAgZGVuc2U6IGRlbnNlUHJvcFxuICB9LCBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBkZW5zZSA9IF9yZWYuZGVuc2U7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuUHJvcCk7XG5cbiAgICB2YXIgaGFzQXZhdGFyID0gY2hpbGRyZW4uc29tZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAoMCwgX3JlYWN0SGVscGVycy5pc011aUVsZW1lbnQpKHZhbHVlLCBbJ0xpc3RJdGVtQXZhdGFyJ10pO1xuICAgIH0pO1xuICAgIHZhciBoYXNTZWNvbmRhcnlBY3Rpb24gPSBjaGlsZHJlbi5sZW5ndGggJiYgKDAsIF9yZWFjdEhlbHBlcnMuaXNNdWlFbGVtZW50KShjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSwgWydMaXN0SXRlbVNlY29uZGFyeUFjdGlvbiddKTtcbiAgICB2YXIgY2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kZWZhdWx0LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZGVuc2UsIGRlbnNlIHx8IGhhc0F2YXRhciksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmd1dHRlcnMsICFkaXNhYmxlR3V0dGVycyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpdmlkZXIsIGRpdmlkZXIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5kaXNhYmxlZCwgZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5idXR0b24sIGJ1dHRvbiksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLnNlY29uZGFyeUFjdGlvbiwgaGFzU2Vjb25kYXJ5QWN0aW9uKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuc2VsZWN0ZWQsIHNlbGVjdGVkKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgICB2YXIgY29tcG9uZW50UHJvcHMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkXG4gICAgfSwgb3RoZXIpO1xuICAgIHZhciBDb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdsaSc7XG5cbiAgICBpZiAoYnV0dG9uKSB7XG4gICAgICBjb21wb25lbnRQcm9wcy5jb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8ICdkaXYnO1xuICAgICAgY29tcG9uZW50UHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuZm9jdXNWaXNpYmxlLCBmb2N1c1Zpc2libGVDbGFzc05hbWUpO1xuICAgICAgQ29tcG9uZW50ID0gX0J1dHRvbkJhc2UuZGVmYXVsdDtcbiAgICB9XG5cbiAgICBpZiAoaGFzU2Vjb25kYXJ5QWN0aW9uKSB7XG4gICAgICAvLyBVc2UgZGl2IGJ5IGRlZmF1bHQuXG4gICAgICBDb21wb25lbnQgPSAhY29tcG9uZW50UHJvcHMuY29tcG9uZW50ICYmICFjb21wb25lbnRQcm9wID8gJ2RpdicgOiBDb21wb25lbnQ7IC8vIEF2b2lkIG5lc3Rpbmcgb2YgbGkgPiBsaS5cblxuICAgICAgaWYgKENvbnRhaW5lckNvbXBvbmVudCA9PT0gJ2xpJykge1xuICAgICAgICBpZiAoQ29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgICAgQ29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICAgIH0gZWxzZSBpZiAoY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID09PSAnbGknKSB7XG4gICAgICAgICAgY29tcG9uZW50UHJvcHMuY29tcG9uZW50ID0gJ2Rpdic7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29udGFpbmVyQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5jb250YWluZXIsIENvbnRhaW5lckNsYXNzTmFtZSlcbiAgICAgIH0sIENvbnRhaW5lclByb3BzKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBjaGlsZHJlbiksIGNoaWxkcmVuLnBvcCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIGNvbXBvbmVudFByb3BzLCBjaGlsZHJlbik7XG4gIH0pO1xufVxuXG5MaXN0SXRlbS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gd2lsbCBiZSBhIGJ1dHRvbiAodXNpbmcgYEJ1dHRvbkJhc2VgKS5cbiAgICovXG4gIGJ1dHRvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQncyBhIGBsaWAgd2hlbiBgYnV0dG9uYCBpcyBgZmFsc2VgIGFuZCBhIGBkaXZgIHdoZW4gYGJ1dHRvbmAgaXMgYHRydWVgLlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIGNvbXBvbmVudCB1c2VkIHdoZW4gYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gIGlzIHJlbmRlcmVkLlxuICAgKi9cbiAgQ29udGFpbmVyQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGNvbnRhaW5lciBlbGVtZW50IHdoZW4gdGhlIGNvbXBvbmVudFxuICAgKiBpcyB1c2VkIHRvIGRpc3BsYXkgYSBgTGlzdEl0ZW1TZWNvbmRhcnlBY3Rpb25gLlxuICAgKi9cbiAgQ29udGFpbmVyUHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgY29tcGFjdCB2ZXJ0aWNhbCBwYWRkaW5nIGRlc2lnbmVkIGZvciBrZXlib2FyZCBhbmQgbW91c2UgaW5wdXQgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgZGVuc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsaXN0IGl0ZW0gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGVmdCBhbmQgcmlnaHQgcGFkZGluZyBpcyByZW1vdmVkLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgMXB4IGxpZ2h0IGJvcmRlciBpcyBhZGRlZCB0byB0aGUgYm90dG9tIG9mIHRoZSBsaXN0IGl0ZW0uXG4gICAqL1xuICBkaXZpZGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBVc2UgdG8gYXBwbHkgc2VsZWN0ZWQgc3R5bGluZy5cbiAgICovXG4gIHNlbGVjdGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuTGlzdEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBidXR0b246IGZhbHNlLFxuICBDb250YWluZXJDb21wb25lbnQ6ICdsaScsXG4gIGRlbnNlOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBkaXNhYmxlR3V0dGVyczogZmFsc2UsXG4gIGRpdmlkZXI6IGZhbHNlLFxuICBzZWxlY3RlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtJ1xufSkoTGlzdEl0ZW0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfTGlzdENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9MaXN0L0xpc3RDb250ZXh0XCIpKTtcblxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICpcbiAqIENvbnN1bWVzIGEgY29udGV4dCBhbmQgcGFzc2VzIHRoYXQgY29udGV4dCBtZXJnZWQgd2l0aCBpdHMgcHJvcHMuXG4gKi9cbmZ1bmN0aW9uIE1lcmdlTGlzdENvbnRleHQocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBkZW5zZVByb3AgPSBwcm9wcy5kZW5zZTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpc3RDb250ZXh0LmRlZmF1bHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IHtcbiAgICAgIGRlbnNlOiBkZW5zZVByb3AgfHwgY29udGV4dC5kZW5zZSB8fCBmYWxzZVxuICAgIH07XG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0xpc3RDb250ZXh0LmRlZmF1bHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjaGlsZENvbnRleHRcbiAgICB9LCBjaGlsZHJlbihjaGlsZENvbnRleHQpKTtcbiAgfSk7XG59XG5cbk1lcmdlTGlzdENvbnRleHQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVuc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWRcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IE1lcmdlTGlzdENvbnRleHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAxNixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5hY3RpdmUsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4J1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEEgc2ltcGxlIHdyYXBwZXIgdG8gYXBwbHkgYExpc3RgIHN0eWxlcyB0byBhbiBgSWNvbmAgb3IgYFN2Z0ljb25gLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIExpc3RJdGVtSWNvbihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lUHJvcClcbiAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG59XG5cbkxpc3RJdGVtSWNvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgSWNvbmAsIGBTdmdJY29uYCxcbiAgICogb3IgYSBgQG1hdGVyaWFsLXVpL2ljb25zYCBTVkcgaWNvbiBlbGVtZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUxpc3RJdGVtSWNvbidcbn0pKExpc3RJdGVtSWNvbik7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UeXBvZ3JhcGh5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVHlwb2dyYXBoeVwiKSk7XG5cbnZhciBfTGlzdENvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9MaXN0L0xpc3RDb250ZXh0XCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZmxleDogJzEgMSBhdXRvJyxcbiAgICAgIG1pbldpZHRoOiAwLFxuICAgICAgcGFkZGluZzogJzAgMTZweCcsXG4gICAgICAnJjpmaXJzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IDBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW5zZXQ9e3RydWV9YC4gKi9cbiAgICBpbnNldDoge1xuICAgICAgJyY6Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiA1NlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb250ZXh0LmRlbnNlYCBpcyBgdHJ1ZWAuICovXG4gICAgZGVuc2U6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTMpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBwcmltYXJ5IGBUeXBvZ3JhcGh5YCBjb21wb25lbnQuICovXG4gICAgcHJpbWFyeToge1xuICAgICAgJyYkdGV4dERlbnNlJzoge1xuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBzZWNvbmRhcnkgYFR5cG9ncmFwaHlgIGNvbXBvbmVudC4gKi9cbiAgICBzZWNvbmRhcnk6IHtcbiAgICAgICcmJHRleHREZW5zZSc6IHtcbiAgICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFR5cG9ncmFwaHlgIGNvbXBvbmVudHMgaWYgYGNvbnRleHQuZGVuc2VgIGlzIGB0cnVlYC4gKi9cbiAgICB0ZXh0RGVuc2U6IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gTGlzdEl0ZW1UZXh0KHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZVR5cG9ncmFwaHkgPSBwcm9wcy5kaXNhYmxlVHlwb2dyYXBoeSxcbiAgICAgIGluc2V0ID0gcHJvcHMuaW5zZXQsXG4gICAgICBwcmltYXJ5UHJvcCA9IHByb3BzLnByaW1hcnksXG4gICAgICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzID0gcHJvcHMucHJpbWFyeVR5cG9ncmFwaHlQcm9wcyxcbiAgICAgIHNlY29uZGFyeVByb3AgPSBwcm9wcy5zZWNvbmRhcnksXG4gICAgICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMgPSBwcm9wcy5zZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlVHlwb2dyYXBoeVwiLCBcImluc2V0XCIsIFwicHJpbWFyeVwiLCBcInByaW1hcnlUeXBvZ3JhcGh5UHJvcHNcIiwgXCJzZWNvbmRhcnlcIiwgXCJzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHNcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfTGlzdENvbnRleHQuZGVmYXVsdC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX2NsYXNzTmFtZXMzO1xuXG4gICAgdmFyIGRlbnNlID0gX3JlZi5kZW5zZTtcbiAgICB2YXIgcHJpbWFyeSA9IHByaW1hcnlQcm9wICE9IG51bGwgPyBwcmltYXJ5UHJvcCA6IGNoaWxkcmVuO1xuXG4gICAgaWYgKHByaW1hcnkgIT0gbnVsbCAmJiBwcmltYXJ5LnR5cGUgIT09IF9UeXBvZ3JhcGh5LmRlZmF1bHQgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgICBwcmltYXJ5ID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHlwb2dyYXBoeS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgdmFyaWFudDogXCJzdWJoZWFkaW5nXCIsXG4gICAgICAgIGludGVybmFsRGVwcmVjYXRlZFZhcmlhbnQ6IHRydWUsXG4gICAgICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucHJpbWFyeSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMudGV4dERlbnNlLCBkZW5zZSkpLFxuICAgICAgICBjb21wb25lbnQ6IFwic3BhblwiXG4gICAgICB9LCBwcmltYXJ5VHlwb2dyYXBoeVByb3BzKSwgcHJpbWFyeSk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZGFyeSA9IHNlY29uZGFyeVByb3A7XG5cbiAgICBpZiAoc2Vjb25kYXJ5ICE9IG51bGwgJiYgc2Vjb25kYXJ5LnR5cGUgIT09IF9UeXBvZ3JhcGh5LmRlZmF1bHQgJiYgIWRpc2FibGVUeXBvZ3JhcGh5KSB7XG4gICAgICBzZWNvbmRhcnkgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UeXBvZ3JhcGh5LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnNlY29uZGFyeSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMudGV4dERlbnNlLCBkZW5zZSkpLFxuICAgICAgICBjb2xvcjogXCJ0ZXh0U2Vjb25kYXJ5XCJcbiAgICAgIH0sIHNlY29uZGFyeVR5cG9ncmFwaHlQcm9wcyksIHNlY29uZGFyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lczMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMzLCBjbGFzc2VzLmRlbnNlLCBkZW5zZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMywgY2xhc3Nlcy5pbnNldCwgaW5zZXQpLCBfY2xhc3NOYW1lczMpLCBjbGFzc05hbWVQcm9wKVxuICAgIH0sIG90aGVyKSwgcHJpbWFyeSwgc2Vjb25kYXJ5KTtcbiAgfSk7XG59XG5cbkxpc3RJdGVtVGV4dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgdGhlIGBwcmltYXJ5YCBwcm9wZXJ0eS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdvbid0IGJlIHdyYXBwZWQgYnkgYSBUeXBvZ3JhcGh5IGNvbXBvbmVudC5cbiAgICogVGhpcyBjYW4gYmUgdXNlZnVsIHRvIHJlbmRlciBhbiBhbHRlcm5hdGl2ZSBUeXBvZ3JhcGh5IHZhcmlhbnQgYnkgd3JhcHBpbmdcbiAgICogdGhlIGBjaGlsZHJlbmAgKG9yIGBwcmltYXJ5YCkgdGV4dCwgYW5kIG9wdGlvbmFsIGBzZWNvbmRhcnlgIHRleHRcbiAgICogd2l0aCB0aGUgVHlwb2dyYXBoeSBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlVHlwb2dyYXBoeTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNoaWxkcmVuIHdpbGwgYmUgaW5kZW50ZWQuXG4gICAqIFRoaXMgc2hvdWxkIGJlIHVzZWQgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKi9cbiAgaW5zZXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBwcmltYXJ5OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogVGhlc2UgcHJvcHMgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHByaW1hcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBwcmltYXJ5VHlwb2dyYXBoeVByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgc2Vjb25kYXJ5IGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIHNlY29uZGFyeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZXNlIHByb3BzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBzZWNvbmRhcnkgdHlwb2dyYXBoeSBjb21wb25lbnRcbiAgICogKGFzIGxvbmcgYXMgZGlzYWJsZVR5cG9ncmFwaHkgaXMgbm90IGB0cnVlYCkuXG4gICAqL1xuICBzZWNvbmRhcnlUeXBvZ3JhcGh5UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbkxpc3RJdGVtVGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVUeXBvZ3JhcGh5OiBmYWxzZSxcbiAgaW5zZXQ6IGZhbHNlXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlMaXN0SXRlbVRleHQnXG59KShMaXN0SXRlbVRleHQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX2NoYWluUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2hhaW5Qcm9wVHlwZXNcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgbWFyZ2luOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkaXNwbGF5NFwiYC4gKi9cbiAgICBkaXNwbGF5NDogdGhlbWUudHlwb2dyYXBoeS5kaXNwbGF5NCxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkaXNwbGF5M1wiYC4gKi9cbiAgICBkaXNwbGF5MzogdGhlbWUudHlwb2dyYXBoeS5kaXNwbGF5MyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkaXNwbGF5MlwiYC4gKi9cbiAgICBkaXNwbGF5MjogdGhlbWUudHlwb2dyYXBoeS5kaXNwbGF5MixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJkaXNwbGF5MVwiYC4gKi9cbiAgICBkaXNwbGF5MTogdGhlbWUudHlwb2dyYXBoeS5kaXNwbGF5MSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoZWFkbGluZVwiYC4gKi9cbiAgICBoZWFkbGluZTogdGhlbWUudHlwb2dyYXBoeS5oZWFkbGluZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJ0aXRsZVwiYC4gKi9cbiAgICB0aXRsZTogdGhlbWUudHlwb2dyYXBoeS50aXRsZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJoZWFkaW5nXCJgLiAqL1xuICAgIHN1YmhlYWRpbmc6IHRoZW1lLnR5cG9ncmFwaHkuc3ViaGVhZGluZyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MlwiYC4gKi9cbiAgICBib2R5MjogdGhlbWUudHlwb2dyYXBoeS5ib2R5MixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJib2R5MVwiYC4gKi9cbiAgICBib2R5MTogdGhlbWUudHlwb2dyYXBoeS5ib2R5MSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJjYXB0aW9uXCJgLiAqL1xuICAgIGNhcHRpb246IHRoZW1lLnR5cG9ncmFwaHkuY2FwdGlvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJidXR0b25cImAuICovXG4gICAgYnV0dG9uOiB0aGVtZS50eXBvZ3JhcGh5LmJ1dHRvbixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMVwiYC4gKi9cbiAgICBoMTogdGhlbWUudHlwb2dyYXBoeS5oMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoMlwiYC4gKi9cbiAgICBoMjogdGhlbWUudHlwb2dyYXBoeS5oMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoM1wiYC4gKi9cbiAgICBoMzogdGhlbWUudHlwb2dyYXBoeS5oMyxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNFwiYC4gKi9cbiAgICBoNDogdGhlbWUudHlwb2dyYXBoeS5oNCxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNVwiYC4gKi9cbiAgICBoNTogdGhlbWUudHlwb2dyYXBoeS5oNSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJoNlwiYC4gKi9cbiAgICBoNjogdGhlbWUudHlwb2dyYXBoeS5oNixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTFcImAuICovXG4gICAgc3VidGl0bGUxOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzdWJ0aXRsZTJcImAuICovXG4gICAgc3VidGl0bGUyOiB0aGVtZS50eXBvZ3JhcGh5LnN1YnRpdGxlMixcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJvdmVybGluZVwiYC4gKi9cbiAgICBvdmVybGluZTogdGhlbWUudHlwb2dyYXBoeS5vdmVybGluZSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJzck9ubHlcImAuIE9ubHkgYWNjZXNzaWJsZSB0byBzY3JlZW4gcmVhZGVycy4gKi9cbiAgICBzck9ubHk6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgd2lkdGg6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJsZWZ0XCJgLiAqL1xuICAgIGFsaWduTGVmdDoge1xuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJjZW50ZXJcImAuICovXG4gICAgYWxpZ25DZW50ZXI6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJyaWdodFwiYC4gKi9cbiAgICBhbGlnblJpZ2h0OiB7XG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJqdXN0aWZ5XCJgLiAqL1xuICAgIGFsaWduSnVzdGlmeToge1xuICAgICAgdGV4dEFsaWduOiAnanVzdGlmeSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYWxpZ249XCJub3dyYXBcImAuICovXG4gICAgbm9XcmFwOiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBndXR0ZXJCb3R0b209e3RydWV9YC4gKi9cbiAgICBndXR0ZXJCb3R0b206IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogJzAuMzVlbSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcGFyYWdyYXBoPXt0cnVlfWAuICovXG4gICAgcGFyYWdyYXBoOiB7XG4gICAgICBtYXJnaW5Cb3R0b206IDE2XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwiaW5oZXJpdFwiYC4gKi9cbiAgICBjb2xvckluaGVyaXQ6IHtcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRQcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInRleHRTZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JUZXh0U2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcbnZhciBuZXh0VmFyaWFudHMgPSB7XG4gIGRpc3BsYXk0OiAnaDEnLFxuICBkaXNwbGF5MzogJ2gyJyxcbiAgZGlzcGxheTI6ICdoMycsXG4gIGRpc3BsYXkxOiAnaDQnLFxuICBoZWFkbGluZTogJ2g1JyxcbiAgdGl0bGU6ICdoNicsXG4gIHN1YmhlYWRpbmc6ICdzdWJ0aXRsZTEnXG59O1xuXG5mdW5jdGlvbiBnZXRWYXJpYW50KHRoZW1lLCB2YXJpYW50UHJvcCkge1xuICB2YXIgdHlwb2dyYXBoeSA9IHRoZW1lLnR5cG9ncmFwaHk7XG4gIHZhciB2YXJpYW50ID0gdmFyaWFudFByb3A7XG5cbiAgaWYgKCF2YXJpYW50KSB7XG4gICAgdmFyaWFudCA9IHR5cG9ncmFwaHkudXNlTmV4dFZhcmlhbnRzID8gJ2JvZHkyJyA6ICdib2R5MSc7XG4gIH0gLy8gY29tcGxldGUgdjIgc3dpdGNoXG5cblxuICBpZiAodHlwb2dyYXBoeS51c2VOZXh0VmFyaWFudHMpIHtcbiAgICB2YXJpYW50ID0gbmV4dFZhcmlhbnRzW3ZhcmlhbnRdIHx8IHZhcmlhbnQ7XG4gIH1cblxuICByZXR1cm4gdmFyaWFudDtcbn1cblxudmFyIGRlZmF1bHRIZWFkbGluZU1hcHBpbmcgPSB7XG4gIGgxOiAnaDEnLFxuICBoMjogJ2gyJyxcbiAgaDM6ICdoMycsXG4gIGg0OiAnaDQnLFxuICBoNTogJ2g1JyxcbiAgaDY6ICdoNicsXG4gIHN1YnRpdGxlMTogJ2g2JyxcbiAgc3VidGl0bGUyOiAnaDYnLFxuICBib2R5MTogJ3AnLFxuICBib2R5MjogJ3AnLFxuICAvLyBkZXByZWNhdGVkXG4gIGRpc3BsYXk0OiAnaDEnLFxuICBkaXNwbGF5MzogJ2gxJyxcbiAgZGlzcGxheTI6ICdoMScsXG4gIGRpc3BsYXkxOiAnaDEnLFxuICBoZWFkbGluZTogJ2gxJyxcbiAgdGl0bGU6ICdoMicsXG4gIHN1YmhlYWRpbmc6ICdoMydcbn07XG5cbmZ1bmN0aW9uIFR5cG9ncmFwaHkocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBhbGlnbiA9IHByb3BzLmFsaWduLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIGNvbXBvbmVudFByb3AgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBndXR0ZXJCb3R0b20gPSBwcm9wcy5ndXR0ZXJCb3R0b20sXG4gICAgICBoZWFkbGluZU1hcHBpbmcgPSBwcm9wcy5oZWFkbGluZU1hcHBpbmcsXG4gICAgICBpbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50ID0gcHJvcHMuaW50ZXJuYWxEZXByZWNhdGVkVmFyaWFudCxcbiAgICAgIG5vV3JhcCA9IHByb3BzLm5vV3JhcCxcbiAgICAgIHBhcmFncmFwaCA9IHByb3BzLnBhcmFncmFwaCxcbiAgICAgIHRoZW1lID0gcHJvcHMudGhlbWUsXG4gICAgICB2YXJpYW50UHJvcCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImd1dHRlckJvdHRvbVwiLCBcImhlYWRsaW5lTWFwcGluZ1wiLCBcImludGVybmFsRGVwcmVjYXRlZFZhcmlhbnRcIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ0aGVtZVwiLCBcInZhcmlhbnRcIl0pO1xuICB2YXIgdmFyaWFudCA9IGdldFZhcmlhbnQodGhlbWUsIHZhcmlhbnRQcm9wKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1t2YXJpYW50XSwgdmFyaWFudCAhPT0gJ2luaGVyaXQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnZGVmYXVsdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ub1dyYXAsIG5vV3JhcCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmd1dHRlckJvdHRvbSwgZ3V0dGVyQm90dG9tKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMucGFyYWdyYXBoLCBwYXJhZ3JhcGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImFsaWduXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShhbGlnbikpXSwgYWxpZ24gIT09ICdpbmhlcml0JyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lUHJvcCk7XG4gIHZhciBDb21wb25lbnQgPSBjb21wb25lbnRQcm9wIHx8IChwYXJhZ3JhcGggPyAncCcgOiBoZWFkbGluZU1hcHBpbmdbdmFyaWFudF0gfHwgZGVmYXVsdEhlYWRsaW5lTWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cblR5cG9ncmFwaHkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogU2V0IHRoZSB0ZXh0LWFsaWduIG9uIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBhbGlnbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcsICdqdXN0aWZ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlZmF1bHQnLCAnZXJyb3InLCAnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICd0ZXh0UHJpbWFyeScsICd0ZXh0U2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICogQnkgZGVmYXVsdCwgaXQgbWFwcyB0aGUgdmFyaWFudCB0byBhIGdvb2QgZGVmYXVsdCBoZWFkbGluZSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIGd1dHRlckJvdHRvbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFdlIGFyZSBlbXBpcmljYWxseSBtYXBwaW5nIHRoZSB2YXJpYW50IHByb3BlcnR5IHRvIGEgcmFuZ2Ugb2YgZGlmZmVyZW50IERPTSBlbGVtZW50IHR5cGVzLlxuICAgKiBGb3IgaW5zdGFuY2UsIHN1YnRpdGxlMSB0byBgPGg2PmAuXG4gICAqIElmIHlvdSB3aXNoIHRvIGNoYW5nZSB0aGF0IG1hcHBpbmcsIHlvdSBjYW4gcHJvdmlkZSB5b3VyIG93bi5cbiAgICogQWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5LlxuICAgKiBUaGUgZGVmYXVsdCBtYXBwaW5nIGlzIHRoZSBmb2xsb3dpbmc6XG4gICAqL1xuICBoZWFkbGluZU1hcHBpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgZGVwcmVjYXRlZCB2YXJpYW50IGlzIHVzZWQgZnJvbSBhbiBpbnRlcm5hbCBjb21wb25lbnQuIFVzZXJzIGRvbid0IG5lZWRcbiAgICogYSBkZXByZWNhdGlvbiB3YXJuaW5nIGhlcmUgaWYgdGhleSBzd2l0Y2hlZCB0byB0aGUgdjIgdGhlbWUuIFRoZXkgYWxyZWFkeVxuICAgKiBnZXQgdGhlIG1hcHBpbmcgdGhhdCB3aWxsIGJlIGFwcGxpZWQgaW4gdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBpbnRlcm5hbERlcHJlY2F0ZWRWYXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIG5vdCB3cmFwLCBidXQgaW5zdGVhZCB3aWxsIHRydW5jYXRlIHdpdGggYW4gZWxsaXBzaXMuXG4gICAqL1xuICBub1dyYXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0ZXh0IHdpbGwgaGF2ZSBhIGJvdHRvbSBtYXJnaW4uXG4gICAqL1xuICBwYXJhZ3JhcGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSB0aGVtZSB0eXBvZ3JhcGh5IHN0eWxlcy5cbiAgICogVXNlIGBib2R5MWAgYXMgdGhlIGRlZmF1bHQgdmFsdWUgd2l0aCB0aGUgbGVnYWN5IGltcGxlbWVudGF0aW9uIGFuZCBgYm9keTJgIHdpdGggdGhlIG5ldyBvbmUuXG4gICAqL1xuICB2YXJpYW50OiAoMCwgX2NoYWluUHJvcFR5cGVzLmRlZmF1bHQpKF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ3N1YnRpdGxlMScsICdzdWJ0aXRsZTInLCAnYm9keTEnLCAnYm9keTInLCAnY2FwdGlvbicsICdidXR0b24nLCAnb3ZlcmxpbmUnLCAnc3JPbmx5JywgJ2luaGVyaXQnLCAvLyBkZXByZWNhdGVkXG4gICdkaXNwbGF5NCcsICdkaXNwbGF5MycsICdkaXNwbGF5MicsICdkaXNwbGF5MScsICdoZWFkbGluZScsICd0aXRsZScsICdzdWJoZWFkaW5nJ10pLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgZGVwcmVjYXRlZFZhcmlhbnRzID0gWydkaXNwbGF5NCcsICdkaXNwbGF5MycsICdkaXNwbGF5MicsICdkaXNwbGF5MScsICdoZWFkbGluZScsICd0aXRsZScsICdzdWJoZWFkaW5nJ107XG5cbiAgICBpZiAocHJvcHMudGhlbWUudHlwb2dyYXBoeS51c2VOZXh0VmFyaWFudHMgJiYgIXByb3BzLmludGVybmFsRGVwcmVjYXRlZFZhcmlhbnQgJiYgZGVwcmVjYXRlZFZhcmlhbnRzLmluZGV4T2YocHJvcHMudmFyaWFudCkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgYXJlIHVzaW5nIGEgZGVwcmVjYXRlZCB0eXBvZ3JhcGh5IHZhcmlhbnQ6ICcgKyBcImBcIi5jb25jYXQocHJvcHMudmFyaWFudCwgXCJgIHRoYXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuXCIpICsgJ1xcblBsZWFzZSByZWFkIHRoZSBtaWdyYXRpb24gZ3VpZGUgdW5kZXIgaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vc3R5bGUvdHlwb2dyYXBoeSNtaWdyYXRpb24tdG8tdHlwb2dyYXBoeS12MicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KVxufSA6IHt9O1xuVHlwb2dyYXBoeS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsaWduOiAnaW5oZXJpdCcsXG4gIGNvbG9yOiAnZGVmYXVsdCcsXG4gIGd1dHRlckJvdHRvbTogZmFsc2UsXG4gIGhlYWRsaW5lTWFwcGluZzogZGVmYXVsdEhlYWRsaW5lTWFwcGluZyxcbiAgbm9XcmFwOiBmYWxzZSxcbiAgcGFyYWdyYXBoOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVHlwb2dyYXBoeScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoVHlwb2dyYXBoeSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9jcmVhdGVCcmVha3BvaW50cyA9IHJlcXVpcmUoXCIuLi9zdHlsZXMvY3JlYXRlQnJlYWtwb2ludHNcIik7XG5cbnZhciBfcmVxdWlyZVByb3BGYWN0b3J5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvcmVxdWlyZVByb3BGYWN0b3J5XCIpKTtcblxuLy8gQSBncmlkIGNvbXBvbmVudCB1c2luZyB0aGUgZm9sbG93aW5nIGxpYnMgYXMgaW5zcGlyYXRpb24uXG4vL1xuLy8gRm9yIHRoZSBpbXBsZW1lbnRhdGlvbjpcbi8vIC0gaHR0cDovL3Y0LWFscGhhLmdldGJvb3RzdHJhcC5jb20vbGF5b3V0L2ZsZXhib3gtZ3JpZC9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2tyaXN0b2Zlcmpvc2VwaC9mbGV4Ym94Z3JpZC9ibG9iL21hc3Rlci9zcmMvY3NzL2ZsZXhib3hncmlkLmNzc1xuLy8gLSBodHRwczovL2dpdGh1Yi5jb20vcm95bGVlMDcwNC9yZWFjdC1mbGV4Ym94LWdyaWRcbi8vIC0gaHR0cHM6Ly9tYXRlcmlhbC5hbmd1bGFyanMub3JnL2xhdGVzdC9sYXlvdXQvaW50cm9kdWN0aW9uXG4vL1xuLy8gRm9sbG93IHRoaXMgZmxleGJveCBHdWlkZSB0byBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgdW5kZXJseWluZyBtb2RlbDpcbi8vIC0gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94L1xudmFyIEdVVFRFUlMgPSBbMCwgOCwgMTYsIDI0LCAzMiwgNDBdO1xudmFyIEdSSURfU0laRVMgPSBbJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVHcmlkKGdsb2JhbFN0eWxlcywgdGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBHUklEX1NJWkVTLmZvckVhY2goZnVuY3Rpb24gKHNpemUpIHtcbiAgICB2YXIga2V5ID0gXCJncmlkLVwiLmNvbmNhdChicmVha3BvaW50LCBcIi1cIikuY29uY2F0KHNpemUpO1xuXG4gICAgaWYgKHNpemUgPT09IHRydWUpIHtcbiAgICAgIC8vIEZvciB0aGUgYXV0byBsYXlvdXRpbmdcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzaXplID09PSAnYXV0bycpIHtcbiAgICAgIHN0eWxlc1trZXldID0ge1xuICAgICAgICBmbGV4QmFzaXM6ICdhdXRvJyxcbiAgICAgICAgZmxleEdyb3c6IDAsXG4gICAgICAgIG1heFdpZHRoOiAnbm9uZSdcbiAgICAgIH07XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBLZWVwIDcgc2lnbmlmaWNhbnQgbnVtYmVycy5cblxuXG4gICAgdmFyIHdpZHRoID0gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChzaXplIC8gMTIgKiAxMGU3KSAvIDEwZTUsIFwiJVwiKTsgLy8gQ2xvc2UgdG8gdGhlIGJvb3RzdHJhcCBpbXBsZW1lbnRhdGlvbjpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi84ZmNjYWEyNDM5ZTk3ZWM3MmE0YjdkYzQyY2NjMWY2NDk3OTBhZGIwL3Njc3MvbWl4aW5zL19ncmlkLnNjc3MjTDQxXG5cbiAgICBzdHlsZXNba2V5XSA9IHtcbiAgICAgIGZsZXhCYXNpczogd2lkdGgsXG4gICAgICBmbGV4R3JvdzogMCxcbiAgICAgIG1heFdpZHRoOiB3aWR0aFxuICAgIH07XG4gIH0pOyAvLyBObyBuZWVkIGZvciBhIG1lZGlhIHF1ZXJ5IGZvciB0aGUgZmlyc3Qgc2l6ZS5cblxuICBpZiAoYnJlYWtwb2ludCA9PT0gJ3hzJykge1xuICAgICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoZ2xvYmFsU3R5bGVzLCBzdHlsZXMpO1xuICB9IGVsc2Uge1xuICAgIGdsb2JhbFN0eWxlc1t0aGVtZS5icmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVHdXR0ZXIodGhlbWUsIGJyZWFrcG9pbnQpIHtcbiAgdmFyIHN0eWxlcyA9IHt9O1xuICBHVVRURVJTLmZvckVhY2goZnVuY3Rpb24gKHNwYWNpbmcsIGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAvLyBTa2lwIHRoZSBkZWZhdWx0IHN0eWxlLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0eWxlc1tcInNwYWNpbmctXCIuY29uY2F0KGJyZWFrcG9pbnQsIFwiLVwiKS5jb25jYXQoc3BhY2luZyldID0ge1xuICAgICAgbWFyZ2luOiAtc3BhY2luZyAvIDIsXG4gICAgICB3aWR0aDogXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQoc3BhY2luZywgXCJweClcIiksXG4gICAgICAnJiA+ICRpdGVtJzoge1xuICAgICAgICBwYWRkaW5nOiBzcGFjaW5nIC8gMlxuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufSAvLyBEZWZhdWx0IENTUyB2YWx1ZXNcbi8vIGZsZXg6ICcwIDEgYXV0bycsXG4vLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcbi8vIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0Jyxcbi8vIGZsZXhXcmFwOiAnbm93cmFwJyxcbi8vIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5cblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29udGFpbmVyPXt0cnVlfWAuICovXG4gICAgY29udGFpbmVyOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhXcmFwOiAnd3JhcCcsXG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGl0ZW09e3RydWV9YC4gKi9cbiAgICBpdGVtOiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1hcmdpbjogJzAnIC8vIEZvciBpbnN0YW5jZSwgaXQncyB1c2VmdWwgd2hlbiB1c2VkIHdpdGggYSBgZmlndXJlYCBlbGVtZW50LlxuXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHplcm9NaW5XaWR0aD17dHJ1ZX1gLiAqL1xuICAgIHplcm9NaW5XaWR0aDoge1xuICAgICAgbWluV2lkdGg6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uXCJgLiAqL1xuICAgICdkaXJlY3Rpb24teHMtY29sdW1uJzoge1xuICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwiY29sdW1uLXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1jb2x1bW4tcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4tcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlyZWN0aW9uPVwicndvLXJldmVyc2VcImAuICovXG4gICAgJ2RpcmVjdGlvbi14cy1yb3ctcmV2ZXJzZSc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cIm5vd3JhcFwiYC4gKi9cbiAgICAnd3JhcC14cy1ub3dyYXAnOiB7XG4gICAgICBmbGV4V3JhcDogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgd3JhcD1cInJldmVyc2VcImAuICovXG4gICAgJ3dyYXAteHMtd3JhcC1yZXZlcnNlJzoge1xuICAgICAgZmxleFdyYXA6ICd3cmFwLXJldmVyc2UnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJjZW50ZXJcImAuICovXG4gICAgJ2FsaWduLWl0ZW1zLXhzLWNlbnRlcic6IHtcbiAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LXN0YXJ0XCJgLiAqL1xuICAgICdhbGlnbi1pdGVtcy14cy1mbGV4LXN0YXJ0Jzoge1xuICAgICAgYWxpZ25JdGVtczogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtZmxleC1lbmQnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduSXRlbXM9XCJiYXNlbGluZVwiYC4gKi9cbiAgICAnYWxpZ24taXRlbXMteHMtYmFzZWxpbmUnOiB7XG4gICAgICBhbGlnbkl0ZW1zOiAnYmFzZWxpbmUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImNlbnRlclwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1jZW50ZXInOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtc3RhcnRcImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtZmxleC1zdGFydCc6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ2ZsZXgtc3RhcnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cImZsZXgtZW5kXCJgLiAqL1xuICAgICdhbGlnbi1jb250ZW50LXhzLWZsZXgtZW5kJzoge1xuICAgICAgYWxpZ25Db250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWJldHdlZW5cImAuICovXG4gICAgJ2FsaWduLWNvbnRlbnQteHMtc3BhY2UtYmV0d2Vlbic6IHtcbiAgICAgIGFsaWduQ29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduQ29udGVudD1cInNwYWNlLWFyb3VuZFwiYC4gKi9cbiAgICAnYWxpZ24tY29udGVudC14cy1zcGFjZS1hcm91bmQnOiB7XG4gICAgICBhbGlnbkNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJjZW50ZXJcImAuICovXG4gICAgJ2p1c3RpZnkteHMtY2VudGVyJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJmbGV4LWVuZFwiYC4gKi9cbiAgICAnanVzdGlmeS14cy1mbGV4LWVuZCc6IHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1iZXR3ZWVuXCJgLiAqL1xuICAgICdqdXN0aWZ5LXhzLXNwYWNlLWJldHdlZW4nOiB7XG4gICAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1hcm91bmRcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtYXJvdW5kJzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1hcm91bmQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGp1c3RpZnk9XCJzcGFjZS1ldmVubHlcImAuICovXG4gICAgJ2p1c3RpZnkteHMtc3BhY2UtZXZlbmx5Jzoge1xuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1ldmVubHknXG4gICAgfVxuICB9LCBnZW5lcmF0ZUd1dHRlcih0aGVtZSwgJ3hzJyksIF9jcmVhdGVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGtleSkge1xuICAgIC8vIFVzZSBzaWRlIGVmZmVjdCBvdmVyIGltbXV0YWJpbGl0eSBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICAgIGdlbmVyYXRlR3JpZChhY2N1bXVsYXRvciwgdGhlbWUsIGtleSk7XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCB7fSkpO1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEdyaWQocHJvcHMpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBhbGlnbkNvbnRlbnQgPSBwcm9wcy5hbGlnbkNvbnRlbnQsXG4gICAgICBhbGlnbkl0ZW1zID0gcHJvcHMuYWxpZ25JdGVtcyxcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lUHJvcCA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIGRpcmVjdGlvbiA9IHByb3BzLmRpcmVjdGlvbixcbiAgICAgIGl0ZW0gPSBwcm9wcy5pdGVtLFxuICAgICAganVzdGlmeSA9IHByb3BzLmp1c3RpZnksXG4gICAgICBsZyA9IHByb3BzLmxnLFxuICAgICAgbWQgPSBwcm9wcy5tZCxcbiAgICAgIHNtID0gcHJvcHMuc20sXG4gICAgICBzcGFjaW5nID0gcHJvcHMuc3BhY2luZyxcbiAgICAgIHdyYXAgPSBwcm9wcy53cmFwLFxuICAgICAgeGwgPSBwcm9wcy54bCxcbiAgICAgIHhzID0gcHJvcHMueHMsXG4gICAgICB6ZXJvTWluV2lkdGggPSBwcm9wcy56ZXJvTWluV2lkdGgsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJhbGlnbkNvbnRlbnRcIiwgXCJhbGlnbkl0ZW1zXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImNvbnRhaW5lclwiLCBcImRpcmVjdGlvblwiLCBcIml0ZW1cIiwgXCJqdXN0aWZ5XCIsIFwibGdcIiwgXCJtZFwiLCBcInNtXCIsIFwic3BhY2luZ1wiLCBcIndyYXBcIiwgXCJ4bFwiLCBcInhzXCIsIFwiemVyb01pbldpZHRoXCJdKTtcbiAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KSgoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVyLCBjb250YWluZXIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5pdGVtLCBpdGVtKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuemVyb01pbldpZHRoLCB6ZXJvTWluV2lkdGgpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcInNwYWNpbmcteHMtXCIuY29uY2F0KFN0cmluZyhzcGFjaW5nKSldLCBjb250YWluZXIgJiYgc3BhY2luZyAhPT0gMCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZGlyZWN0aW9uLXhzLVwiLmNvbmNhdChTdHJpbmcoZGlyZWN0aW9uKSldLCBkaXJlY3Rpb24gIT09IEdyaWQuZGVmYXVsdFByb3BzLmRpcmVjdGlvbiksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wid3JhcC14cy1cIi5jb25jYXQoU3RyaW5nKHdyYXApKV0sIHdyYXAgIT09IEdyaWQuZGVmYXVsdFByb3BzLndyYXApLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImFsaWduLWl0ZW1zLXhzLVwiLmNvbmNhdChTdHJpbmcoYWxpZ25JdGVtcykpXSwgYWxpZ25JdGVtcyAhPT0gR3JpZC5kZWZhdWx0UHJvcHMuYWxpZ25JdGVtcyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiYWxpZ24tY29udGVudC14cy1cIi5jb25jYXQoU3RyaW5nKGFsaWduQ29udGVudCkpXSwgYWxpZ25Db250ZW50ICE9PSBHcmlkLmRlZmF1bHRQcm9wcy5hbGlnbkNvbnRlbnQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImp1c3RpZnkteHMtXCIuY29uY2F0KFN0cmluZyhqdXN0aWZ5KSldLCBqdXN0aWZ5ICE9PSBHcmlkLmRlZmF1bHRQcm9wcy5qdXN0aWZ5KSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJncmlkLXhzLVwiLmNvbmNhdChTdHJpbmcoeHMpKV0sIHhzICE9PSBmYWxzZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZ3JpZC1zbS1cIi5jb25jYXQoU3RyaW5nKHNtKSldLCBzbSAhPT0gZmFsc2UpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImdyaWQtbWQtXCIuY29uY2F0KFN0cmluZyhtZCkpXSwgbWQgIT09IGZhbHNlKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJncmlkLWxnLVwiLmNvbmNhdChTdHJpbmcobGcpKV0sIGxnICE9PSBmYWxzZSksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZ3JpZC14bC1cIi5jb25jYXQoU3RyaW5nKHhsKSldLCB4bCAhPT0gZmFsc2UpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gIH0sIG90aGVyKSk7XG59XG5cbkdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGFsaWduLWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBhbGlnbkNvbnRlbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0cmV0Y2gnLCAnY2VudGVyJywgJ2ZsZXgtc3RhcnQnLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBhbGlnbi1pdGVtc2Agc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIGFsaWduSXRlbXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2ZsZXgtc3RhcnQnLCAnY2VudGVyJywgJ2ZsZXgtZW5kJywgJ3N0cmV0Y2gnLCAnYmFzZWxpbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgaGF2ZSB0aGUgZmxleCAqY29udGFpbmVyKiBiZWhhdmlvci5cbiAgICogWW91IHNob3VsZCBiZSB3cmFwcGluZyAqaXRlbXMqIHdpdGggYSAqY29udGFpbmVyKi5cbiAgICovXG4gIGNvbnRhaW5lcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBmbGV4LWRpcmVjdGlvbmAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0IGlzIGFwcGxpZWQgZm9yIGFsbCBzY3JlZW4gc2l6ZXMuXG4gICAqL1xuICBkaXJlY3Rpb246IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3JvdycsICdyb3ctcmV2ZXJzZScsICdjb2x1bW4nLCAnY29sdW1uLXJldmVyc2UnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKml0ZW0qIGJlaGF2aW9yLlxuICAgKiBZb3Ugc2hvdWxkIGJlIHdyYXBwaW5nICppdGVtcyogd2l0aCBhICpjb250YWluZXIqLlxuICAgKi9cbiAgaXRlbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGBqdXN0aWZ5LWNvbnRlbnRgIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKi9cbiAganVzdGlmeTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZmxleC1zdGFydCcsICdjZW50ZXInLCAnZmxleC1lbmQnLCAnc3BhY2UtYmV0d2VlbicsICdzcGFjZS1hcm91bmQnLCAnc3BhY2UtZXZlbmx5J10pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBudW1iZXIgb2YgZ3JpZHMgdGhlIGNvbXBvbmVudCBpcyBnb2luZyB0byB1c2UuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgdGhlIGBsZ2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIGxnOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoW2ZhbHNlLCAnYXV0bycsIHRydWUsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJdKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgbWRgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBtZDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciB0aGUgYHNtYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgc206IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbZmFsc2UsICdhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl0pLFxuXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZSB0eXBlIGBpdGVtYCBjb21wb25lbnQuXG4gICAqIEl0IGNhbiBvbmx5IGJlIHVzZWQgb24gYSB0eXBlIGBjb250YWluZXJgIGNvbXBvbmVudC5cbiAgICovXG4gIHNwYWNpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihHVVRURVJTKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtd3JhcGAgc3R5bGUgcHJvcGVydHkuXG4gICAqIEl0J3MgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICovXG4gIHdyYXA6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ25vd3JhcCcsICd3cmFwJywgJ3dyYXAtcmV2ZXJzZSddKSxcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGdyaWRzIHRoZSBjb21wb25lbnQgaXMgZ29pbmcgdG8gdXNlLlxuICAgKiBJdCdzIGFwcGxpZWQgZm9yIHRoZSBgeGxgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMuXG4gICAqL1xuICB4bDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIG51bWJlciBvZiBncmlkcyB0aGUgY29tcG9uZW50IGlzIGdvaW5nIHRvIHVzZS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgdGhlIHNjcmVlbiBzaXplcyB3aXRoIHRoZSBsb3dlc3QgcHJpb3JpdHkuXG4gICAqL1xuICB4czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFtmYWxzZSwgJ2F1dG8nLCB0cnVlLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaXQgc2V0cyBgbWluLXdpZHRoOiAwYCBvbiB0aGUgaXRlbS5cbiAgICogUmVmZXIgdG8gdGhlIGxpbWl0YXRpb25zIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb24gdG8gYmV0dGVyIHVuZGVyc3RhbmQgdGhlIHVzZSBjYXNlLlxuICAgKi9cbiAgemVyb01pbldpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuR3JpZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGFsaWduQ29udGVudDogJ3N0cmV0Y2gnLFxuICBhbGlnbkl0ZW1zOiAnc3RyZXRjaCcsXG4gIGNvbXBvbmVudDogJ2RpdicsXG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGRpcmVjdGlvbjogJ3JvdycsXG4gIGl0ZW06IGZhbHNlLFxuICBqdXN0aWZ5OiAnZmxleC1zdGFydCcsXG4gIGxnOiBmYWxzZSxcbiAgbWQ6IGZhbHNlLFxuICBzbTogZmFsc2UsXG4gIHNwYWNpbmc6IDAsXG4gIHdyYXA6ICd3cmFwJyxcbiAgeGw6IGZhbHNlLFxuICB4czogZmFsc2UsXG4gIHplcm9NaW5XaWR0aDogZmFsc2Vcbn07XG52YXIgU3R5bGVkR3JpZCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUdyaWQnXG59KShHcmlkKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHJlcXVpcmVQcm9wID0gKDAsIF9yZXF1aXJlUHJvcEZhY3RvcnkuZGVmYXVsdCkoJ0dyaWQnKTtcbiAgU3R5bGVkR3JpZC5wcm9wVHlwZXMgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBTdHlsZWRHcmlkLnByb3BUeXBlcywge1xuICAgIGFsaWduQ29udGVudDogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIGFsaWduSXRlbXM6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBkaXJlY3Rpb246IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICBqdXN0aWZ5OiByZXF1aXJlUHJvcCgnY29udGFpbmVyJyksXG4gICAgbGc6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgbWQ6IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc206IHJlcXVpcmVQcm9wKCdpdGVtJyksXG4gICAgc3BhY2luZzogcmVxdWlyZVByb3AoJ2NvbnRhaW5lcicpLFxuICAgIHdyYXA6IHJlcXVpcmVQcm9wKCdjb250YWluZXInKSxcbiAgICB4czogcmVxdWlyZVByb3AoJ2l0ZW0nKSxcbiAgICB6ZXJvTWluV2lkdGg6IHJlcXVpcmVQcm9wKCd6ZXJvTWluV2lkdGgnKVxuICB9KTtcbn1cblxudmFyIF9kZWZhdWx0ID0gU3R5bGVkR3JpZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiByZXF1aXJlUHJvcEZhY3RvcnkoY29tcG9uZW50TmFtZUluRXJyb3IpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVxdWlyZVByb3AgPSBmdW5jdGlvbiByZXF1aXJlUHJvcChyZXF1aXJlZFByb3ApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BGdWxsTmFtZVNhZmUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHNbcHJvcE5hbWVdICE9PSAndW5kZWZpbmVkJyAmJiAhcHJvcHNbcmVxdWlyZWRQcm9wXSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIHByb3BlcnR5IGBcIi5jb25jYXQocHJvcEZ1bGxOYW1lU2FmZSwgXCJgIG9mIFwiKSArIFwiYFwiLmNvbmNhdChjb21wb25lbnROYW1lSW5FcnJvciwgXCJgIG11c3QgYmUgdXNlZCBvbiBgXCIpLmNvbmNhdChyZXF1aXJlZFByb3AsIFwiYC5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiByZXF1aXJlUHJvcDtcbn1cblxudmFyIF9kZWZhdWx0ID0gcmVxdWlyZVByb3BGYWN0b3J5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIF9jaGFpblByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2NoYWluUHJvcFR5cGVzXCIpKTtcblxudmFyIFNJWkUgPSA0NDtcblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgdmFyIGNsYW1wZWRWYWx1ZSA9IE1hdGgubWluKE1hdGgubWF4KG1pbiwgdmFsdWUpLCBtYXgpO1xuICByZXR1cm4gKGNsYW1wZWRWYWx1ZSAtIG1pbikgLyAobWF4IC0gbWluKTtcbn1cblxuZnVuY3Rpb24gZWFzZU91dCh0KSB7XG4gIHQgPSBnZXRSZWxhdGl2ZVZhbHVlKHQsIDAsIDEpOyAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NFxuXG4gIHQgPSAodCAtPSAxKSAqIHQgKiB0ICsgMTtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGVhc2VJbih0KSB7XG4gIHJldHVybiB0ICogdDtcbn1cblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBsaW5lSGVpZ2h0OiAxIC8vIEtlZXAgdGhlIHByb2dyZXNzIGNlbnRlcmVkXG5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cInN0YXRpY1wiYC4gKi9cbiAgICBzdGF0aWM6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImluZGV0ZXJtaW5hdGVcImAuICovXG4gICAgaW5kZXRlcm1pbmF0ZToge1xuICAgICAgYW5pbWF0aW9uOiAnbXVpLXByb2dyZXNzLWNpcmN1bGFyLXJvdGF0ZSAxLjRzIGxpbmVhciBpbmZpbml0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYHN2Z2AgZWxlbWVudC4gKi9cbiAgICBzdmc6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoLiAqL1xuICAgIGNpcmNsZToge1xuICAgICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyAvLyBVc2UgYnV0dCB0byBmb2xsb3cgdGhlIHNwZWNpZmljYXRpb24sIGJ5IGNoYW5jZSwgaXQncyBhbHJlYWR5IHRoZSBkZWZhdWx0IENTUyB2YWx1ZS5cbiAgICAgIC8vIHN0cm9rZUxpbmVjYXA6ICdidXR0JyxcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYHZhcmlhbnQ9XCJzdGF0aWNcImAuICovXG4gICAgY2lyY2xlU3RhdGljOiB7XG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3N0cm9rZS1kYXNob2Zmc2V0JylcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBjaXJjbGVgIHN2ZyBwYXRoIGlmIGB2YXJpYW50PVwiaW5kZXRlcm1pbmF0ZVwiYC4gKi9cbiAgICBjaXJjbGVJbmRldGVybWluYXRlOiB7XG4gICAgICBhbmltYXRpb246ICdtdWktcHJvZ3Jlc3MtY2lyY3VsYXItZGFzaCAxLjRzIGVhc2UtaW4tb3V0IGluZmluaXRlJyxcbiAgICAgIC8vIFNvbWUgZGVmYXVsdCB2YWx1ZSB0aGF0IGxvb2tzIGZpbmUgd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBraWNrcyBpbi5cbiAgICAgIHN0cm9rZURhc2hhcnJheTogJzgwcHgsIDIwMHB4JyxcbiAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICcwcHgnIC8vIEFkZCB0aGUgdW5pdCB0byBmaXggYSBFZGdlIDE2IGFuZCBiZWxvdyBidWcuXG5cbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIG11aS1wcm9ncmVzcy1jaXJjdWxhci1yb3RhdGUnOiB7XG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAncm90YXRlKDM2MGRlZyknXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBtdWktcHJvZ3Jlc3MtY2lyY3VsYXItZGFzaCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnMXB4LCAyMDBweCcsXG4gICAgICAgIHN0cm9rZURhc2hvZmZzZXQ6ICcwcHgnXG4gICAgICB9LFxuICAgICAgJzUwJSc6IHtcbiAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiAnMTAwcHgsIDIwMHB4JyxcbiAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogJy0xNXB4J1xuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBzdHJva2VEYXNoYXJyYXk6ICcxMDBweCwgMjAwcHgnLFxuICAgICAgICBzdHJva2VEYXNob2Zmc2V0OiAnLTEyMHB4J1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGNpcmNsZWAgc3ZnIHBhdGggaWYgYGRpc2FibGVTaHJpbms9e3RydWV9YC4gKi9cbiAgICBjaXJjbGVEaXNhYmxlU2hyaW5rOiB7XG4gICAgICBhbmltYXRpb246ICdub25lJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqICMjIEFSSUFcbiAqXG4gKiBJZiB0aGUgcHJvZ3Jlc3MgYmFyIGlzIGRlc2NyaWJpbmcgdGhlIGxvYWRpbmcgcHJvZ3Jlc3Mgb2YgYSBwYXJ0aWN1bGFyIHJlZ2lvbiBvZiBhIHBhZ2UsXG4gKiB5b3Ugc2hvdWxkIHVzZSBgYXJpYS1kZXNjcmliZWRieWAgdG8gcG9pbnQgdG8gdGhlIHByb2dyZXNzIGJhciwgYW5kIHNldCB0aGUgYGFyaWEtYnVzeWBcbiAqIGF0dHJpYnV0ZSB0byBgdHJ1ZWAgb24gdGhhdCByZWdpb24gdW50aWwgaXQgaGFzIGZpbmlzaGVkIGxvYWRpbmcuXG4gKi9cblxuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gQ2lyY3VsYXJQcm9ncmVzcyhwcm9wcykge1xuICB2YXIgX2NsYXNzTmFtZXMsIF9jbGFzc05hbWVzMjtcblxuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgZGlzYWJsZVNocmluayA9IHByb3BzLmRpc2FibGVTaHJpbmssXG4gICAgICBzaXplID0gcHJvcHMuc2l6ZSxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGlja25lc3MgPSBwcm9wcy50aGlja25lc3MsXG4gICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJkaXNhYmxlU2hyaW5rXCIsIFwic2l6ZVwiLCBcInN0eWxlXCIsIFwidGhpY2tuZXNzXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIGNpcmNsZVN0eWxlID0ge307XG4gIHZhciByb290U3R5bGUgPSB7fTtcbiAgdmFyIHJvb3RQcm9wcyA9IHt9O1xuXG4gIGlmICh2YXJpYW50ID09PSAnZGV0ZXJtaW5hdGUnIHx8IHZhcmlhbnQgPT09ICdzdGF0aWMnKSB7XG4gICAgdmFyIGNpcmN1bWZlcmVuY2UgPSAyICogTWF0aC5QSSAqICgoU0laRSAtIHRoaWNrbmVzcykgLyAyKTtcbiAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBjaXJjdW1mZXJlbmNlLnRvRml4ZWQoMyk7XG4gICAgcm9vdFByb3BzWydhcmlhLXZhbHVlbm93J10gPSBNYXRoLnJvdW5kKHZhbHVlKTtcblxuICAgIGlmICh2YXJpYW50ID09PSAnc3RhdGljJykge1xuICAgICAgY2lyY2xlU3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IFwiXCIuY29uY2F0KCgoMTAwIC0gdmFsdWUpIC8gMTAwICogY2lyY3VtZmVyZW5jZSkudG9GaXhlZCgzKSwgXCJweFwiKTtcbiAgICAgIHJvb3RTdHlsZS50cmFuc2Zvcm0gPSAncm90YXRlKC05MGRlZyknO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaXJjbGVTdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gXCJcIi5jb25jYXQoKGVhc2VJbigoMTAwIC0gdmFsdWUpIC8gMTAwKSAqIGNpcmN1bWZlcmVuY2UpLnRvRml4ZWQoMyksIFwicHhcIik7XG4gICAgICByb290U3R5bGUudHJhbnNmb3JtID0gXCJyb3RhdGUoXCIuY29uY2F0KChlYXNlT3V0KHZhbHVlIC8gNzApICogMjcwKS50b0ZpeGVkKDMpLCBcImRlZylcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdCgoMCwgX2hlbHBlcnMuY2FwaXRhbGl6ZSkoY29sb3IpKV0sIGNvbG9yICE9PSAnaW5oZXJpdCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5pbmRldGVybWluYXRlLCB2YXJpYW50ID09PSAnaW5kZXRlcm1pbmF0ZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zdGF0aWMsIHZhcmlhbnQgPT09ICdzdGF0aWMnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgaGVpZ2h0OiBzaXplXG4gICAgfSwgcm9vdFN0eWxlLCBzdHlsZSksXG4gICAgcm9sZTogXCJwcm9ncmVzc2JhclwiXG4gIH0sIHJvb3RQcm9wcywgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuc3ZnLFxuICAgIHZpZXdCb3g6IFwiXCIuY29uY2F0KFNJWkUgLyAyLCBcIiBcIikuY29uY2F0KFNJWkUgLyAyLCBcIiBcIikuY29uY2F0KFNJWkUsIFwiIFwiKS5jb25jYXQoU0laRSlcbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5jaXJjbGUsIChfY2xhc3NOYW1lczIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNpcmNsZUluZGV0ZXJtaW5hdGUsIHZhcmlhbnQgPT09ICdpbmRldGVybWluYXRlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzMiwgY2xhc3Nlcy5jaXJjbGVTdGF0aWMsIHZhcmlhbnQgPT09ICdzdGF0aWMnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMyLCBjbGFzc2VzLmNpcmNsZURpc2FibGVTaHJpbmssIGRpc2FibGVTaHJpbmspLCBfY2xhc3NOYW1lczIpKSxcbiAgICBzdHlsZTogY2lyY2xlU3R5bGUsXG4gICAgY3g6IFNJWkUsXG4gICAgY3k6IFNJWkUsXG4gICAgcjogKFNJWkUgLSB0aGlja25lc3MpIC8gMixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICBzdHJva2VXaWR0aDogdGhpY2tuZXNzXG4gIH0pKSk7XG59XG5cbkNpcmN1bGFyUHJvZ3Jlc3MucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydwcmltYXJ5JywgJ3NlY29uZGFyeScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzaHJpbmsgYW5pbWF0aW9uIGlzIGRpc2FibGVkLlxuICAgKiBUaGlzIG9ubHkgd29ya3MgaWYgdmFyaWFudCBpcyBgaW5kZXRlcm1pbmF0ZWAuXG4gICAqL1xuICBkaXNhYmxlU2hyaW5rOiAoMCwgX2NoYWluUHJvcFR5cGVzLmRlZmF1bHQpKF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvcHMuZGlzYWJsZVNocmluayAmJiBwcm9wcy52YXJpYW50ICE9PSAnaW5kZXRlcm1pbmF0ZScpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiB5b3UgaGF2ZSBwcm92aWRlZCB0aGUgYGRpc2FibGVTaHJpbmtgIHByb3BlcnR5ICcgKyAnd2l0aCBhIHZhcmlhbnQgb3RoZXIgdGhhbiBgaW5kZXRlcm1pbmF0ZWAuIFRoaXMgd2lsbCBoYXZlIG5vIGVmZmVjdC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRoZSBzaXplIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBjaXJjbGUuXG4gICAqL1xuICB0aGlja25lc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgcHJvZ3Jlc3MgaW5kaWNhdG9yIGZvciB0aGUgZGV0ZXJtaW5hdGUgYW5kIHN0YXRpYyB2YXJpYW50cy5cbiAgICogVmFsdWUgYmV0d2VlbiAwIGFuZCAxMDAuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcixcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKiBVc2UgaW5kZXRlcm1pbmF0ZSB3aGVuIHRoZXJlIGlzIG5vIHByb2dyZXNzIHZhbHVlLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGV0ZXJtaW5hdGUnLCAnaW5kZXRlcm1pbmF0ZScsICdzdGF0aWMnXSlcbn0gOiB7fTtcbkNpcmN1bGFyUHJvZ3Jlc3MuZGVmYXVsdFByb3BzID0ge1xuICBjb2xvcjogJ3ByaW1hcnknLFxuICBkaXNhYmxlU2hyaW5rOiBmYWxzZSxcbiAgc2l6ZTogNDAsXG4gIHRoaWNrbmVzczogMy42LFxuICB2YWx1ZTogMCxcbiAgdmFyaWFudDogJ2luZGV0ZXJtaW5hdGUnXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlDaXJjdWxhclByb2dyZXNzJyxcbiAgZmxpcDogZmFsc2Vcbn0pKENpcmN1bGFyUHJvZ3Jlc3MpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9iYXNlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9iYXNlLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vYmFzZS5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgcGFyZW50KSB7XG4gIGlmIChwYXJlbnQpe1xuICAgIHJldHVybiBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuICB9XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG59O1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCwgcGFyZW50KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUsIHRhcmdldCk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cblx0aWYob3B0aW9ucy5hdHRycy5ub25jZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIG5vbmNlID0gZ2V0Tm9uY2UoKTtcblx0XHRpZiAobm9uY2UpIHtcblx0XHRcdG9wdGlvbnMuYXR0cnMubm9uY2UgPSBub25jZTtcblx0XHR9XG5cdH1cblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdGlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0b3B0aW9ucy5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuXHR9XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBnZXROb25jZSgpIHtcblx0aWYgKHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHJldHVybiBfX3dlYnBhY2tfbm9uY2VfXztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7XG5cblx0Ly8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzXG5cdGlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7XG5cdCAgICByZXN1bHQgPSB0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbidcblx0XHQgPyBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKSBcblx0XHQgOiBvcHRpb25zLnRyYW5zZm9ybS5kZWZhdWx0KG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfVGFibGVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9UYWJsZUNvbnRleHRcIikpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAndGFibGUnLFxuICAgICAgZm9udEZhbWlseTogdGhlbWUudHlwb2dyYXBoeS5mb250RmFtaWx5LFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLFxuICAgICAgYm9yZGVyU3BhY2luZzogMFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBUYWJsZShwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBwYWRkaW5nID0gcHJvcHMucGFkZGluZyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJwYWRkaW5nXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYmxlQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9XG4gIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKSk7XG59XG5cblRhYmxlLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSB0YWJsZSwgbm9ybWFsbHkgYFRhYmxlSGVhZGAgYW5kIGBUYWJsZUJvZHlgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogQWxsb3dzIFRhYmxlQ2VsbHMgdG8gaW5oZXJpdCBwYWRkaW5nIG9mIHRoZSBUYWJsZS5cbiAgICovXG4gIHBhZGRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlZmF1bHQnLCAnY2hlY2tib3gnLCAnZGVuc2UnLCAnbm9uZSddKVxufSA6IHt9O1xuVGFibGUuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICd0YWJsZScsXG4gIHBhZGRpbmc6ICdkZWZhdWx0J1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGUnXG59KShUYWJsZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9UYWJsZWx2bDJDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dFwiKSk7XG5cbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAndGFibGUtaGVhZGVyLWdyb3VwJ1xuICB9XG59O1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFRhYmxlSGVhZChwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYmxlbHZsMkNvbnRleHQuZGVmYXVsdC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB7XG4gICAgICB2YXJpYW50OiAnaGVhZCdcbiAgICB9XG4gIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSlcbiAgfSwgb3RoZXIpKSk7XG59XG5cblRhYmxlSGVhZC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LCBub3JtYWxseSBgVGFibGVSb3dgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSlcbn0gOiB7fTtcblRhYmxlSGVhZC5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3RoZWFkJ1xufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVIZWFkJ1xufSkoVGFibGVIZWFkKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1RhYmxlbHZsMkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0XCIpKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1yb3cnLFxuICAgICAgaGVpZ2h0OiA0OCxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgLy8gV2UgZGlzYWJsZSB0aGUgZm9jdXMgcmluZyBmb3IgbW91c2UsIHRvdWNoIGFuZCBrZXlib2FyZCB1c2Vycy5cbiAgICAgIG91dGxpbmU6ICdub25lJyxcbiAgICAgICcmJHNlbGVjdGVkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyAvLyBncmV5WzEwMF1cbiAgICAgICAgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjA4KSdcbiAgICAgIH0sXG4gICAgICAnJiRob3Zlcjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjA3KScgLy8gZ3JleVsyMDBdXG4gICAgICAgIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xNCknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHNlbGVjdGVkPXt0cnVlfWAuICovXG4gICAgc2VsZWN0ZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaG92ZXI9e3RydWV9YC4gKi9cbiAgICBob3Zlcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRhYmxlIHZhcmlhbnQgPSAnaGVhZCcuICovXG4gICAgaGVhZDoge1xuICAgICAgaGVpZ2h0OiA1NlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRhYmxlIHZhcmlhbnQgPSAnZm9vdGVyJy4gKi9cbiAgICBmb290ZXI6IHtcbiAgICAgIGhlaWdodDogNTZcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBXaWxsIGF1dG9tYXRpY2FsbHkgc2V0IGR5bmFtaWMgcm93IGhlaWdodFxuICogYmFzZWQgb24gdGhlIG1hdGVyaWFsIHRhYmxlIGVsZW1lbnQgcGFyZW50IChoZWFkLCBib2R5LCBldGMpLlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFRhYmxlUm93KHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBob3ZlciA9IHByb3BzLmhvdmVyLFxuICAgICAgc2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJob3ZlclwiLCBcInNlbGVjdGVkXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1RhYmxlbHZsMkNvbnRleHQuZGVmYXVsdC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRhYmxlbHZsMikge1xuICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuaGVhZCwgdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb290ZXIsIHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2Zvb3RlcicpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ob3ZlciwgaG92ZXIpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5zZWxlY3RlZCwgc2VsZWN0ZWQpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH0sIG90aGVyKSk7XG4gIH0pO1xufVxuXG5UYWJsZVJvdy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgdmFsaWQgPHRyPiBjaGlsZHJlbiBzdWNoIGFzIGBUYWJsZUNlbGxgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRhYmxlIHJvdyB3aWxsIHNoYWRlIG9uIGhvdmVyLlxuICAgKi9cbiAgaG92ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0YWJsZSByb3cgd2lsbCBoYXZlIHRoZSBzZWxlY3RlZCBzaGFkaW5nLlxuICAgKi9cbiAgc2VsZWN0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5UYWJsZVJvdy5kZWZhdWx0UHJvcHMgPSB7XG4gIGNvbXBvbmVudDogJ3RyJyxcbiAgaG92ZXI6IGZhbHNlLFxuICBzZWxlY3RlZDogZmFsc2Vcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRhYmxlUm93J1xufSkoVGFibGVSb3cpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9oZWxwZXJzXCIpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKFwiLi4vc3R5bGVzL2NvbG9yTWFuaXB1bGF0b3JcIik7XG5cbnZhciBfVGFibGVDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVGFibGUvVGFibGVDb250ZXh0XCIpKTtcblxudmFyIF9UYWJsZWx2bDJDb250ZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vVGFibGUvVGFibGVsdmwyQ29udGV4dFwiKSk7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdpbmhlcml0JyxcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGEgcmVuZGVyaW5nIGJ1ZyB3aXRoIHNwYW5uZWQgY29sdW1ucyBpbiBDaHJvbWUgNjIuMC5cbiAgICAgIC8vIFJlbW92ZXMgdGhlIGFscGhhIChzZXRzIGl0IHRvIDEpLCBhbmQgbGlnaHRlbnMgb3IgZGFya2VucyB0aGUgdGhlbWUgY29sb3IuXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkXFxuICAgIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAoMCwgX2NvbG9yTWFuaXB1bGF0b3IubGlnaHRlbikoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMSksIDAuODgpIDogKDAsIF9jb2xvck1hbmlwdWxhdG9yLmRhcmtlbikoKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRoZW1lLnBhbGV0dGUuZGl2aWRlciwgMSksIDAuNjgpKSxcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgICAgcGFkZGluZzogJzRweCA1NnB4IDRweCAyNHB4JyxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogMjRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImhlYWRcImAgb3IgYGNvbnRleHQudGFibGUuaGVhZGAuICovXG4gICAgaGVhZDoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodE1lZGl1bVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keVwiYCBvciBgY29udGV4dC50YWJsZS5ib2R5YC4gKi9cbiAgICBib2R5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEzKSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodFJlZ3VsYXJcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImZvb3RlclwiYCBvciBgY29udGV4dC50YWJsZS5mb290ZXJgLiAqL1xuICAgIGZvb3Rlcjoge1xuICAgICAgYm9yZGVyQm90dG9tOiAwLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnksXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBudW1lcmljPXt0cnVlfWAuICovXG4gICAgbnVtZXJpYzoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnLFxuICAgICAgZmxleERpcmVjdGlvbjogJ3Jvdy1yZXZlcnNlJyAvLyBjYW4gYmUgZHluYW1pY2FsbHkgaW5oZXJpdGVkIGF0IHJ1bnRpbWUgYnkgY29udGVudHNcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYWRkaW5nPVwiZGVuc2VcImAuICovXG4gICAgcGFkZGluZ0RlbnNlOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDI0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhZGRpbmc9XCJjaGVja2JveFwiYC4gKi9cbiAgICBwYWRkaW5nQ2hlY2tib3g6IHtcbiAgICAgIHBhZGRpbmc6ICcwIDEycHgnLFxuICAgICAgJyY6bGFzdC1jaGlsZCc6IHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiAxMlxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwYWRkaW5nPVwibm9uZVwiYC4gKi9cbiAgICBwYWRkaW5nTm9uZToge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gVGFibGVDZWxsKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgc29ydERpcmVjdGlvbiA9IHByb3BzLnNvcnREaXJlY3Rpb24sXG4gICAgICBudW1lcmljID0gcHJvcHMubnVtZXJpYyxcbiAgICAgIHBhZGRpbmdQcm9wID0gcHJvcHMucGFkZGluZyxcbiAgICAgIHNjb3BlUHJvcCA9IHByb3BzLnNjb3BlLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzb3J0RGlyZWN0aW9uXCIsIFwibnVtZXJpY1wiLCBcInBhZGRpbmdcIiwgXCJzY29wZVwiLCBcInZhcmlhbnRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVGFibGVDb250ZXh0LmRlZmF1bHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0YWJsZSkge1xuICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UYWJsZWx2bDJDb250ZXh0LmRlZmF1bHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0YWJsZWx2bDIpIHtcbiAgICAgIHZhciBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIENvbXBvbmVudDtcblxuICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICBDb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBDb21wb25lbnQgPSB0YWJsZWx2bDIgJiYgdGFibGVsdmwyLnZhcmlhbnQgPT09ICdoZWFkJyA/ICd0aCcgOiAndGQnO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2NvcGUgPSBzY29wZVByb3A7XG5cbiAgICAgIGlmICghc2NvcGUgJiYgdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpIHtcbiAgICAgICAgc2NvcGUgPSAnY29sJztcbiAgICAgIH1cblxuICAgICAgdmFyIHBhZGRpbmcgPSBwYWRkaW5nUHJvcCB8fCAodGFibGUgJiYgdGFibGUucGFkZGluZyA/IHRhYmxlLnBhZGRpbmcgOiAnZGVmYXVsdCcpO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5oZWFkLCB2YXJpYW50ID8gdmFyaWFudCA9PT0gJ2hlYWQnIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnaGVhZCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5ib2R5LCB2YXJpYW50ID8gdmFyaWFudCA9PT0gJ2JvZHknIDogdGFibGVsdmwyICYmIHRhYmxlbHZsMi52YXJpYW50ID09PSAnYm9keScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mb290ZXIsIHZhcmlhbnQgPyB2YXJpYW50ID09PSAnZm9vdGVyJyA6IHRhYmxlbHZsMiAmJiB0YWJsZWx2bDIudmFyaWFudCA9PT0gJ2Zvb3RlcicpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5udW1lcmljLCBudW1lcmljKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJwYWRkaW5nXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShwYWRkaW5nKSldLCBwYWRkaW5nICE9PSAnZGVmYXVsdCcpLCBfY2xhc3NOYW1lcyksIGNsYXNzTmFtZVByb3ApO1xuICAgICAgdmFyIGFyaWFTb3J0ID0gbnVsbDtcblxuICAgICAgaWYgKHNvcnREaXJlY3Rpb24pIHtcbiAgICAgICAgYXJpYVNvcnQgPSBzb3J0RGlyZWN0aW9uID09PSAnYXNjJyA/ICdhc2NlbmRpbmcnIDogJ2Rlc2NlbmRpbmcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgXCJhcmlhLXNvcnRcIjogYXJpYVNvcnQsXG4gICAgICAgIHNjb3BlOiBzY29wZVxuICAgICAgfSwgb3RoZXIpLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5UYWJsZUNlbGwucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIHRhYmxlIGNlbGwgY29udGVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjb250ZW50IHdpbGwgYWxpZ24gdG8gdGhlIHJpZ2h0LlxuICAgKlxuICAgKiBNb25ldGFyeSBvciBnZW5lcmFsbHkgbnVtYmVyIGZpZWxkcyBzaG91bGQgYmUgcmlnaHQgYWxpZ25lZCBhcyB0aGF0IGFsbG93c1xuICAgKiB5b3UgdG8gYWRkIHRoZW0gdXAgcXVpY2tseSBpbiB5b3VyIGhlYWQgd2l0aG91dCBoYXZpbmcgdG8gd29ycnkgYWJvdXQgZGVjaW1hbHMuXG4gICAqL1xuICBudW1lcmljOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogU2V0cyB0aGUgcGFkZGluZyBhcHBsaWVkIHRvIHRoZSBjZWxsLlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgVGFibGUgcGFyZW50IGNvbXBvbmVudCBzZXQgdGhlIHZhbHVlLlxuICAgKi9cbiAgcGFkZGluZzogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVmYXVsdCcsICdjaGVja2JveCcsICdkZW5zZScsICdub25lJ10pLFxuXG4gIC8qKlxuICAgKiBTZXQgc2NvcGUgYXR0cmlidXRlLlxuICAgKi9cbiAgc2NvcGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFNldCBhcmlhLXNvcnQgZGlyZWN0aW9uLlxuICAgKi9cbiAgc29ydERpcmVjdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYXNjJywgJ2Rlc2MnLCBmYWxzZV0pLFxuXG4gIC8qKlxuICAgKiBTcGVjaWZ5IHRoZSBjZWxsIHR5cGUuXG4gICAqIEJ5IGRlZmF1bHQsIHRoZSBUYWJsZUhlYWQsIFRhYmxlQm9keSBvciBUYWJsZUZvb3RlciBwYXJlbnQgY29tcG9uZW50IHNldCB0aGUgdmFsdWUuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydoZWFkJywgJ2JvZHknLCAnZm9vdGVyJ10pXG59IDoge307XG5UYWJsZUNlbGwuZGVmYXVsdFByb3BzID0ge1xuICBudW1lcmljOiBmYWxzZVxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpVGFibGVDZWxsJ1xufSkoVGFibGVDZWxsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX1RhYmxlbHZsMkNvbnRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9UYWJsZS9UYWJsZWx2bDJDb250ZXh0XCIpKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICd0YWJsZS1yb3ctZ3JvdXAnXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gVGFibGVCb2R5KHByb3BzKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIl0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVGFibGVsdmwyQ29udGV4dC5kZWZhdWx0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHtcbiAgICAgIHZhcmlhbnQ6ICdib2R5J1xuICAgIH1cbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICB9LCBvdGhlcikpKTtcbn1cblxuVGFibGVCb2R5LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQsIG5vcm1hbGx5IGBUYWJsZVJvd2AuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKVxufSA6IHt9O1xuVGFibGVCb2R5LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAndGJvZHknXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlUYWJsZUJvZHknXG59KShUYWJsZUJvZHkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfd2FybmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIndhcm5pbmdcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX0lucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRcIikpO1xuXG52YXIgX0ZpbGxlZElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vRmlsbGVkSW5wdXRcIikpO1xuXG52YXIgX091dGxpbmVkSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9PdXRsaW5lZElucHV0XCIpKTtcblxudmFyIF9JbnB1dExhYmVsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRMYWJlbFwiKSk7XG5cbnZhciBfRm9ybUNvbnRyb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtQ29udHJvbFwiKSk7XG5cbnZhciBfRm9ybUhlbHBlclRleHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtSGVscGVyVGV4dFwiKSk7XG5cbnZhciBfU2VsZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vU2VsZWN0XCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBGb3JtQ29udHJvbFxudmFyIHZhcmlhbnRDb21wb25lbnQgPSB7XG4gIHN0YW5kYXJkOiBfSW5wdXQuZGVmYXVsdCxcbiAgZmlsbGVkOiBfRmlsbGVkSW5wdXQuZGVmYXVsdCxcbiAgb3V0bGluZWQ6IF9PdXRsaW5lZElucHV0LmRlZmF1bHRcbn07XG4vKipcbiAqIFRoZSBgVGV4dEZpZWxkYCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgZm9yIHRoZSBtb3N0IGNvbW1vbiBjYXNlcyAoODAlKS5cbiAqIEl0IGNhbm5vdCBiZSBhbGwgdGhpbmdzIHRvIGFsbCBwZW9wbGUsIG90aGVyd2lzZSB0aGUgQVBJIHdvdWxkIGdyb3cgb3V0IG9mIGNvbnRyb2wuXG4gKlxuICogIyMgQWR2YW5jZWQgQ29uZmlndXJhdGlvblxuICpcbiAqIEl0J3MgaW1wb3J0YW50IHRvIHVuZGVyc3RhbmQgdGhhdCB0aGUgdGV4dCBmaWVsZCBpcyBhIHNpbXBsZSBhYnN0cmFjdGlvblxuICogb24gdG9wIG9mIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqIC0gW0Zvcm1Db250cm9sXSgvYXBpL2Zvcm0tY29udHJvbC8pXG4gKiAtIFtJbnB1dExhYmVsXSgvYXBpL2lucHV0LWxhYmVsLylcbiAqIC0gW0lucHV0XSgvYXBpL2lucHV0LylcbiAqIC0gW0Zvcm1IZWxwZXJUZXh0XSgvYXBpL2Zvcm0taGVscGVyLXRleHQvKVxuICpcbiAqIElmIHlvdSB3aXNoIHRvIGFsdGVyIHRoZSBwcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIG5hdGl2ZSBpbnB1dCwgeW91IGNhbiBkbyBzbyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGpzeFxuICogY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAqICAgc3RlcDogMzAwLFxuICogfTtcbiAqXG4gKiByZXR1cm4gPFRleHRGaWVsZCBpZD1cInRpbWVcIiB0eXBlPVwidGltZVwiIGlucHV0UHJvcHM9e2lucHV0UHJvcHN9IC8+O1xuICogYGBgXG4gKlxuICogRm9yIGFkdmFuY2VkIGNhc2VzLCBwbGVhc2UgbG9vayBhdCB0aGUgc291cmNlIG9mIFRleHRGaWVsZCBieSBjbGlja2luZyBvbiB0aGVcbiAqIFwiRWRpdCB0aGlzIHBhZ2VcIiBidXR0b24gYWJvdmUuIENvbnNpZGVyIGVpdGhlcjpcbiAqIC0gdXNpbmcgdGhlIHVwcGVyIGNhc2UgcHJvcHMgZm9yIHBhc3NpbmcgdmFsdWVzIGRpcmVjdGx5IHRvIHRoZSBjb21wb25lbnRzXG4gKiAtIHVzaW5nIHRoZSB1bmRlcmx5aW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgYXMgc2hvd24gaW4gdGhlIGRlbW9zXG4gKi9cblxudmFyIFRleHRGaWVsZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUZXh0RmllbGQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRleHRGaWVsZChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFRleHRGaWVsZCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRleHRGaWVsZCkuY2FsbCh0aGlzLCBwcm9wcykpO1xuICAgIF90aGlzLmxhYmVsUmVmID0gX3JlYWN0LmRlZmF1bHQuY3JlYXRlUmVmKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoVGV4dEZpZWxkLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcpIHtcbiAgICAgICAgdGhpcy5sYWJlbE5vZGUgPSBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmxhYmVsUmVmLmN1cnJlbnQpO1xuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9Db21wbGV0ZSA9IF90aGlzJHByb3BzLmF1dG9Db21wbGV0ZSxcbiAgICAgICAgICBhdXRvRm9jdXMgPSBfdGhpcyRwcm9wcy5hdXRvRm9jdXMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlID0gX3RoaXMkcHJvcHMuZGVmYXVsdFZhbHVlLFxuICAgICAgICAgIGVycm9yID0gX3RoaXMkcHJvcHMuZXJyb3IsXG4gICAgICAgICAgRm9ybUhlbHBlclRleHRQcm9wcyA9IF90aGlzJHByb3BzLkZvcm1IZWxwZXJUZXh0UHJvcHMsXG4gICAgICAgICAgZnVsbFdpZHRoID0gX3RoaXMkcHJvcHMuZnVsbFdpZHRoLFxuICAgICAgICAgIGhlbHBlclRleHQgPSBfdGhpcyRwcm9wcy5oZWxwZXJUZXh0LFxuICAgICAgICAgIGlkID0gX3RoaXMkcHJvcHMuaWQsXG4gICAgICAgICAgSW5wdXRMYWJlbFByb3BzID0gX3RoaXMkcHJvcHMuSW5wdXRMYWJlbFByb3BzLFxuICAgICAgICAgIGlucHV0UHJvcHMgPSBfdGhpcyRwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgICAgIElucHV0UHJvcHMgPSBfdGhpcyRwcm9wcy5JbnB1dFByb3BzLFxuICAgICAgICAgIGlucHV0UmVmID0gX3RoaXMkcHJvcHMuaW5wdXRSZWYsXG4gICAgICAgICAgbGFiZWwgPSBfdGhpcyRwcm9wcy5sYWJlbCxcbiAgICAgICAgICBtdWx0aWxpbmUgPSBfdGhpcyRwcm9wcy5tdWx0aWxpbmUsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWUsXG4gICAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMub25CbHVyLFxuICAgICAgICAgIG9uQ2hhbmdlID0gX3RoaXMkcHJvcHMub25DaGFuZ2UsXG4gICAgICAgICAgb25Gb2N1cyA9IF90aGlzJHByb3BzLm9uRm9jdXMsXG4gICAgICAgICAgcGxhY2Vob2xkZXIgPSBfdGhpcyRwcm9wcy5wbGFjZWhvbGRlcixcbiAgICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzLnJlcXVpcmVkLFxuICAgICAgICAgIHJvd3MgPSBfdGhpcyRwcm9wcy5yb3dzLFxuICAgICAgICAgIHJvd3NNYXggPSBfdGhpcyRwcm9wcy5yb3dzTWF4LFxuICAgICAgICAgIHNlbGVjdCA9IF90aGlzJHByb3BzLnNlbGVjdCxcbiAgICAgICAgICBTZWxlY3RQcm9wcyA9IF90aGlzJHByb3BzLlNlbGVjdFByb3BzLFxuICAgICAgICAgIHR5cGUgPSBfdGhpcyRwcm9wcy50eXBlLFxuICAgICAgICAgIHZhbHVlID0gX3RoaXMkcHJvcHMudmFsdWUsXG4gICAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzLnZhcmlhbnQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShfdGhpcyRwcm9wcywgW1wiYXV0b0NvbXBsZXRlXCIsIFwiYXV0b0ZvY3VzXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJlcnJvclwiLCBcIkZvcm1IZWxwZXJUZXh0UHJvcHNcIiwgXCJmdWxsV2lkdGhcIiwgXCJoZWxwZXJUZXh0XCIsIFwiaWRcIiwgXCJJbnB1dExhYmVsUHJvcHNcIiwgXCJpbnB1dFByb3BzXCIsIFwiSW5wdXRQcm9wc1wiLCBcImlucHV0UmVmXCIsIFwibGFiZWxcIiwgXCJtdWx0aWxpbmVcIiwgXCJuYW1lXCIsIFwib25CbHVyXCIsIFwib25DaGFuZ2VcIiwgXCJvbkZvY3VzXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJyZXF1aXJlZFwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwic2VsZWN0XCIsIFwiU2VsZWN0UHJvcHNcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KSghc2VsZWN0IHx8IEJvb2xlYW4oY2hpbGRyZW4pLCAnTWF0ZXJpYWwtVUk6IGBjaGlsZHJlbmAgbXVzdCBiZSBwYXNzZWQgd2hlbiB1c2luZyB0aGUgYFRleHRGaWVsZGAgY29tcG9uZW50IHdpdGggYHNlbGVjdGAuJykgOiB2b2lkIDA7XG4gICAgICB2YXIgSW5wdXRNb3JlID0ge307XG5cbiAgICAgIGlmICh2YXJpYW50ID09PSAnb3V0bGluZWQnKSB7XG4gICAgICAgIGlmIChJbnB1dExhYmVsUHJvcHMgJiYgdHlwZW9mIElucHV0TGFiZWxQcm9wcy5zaHJpbmsgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgSW5wdXRNb3JlLm5vdGNoZWQgPSBJbnB1dExhYmVsUHJvcHMuc2hyaW5rO1xuICAgICAgICB9XG5cbiAgICAgICAgSW5wdXRNb3JlLmxhYmVsV2lkdGggPSB0aGlzLmxhYmVsTm9kZSAmJiB0aGlzLmxhYmVsTm9kZS5vZmZzZXRXaWR0aCB8fCAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGVscGVyVGV4dElkID0gaGVscGVyVGV4dCAmJiBpZCA/IFwiXCIuY29uY2F0KGlkLCBcIi1oZWxwZXItdGV4dFwiKSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBJbnB1dENvbXBvbmVudCA9IHZhcmlhbnRDb21wb25lbnRbdmFyaWFudF07XG5cbiAgICAgIHZhciBJbnB1dEVsZW1lbnQgPSBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KElucHV0Q29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgYXV0b0NvbXBsZXRlOiBhdXRvQ29tcGxldGUsXG4gICAgICAgIGF1dG9Gb2N1czogYXV0b0ZvY3VzLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZnVsbFdpZHRoOiBmdWxsV2lkdGgsXG4gICAgICAgIG11bHRpbGluZTogbXVsdGlsaW5lLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICByb3dzTWF4OiByb3dzTWF4LFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgaW5wdXRSZWY6IGlucHV0UmVmLFxuICAgICAgICBvbkJsdXI6IG9uQmx1cixcbiAgICAgICAgb25DaGFuZ2U6IG9uQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzOiBvbkZvY3VzLFxuICAgICAgICBwbGFjZWhvbGRlcjogcGxhY2Vob2xkZXIsXG4gICAgICAgIGlucHV0UHJvcHM6IGlucHV0UHJvcHNcbiAgICAgIH0sIElucHV0TW9yZSwgSW5wdXRQcm9wcykpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRm9ybUNvbnRyb2wuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBoZWxwZXJUZXh0SWQsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgIGZ1bGxXaWR0aDogZnVsbFdpZHRoLFxuICAgICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICAgIHZhcmlhbnQ6IHZhcmlhbnRcbiAgICAgIH0sIG90aGVyKSwgbGFiZWwgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSW5wdXRMYWJlbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgaHRtbEZvcjogaWQsXG4gICAgICAgIHJlZjogdGhpcy5sYWJlbFJlZlxuICAgICAgfSwgSW5wdXRMYWJlbFByb3BzKSwgbGFiZWwpLCBzZWxlY3QgPyBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9TZWxlY3QuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5wdXQ6IElucHV0RWxlbWVudFxuICAgICAgfSwgU2VsZWN0UHJvcHMpLCBjaGlsZHJlbikgOiBJbnB1dEVsZW1lbnQsIGhlbHBlclRleHQgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfRm9ybUhlbHBlclRleHQuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGlkOiBoZWxwZXJUZXh0SWRcbiAgICAgIH0sIEZvcm1IZWxwZXJUZXh0UHJvcHMpLCBoZWxwZXJUZXh0KSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBUZXh0RmllbGQ7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblRleHRGaWVsZC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IGhlcmU6XG4gICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBgSW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BGb3JtSGVscGVyVGV4dGBdKC9hcGkvZm9ybS1oZWxwZXItdGV4dC8pIGVsZW1lbnQuXG4gICAqL1xuICBGb3JtSGVscGVyVGV4dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBoZWxwZXIgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgaGVscGVyVGV4dDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBtYWtlIGBsYWJlbGAgYW5kIGBoZWxwZXJUZXh0YCBhY2Nlc3NpYmxlIGZvciBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIFtgSW5wdXRMYWJlbGBdKC9hcGkvaW5wdXQtbGFiZWwvKSBlbGVtZW50LlxuICAgKi9cbiAgSW5wdXRMYWJlbFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIElucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgbmF0aXZlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIGxhYmVsIGNvbnRlbnQuXG4gICAqL1xuICBsYWJlbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAgb3IgYG5vcm1hbGAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcgb2YgdGhpcyBhbmQgY29udGFpbmVkIGNvbXBvbmVudHMuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ25vbmUnLCAnZGVuc2UnLCAnbm9ybWFsJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGEgdGV4dGFyZWEgZWxlbWVudCB3aWxsIGJlIHJlbmRlcmVkIGluc3RlYWQgb2YgYW4gaW5wdXQuXG4gICAqL1xuICBtdWx0aWxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgZGlzcGxheWVkIGFzIHJlcXVpcmVkIGFuZCB0aGUgaW5wdXQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIGBTZWxlY3RgIGVsZW1lbnQgd2hpbGUgcGFzc2luZyB0aGUgYElucHV0YCBlbGVtZW50IHRvIGBTZWxlY3RgIGFzIGBpbnB1dGAgcGFyYW1ldGVyLlxuICAgKiBJZiB0aGlzIG9wdGlvbiBpcyBzZXQgeW91IG11c3QgcGFzcyB0aGUgb3B0aW9ucyBvZiB0aGUgc2VsZWN0IGFzIGNoaWxkcmVuLlxuICAgKi9cbiAgc2VsZWN0OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYFNlbGVjdGBdKC9hcGkvc2VsZWN0LykgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBUeXBlIGF0dHJpYnV0ZSBvZiB0aGUgYElucHV0YCBlbGVtZW50LiBJdCBzaG91bGQgYmUgYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBgSW5wdXRgIGVsZW1lbnQsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbF0pKV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB7fTtcblRleHRGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgc2VsZWN0OiBmYWxzZSxcbiAgdmFyaWFudDogJ3N0YW5kYXJkJ1xufTtcbnZhciBfZGVmYXVsdCA9IFRleHRGaWVsZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfSW5wdXRCYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRCYXNlXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IElucHV0QmFzZVxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgbGlnaHQgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCc7XG4gIHZhciBib3R0b21MaW5lQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuNDIpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyknO1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiB0aGUgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBgRm9ybUNvbnRyb2xgLiAqL1xuICAgIGZvcm1Db250cm9sOiB7XG4gICAgICAnbGFiZWwgKyAmJzoge1xuICAgICAgICBtYXJnaW5Ub3A6IDE2XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkLiAqL1xuICAgIGZvY3VzZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlVW5kZXJsaW5lPXtmYWxzZX1gLiAqL1xuICAgIHVuZGVybGluZToge1xuICAgICAgJyY6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIycHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUucHJpbWFyeVtsaWdodCA/ICdkYXJrJyA6ICdsaWdodCddKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAvLyBEb2luZyB0aGUgb3RoZXIgd2F5IGFyb3VuZCBjcmFzaCBvbiBJRSAxMSBcIicnXCIgaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2lzc3Vlcy8yNDJcbiAgICAgICAgY29udGVudDogJ1wiXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgwKScsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkOmFmdGVyJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknXG4gICAgICB9LFxuICAgICAgJyYkZXJyb3I6YWZ0ZXInOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW4sXG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlWCgxKScgLy8gZXJyb3IgaXMgYWx3YXlzIHVuZGVybGluZWQgaW4gcmVkXG5cbiAgICAgIH0sXG4gICAgICAnJjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KGJvdHRvbUxpbmVDb2xvciksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlxcXFwwMGEwXCInLFxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnYm9yZGVyLWJvdHRvbS1jb2xvcicsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgICB9KSxcbiAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnIC8vIFRyYW5zcGFyZW50IHRvIHRoZSBob3ZlciBzdHlsZS5cblxuICAgICAgfSxcbiAgICAgICcmOmhvdmVyOm5vdCgkZGlzYWJsZWQpOm5vdCgkZm9jdXNlZCk6bm90KCRlcnJvcik6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSksXG4gICAgICAgIC8vIFJlc2V0IG9uIHRvdWNoIGRldmljZXMsIGl0IGRvZXNuJ3QgYWRkIHNwZWNpZmljaXR5XG4gICAgICAgICdAbWVkaWEgKGhvdmVyOiBub25lKSc6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZDpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggZG90dGVkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgbXVsdGlsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICAgIGZ1bGxXaWR0aDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbXVsdGlsaW5lPXt0cnVlfWAuICovXG4gICAgaW5wdXRNdWx0aWxpbmU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgdHlwZWAgaXMgbm90IFwidGV4dFwiYC4gKi9cbiAgICBpbnB1dFR5cGU6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgdHlwZT1cInNlYXJjaFwiYC4gKi9cbiAgICBpbnB1dFR5cGVTZWFyY2g6IHt9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gSW5wdXQocHJvcHMpIHtcbiAgdmFyIGRpc2FibGVVbmRlcmxpbmUgPSBwcm9wcy5kaXNhYmxlVW5kZXJsaW5lLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJkaXNhYmxlVW5kZXJsaW5lXCIsIFwiY2xhc3Nlc1wiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbnB1dEJhc2UuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NlczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY2xhc3Nlcywge1xuICAgICAgcm9vdDogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoe30sIGNsYXNzZXMudW5kZXJsaW5lLCAhZGlzYWJsZVVuZGVybGluZSkpLFxuICAgICAgdW5kZXJsaW5lOiBudWxsXG4gICAgfSlcbiAgfSwgb3RoZXIpKTtcbn1cblxuSW5wdXQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBwcm9wZXJ0eSBoZWxwcyB1c2VycyB0byBmaWxsIGZvcm1zIGZhc3RlciwgZXNwZWNpYWxseSBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICogVGhlIG5hbWUgY2FuIGJlIGNvbmZ1c2luZywgYXMgaXQncyBtb3JlIGxpa2UgYW4gYXV0b2ZpbGwuXG4gICAqIFlvdSBjYW4gbGVhcm4gbW9yZSBhYm91dCBpdCBoZXJlOlxuICAgKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNhdXRvZmlsbFxuICAgKi9cbiAgYXV0b0NvbXBsZXRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIGZvY3VzZWQgZHVyaW5nIHRoZSBmaXJzdCBtb3VudC5cbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSB3cmFwcGVyIGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGlucHV0IHZhbHVlLCB1c2VmdWwgd2hlbiBub3QgY29udHJvbGxpbmcgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGRlZmF1bHRWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIG5vdCBoYXZlIGFuIHVuZGVybGluZS5cbiAgICovXG4gIGRpc2FibGVVbmRlcmxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBlbmRBZG9ybm1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGluZGljYXRlIGFuIGVycm9yLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpZDogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgbmF0aXZlIGlucHV0LlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dENvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogQXR0cmlidXRlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgaW5wdXQgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqIFlvdSBjYW4gcHVsbCBvdXQgdGhlIG5ldyB2YWx1ZSBieSBhY2Nlc3NpbmcgYGV2ZW50LnRhcmdldC52YWx1ZWAuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSBzaG9ydCBoaW50IGRpc3BsYXllZCBpbiB0aGUgaW5wdXQgYmVmb3JlIHRoZSB1c2VyIGVudGVycyBhIHZhbHVlLlxuICAgKi9cbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEl0IHByZXZlbnRzIHRoZSB1c2VyIGZyb20gY2hhbmdpbmcgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZFxuICAgKiAobm90IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZmllbGQpLlxuICAgKi9cbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIGJlIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogU3RhcnQgYElucHV0QWRvcm5tZW50YCBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBzdGFydEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgdGhlIGlucHV0IGVsZW1lbnQuIEl0IHNob3VsZCBiZSBhIHZhbGlkIEhUTUw1IGlucHV0IHR5cGUuXG4gICAqL1xuICB0eXBlOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdmFsdWUsIHJlcXVpcmVkIGZvciBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbF0pKV0pXG59IDoge307XG5fSW5wdXRCYXNlLmRlZmF1bHQuZGVmYXVsdFByb3BzID0ge1xuICBmdWxsV2lkdGg6IGZhbHNlLFxuICBpbnB1dENvbXBvbmVudDogJ2lucHV0JyxcbiAgbXVsdGlsaW5lOiBmYWxzZSxcbiAgdHlwZTogJ3RleHQnXG59O1xuSW5wdXQubXVpTmFtZSA9ICdJbnB1dCc7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0J1xufSkoSW5wdXQpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1ldmVudC1saXN0ZW5lclwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9yZWFjdEhlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvcmVhY3RIZWxwZXJzXCIpO1xuXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzID4gM2tiLlxudmFyIFJPV1NfSEVJR0hUID0gMTk7XG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICByb290OiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gYmVjYXVzZSB0aGUgc2hhZG93IGhhcyBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB3aWR0aDogJzEwMCUnXG4gIH0sXG4gIHRleHRhcmVhOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICByZXNpemU6ICdub25lJyxcbiAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgcGFkZGluZzogMCxcbiAgICBjdXJzb3I6ICdpbmhlcml0JyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBsaW5lSGVpZ2h0OiAnaW5oZXJpdCcsXG4gICAgYm9yZGVyOiAnbm9uZScsXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGJhY2tncm91bmQ6ICd0cmFuc3BhcmVudCdcbiAgfSxcbiAgc2hhZG93OiB7XG4gICAgLy8gT3ZlcmZsb3cgYWxzbyBuZWVkZWQgdG8gaGVyZSB0byByZW1vdmUgdGhlIGV4dHJhIHJvd1xuICAgIC8vIGFkZGVkIHRvIHRleHRhcmVhcyBpbiBGaXJlZm94LlxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAvLyBWaXNpYmlsaXR5IG5lZWRlZCB0byBoaWRlIHRoZSBleHRyYSB0ZXh0IGFyZWEgb24gaXBhZHNcbiAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnXG4gIH1cbn07XG4vKipcbiAqIEBpZ25vcmUgLSBpbnRlcm5hbCBjb21wb25lbnQuXG4gKi9cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbnZhciBUZXh0YXJlYSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShUZXh0YXJlYSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGV4dGFyZWEocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBUZXh0YXJlYSk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFRleHRhcmVhKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmhhbmRsZVJlZklucHV0ID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuaW5wdXRSZWYgPSByZWY7XG4gICAgICAoMCwgX3JlYWN0SGVscGVycy5zZXRSZWYpKF90aGlzLnByb3BzLnRleHRhcmVhUmVmLCByZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZWZTaW5nbGVsaW5lU2hhZG93ID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuc2luZ2xlbGluZVNoYWRvd1JlZiA9IHJlZjtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlUmVmU2hhZG93ID0gZnVuY3Rpb24gKHJlZikge1xuICAgICAgX3RoaXMuc2hhZG93UmVmID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgICBpZiAoIV90aGlzLmlzQ29udHJvbGxlZCkge1xuICAgICAgICAvLyBUaGUgY29tcG9uZW50IGlzIG5vdCBjb250cm9sbGVkLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgc2hhbGxvdyB2YWx1ZS5cbiAgICAgICAgX3RoaXMuc2hhZG93UmVmLnZhbHVlID0gX3RoaXMudmFsdWU7XG5cbiAgICAgICAgX3RoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaXNDb250cm9sbGVkID0gcHJvcHMudmFsdWUgIT0gbnVsbDsgLy8gPElucHV0PiBleHBlY3RzIHRoZSBjb21wb25lbnRzIGl0IHJlbmRlcnMgdG8gcmVzcG9uZCB0byAndmFsdWUnXG4gICAgLy8gc28gdGhhdCBpdCBjYW4gY2hlY2sgd2hldGhlciB0aGV5IGFyZSBmaWxsZWQuXG5cbiAgICBfdGhpcy52YWx1ZSA9IHByb3BzLnZhbHVlIHx8IHByb3BzLmRlZmF1bHRWYWx1ZSB8fCAnJztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlaWdodDogTnVtYmVyKHByb3BzLnJvd3MpICogUk9XU19IRUlHSFRcbiAgICB9O1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSAoMCwgX2RlYm91bmNlLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMuc3luY0hlaWdodFdpdGhTaGFkb3coKTtcbiAgICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShUZXh0YXJlYSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnN5bmNIZWlnaHRXaXRoU2hhZG93KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnN5bmNIZWlnaHRXaXRoU2hhZG93KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3luY0hlaWdodFdpdGhTaGFkb3dcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3luY0hlaWdodFdpdGhTaGFkb3coKSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzOyAvLyBHdWFyZGluZyBmb3IgKipicm9rZW4qKiBzaGFsbG93IHJlbmRlcmluZyBtZXRob2QgdGhhdCBjYWxsIGNvbXBvbmVudERpZE1vdW50XG4gICAgICAvLyBidXQgZG9lc24ndCBoYW5kbGUgcmVmcyBjb3JyZWN0bHkuXG4gICAgICAvLyBUbyByZW1vdmUgb25jZSB0aGUgc2hhbGxvdyByZW5kZXJpbmcgaGFzIGJlZW4gZml4ZWQuXG5cbiAgICAgIGlmICghdGhpcy5zaGFkb3dSZWYpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0NvbnRyb2xsZWQpIHtcbiAgICAgICAgLy8gVGhlIGNvbXBvbmVudCBpcyBjb250cm9sbGVkLCB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgc2hhbGxvdyB2YWx1ZS5cbiAgICAgICAgdGhpcy5zaGFkb3dSZWYudmFsdWUgPSBwcm9wcy52YWx1ZSA9PSBudWxsID8gJycgOiBTdHJpbmcocHJvcHMudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGluZUhlaWdodCA9IHRoaXMuc2luZ2xlbGluZVNoYWRvd1JlZi5zY3JvbGxIZWlnaHQ7XG4gICAgICB2YXIgbmV3SGVpZ2h0ID0gdGhpcy5zaGFkb3dSZWYuc2Nyb2xsSGVpZ2h0OyAvLyBHdWFyZGluZyBmb3IganNkb20sIHdoZXJlIHNjcm9sbEhlaWdodCBpc24ndCBwcmVzZW50LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90bXB2YXIvanNkb20vaXNzdWVzLzEwMTNcblxuICAgICAgaWYgKG5ld0hlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKE51bWJlcihwcm9wcy5yb3dzTWF4KSA+PSBOdW1iZXIocHJvcHMucm93cykpIHtcbiAgICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5taW4oTnVtYmVyKHByb3BzLnJvd3NNYXgpICogbGluZUhlaWdodCwgbmV3SGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5tYXgobmV3SGVpZ2h0LCBsaW5lSGVpZ2h0KTsgLy8gTmVlZCBhIGxhcmdlIGVub3VnaCBkaWZmZXJlbnQgdG8gdXBkYXRlIHRoZSBoZWlnaHQuXG4gICAgICAvLyBUaGlzIHByZXZlbnRzIGluZmluaXRlIHJlbmRlcmluZyBsb29wLlxuXG4gICAgICBpZiAoTWF0aC5hYnModGhpcy5zdGF0ZS5oZWlnaHQgLSBuZXdIZWlnaHQpID4gMSkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBoZWlnaHQ6IG5ld0hlaWdodFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IF90aGlzJHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgIHJvd3MgPSBfdGhpcyRwcm9wcy5yb3dzLFxuICAgICAgICAgIHJvd3NNYXggPSBfdGhpcyRwcm9wcy5yb3dzTWF4LFxuICAgICAgICAgIHRleHRhcmVhUmVmID0gX3RoaXMkcHJvcHMudGV4dGFyZWFSZWYsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wcy52YWx1ZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkZWZhdWx0VmFsdWVcIiwgXCJvbkNoYW5nZVwiLCBcInJvd3NcIiwgXCJyb3dzTWF4XCIsIFwidGV4dGFyZWFSZWZcIiwgXCJ2YWx1ZVwiLCBcInN0eWxlXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJvb3RcbiAgICAgIH0sIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lci5kZWZhdWx0LCB7XG4gICAgICAgIHRhcmdldDogXCJ3aW5kb3dcIixcbiAgICAgICAgb25SZXNpemU6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIHtcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy50ZXh0YXJlYSwgY2xhc3Nlcy5zaGFkb3cpLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZVJlZlNpbmdsZWxpbmVTaGFkb3csXG4gICAgICAgIHJvd3M6IFwiMVwiLFxuICAgICAgICB0YWJJbmRleDogLTEsXG4gICAgICAgIHZhbHVlOiBcIlwiXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsIHtcbiAgICAgICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy50ZXh0YXJlYSwgY2xhc3Nlcy5zaGFkb3cpLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIHJlZjogdGhpcy5oYW5kbGVSZWZTaGFkb3csXG4gICAgICAgIHJvd3M6IHJvd3MsXG4gICAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9KSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb3dzOiByb3dzLFxuICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnRleHRhcmVhLCBjbGFzc05hbWUpLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBvbkNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgIHJlZjogdGhpcy5oYW5kbGVSZWZJbnB1dCxcbiAgICAgICAgc3R5bGU6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5oZWlnaHRcbiAgICAgICAgfSwgc3R5bGUpXG4gICAgICB9LCBvdGhlcikpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRleHRhcmVhO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5UZXh0YXJlYS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygcm93cyB0byBkaXNwbGF5IHdoZW4gbXVsdGlsaW5lIG9wdGlvbiBpcyBzZXQgdG8gdHJ1ZS5cbiAgICovXG4gIHJvd3NNYXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIHRleHRhcmVhIGVsZW1lbnQuXG4gICAqL1xuICB0ZXh0YXJlYVJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKVxufSA6IHt9O1xuVGV4dGFyZWEuZGVmYXVsdFByb3BzID0ge1xuICByb3dzOiAxXG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQcml2YXRlVGV4dGFyZWEnXG59KShUZXh0YXJlYSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0ZpbGxlZElucHV0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0ZpbGxlZElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9GaWxsZWRJbnB1dFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF9JbnB1dEJhc2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9JbnB1dEJhc2VcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgSW5wdXRCYXNlXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHZhciBsaWdodCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JztcbiAgdmFyIGJvdHRvbUxpbmVDb2xvciA9IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC40MiknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43KSc7XG4gIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMDkpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDkpJztcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSksXG4gICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsaWdodCA/ICdyZ2JhKDAsIDAsIDAsIDAuMTMpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTMpJyxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRmb2N1c2VkJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0ID8gJ3JnYmEoMCwgMCwgMCwgMC4wOSknIDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4wOSknXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHQgPyAncmdiYSgwLCAwLCAwLCAwLjEyKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjEyKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZVVuZGVybGluZT17ZmFsc2V9YC4gKi9cbiAgICB1bmRlcmxpbmU6IHtcbiAgICAgICcmOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMnB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLnByaW1hcnlbbGlnaHQgPyAnZGFyaycgOiAnbGlnaHQnXSksXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gRG9pbmcgdGhlIG90aGVyIHdheSBhcm91bmQgY3Jhc2ggb24gSUUgMTEgXCInJ1wiIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzcy9pc3N1ZXMvMjQyXG4gICAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMCknLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIHtcbiAgICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICAgIH0pLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScgLy8gVHJhbnNwYXJlbnQgdG8gdGhlIGhvdmVyIHN0eWxlLlxuXG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZDphZnRlcic6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGVYKDEpJ1xuICAgICAgfSxcbiAgICAgICcmJGVycm9yOmFmdGVyJzoge1xuICAgICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluLFxuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZVgoMSknIC8vIGVycm9yIGlzIGFsd2F5cyB1bmRlcmxpbmVkIGluIHJlZFxuXG4gICAgICB9LFxuICAgICAgJyY6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChib3R0b21MaW5lQ29sb3IpLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIC8vIERvaW5nIHRoZSBvdGhlciB3YXkgYXJvdW5kIGNyYXNoIG9uIElFIDExIFwiJydcIiBodHRwczovL2dpdGh1Yi5jb20vY3NzaW5qcy9qc3MvaXNzdWVzLzI0MlxuICAgICAgICBjb250ZW50OiAnXCJcXFxcMDBhMFwiJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JvcmRlci1ib3R0b20tY29sb3InLCB7XG4gICAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLnNob3J0ZXJcbiAgICAgICAgfSksXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyAvLyBUcmFuc3BhcmVudCB0byB0aGUgaG92ZXIgc3R5bGUuXG5cbiAgICAgIH0sXG4gICAgICAnJjpob3Zlcjpub3QoJGRpc2FibGVkKTpub3QoJGZvY3VzZWQpOm5vdCgkZXJyb3IpOmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyQm90dG9tOiBcIjFweCBzb2xpZCBcIi5jb25jYXQodGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnkpXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQ6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206IFwiMXB4IGRvdHRlZCBcIi5jb25jYXQoYm90dG9tTGluZUNvbG9yKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDEyXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAxMlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogJzI3cHggMTJweCAxMHB4JyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LiAqL1xuICAgIGlucHV0OiB7XG4gICAgICBwYWRkaW5nOiAnMjdweCAxMnB4IDEwcHgnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYG1hcmdpbj1cImRlbnNlXCJgLiAqL1xuICAgIGlucHV0TWFyZ2luRGVuc2U6IHtcbiAgICAgIHBhZGRpbmdUb3A6IDI0LFxuICAgICAgcGFkZGluZ0JvdHRvbTogNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gRmlsbGVkSW5wdXQocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiXSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbnB1dEJhc2UuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NlczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY2xhc3Nlcywge1xuICAgICAgcm9vdDogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy51bmRlcmxpbmUsIHt9KSxcbiAgICAgIHVuZGVybGluZTogbnVsbFxuICAgIH0pXG4gIH0sIG90aGVyKSk7XG59XG5cbkZpbGxlZElucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoaXMgcHJvcGVydHkgaGVscHMgdXNlcnMgdG8gZmlsbCBmb3JtcyBmYXN0ZXIsIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuXG4gICAqIFRoZSBuYW1lIGNhbiBiZSBjb25mdXNpbmcsIGFzIGl0J3MgbW9yZSBsaWtlIGFuIGF1dG9maWxsLlxuICAgKiBZb3UgY2FuIGxlYXJuIG1vcmUgYWJvdXQgaXQgaGVyZTpcbiAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcbiAgICovXG4gIGF1dG9Db21wbGV0ZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBmb2N1c2VkIGR1cmluZyB0aGUgZmlyc3QgbW91bnQuXG4gICAqL1xuICBhdXRvRm9jdXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgd3JhcHBlciBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBpbnB1dCB2YWx1ZSwgdXNlZnVsIHdoZW4gbm90IGNvbnRyb2xsaW5nIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBkZWZhdWx0VmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogRW5kIGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgZW5kQWRvcm5tZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBpbmRpY2F0ZSBhbiBlcnJvci4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBpbnB1dCB3aWxsIHRha2UgdXAgdGhlIGZ1bGwgd2lkdGggb2YgaXRzIGNvbnRhaW5lci5cbiAgICovXG4gIGZ1bGxXaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBpZCBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIG5hdGl2ZSBpbnB1dC5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgaW5wdXRDb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVXNlIHRoYXQgcHJvcGVydHkgdG8gcGFzcyBhIHJlZiBjYWxsYmFjayB0byB0aGUgbmF0aXZlIGlucHV0IGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0UmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlbnNlJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgYSB0ZXh0YXJlYSBlbGVtZW50IHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBtdWx0aWxpbmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYGlucHV0YCBlbGVtZW50LlxuICAgKi9cbiAgbmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgdmFsdWUgaXMgY2hhbmdlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hvcnQgaGludCBkaXNwbGF5ZWQgaW4gdGhlIGlucHV0IGJlZm9yZSB0aGUgdXNlciBlbnRlcnMgYSB2YWx1ZS5cbiAgICovXG4gIHBsYWNlaG9sZGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJdCBwcmV2ZW50cyB0aGUgdXNlciBmcm9tIGNoYW5naW5nIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGRcbiAgICogKG5vdCBmcm9tIGludGVyYWN0aW5nIHdpdGggdGhlIGZpZWxkKS5cbiAgICovXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCBiZSByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIHJvd3MgdG8gZGlzcGxheSB3aGVuIG11bHRpbGluZSBvcHRpb24gaXMgc2V0IHRvIHRydWUuXG4gICAqL1xuICByb3dzTWF4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIFN0YXJ0IGBJbnB1dEFkb3JubWVudGAgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgc3RhcnRBZG9ybm1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBUeXBlIG9mIHRoZSBpbnB1dCBlbGVtZW50LiBJdCBzaG91bGQgYmUgYSB2YWxpZCBIVE1MNSBpbnB1dCB0eXBlLlxuICAgKi9cbiAgdHlwZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLCByZXF1aXJlZCBmb3IgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xdKSldKVxufSA6IHt9O1xuX0lucHV0QmFzZS5kZWZhdWx0LmRlZmF1bHRQcm9wcyA9IHtcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgaW5wdXRDb21wb25lbnQ6ICdpbnB1dCcsXG4gIG11bHRpbGluZTogZmFsc2UsXG4gIHR5cGU6ICd0ZXh0J1xufTtcbkZpbGxlZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGaWxsZWRJbnB1dCdcbn0pKEZpbGxlZElucHV0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfT3V0bGluZWRJbnB1dC5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9PdXRsaW5lZElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PdXRsaW5lZElucHV0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX0lucHV0QmFzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0lucHV0QmFzZVwiKSk7XG5cbnZhciBfTm90Y2hlZE91dGxpbmUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05vdGNoZWRPdXRsaW5lXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IElucHV0QmFzZVxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYm9yZGVyQ29sb3IgPSB0aGVtZS5wYWxldHRlLnR5cGUgPT09ICdsaWdodCcgPyAncmdiYSgwLCAwLCAwLCAwLjIzKScgOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIzKSc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICcmICRub3RjaGVkT3V0bGluZSc6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yXG4gICAgICB9LFxuICAgICAgJyY6aG92ZXI6bm90KCRkaXNhYmxlZCk6bm90KCRmb2N1c2VkKTpub3QoJGVycm9yKSAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQucHJpbWFyeSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgJyYkZm9jdXNlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IDJcbiAgICAgIH0sXG4gICAgICAnJiRlcnJvciAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCAkbm90Y2hlZE91dGxpbmUnOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB0aGVtZS5wYWxldHRlLmFjdGlvbi5kaXNhYmxlZFxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBjb21wb25lbnQgaXMgZm9jdXNlZC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc3RhcnRBZG9ybm1lbnRgIGlzIHByb3ZpZGVkLiAqL1xuICAgIGFkb3JuZWRTdGFydDoge1xuICAgICAgcGFkZGluZ0xlZnQ6IDE0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgYWRvcm5lZEVuZDoge1xuICAgICAgcGFkZGluZ1JpZ2h0OiAxNFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlcnJvcj17dHJ1ZX1gLiAqL1xuICAgIGVycm9yOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG11bHRpbGluZT17dHJ1ZX1gLiAqL1xuICAgIG11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogJzE4LjVweCAxNHB4JyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIGZ1bGxXaWR0aC5cblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYE5vdGNoZWRPdXRsaW5lYCBlbGVtZW50LiAqL1xuICAgIG5vdGNoZWRPdXRsaW5lOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQuICovXG4gICAgaW5wdXQ6IHtcbiAgICAgIHBhZGRpbmc6ICcxOC41cHggMTRweCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gICAgaW5wdXRNYXJnaW5EZW5zZToge1xuICAgICAgcGFkZGluZ1RvcDogMTUsXG4gICAgICBwYWRkaW5nQm90dG9tOiAxNVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBtdWx0aWxpbmU9e3RydWV9YC4gKi9cbiAgICBpbnB1dE11bHRpbGluZToge1xuICAgICAgcGFkZGluZzogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzdGFydEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkU3RhcnQ6IHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGVuZEFkb3JubWVudGAgaXMgcHJvdmlkZWQuICovXG4gICAgaW5wdXRBZG9ybmVkRW5kOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICB9XG4gIH07XG59O1xuXG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxuZnVuY3Rpb24gT3V0bGluZWRJbnB1dChwcm9wcykge1xuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBsYWJlbFdpZHRoID0gcHJvcHMubGFiZWxXaWR0aCxcbiAgICAgIG5vdGNoZWQgPSBwcm9wcy5ub3RjaGVkLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImxhYmVsV2lkdGhcIiwgXCJub3RjaGVkXCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0lucHV0QmFzZS5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICByZW5kZXJQcmVmaXg6IGZ1bmN0aW9uIHJlbmRlclByZWZpeChzdGF0ZSkge1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX05vdGNoZWRPdXRsaW5lLmRlZmF1bHQsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLm5vdGNoZWRPdXRsaW5lLFxuICAgICAgICBsYWJlbFdpZHRoOiBsYWJlbFdpZHRoLFxuICAgICAgICBub3RjaGVkOiB0eXBlb2Ygbm90Y2hlZCAhPT0gJ3VuZGVmaW5lZCcgPyBub3RjaGVkIDogQm9vbGVhbihzdGF0ZS5zdGFydEFkb3JubWVudCB8fCBzdGF0ZS5maWxsZWQgfHwgc3RhdGUuZm9jdXNlZClcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2xhc3NlczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgY2xhc3Nlcywge1xuICAgICAgcm9vdDogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgY2xhc3Nlcy51bmRlcmxpbmUsIHt9KSxcbiAgICAgIG5vdGNoZWRPdXRsaW5lOiBudWxsXG4gICAgfSlcbiAgfSwgb3RoZXIpKTtcbn1cblxuT3V0bGluZWRJbnB1dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGlzIHByb3BlcnR5IGhlbHBzIHVzZXJzIHRvIGZpbGwgZm9ybXMgZmFzdGVyLCBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLlxuICAgKiBUaGUgbmFtZSBjYW4gYmUgY29uZnVzaW5nLCBhcyBpdCdzIG1vcmUgbGlrZSBhbiBhdXRvZmlsbC5cbiAgICogWW91IGNhbiBsZWFybiBtb3JlIGFib3V0IGl0IGhlcmU6XG4gICAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsXG4gICAqL1xuICBhdXRvQ29tcGxldGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZm9jdXNlZCBkdXJpbmcgdGhlIGZpcnN0IG1vdW50LlxuICAgKi9cbiAgYXV0b0ZvY3VzOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgaW5wdXQgdmFsdWUsIHVzZWZ1bCB3aGVuIG5vdCBjb250cm9sbGluZyB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgZGVmYXVsdFZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEVuZCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGVuZEFkb3JubWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgaW5kaWNhdGUgYW4gZXJyb3IuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgaW5wdXQgd2lsbCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBjb250YWluZXIuXG4gICAqL1xuICBmdWxsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgaWQgb2YgdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlkOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSBuYXRpdmUgaW5wdXQuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGlucHV0Q29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFVzZSB0aGF0IHByb3BlcnR5IHRvIHBhc3MgYSByZWYgY2FsbGJhY2sgdG8gdGhlIG5hdGl2ZSBpbnB1dCBjb21wb25lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsZWdlbmQuXG4gICAqL1xuICBsYWJlbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGBkZW5zZWAsIHdpbGwgYWRqdXN0IHZlcnRpY2FsIHNwYWNpbmcuIFRoaXMgaXMgbm9ybWFsbHkgb2J0YWluZWQgdmlhIGNvbnRleHQgZnJvbVxuICAgKiBGb3JtQ29udHJvbC5cbiAgICovXG4gIG1hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnZGVuc2UnLCAnbm9uZSddKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhIHRleHRhcmVhIGVsZW1lbnQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIG11bHRpbGluZTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE5hbWUgYXR0cmlidXRlIG9mIHRoZSBgaW5wdXRgIGVsZW1lbnQuXG4gICAqL1xuICBuYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBvdXRsaW5lIGlzIG5vdGNoZWQgdG8gYWNjb21tb2RhdGUgdGhlIGxhYmVsLlxuICAgKi9cbiAgbm90Y2hlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIHZhbHVlIGlzIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHNob3J0IGhpbnQgZGlzcGxheWVkIGluIHRoZSBpbnB1dCBiZWZvcmUgdGhlIHVzZXIgZW50ZXJzIGEgdmFsdWUuXG4gICAqL1xuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSXQgcHJldmVudHMgdGhlIHVzZXIgZnJvbSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGZpZWxkXG4gICAqIChub3QgZnJvbSBpbnRlcmFjdGluZyB3aXRoIHRoZSBmaWVsZCkuXG4gICAqL1xuICByZWFkT25seTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IHdpbGwgYmUgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93czogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiByb3dzIHRvIGRpc3BsYXkgd2hlbiBtdWx0aWxpbmUgb3B0aW9uIGlzIHNldCB0byB0cnVlLlxuICAgKi9cbiAgcm93c01heDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuXG4gIC8qKlxuICAgKiBTdGFydCBgSW5wdXRBZG9ybm1lbnRgIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIHN0YXJ0QWRvcm5tZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogVHlwZSBvZiB0aGUgaW5wdXQgZWxlbWVudC4gSXQgc2hvdWxkIGJlIGEgdmFsaWQgSFRNTDUgaW5wdXQgdHlwZS5cbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZSwgcmVxdWlyZWQgZm9yIGEgY29udHJvbGxlZCBjb21wb25lbnQuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSkpXSlcbn0gOiB7fTtcbl9JbnB1dEJhc2UuZGVmYXVsdC5kZWZhdWx0UHJvcHMgPSB7XG4gIGZ1bGxXaWR0aDogZmFsc2UsXG4gIGlucHV0Q29tcG9uZW50OiAnaW5wdXQnLFxuICBtdWx0aWxpbmU6IGZhbHNlLFxuICB0eXBlOiAndGV4dCdcbn07XG5PdXRsaW5lZElucHV0Lm11aU5hbWUgPSAnSW5wdXQnO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlPdXRsaW5lZElucHV0J1xufSkoT3V0bGluZWRJbnB1dCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfc3R5bGVzID0gcmVxdWlyZShcIi4uL3N0eWxlc1wiKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAtNSxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXMsXG4gICAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICAgIGJvcmRlcldpZHRoOiAxLFxuICAgICAgLy8gTWF0Y2ggdGhlIElucHV0IExhYmVsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoW1wicGFkZGluZy1cIi5jb25jYXQoYWxpZ24pLCAnYm9yZGVyLWNvbG9yJywgJ2JvcmRlci13aWR0aCddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgbGVnZW5kIGVsZW1lbnQuICovXG4gICAgbGVnZW5kOiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBsaW5lSGVpZ2h0OiAnMTBweCcsXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3dpZHRoJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlcixcbiAgICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgICAgfSlcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIE5vdGNoZWRPdXRsaW5lKHByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBsYWJlbFdpZHRoUHJvcCA9IHByb3BzLmxhYmVsV2lkdGgsXG4gICAgICBub3RjaGVkID0gcHJvcHMubm90Y2hlZCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICB0aGVtZSA9IHByb3BzLnRoZW1lLFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwibGFiZWxXaWR0aFwiLCBcIm5vdGNoZWRcIiwgXCJzdHlsZVwiLCBcInRoZW1lXCJdKTtcbiAgdmFyIGFsaWduID0gdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gIHZhciBsYWJlbFdpZHRoID0gbGFiZWxXaWR0aFByb3AgPiAwID8gbGFiZWxXaWR0aFByb3AgKiAwLjc1ICsgOCA6IDA7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIiwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgXCJhcmlhLWhpZGRlblwiOiB0cnVlLFxuICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKCgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBcInBhZGRpbmdcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGFsaWduKSksIDggKyAobm90Y2hlZCA/IDAgOiBsYWJlbFdpZHRoIC8gMikpLCBzdHlsZSksXG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpXG4gIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImxlZ2VuZFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxlZ2VuZCxcbiAgICBzdHlsZToge1xuICAgICAgLy8gSUUgMTE6IGZpZWxkc2V0IHdpdGggbGVnZW5kIGRvZXMgbm90IHJlbmRlclxuICAgICAgLy8gYSBib3JkZXIgcmFkaXVzLiBUaGlzIG1haW50YWlucyBjb25zaXN0ZW5jeVxuICAgICAgLy8gYnkgYWx3YXlzIGhhdmluZyBhIGxlZ2VuZCByZW5kZXJlZFxuICAgICAgd2lkdGg6IG5vdGNoZWQgPyBsYWJlbFdpZHRoIDogMC4wMVxuICAgIH1cbiAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICBfX2h0bWw6ICcmIzgyMDM7J1xuICAgIH1cbiAgfSkpKTtcbn1cblxuTm90Y2hlZE91dGxpbmUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGxlZ2VuZC5cbiAgICovXG4gIGxhYmVsV2lkdGg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgb3V0bGluZSBpcyBub3RjaGVkIHRvIGFjY29tbW9kYXRlIHRoZSBsYWJlbC5cbiAgICovXG4gIG5vdGNoZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3N0eWxlcy53aXRoU3R5bGVzKShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVByaXZhdGVOb3RjaGVkT3V0bGluZScsXG4gIHdpdGhUaGVtZTogdHJ1ZVxufSkoTm90Y2hlZE91dGxpbmUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9JbnB1dExhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0lucHV0TGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0lucHV0TGFiZWxcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9Gb3JtTGFiZWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Gb3JtTGFiZWxcIikpO1xuXG52YXIgX0lucHV0QmFzZSA9IHJlcXVpcmUoXCIuLi9JbnB1dEJhc2UvSW5wdXRCYXNlXCIpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IEZvcm1MYWJlbFxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgdGhlIGNvbXBvbmVudCBpcyBhIGRlc2NlbmRhbnQgb2YgYEZvcm1Db250cm9sYC4gKi9cbiAgICBmb3JtQ29udHJvbDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgLy8gc2xpZ2h0IGFsdGVyYXRpb24gdG8gc3BlYyBzcGFjaW5nIHRvIG1hdGNoIHZpc3VhbCBzcGVjIHJlc3VsdFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDI0cHgpIHNjYWxlKDEpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge1xuICAgICAgLy8gQ29tcGVuc2F0aW9uIGZvciB0aGUgYElucHV0LmlucHV0RGVuc2VgIHN0eWxlLlxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDAsIDIxcHgpIHNjYWxlKDEpJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYGlucHV0YCBlbGVtZW50IGlmIGBzaHJpbms9e3RydWV9YC4gKi9cbiAgICBzaHJpbms6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgwLCAxLjVweCkgc2NhbGUoMC43NSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAndG9wIGxlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgaW5wdXRgIGVsZW1lbnQgaWYgYGRpc2FibGVBbmltYXRpb249e2ZhbHNlfWAuICovXG4gICAgYW5pbWF0ZWQ6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZShbJ2NvbG9yJywgJ3RyYW5zZm9ybSddLCB7XG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLFxuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlT3V0XG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZmlsbGVkXCJgLiAqL1xuICAgIGZpbGxlZDoge1xuICAgICAgLy8gQ2hyb21lJ3MgYXV0b2ZpbGwgZmVhdHVyZSBnaXZlcyB0aGUgaW5wdXQgZmllbGQgYSB5ZWxsb3cgYmFja2dyb3VuZC5cbiAgICAgIC8vIFNpbmNlIHRoZSBpbnB1dCBmaWVsZCBpcyBiZWhpbmQgdGhlIGxhYmVsIGluIHRoZSBIVE1MIHRyZWUsXG4gICAgICAvLyB0aGUgaW5wdXQgZmllbGQgaXMgZHJhd24gbGFzdCBhbmQgaGlkZXMgdGhlIGxhYmVsIHdpdGggYW4gb3BhcXVlIGJhY2tncm91bmQgY29sb3IuXG4gICAgICAvLyB6SW5kZXg6IDEgd2lsbCByYWlzZSB0aGUgbGFiZWwgYWJvdmUgb3BhcXVlIGJhY2tncm91bmQtY29sb3JzIG9mIGlucHV0LlxuICAgICAgekluZGV4OiAxLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDEycHgsIDIycHgpIHNjYWxlKDEpJyxcbiAgICAgICcmJG1hcmdpbkRlbnNlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTlweCkgc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJyYkc2hyaW5rJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgMTBweCkgc2NhbGUoMC43NSknLFxuICAgICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTJweCwgN3B4KSBzY2FsZSgwLjc1KSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3V0bGluZWRcImAuICovXG4gICAgb3V0bGluZWQ6IHtcbiAgICAgIC8vIHNlZSBjb21tZW50IGFib3ZlIG9uIGZpbGxlZC56SW5kZXhcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgxNHB4LCAyMnB4KSBzY2FsZSgxKScsXG4gICAgICAnJiRtYXJnaW5EZW5zZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKDE0cHgsIDE3LjVweCkgc2NhbGUoMSknXG4gICAgICB9LFxuICAgICAgJyYkc2hyaW5rJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTRweCwgLTZweCkgc2NhbGUoMC43NSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIElucHV0TGFiZWwocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIF9jbGFzc05hbWVzO1xuXG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgZGlzYWJsZUFuaW1hdGlvbiA9IHByb3BzLmRpc2FibGVBbmltYXRpb24sXG4gICAgICBGb3JtTGFiZWxDbGFzc2VzID0gcHJvcHMuRm9ybUxhYmVsQ2xhc3NlcyxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIHNocmlua1Byb3AgPSBwcm9wcy5zaHJpbmssXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVBbmltYXRpb25cIiwgXCJGb3JtTGFiZWxDbGFzc2VzXCIsIFwibWFyZ2luXCIsIFwic2hyaW5rXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBtdWlGb3JtQ29udHJvbCA9IGNvbnRleHQubXVpRm9ybUNvbnRyb2w7XG4gIHZhciBzaHJpbmsgPSBzaHJpbmtQcm9wO1xuXG4gIGlmICh0eXBlb2Ygc2hyaW5rID09PSAndW5kZWZpbmVkJyAmJiBtdWlGb3JtQ29udHJvbCkge1xuICAgIHNocmluayA9IG11aUZvcm1Db250cm9sLmZpbGxlZCB8fCBtdWlGb3JtQ29udHJvbC5mb2N1c2VkIHx8IG11aUZvcm1Db250cm9sLmFkb3JuZWRTdGFydDtcbiAgfVxuXG4gIHZhciBmY3MgPSAoMCwgX0lucHV0QmFzZS5mb3JtQ29udHJvbFN0YXRlKSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgc3RhdGVzOiBbJ21hcmdpbicsICd2YXJpYW50J11cbiAgfSk7XG4gIHZhciBjbGFzc05hbWUgPSAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9ybUNvbnRyb2wsIG11aUZvcm1Db250cm9sKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuYW5pbWF0ZWQsICFkaXNhYmxlQW5pbWF0aW9uKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuc2hyaW5rLCBzaHJpbmspLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZpbGxlZCwgZmNzLnZhcmlhbnQgPT09ICdmaWxsZWQnKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMub3V0bGluZWQsIGZjcy52YXJpYW50ID09PSAnb3V0bGluZWQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0Zvcm1MYWJlbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBcImRhdGEtc2hyaW5rXCI6IHNocmluayxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICBjbGFzc2VzOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGZvY3VzZWQ6IGNsYXNzZXMuZm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBjbGFzc2VzLmRpc2FibGVkLFxuICAgICAgZXJyb3I6IGNsYXNzZXMuZXJyb3IsXG4gICAgICByZXF1aXJlZDogY2xhc3Nlcy5yZXF1aXJlZFxuICAgIH0sIEZvcm1MYWJlbENsYXNzZXMpXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4pO1xufVxuXG5JbnB1dExhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgYElucHV0TGFiZWxgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlQW5pbWF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBhcHBseSBkaXNhYmxlZCBjbGFzcy5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3Igc3RhdGUuXG4gICAqL1xuICBlcnJvcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZC5cbiAgICovXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgW2BGb3JtTGFiZWxgXSgvYXBpL2Zvcm0tbGFiZWwvKSBlbGVtZW50LlxuICAgKi9cbiAgRm9ybUxhYmVsQ2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZy4gVGhpcyBpcyBub3JtYWxseSBvYnRhaW5lZCB2aWEgY29udGV4dCBmcm9tXG4gICAqIEZvcm1Db250cm9sLlxuICAgKi9cbiAgbWFyZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydkZW5zZSddKSxcblxuICAvKipcbiAgICogaWYgYHRydWVgLCB0aGUgbGFiZWwgd2lsbCBpbmRpY2F0ZSB0aGF0IHRoZSBpbnB1dCBpcyByZXF1aXJlZC5cbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgaXMgc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnc3RhbmRhcmQnLCAnb3V0bGluZWQnLCAnZmlsbGVkJ10pXG59IDoge307XG5JbnB1dExhYmVsLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZUFuaW1hdGlvbjogZmFsc2Vcbn07XG5JbnB1dExhYmVsLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aUlucHV0TGFiZWwnXG59KShJbnB1dExhYmVsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUxhYmVsLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Zvcm1MYWJlbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRm9ybUxhYmVsXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfSW5wdXRCYXNlID0gcmVxdWlyZShcIi4uL0lucHV0QmFzZS9JbnB1dEJhc2VcIik7XG5cbnZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnRleHQuc2Vjb25kYXJ5LFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgxNiksXG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgICcmJGZvY3VzZWQnOiB7XG4gICAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnlbdGhlbWUucGFsZXR0ZS50eXBlID09PSAnbGlnaHQnID8gJ2RhcmsnIDogJ2xpZ2h0J11cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZXJyb3I9e3RydWV9YC4gKi9cbiAgICBlcnJvcjoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmaWxsZWQ9e3RydWV9YC4gKi9cbiAgICBmaWxsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcmVxdWlyZWQ9e3RydWV9YC4gKi9cbiAgICByZXF1aXJlZDoge30sXG4gICAgYXN0ZXJpc2s6IHtcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEZvcm1MYWJlbChwcm9wcywgY29udGV4dCkge1xuICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBDb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZXJyb3IgPSBwcm9wcy5lcnJvcixcbiAgICAgIGZpbGxlZCA9IHByb3BzLmZpbGxlZCxcbiAgICAgIGZvY3VzZWQgPSBwcm9wcy5mb2N1c2VkLFxuICAgICAgcmVxdWlyZWQgPSBwcm9wcy5yZXF1aXJlZCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmaWxsZWRcIiwgXCJmb2N1c2VkXCIsIFwicmVxdWlyZWRcIl0pO1xuICB2YXIgZmNzID0gKDAsIF9JbnB1dEJhc2UuZm9ybUNvbnRyb2xTdGF0ZSkoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIHN0YXRlczogWydyZXF1aXJlZCcsICdmb2N1c2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCddXG4gIH0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChDb21wb25lbnQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMucm9vdCwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5lcnJvciwgZmNzLmVycm9yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmlsbGVkLCBmY3MuZmlsbGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9jdXNlZCwgZmNzLmZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yZXF1aXJlZCwgZmNzLnJlcXVpcmVkKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKVxuICB9LCBvdGhlciksIGNoaWxkcmVuLCBmY3MucmVxdWlyZWQgJiYgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzZXMuYXN0ZXJpc2ssICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHt9LCBjbGFzc2VzLmVycm9yLCBmY3MuZXJyb3IpKVxuICB9LCBcIlxcdTIwMDkqXCIpKTtcbn1cblxuRm9ybUxhYmVsLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBET00gZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhIGRpc2FibGVkIHN0YXRlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGlucHV0IG9mIHRoaXMgbGFiZWwgaXMgZm9jdXNlZCAodXNlZCBieSBgRm9ybUdyb3VwYCBjb21wb25lbnRzKS5cbiAgICovXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCB3aWxsIGluZGljYXRlIHRoYXQgdGhlIGlucHV0IGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXG59IDoge307XG5Gb3JtTGFiZWwuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdsYWJlbCdcbn07XG5Gb3JtTGFiZWwuY29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUxhYmVsJ1xufSkoRm9ybUxhYmVsKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRm9ybUNvbnRyb2wuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfRm9ybUNvbnRyb2wgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Zvcm1Db250cm9sXCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi9JbnB1dEJhc2UvdXRpbHNcIik7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL2hlbHBlcnNcIik7XG5cbnZhciBfcmVhY3RIZWxwZXJzID0gcmVxdWlyZShcIi4uL3V0aWxzL3JlYWN0SGVscGVyc1wiKTtcblxudmFyIHN0eWxlcyA9IHtcbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgLy8gUmVzZXQgZmllbGRzZXQgZGVmYXVsdCBzdHlsZS5cbiAgICBtaW5XaWR0aDogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIG1hcmdpbjogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcgLy8gRml4IGFsaWdubWVudCBpc3N1ZSBvbiBTYWZhcmkuXG5cbiAgfSxcblxuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJub3JtYWxcImAuICovXG4gIG1hcmdpbk5vcm1hbDoge1xuICAgIG1hcmdpblRvcDogMTYsXG4gICAgbWFyZ2luQm90dG9tOiA4XG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgbWFyZ2luPVwiZGVuc2VcImAuICovXG4gIG1hcmdpbkRlbnNlOiB7XG4gICAgbWFyZ2luVG9wOiA4LFxuICAgIG1hcmdpbkJvdHRvbTogNFxuICB9LFxuXG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZ1bGxXaWR0aD17dHJ1ZX1gLiAqL1xuICBmdWxsV2lkdGg6IHtcbiAgICB3aWR0aDogJzEwMCUnXG4gIH1cbn07XG4vKipcbiAqIFByb3ZpZGVzIGNvbnRleHQgc3VjaCBhcyBmaWxsZWQvZm9jdXNlZC9lcnJvci9yZXF1aXJlZCBmb3IgZm9ybSBpbnB1dHMuXG4gKiBSZWx5aW5nIG9uIHRoZSBjb250ZXh0IHByb3ZpZGVzIGhpZ2ggZmxleGliaWx0eSBhbmQgZW5zdXJlcyB0aGF0IHRoZSBzdGF0ZSBhbHdheXMgc3RheXNcbiAqIGNvbnNpc3RlbnQgYWNyb3NzIHRoZSBjaGlsZHJlbiBvZiB0aGUgYEZvcm1Db250cm9sYC5cbiAqIFRoaXMgY29udGV4dCBpcyB1c2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqICAtIEZvcm1MYWJlbFxuICogIC0gRm9ybUhlbHBlclRleHRcbiAqICAtIElucHV0XG4gKiAgLSBJbnB1dExhYmVsXG4gKlxuICog4pqg77iPIE9ubHkgb25lIGlucHV0IGNhbiBiZSB1c2VkIHdpdGhpbiBhIEZvcm1Db250cm9sLlxuICovXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG52YXIgRm9ybUNvbnRyb2wgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoRm9ybUNvbnRyb2wsIF9SZWFjdCRDb21wb25lbnQpO1xuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShGb3JtQ29udHJvbCwgbnVsbCwgW3tcbiAgICBrZXk6IFwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhwcm9wcywgc3RhdGUpIHtcbiAgICAgIGlmIChwcm9wcy5kaXNhYmxlZCAmJiBzdGF0ZS5mb2N1c2VkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gRm9ybUNvbnRyb2wocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBGb3JtQ29udHJvbCk7XG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEZvcm1Db250cm9sKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiAhc3RhdGUuZm9jdXNlZCA/IHtcbiAgICAgICAgICBmb2N1c2VkOiB0cnVlXG4gICAgICAgIH0gOiBudWxsO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmZvY3VzZWQgPyB7XG4gICAgICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICAgICAgfSA6IG51bGw7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLmZpbGxlZCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZmlsbGVkOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVDbGVhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5maWxsZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGZpbGxlZDogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgYWRvcm5lZFN0YXJ0OiBmYWxzZSxcbiAgICAgIGZpbGxlZDogZmFsc2UsXG4gICAgICBmb2N1c2VkOiBmYWxzZVxuICAgIH07IC8vIFdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZSBjaGlsZHJlbiBhbmQgZmluZCB0aGUgSW5wdXQgaW4gb3JkZXJcbiAgICAvLyB0byBmdWxseSBzdXBwb3J0IHNlcnZlciBzaWRlIHJlbmRlcmluZy5cblxuICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuXG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCEoMCwgX3JlYWN0SGVscGVycy5pc011aUVsZW1lbnQpKGNoaWxkLCBbJ0lucHV0JywgJ1NlbGVjdCddKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoMCwgX3V0aWxzLmlzRmlsbGVkKShjaGlsZC5wcm9wcywgdHJ1ZSkpIHtcbiAgICAgICAgICBfdGhpcy5zdGF0ZS5maWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlucHV0ID0gKDAsIF9yZWFjdEhlbHBlcnMuaXNNdWlFbGVtZW50KShjaGlsZCwgWydTZWxlY3QnXSkgPyBjaGlsZC5wcm9wcy5pbnB1dCA6IGNoaWxkO1xuXG4gICAgICAgIGlmIChpbnB1dCAmJiAoMCwgX3V0aWxzLmlzQWRvcm5lZFN0YXJ0KShpbnB1dC5wcm9wcykpIHtcbiAgICAgICAgICBfdGhpcy5zdGF0ZS5hZG9ybmVkU3RhcnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShGb3JtQ29udHJvbCwgW3tcbiAgICBrZXk6IFwiZ2V0Q2hpbGRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBlcnJvciA9IF90aGlzJHByb3BzLmVycm9yLFxuICAgICAgICAgIHJlcXVpcmVkID0gX3RoaXMkcHJvcHMucmVxdWlyZWQsXG4gICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luLFxuICAgICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wcy52YXJpYW50O1xuICAgICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBhZG9ybmVkU3RhcnQgPSBfdGhpcyRzdGF0ZS5hZG9ybmVkU3RhcnQsXG4gICAgICAgICAgZmlsbGVkID0gX3RoaXMkc3RhdGUuZmlsbGVkLFxuICAgICAgICAgIGZvY3VzZWQgPSBfdGhpcyRzdGF0ZS5mb2N1c2VkO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbXVpRm9ybUNvbnRyb2w6IHtcbiAgICAgICAgICBhZG9ybmVkU3RhcnQ6IGFkb3JuZWRTdGFydCxcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIGZpbGxlZDogZmlsbGVkLFxuICAgICAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICAgICAgbWFyZ2luOiBtYXJnaW4sXG4gICAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXIsXG4gICAgICAgICAgb25FbXB0eTogdGhpcy5oYW5kbGVDbGVhbixcbiAgICAgICAgICBvbkZpbGxlZDogdGhpcy5oYW5kbGVEaXJ0eSxcbiAgICAgICAgICBvbkZvY3VzOiB0aGlzLmhhbmRsZUZvY3VzLFxuICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgICB2YXJpYW50OiB2YXJpYW50XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzTmFtZXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczIuY2xhc3NlcyxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfdGhpcyRwcm9wczIuY2xhc3NOYW1lLFxuICAgICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzMi5jb21wb25lbnQsXG4gICAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgZXJyb3IgPSBfdGhpcyRwcm9wczIuZXJyb3IsXG4gICAgICAgICAgZnVsbFdpZHRoID0gX3RoaXMkcHJvcHMyLmZ1bGxXaWR0aCxcbiAgICAgICAgICBtYXJnaW4gPSBfdGhpcyRwcm9wczIubWFyZ2luLFxuICAgICAgICAgIHJlcXVpcmVkID0gX3RoaXMkcHJvcHMyLnJlcXVpcmVkLFxuICAgICAgICAgIHZhcmlhbnQgPSBfdGhpcyRwcm9wczIudmFyaWFudCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzMiwgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZXJyb3JcIiwgXCJmdWxsV2lkdGhcIiwgXCJtYXJnaW5cIiwgXCJyZXF1aXJlZFwiLCBcInZhcmlhbnRcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXNbXCJtYXJnaW5cIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKG1hcmdpbikpXSwgbWFyZ2luICE9PSAnbm9uZScpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5mdWxsV2lkdGgsIGZ1bGxXaWR0aCksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKVxuICAgICAgfSwgb3RoZXIpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEZvcm1Db250cm9sO1xufShfcmVhY3QuZGVmYXVsdC5Db21wb25lbnQpO1xuXG5Gb3JtQ29udHJvbC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGZvcm0gY29udHJvbC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsYWJlbCwgaW5wdXQgYW5kIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbGFiZWwgc2hvdWxkIGJlIGRpc3BsYXllZCBpbiBhbiBlcnJvciBzdGF0ZS5cbiAgICovXG4gIGVycm9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgY29tcG9uZW50IHdpbGwgdGFrZSB1cCB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgY29udGFpbmVyLlxuICAgKi9cbiAgZnVsbFdpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYGRlbnNlYCBvciBgbm9ybWFsYCwgd2lsbCBhZGp1c3QgdmVydGljYWwgc3BhY2luZyBvZiB0aGlzIGFuZCBjb250YWluZWQgY29tcG9uZW50cy5cbiAgICovXG4gIG1hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnbm9uZScsICdkZW5zZScsICdub3JtYWwnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGxhYmVsIHdpbGwgaW5kaWNhdGUgdGhhdCB0aGUgaW5wdXQgaXMgcmVxdWlyZWQuXG4gICAqL1xuICByZXF1aXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHt9O1xuRm9ybUNvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGVycm9yOiBmYWxzZSxcbiAgZnVsbFdpZHRoOiBmYWxzZSxcbiAgbWFyZ2luOiAnbm9uZScsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgdmFyaWFudDogJ3N0YW5kYXJkJ1xufTtcbkZvcm1Db250cm9sLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBtdWlGb3JtQ29udHJvbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF93aXRoU3R5bGVzLmRlZmF1bHQpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpRm9ybUNvbnRyb2wnXG59KShGb3JtQ29udHJvbCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0Zvcm1IZWxwZXJUZXh0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX0Zvcm1IZWxwZXJUZXh0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb3JtSGVscGVyVGV4dFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX0lucHV0QmFzZSA9IHJlcXVpcmUoXCIuLi9JbnB1dEJhc2UvSW5wdXRCYXNlXCIpO1xuXG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnNlY29uZGFyeSxcbiAgICAgIGZvbnRGYW1pbHk6IHRoZW1lLnR5cG9ncmFwaHkuZm9udEZhbWlseSxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTIpLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgICBtYXJnaW5Ub3A6IDgsXG4gICAgICBsaW5lSGVpZ2h0OiAnMWVtJyxcbiAgICAgIG1pbkhlaWdodDogJzFlbScsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5kaXNhYmxlZFxuICAgICAgfSxcbiAgICAgICcmJGVycm9yJzoge1xuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGVycm9yPXt0cnVlfWAuICovXG4gICAgZXJyb3I6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBtYXJnaW49XCJkZW5zZVwiYC4gKi9cbiAgICBtYXJnaW5EZW5zZToge1xuICAgICAgbWFyZ2luVG9wOiA0XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJmaWxsZWRcImAgb3IgYHZhcmlhbnQ9XCJvdXRsaW5lZFwiYC4gKi9cbiAgICBjb250YWluZWQ6IHtcbiAgICAgIG1hcmdpbjogJzhweCAxMnB4IDAnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvY3VzZWQ9e3RydWV9YC4gKi9cbiAgICBmb2N1c2VkOiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZpbGxlZD17dHJ1ZX1gLiAqL1xuICAgIGZpbGxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGByZXF1aXJlZD17dHJ1ZX1gLiAqL1xuICAgIHJlcXVpcmVkOiB7fVxuICB9O1xufTtcblxuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIEZvcm1IZWxwZXJUZXh0KHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWVQcm9wID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgQ29tcG9uZW50ID0gcHJvcHMuY29tcG9uZW50LFxuICAgICAgZGlzYWJsZWQgPSBwcm9wcy5kaXNhYmxlZCxcbiAgICAgIGVycm9yID0gcHJvcHMuZXJyb3IsXG4gICAgICBmaWxsZWQgPSBwcm9wcy5maWxsZWQsXG4gICAgICBmb2N1c2VkID0gcHJvcHMuZm9jdXNlZCxcbiAgICAgIG1hcmdpbiA9IHByb3BzLm1hcmdpbixcbiAgICAgIHJlcXVpcmVkID0gcHJvcHMucmVxdWlyZWQsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJkaXNhYmxlZFwiLCBcImVycm9yXCIsIFwiZmlsbGVkXCIsIFwiZm9jdXNlZFwiLCBcIm1hcmdpblwiLCBcInJlcXVpcmVkXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBmY3MgPSAoMCwgX0lucHV0QmFzZS5mb3JtQ29udHJvbFN0YXRlKSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnLCAnbWFyZ2luJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZpbGxlZCcsICdmb2N1c2VkJywgJ3JlcXVpcmVkJ11cbiAgfSk7XG4gIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5yb290LCAoX2NsYXNzTmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuY29udGFpbmVkLCBmY3MudmFyaWFudCA9PT0gJ2ZpbGxlZCcgfHwgZmNzLnZhcmlhbnQgPT09ICdvdXRsaW5lZCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5tYXJnaW5EZW5zZSwgZmNzLm1hcmdpbiA9PT0gJ2RlbnNlJyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBmY3MuZGlzYWJsZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5lcnJvciwgZmNzLmVycm9yKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZmlsbGVkLCBmY3MuZmlsbGVkKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoX2NsYXNzTmFtZXMsIGNsYXNzZXMuZm9jdXNlZCwgZmNzLmZvY3VzZWQpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5yZXF1aXJlZCwgZmNzLnJlcXVpcmVkKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWVQcm9wKVxuICB9LCBvdGhlcikpO1xufVxuXG5Gb3JtSGVscGVyVGV4dC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gYSBkaXNhYmxlZCBzdGF0ZS5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBoZWxwZXIgdGV4dCBzaG91bGQgYmUgZGlzcGxheWVkIGluIGFuIGVycm9yIHN0YXRlLlxuICAgKi9cbiAgZXJyb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIGZpbGxlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZpbGxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGhlbHBlciB0ZXh0IHNob3VsZCB1c2UgZm9jdXNlZCBjbGFzc2VzIGtleS5cbiAgICovXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgZGVuc2VgLCB3aWxsIGFkanVzdCB2ZXJ0aWNhbCBzcGFjaW5nLiBUaGlzIGlzIG5vcm1hbGx5IG9idGFpbmVkIHZpYSBjb250ZXh0IGZyb21cbiAgICogRm9ybUNvbnRyb2wuXG4gICAqL1xuICBtYXJnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2RlbnNlJ10pLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBoZWxwZXIgdGV4dCBzaG91bGQgdXNlIHJlcXVpcmVkIGNsYXNzZXMga2V5LlxuICAgKi9cbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB7fTtcbkZvcm1IZWxwZXJUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgY29tcG9uZW50OiAncCdcbn07XG5Gb3JtSGVscGVyVGV4dC5jb250ZXh0VHlwZXMgPSB7XG4gIG11aUZvcm1Db250cm9sOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlGb3JtSGVscGVyVGV4dCdcbn0pKEZvcm1IZWxwZXJUZXh0KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfU2VsZWN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1NlbGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU2VsZWN0XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnN0eWxlcyA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfU2VsZWN0SW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NlbGVjdElucHV0XCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX21lcmdlQ2xhc3NlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy9tZXJnZUNsYXNzZXNcIikpO1xuXG52YXIgX0Fycm93RHJvcERvd24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9zdmctaWNvbnMvQXJyb3dEcm9wRG93blwiKSk7XG5cbnZhciBfSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9JbnB1dFwiKSk7XG5cbnZhciBfSW5wdXRCYXNlID0gcmVxdWlyZShcIi4uL0lucHV0QmFzZS9JbnB1dEJhc2VcIik7XG5cbnZhciBfTmF0aXZlU2VsZWN0ID0gcmVxdWlyZShcIi4uL05hdGl2ZVNlbGVjdC9OYXRpdmVTZWxlY3RcIik7XG5cbnZhciBfTmF0aXZlU2VsZWN0SW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9OYXRpdmVTZWxlY3QvTmF0aXZlU2VsZWN0SW5wdXRcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IElucHV0XG4vLyBUbyByZXBsYWNlIHdpdGggSW5wdXRCYXNlIGluIHY0LjAuMFxudmFyIHN0eWxlcyA9IF9OYXRpdmVTZWxlY3Quc3R5bGVzO1xuZXhwb3J0cy5zdHlsZXMgPSBzdHlsZXM7XG5cbmZ1bmN0aW9uIFNlbGVjdChwcm9wcywgY29udGV4dCkge1xuICB2YXIgYXV0b1dpZHRoID0gcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgZGlzcGxheUVtcHR5ID0gcHJvcHMuZGlzcGxheUVtcHR5LFxuICAgICAgSWNvbkNvbXBvbmVudCA9IHByb3BzLkljb25Db21wb25lbnQsXG4gICAgICBpbnB1dCA9IHByb3BzLmlucHV0LFxuICAgICAgaW5wdXRQcm9wcyA9IHByb3BzLmlucHV0UHJvcHMsXG4gICAgICBNZW51UHJvcHMgPSBwcm9wcy5NZW51UHJvcHMsXG4gICAgICBtdWx0aXBsZSA9IHByb3BzLm11bHRpcGxlLFxuICAgICAgbmF0aXZlID0gcHJvcHMubmF0aXZlLFxuICAgICAgb25DbG9zZSA9IHByb3BzLm9uQ2xvc2UsXG4gICAgICBvbk9wZW4gPSBwcm9wcy5vbk9wZW4sXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIHJlbmRlclZhbHVlID0gcHJvcHMucmVuZGVyVmFsdWUsXG4gICAgICBTZWxlY3REaXNwbGF5UHJvcHMgPSBwcm9wcy5TZWxlY3REaXNwbGF5UHJvcHMsXG4gICAgICB2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkocHJvcHMsIFtcImF1dG9XaWR0aFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFwiLCBcImlucHV0UHJvcHNcIiwgXCJNZW51UHJvcHNcIiwgXCJtdWx0aXBsZVwiLCBcIm5hdGl2ZVwiLCBcIm9uQ2xvc2VcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVuZGVyVmFsdWVcIiwgXCJTZWxlY3REaXNwbGF5UHJvcHNcIiwgXCJ2YXJpYW50XCJdKTtcbiAgdmFyIGlucHV0Q29tcG9uZW50ID0gbmF0aXZlID8gX05hdGl2ZVNlbGVjdElucHV0LmRlZmF1bHQgOiBfU2VsZWN0SW5wdXQuZGVmYXVsdDtcbiAgdmFyIGZjcyA9ICgwLCBfSW5wdXRCYXNlLmZvcm1Db250cm9sU3RhdGUpKHtcbiAgICBwcm9wczogcHJvcHMsXG4gICAgY29udGV4dDogY29udGV4dCxcbiAgICBzdGF0ZXM6IFsndmFyaWFudCddXG4gIH0pO1xuICByZXR1cm4gX3JlYWN0LmRlZmF1bHQuY2xvbmVFbGVtZW50KGlucHV0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAvLyBNb3N0IG9mIHRoZSBsb2dpYyBpcyBpbXBsZW1lbnRlZCBpbiBgU2VsZWN0SW5wdXRgLlxuICAgIC8vIFRoZSBgU2VsZWN0YCBjb21wb25lbnQgaXMgYSBzaW1wbGUgQVBJIHdyYXBwZXIgdG8gZXhwb3NlIHNvbWV0aGluZyBiZXR0ZXIgdG8gcGxheSB3aXRoLlxuICAgIGlucHV0Q29tcG9uZW50OiBpbnB1dENvbXBvbmVudCxcbiAgICBpbnB1dFByb3BzOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIEljb25Db21wb25lbnQ6IEljb25Db21wb25lbnQsXG4gICAgICB2YXJpYW50OiBmY3MudmFyaWFudCxcbiAgICAgIHR5cGU6IHVuZGVmaW5lZFxuICAgIH0sIG5hdGl2ZSA/IHt9IDoge1xuICAgICAgYXV0b1dpZHRoOiBhdXRvV2lkdGgsXG4gICAgICBkaXNwbGF5RW1wdHk6IGRpc3BsYXlFbXB0eSxcbiAgICAgIE1lbnVQcm9wczogTWVudVByb3BzLFxuICAgICAgbXVsdGlwbGU6IG11bHRpcGxlLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIG9uT3Blbjogb25PcGVuLFxuICAgICAgb3Blbjogb3BlbixcbiAgICAgIHJlbmRlclZhbHVlOiByZW5kZXJWYWx1ZSxcbiAgICAgIFNlbGVjdERpc3BsYXlQcm9wczogU2VsZWN0RGlzcGxheVByb3BzXG4gICAgfSwgaW5wdXRQcm9wcywge1xuICAgICAgY2xhc3NlczogaW5wdXRQcm9wcyA/ICgwLCBfbWVyZ2VDbGFzc2VzLmRlZmF1bHQpKHtcbiAgICAgICAgYmFzZUNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIG5ld0NsYXNzZXM6IGlucHV0UHJvcHMuY2xhc3NlcyxcbiAgICAgICAgQ29tcG9uZW50OiBTZWxlY3RcbiAgICAgIH0pIDogY2xhc3Nlc1xuICAgIH0sIGlucHV0ID8gaW5wdXQucHJvcHMuaW5wdXRQcm9wcyA6IHt9KVxuICB9LCBvdGhlcikpO1xufVxuXG5TZWxlY3QucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHdpZHRoIG9mIHRoZSBwb3BvdmVyIHdpbGwgYXV0b21hdGljYWxseSBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSBpdGVtcyBpbnNpZGUgdGhlXG4gICAqIG1lbnUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGF0IGxlYXN0IHRoZSB3aWR0aCBvZiB0aGUgc2VsZWN0IGlucHV0LlxuICAgKi9cbiAgYXV0b1dpZHRoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIG9wdGlvbiBlbGVtZW50cyB0byBwb3B1bGF0ZSB0aGUgc2VsZWN0IHdpdGguXG4gICAqIENhbiBiZSBzb21lIGBNZW51SXRlbWAgd2hlbiBgbmF0aXZlYCBpcyBmYWxzZSBhbmQgYG9wdGlvbmAgd2hlbiBgbmF0aXZlYCBpcyB0cnVlLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgZGlzcGxheWVkIGV2ZW4gaWYgaXRzIHZhbHVlIGlzIGVtcHR5LlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBBbiBgSW5wdXRgIGVsZW1lbnQ7IGRvZXMgbm90IGhhdmUgdG8gYmUgYSBtYXRlcmlhbC11aSBzcGVjaWZpYyBgSW5wdXRgLlxuICAgKi9cbiAgaW5wdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5lbGVtZW50LFxuXG4gIC8qKlxuICAgKiBBdHRyaWJ1dGVzIGFwcGxpZWQgdG8gdGhlIGBpbnB1dGAgZWxlbWVudC5cbiAgICogV2hlbiBgbmF0aXZlYCBpcyBgdHJ1ZWAsIHRoZSBhdHRyaWJ1dGVzIGFyZSBhcHBsaWVkIG9uIHRoZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgaW5wdXRQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKiBZb3UgY2FuIG9ubHkgdXNlIGl0IHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgd2lsbCBiZSB1c2luZyBhIG5hdGl2ZSBgc2VsZWN0YCBlbGVtZW50LlxuICAgKi9cbiAgbmF0aXZlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrLlxuICAgKiBZb3UgY2FuIHB1bGwgb3V0IHRoZSBuZXcgdmFsdWUgYnkgYWNjZXNzaW5nIGBldmVudC50YXJnZXQudmFsdWVgLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW2NoaWxkXSBUaGUgcmVhY3QgZWxlbWVudCB0aGF0IHdhcyBzZWxlY3RlZCB3aGVuIGBuYXRpdmVgIGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKiBVc2UgaW4gY29udHJvbGxlZCBtb2RlIChzZWUgb3BlbikuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGBzZWxlY3RgIG9wZW4gc3RhdGUuXG4gICAqIFlvdSBjYW4gb25seSB1c2UgaXQgd2hlbiB0aGUgYG5hdGl2ZWAgcHJvcGVydHkgaXMgYGZhbHNlYCAoZGVmYXVsdCkuXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICogWW91IGNhbiBvbmx5IHVzZSBpdCB3aGVuIHRoZSBgbmF0aXZlYCBwcm9wZXJ0eSBpcyBgZmFsc2VgIChkZWZhdWx0KS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgYHZhbHVlYCBwcm92aWRlZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyVmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBQcm9wZXJ0aWVzIGFwcGxpZWQgdG8gdGhlIGNsaWNrYWJsZSBkaXYgZWxlbWVudC5cbiAgICovXG4gIFNlbGVjdERpc3BsYXlQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHJlcXVpcmVkIHdoZW4gdGhlIGBuYXRpdmVgIHByb3BlcnR5IGlzIGBmYWxzZWAgKGRlZmF1bHQpLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pKV0pLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB7fTtcblNlbGVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIGF1dG9XaWR0aDogZmFsc2UsXG4gIGRpc3BsYXlFbXB0eTogZmFsc2UsXG4gIEljb25Db21wb25lbnQ6IF9BcnJvd0Ryb3BEb3duLmRlZmF1bHQsXG4gIGlucHV0OiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbnB1dC5kZWZhdWx0LCBudWxsKSxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBuYXRpdmU6IGZhbHNlXG59O1xuU2VsZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5TZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoX05hdGl2ZVNlbGVjdC5zdHlsZXMsIHtcbiAgbmFtZTogJ011aVNlbGVjdCdcbn0pKFNlbGVjdCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZlwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfTWVudSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL01lbnUvTWVudVwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vSW5wdXRCYXNlL3V0aWxzXCIpO1xuXG52YXIgX3JlYWN0SGVscGVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9yZWFjdEhlbHBlcnNcIik7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsVmFsdWVzKGEsIGIpIHtcbiAgaWYgKCgwLCBfdHlwZW9mMi5kZWZhdWx0KShiKSA9PT0gJ29iamVjdCcgJiYgYiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG5cbiAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpO1xufVxuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cblxudmFyIFNlbGVjdElucHV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMyLmRlZmF1bHQpKFNlbGVjdElucHV0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTZWxlY3RJbnB1dChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIFNlbGVjdElucHV0KTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoU2VsZWN0SW5wdXQpLmNhbGwodGhpcykpO1xuICAgIF90aGlzLmlnbm9yZU5leHRCbHVyID0gZmFsc2U7XG5cbiAgICBfdGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGV2ZW50ID0gX3JlZi5ldmVudCxcbiAgICAgICAgICBvcGVuID0gX3JlZi5vcGVuO1xuXG4gICAgICBpZiAoX3RoaXMuaXNPcGVuQ29udHJvbGxlZCkge1xuICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgIF90aGlzLnByb3BzLm9uT3BlbihldmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgLy8gUGVyZm9tIHRoZSBsYXlvdXQgY29tcHV0YXRpb24gb3V0c2lkZSBvZiB0aGUgcmVuZGVyIG1ldGhvZC5cbiAgICAgICAgbWVudU1pbldpZHRoOiBfdGhpcy5wcm9wcy5hdXRvV2lkdGggPyBudWxsIDogX3RoaXMuZGlzcGxheVJlZi5jbGllbnRXaWR0aCxcbiAgICAgICAgb3Blbjogb3BlblxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBPcGVuaW5nIHRoZSBtZW51IGlzIGdvaW5nIHRvIGJsdXIgdGhlLiBJdCB3aWxsIGJlIGZvY3VzZWQgYmFjayB3aGVuIGNsb3NlZC5cbiAgICAgIF90aGlzLmlnbm9yZU5leHRCbHVyID0gdHJ1ZTtcblxuICAgICAgX3RoaXMudXBkYXRlKHtcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgZXZlbnQ6IGV2ZW50XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQ2xvc2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnVwZGF0ZSh7XG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICBldmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVJdGVtQ2xpY2sgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFfdGhpcy5wcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICAgIF90aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50OiBldmVudFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBvbkNoYW5nZSA9IF90aGlzJHByb3BzLm9uQ2hhbmdlLFxuICAgICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzLm5hbWU7XG5cbiAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICAgICAgaWYgKF90aGlzLnByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IEFycmF5LmlzQXJyYXkoX3RoaXMucHJvcHMudmFsdWUpID8gKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoX3RoaXMucHJvcHMudmFsdWUpIDogW107XG4gICAgICAgICAgICB2YXIgaXRlbUluZGV4ID0gdmFsdWUuaW5kZXhPZihjaGlsZC5wcm9wcy52YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIHZhbHVlLnB1c2goY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gY2hpbGQucHJvcHMudmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgICAgIGV2ZW50LnRhcmdldCA9IHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50LCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5pZ25vcmVOZXh0Qmx1ciA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBUaGUgcGFyZW50IGNvbXBvbmVudHMgYXJlIHJlbHlpbmcgb24gdGhlIGJ1YmJsaW5nIG9mIHRoZSBldmVudC5cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIF90aGlzLmlnbm9yZU5leHRCbHVyID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uQmx1cikge1xuICAgICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICB2YWx1ZSA9IF90aGlzJHByb3BzMi52YWx1ZSxcbiAgICAgICAgICAgIG5hbWUgPSBfdGhpcyRwcm9wczIubmFtZTtcbiAgICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgICBldmVudC50YXJnZXQgPSB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5wcm9wcy5vbkJsdXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoWydzcGFjZScsICd1cCcsICdkb3duJ10uaW5kZXhPZigoMCwgX2tleWNvZGUuZGVmYXVsdCkoZXZlbnQpKSAhPT0gLTEpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gT3BlbmluZyB0aGUgbWVudSBpcyBnb2luZyB0byBibHVyIHRoZS4gSXQgd2lsbCBiZSBmb2N1c2VkIGJhY2sgd2hlbiBjbG9zZWQuXG5cbiAgICAgICAgX3RoaXMuaWdub3JlTmV4dEJsdXIgPSB0cnVlO1xuXG4gICAgICAgIF90aGlzLnVwZGF0ZSh7XG4gICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICBldmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZURpc3BsYXlSZWYgPSBmdW5jdGlvbiAocmVmKSB7XG4gICAgICBfdGhpcy5kaXNwbGF5UmVmID0gcmVmO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVJbnB1dFJlZiA9IGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHZhciBpbnB1dFJlZiA9IF90aGlzLnByb3BzLmlucHV0UmVmO1xuXG4gICAgICBpZiAoIWlucHV0UmVmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGVQcm94eSA9IHtcbiAgICAgICAgbm9kZTogcmVmLFxuICAgICAgICAvLyBCeSBwYXNzIHRoZSBuYXRpdmUgaW5wdXQgYXMgd2UgZXhwb3NlIGEgcmljaCBvYmplY3QgKGFycmF5KS5cbiAgICAgICAgdmFsdWU6IF90aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7XG4gICAgICAgICAgX3RoaXMuZGlzcGxheVJlZi5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgKDAsIF9yZWFjdEhlbHBlcnMuc2V0UmVmKShpbnB1dFJlZiwgbm9kZVByb3h5KTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaXNPcGVuQ29udHJvbGxlZCA9IHByb3BzLm9wZW4gIT09IHVuZGVmaW5lZDtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1lbnVNaW5XaWR0aDogbnVsbCxcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShTZWxlY3RJbnB1dCwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5pc09wZW5Db250cm9sbGVkICYmIHRoaXMucHJvcHMub3Blbikge1xuICAgICAgICAvLyBGb2N1cyB0aGUgZGlzcGxheSBub2RlIHNvIHRoZSBmb2N1cyBpcyByZXN0b3JlZCBvbiB0aGlzIGVsZW1lbnQgb25jZVxuICAgICAgICAvLyB0aGUgbWVudSBpcyBjbG9zZWQuXG4gICAgICAgIHRoaXMuZGlzcGxheVJlZi5mb2N1cygpOyAvLyBSZXJlbmRlciB3aXRoIHRoZSByZXNvbHZlIGBkaXNwbGF5UmVmYCByZWZlcmVuY2UuXG5cbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5UmVmLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgICBfY2xhc3NOYW1lcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYXV0b1dpZHRoID0gX3RoaXMkcHJvcHMzLmF1dG9XaWR0aCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjbGFzc2VzID0gX3RoaXMkcHJvcHMzLmNsYXNzZXMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkcHJvcHMzLmNsYXNzTmFtZSxcbiAgICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNwbGF5RW1wdHkgPSBfdGhpcyRwcm9wczMuZGlzcGxheUVtcHR5LFxuICAgICAgICAgIEljb25Db21wb25lbnQgPSBfdGhpcyRwcm9wczMuSWNvbkNvbXBvbmVudCxcbiAgICAgICAgICBpbnB1dFJlZiA9IF90aGlzJHByb3BzMy5pbnB1dFJlZixcbiAgICAgICAgICBfdGhpcyRwcm9wczMkTWVudVByb3AgPSBfdGhpcyRwcm9wczMuTWVudVByb3BzLFxuICAgICAgICAgIE1lbnVQcm9wcyA9IF90aGlzJHByb3BzMyRNZW51UHJvcCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczMkTWVudVByb3AsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfdGhpcyRwcm9wczMubXVsdGlwbGUsXG4gICAgICAgICAgbmFtZSA9IF90aGlzJHByb3BzMy5uYW1lLFxuICAgICAgICAgIG9uQmx1ciA9IF90aGlzJHByb3BzMy5vbkJsdXIsXG4gICAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wczMub25DaGFuZ2UsXG4gICAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzMy5vbkNsb3NlLFxuICAgICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wczMub25Gb2N1cyxcbiAgICAgICAgICBvbk9wZW4gPSBfdGhpcyRwcm9wczMub25PcGVuLFxuICAgICAgICAgIG9wZW5Qcm9wID0gX3RoaXMkcHJvcHMzLm9wZW4sXG4gICAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczMucmVhZE9ubHksXG4gICAgICAgICAgcmVuZGVyVmFsdWUgPSBfdGhpcyRwcm9wczMucmVuZGVyVmFsdWUsXG4gICAgICAgICAgcmVxdWlyZWQgPSBfdGhpcyRwcm9wczMucmVxdWlyZWQsXG4gICAgICAgICAgU2VsZWN0RGlzcGxheVByb3BzID0gX3RoaXMkcHJvcHMzLlNlbGVjdERpc3BsYXlQcm9wcyxcbiAgICAgICAgICB0YWJJbmRleFByb3AgPSBfdGhpcyRwcm9wczMudGFiSW5kZXgsXG4gICAgICAgICAgX3RoaXMkcHJvcHMzJHR5cGUgPSBfdGhpcyRwcm9wczMudHlwZSxcbiAgICAgICAgICB0eXBlID0gX3RoaXMkcHJvcHMzJHR5cGUgPT09IHZvaWQgMCA/ICdoaWRkZW4nIDogX3RoaXMkcHJvcHMzJHR5cGUsXG4gICAgICAgICAgdmFsdWUgPSBfdGhpcyRwcm9wczMudmFsdWUsXG4gICAgICAgICAgdmFyaWFudCA9IF90aGlzJHByb3BzMy52YXJpYW50LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMzLCBbXCJhdXRvV2lkdGhcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJkaXNhYmxlZFwiLCBcImRpc3BsYXlFbXB0eVwiLCBcIkljb25Db21wb25lbnRcIiwgXCJpbnB1dFJlZlwiLCBcIk1lbnVQcm9wc1wiLCBcIm11bHRpcGxlXCIsIFwibmFtZVwiLCBcIm9uQmx1clwiLCBcIm9uQ2hhbmdlXCIsIFwib25DbG9zZVwiLCBcIm9uRm9jdXNcIiwgXCJvbk9wZW5cIiwgXCJvcGVuXCIsIFwicmVhZE9ubHlcIiwgXCJyZW5kZXJWYWx1ZVwiLCBcInJlcXVpcmVkXCIsIFwiU2VsZWN0RGlzcGxheVByb3BzXCIsIFwidGFiSW5kZXhcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJ2YXJpYW50XCJdKTtcbiAgICAgIHZhciBvcGVuID0gdGhpcy5pc09wZW5Db250cm9sbGVkICYmIHRoaXMuZGlzcGxheVJlZiA/IG9wZW5Qcm9wIDogdGhpcy5zdGF0ZS5vcGVuO1xuICAgICAgZGVsZXRlIG90aGVyWydhcmlhLWludmFsaWQnXTtcbiAgICAgIHZhciBkaXNwbGF5O1xuICAgICAgdmFyIGRpc3BsYXlTaW5nbGUgPSAnJztcbiAgICAgIHZhciBkaXNwbGF5TXVsdGlwbGUgPSBbXTtcbiAgICAgIHZhciBjb21wdXRlRGlzcGxheSA9IGZhbHNlOyAvLyBObyBuZWVkIHRvIGRpc3BsYXkgYW55IHZhbHVlIGlmIHRoZSBmaWVsZCBpcyBlbXB0eS5cblxuICAgICAgaWYgKCgwLCBfdXRpbHMuaXNGaWxsZWQpKHRoaXMucHJvcHMpIHx8IGRpc3BsYXlFbXB0eSkge1xuICAgICAgICBpZiAocmVuZGVyVmFsdWUpIHtcbiAgICAgICAgICBkaXNwbGF5ID0gcmVuZGVyVmFsdWUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXB1dGVEaXNwbGF5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSBfcmVhY3QuZGVmYXVsdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoIV9yZWFjdC5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGNoaWxkLnR5cGUgIT09IF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBbXCJNYXRlcmlhbC1VSTogdGhlIFNlbGVjdCBjb21wb25lbnQgZG9lc24ndCBhY2NlcHQgYSBGcmFnbWVudCBhcyBhIGNoaWxkLlwiLCAnQ29uc2lkZXIgcHJvdmlkaW5nIGFuIGFycmF5IGluc3RlYWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgICB2YXIgc2VsZWN0ZWQ7XG5cbiAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRlcmlhbC1VSTogdGhlIGB2YWx1ZWAgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheSAnICsgJ3doZW4gdXNpbmcgdGhlIGBTZWxlY3RgIGNvbXBvbmVudCB3aXRoIGBtdWx0aXBsZWAuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VsZWN0ZWQgPSB2YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICByZXR1cm4gYXJlRXF1YWxWYWx1ZXModiwgY2hpbGQucHJvcHMudmFsdWUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHNlbGVjdGVkICYmIGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgICAgICBkaXNwbGF5TXVsdGlwbGUucHVzaChjaGlsZC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGVkID0gYXJlRXF1YWxWYWx1ZXModmFsdWUsIGNoaWxkLnByb3BzLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RlZCAmJiBjb21wdXRlRGlzcGxheSkge1xuICAgICAgICAgICAgZGlzcGxheVNpbmdsZSA9IGNoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBvbkNsaWNrOiBfdGhpczIuaGFuZGxlSXRlbUNsaWNrKGNoaWxkKSxcbiAgICAgICAgICByb2xlOiAnb3B0aW9uJyxcbiAgICAgICAgICBzZWxlY3RlZDogc2VsZWN0ZWQsXG4gICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBUaGUgdmFsdWUgaXMgbW9zdCBsaWtlbHkgbm90IGEgdmFsaWQgSFRNTCBhdHRyaWJ1dGUuXG4gICAgICAgICAgJ2RhdGEtdmFsdWUnOiBjaGlsZC5wcm9wcy52YWx1ZSAvLyBJbnN0ZWFkLCB3ZSBwcm92aWRlIGl0IGFzIGEgZGF0YSBhdHRyaWJ1dGUuXG5cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGNvbXB1dGVEaXNwbGF5KSB7XG4gICAgICAgIGRpc3BsYXkgPSBtdWx0aXBsZSA/IGRpc3BsYXlNdWx0aXBsZS5qb2luKCcsICcpIDogZGlzcGxheVNpbmdsZTtcbiAgICAgIH0gLy8gQXZvaWQgcGVyZm9ybWluZyBhIGxheW91dCBjb21wdXRhdGlvbiBpbiB0aGUgcmVuZGVyIG1ldGhvZC5cblxuXG4gICAgICB2YXIgbWVudU1pbldpZHRoID0gdGhpcy5zdGF0ZS5tZW51TWluV2lkdGg7XG5cbiAgICAgIGlmICghYXV0b1dpZHRoICYmIHRoaXMuaXNPcGVuQ29udHJvbGxlZCAmJiB0aGlzLmRpc3BsYXlSZWYpIHtcbiAgICAgICAgbWVudU1pbldpZHRoID0gdGhpcy5kaXNwbGF5UmVmLmNsaWVudFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFiSW5kZXg7XG5cbiAgICAgIGlmICh0eXBlb2YgdGFiSW5kZXhQcm9wICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YWJJbmRleCA9IHRhYkluZGV4UHJvcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhYkluZGV4ID0gZGlzYWJsZWQgPyBudWxsIDogMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMucm9vdFxuICAgICAgfSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiAoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3Nlcy5zZWxlY3QsIGNsYXNzZXMuc2VsZWN0TWVudSwgKF9jbGFzc05hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmRpc2FibGVkLCBkaXNhYmxlZCksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzLmZpbGxlZCwgdmFyaWFudCA9PT0gJ2ZpbGxlZCcpLCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlcy5vdXRsaW5lZCwgdmFyaWFudCA9PT0gJ291dGxpbmVkJyksIF9jbGFzc05hbWVzKSwgY2xhc3NOYW1lKSxcbiAgICAgICAgcmVmOiB0aGlzLmhhbmRsZURpc3BsYXlSZWYsXG4gICAgICAgIFwiYXJpYS1wcmVzc2VkXCI6IG9wZW4gPyAndHJ1ZScgOiAnZmFsc2UnLFxuICAgICAgICB0YWJJbmRleDogdGFiSW5kZXgsXG4gICAgICAgIHJvbGU6IFwiYnV0dG9uXCIsXG4gICAgICAgIFwiYXJpYS1vd25zXCI6IG9wZW4gPyBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpIDogdW5kZWZpbmVkLFxuICAgICAgICBcImFyaWEtaGFzcG9wdXBcIjogXCJ0cnVlXCIsXG4gICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICBvbkJsdXI6IHRoaXMuaGFuZGxlQmx1cixcbiAgICAgICAgb25DbGljazogZGlzYWJsZWQgfHwgcmVhZE9ubHkgPyBudWxsIDogdGhpcy5oYW5kbGVDbGljayxcbiAgICAgICAgb25Gb2N1czogb25Gb2N1c1xuICAgICAgfSwgU2VsZWN0RGlzcGxheVByb3BzKSwgZGlzcGxheSB8fCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB7XG4gICAgICAgICAgX19odG1sOiAnJiM4MjAzOydcbiAgICAgICAgfVxuICAgICAgfSkpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICByZWY6IHRoaXMuaGFuZGxlSW5wdXRSZWYsXG4gICAgICAgIHR5cGU6IHR5cGVcbiAgICAgIH0sIG90aGVyKSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoSWNvbkNvbXBvbmVudCwge1xuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMuaWNvblxuICAgICAgfSksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX01lbnUuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGlkOiBcIm1lbnUtXCIuY29uY2F0KG5hbWUgfHwgJycpLFxuICAgICAgICBhbmNob3JFbDogdGhpcy5kaXNwbGF5UmVmLFxuICAgICAgICBvcGVuOiBvcGVuLFxuICAgICAgICBvbkNsb3NlOiB0aGlzLmhhbmRsZUNsb3NlXG4gICAgICB9LCBNZW51UHJvcHMsIHtcbiAgICAgICAgTWVudUxpc3RQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgcm9sZTogJ2xpc3Rib3gnXG4gICAgICAgIH0sIE1lbnVQcm9wcy5NZW51TGlzdFByb3BzKSxcbiAgICAgICAgUGFwZXJQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgTWVudVByb3BzLlBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgICAgICBtaW5XaWR0aDogbWVudU1pbldpZHRoXG4gICAgICAgICAgfSwgTWVudVByb3BzLlBhcGVyUHJvcHMgIT0gbnVsbCA/IE1lbnVQcm9wcy5QYXBlclByb3BzLnN0eWxlIDogbnVsbClcbiAgICAgICAgfSlcbiAgICAgIH0pLCBpdGVtcykpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2VsZWN0SW5wdXQ7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblNlbGVjdElucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGF1dG9Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB3aWR0aCBvZiB0aGUgcG9wb3ZlciB3aWxsIGF1dG9tYXRpY2FsbHkgYmUgc2V0IGFjY29yZGluZyB0byB0aGUgaXRlbXMgaW5zaWRlIHRoZVxuICAgKiBtZW51LCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIHNlbGVjdCBpbnB1dC5cbiAgICovXG4gIGF1dG9XaWR0aDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gZWxlbWVudHMgdG8gcG9wdWxhdGUgdGhlIHNlbGVjdCB3aXRoLlxuICAgKiBDYW4gYmUgc29tZSBgPE1lbnVJdGVtPmAgZWxlbWVudHMuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgc2VsZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHNlbGVjdGVkIGl0ZW0gaXMgZGlzcGxheWVkIGV2ZW4gaWYgaXRzIHZhbHVlIGlzIGVtcHR5LlxuICAgKi9cbiAgZGlzcGxheUVtcHR5OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGljb24gdGhhdCBkaXNwbGF5cyB0aGUgYXJyb3cuXG4gICAqL1xuICBJY29uQ29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBVc2UgdGhhdCBwcm9wZXJ0eSB0byBwYXNzIGEgcmVmIGNhbGxiYWNrIHRvIHRoZSBuYXRpdmUgc2VsZWN0IGVsZW1lbnQuXG4gICAqL1xuICBpbnB1dFJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBbYE1lbnVgXSgvYXBpL21lbnUvKSBlbGVtZW50LlxuICAgKi9cbiAgTWVudVByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydCBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBOYW1lIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgb3IgaGlkZGVuIGBpbnB1dGAgZWxlbWVudC5cbiAgICovXG4gIG5hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uQmx1cjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtjaGlsZF0gVGhlIHJlYWN0IGVsZW1lbnQgdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBvcGVuZWQuXG4gICAqIFVzZSBpbiBjb250cm9sbGVkIG1vZGUgKHNlZSBvcGVuKS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCBzb3VyY2Ugb2YgdGhlIGNhbGxiYWNrXG4gICAqL1xuICBvbk9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9sIGBzZWxlY3RgIG9wZW4gc3RhdGUuXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuXG4gIC8qKlxuICAgKiBSZW5kZXIgdGhlIHNlbGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBgdmFsdWVgIHByb3ZpZGVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIEByZXR1cm5zIHtSZWFjdEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXJWYWx1ZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBjbGlja2FibGUgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBTZWxlY3REaXNwbGF5UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBpbnB1dCB2YWx1ZS5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSldKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWydzdGFuZGFyZCcsICdvdXRsaW5lZCcsICdmaWxsZWQnXSlcbn0gOiB7fTtcbnZhciBfZGVmYXVsdCA9IFNlbGVjdElucHV0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdERvbSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG5cbnZhciBfc2Nyb2xsYmFyU2l6ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRvbS1oZWxwZXJzL3V0aWwvc2Nyb2xsYmFyU2l6ZVwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9Qb3BvdmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUG9wb3ZlclwiKSk7XG5cbnZhciBfTWVudUxpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9NZW51TGlzdFwiKSk7XG5cbi8vIEBpbmhlcml0ZWRDb21wb25lbnQgUG9wb3ZlclxudmFyIFJUTF9PUklHSU4gPSB7XG4gIHZlcnRpY2FsOiAndG9wJyxcbiAgaG9yaXpvbnRhbDogJ3JpZ2h0J1xufTtcbnZhciBMVFJfT1JJR0lOID0ge1xuICB2ZXJ0aWNhbDogJ3RvcCcsXG4gIGhvcml6b250YWw6ICdsZWZ0J1xufTtcbnZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudC4gKi9cbiAgcGFwZXI6IHtcbiAgICAvLyBzcGVjWjogVGhlIG1heGltdW0gaGVpZ2h0IG9mIGEgc2ltcGxlIG1lbnUgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHJvd3MgbGVzcyB0aGFuIHRoZSB2aWV3XG4gICAgLy8gaGVpZ2h0LiBUaGlzIGVuc3VyZXMgYSB0YXBhYmxlIGFyZWEgb3V0c2lkZSBvZiB0aGUgc2ltcGxlIG1lbnUgd2l0aCB3aGljaCB0byBkaXNtaXNzXG4gICAgLy8gdGhlIG1lbnUuXG4gICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gOTZweCknLFxuICAgIC8vIEFkZCBpT1MgbW9tZW50dW0gc2Nyb2xsaW5nLlxuICAgIFdlYmtpdE92ZXJmbG93U2Nyb2xsaW5nOiAndG91Y2gnXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIE1lbnUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoTWVudSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudSgpIHtcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIE1lbnUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKE1lbnUpKS5jYWxsLmFwcGx5KF9nZXRQcm90b3R5cGVPZjIsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF90aGlzLmdldENvbnRlbnRBbmNob3JFbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghX3RoaXMubWVudUxpc3RSZWYgfHwgIV90aGlzLm1lbnVMaXN0UmVmLnNlbGVjdGVkSXRlbVJlZikge1xuICAgICAgICByZXR1cm4gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubWVudUxpc3RSZWYpLmZpcnN0Q2hpbGQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3REb20uZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcy5tZW51TGlzdFJlZi5zZWxlY3RlZEl0ZW1SZWYpO1xuICAgIH07XG5cbiAgICBfdGhpcy5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpcy5tZW51TGlzdFJlZiAmJiBfdGhpcy5tZW51TGlzdFJlZi5zZWxlY3RlZEl0ZW1SZWYpIHtcbiAgICAgICAgX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubWVudUxpc3RSZWYuc2VsZWN0ZWRJdGVtUmVmKS5mb2N1cygpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1lbnVMaXN0ID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubWVudUxpc3RSZWYpO1xuXG4gICAgICBpZiAobWVudUxpc3QgJiYgbWVudUxpc3QuZmlyc3RDaGlsZCkge1xuICAgICAgICBtZW51TGlzdC5maXJzdENoaWxkLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUVudGVyaW5nID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGRpc2FibGVBdXRvRm9jdXNJdGVtID0gX3RoaXMkcHJvcHMuZGlzYWJsZUF1dG9Gb2N1c0l0ZW0sXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZTtcblxuICAgICAgdmFyIG1lbnVMaXN0ID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMubWVudUxpc3RSZWYpOyAvLyBGb2N1cyBzbyB0aGUgc2Nyb2xsIGNvbXB1dGF0aW9uIG9mIHRoZSBQb3BvdmVyIHdvcmtzIGFzIGV4cGVjdGVkLlxuXG5cbiAgICAgIGlmIChkaXNhYmxlQXV0b0ZvY3VzSXRlbSAhPT0gdHJ1ZSkge1xuICAgICAgICBfdGhpcy5mb2N1cygpO1xuICAgICAgfSAvLyBMZXQncyBpZ25vcmUgdGhhdCBwaWVjZSBvZiBsb2dpYyBpZiB1c2VycyBhcmUgYWxyZWFkeSBvdmVycmlkaW5nIHRoZSB3aWR0aFxuICAgICAgLy8gb2YgdGhlIG1lbnUuXG5cblxuICAgICAgaWYgKG1lbnVMaXN0ICYmIGVsZW1lbnQuY2xpZW50SGVpZ2h0IDwgbWVudUxpc3QuY2xpZW50SGVpZ2h0ICYmICFtZW51TGlzdC5zdHlsZS53aWR0aCkge1xuICAgICAgICB2YXIgc2l6ZSA9IFwiXCIuY29uY2F0KCgwLCBfc2Nyb2xsYmFyU2l6ZS5kZWZhdWx0KSgpLCBcInB4XCIpO1xuICAgICAgICBtZW51TGlzdC5zdHlsZVt0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gJ3BhZGRpbmdMZWZ0JyA6ICdwYWRkaW5nUmlnaHQnXSA9IHNpemU7XG4gICAgICAgIG1lbnVMaXN0LnN0eWxlLndpZHRoID0gXCJjYWxjKDEwMCUgKyBcIi5jb25jYXQoc2l6ZSwgXCIpXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmluZykge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyaW5nKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0S2V5RG93biA9IGZ1bmN0aW9uIChldmVudCwga2V5KSB7XG4gICAgICBpZiAoa2V5ID09PSAndGFiJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsb3NlKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25DbG9zZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTWVudSwgW3tcbiAgICBrZXk6IFwiY29tcG9uZW50RGlkTW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuICYmIHRoaXMucHJvcHMuZGlzYWJsZUF1dG9Gb2N1c0l0ZW0gIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMyLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzZXMgPSBfdGhpcyRwcm9wczIuY2xhc3NlcyxcbiAgICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzSXRlbSA9IF90aGlzJHByb3BzMi5kaXNhYmxlQXV0b0ZvY3VzSXRlbSxcbiAgICAgICAgICBNZW51TGlzdFByb3BzID0gX3RoaXMkcHJvcHMyLk1lbnVMaXN0UHJvcHMsXG4gICAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzMi5vbkVudGVyaW5nLFxuICAgICAgICAgIF90aGlzJHByb3BzMiRQYXBlclBybyA9IF90aGlzJHByb3BzMi5QYXBlclByb3BzLFxuICAgICAgICAgIFBhcGVyUHJvcHMgPSBfdGhpcyRwcm9wczIkUGFwZXJQcm8gPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJFBhcGVyUHJvLFxuICAgICAgICAgIFBvcG92ZXJDbGFzc2VzID0gX3RoaXMkcHJvcHMyLlBvcG92ZXJDbGFzc2VzLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMyLnRoZW1lLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMyLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJkaXNhYmxlQXV0b0ZvY3VzSXRlbVwiLCBcIk1lbnVMaXN0UHJvcHNcIiwgXCJvbkVudGVyaW5nXCIsIFwiUGFwZXJQcm9wc1wiLCBcIlBvcG92ZXJDbGFzc2VzXCIsIFwidGhlbWVcIl0pO1xuICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcG92ZXIuZGVmYXVsdCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGdldENvbnRlbnRBbmNob3JFbDogdGhpcy5nZXRDb250ZW50QW5jaG9yRWwsXG4gICAgICAgIGNsYXNzZXM6IFBvcG92ZXJDbGFzc2VzLFxuICAgICAgICBvbkVudGVyaW5nOiB0aGlzLmhhbmRsZUVudGVyaW5nLFxuICAgICAgICBhbmNob3JPcmlnaW46IHRoZW1lLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyBSVExfT1JJR0lOIDogTFRSX09SSUdJTixcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnID8gUlRMX09SSUdJTiA6IExUUl9PUklHSU4sXG4gICAgICAgIFBhcGVyUHJvcHM6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIFBhcGVyUHJvcHMsIHtcbiAgICAgICAgICBjbGFzc2VzOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBQYXBlclByb3BzLmNsYXNzZXMsIHtcbiAgICAgICAgICAgIHJvb3Q6IGNsYXNzZXMucGFwZXJcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfSwgb3RoZXIpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9NZW51TGlzdC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUxpc3RLZXlEb3duXG4gICAgICB9LCBNZW51TGlzdFByb3BzLCB7XG4gICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKF9yZWYpIHtcbiAgICAgICAgICBfdGhpczIubWVudUxpc3RSZWYgPSBfcmVmO1xuICAgICAgICB9XG4gICAgICB9KSwgY2hpbGRyZW4pKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1lbnU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1lbnUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIERPTSBlbGVtZW50IHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgbWVudS5cbiAgICovXG4gIGFuY2hvckVsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBNZW51IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBzZWxlY3RlZCAvIGZpcnN0IG1lbnUgaXRlbSB3aWxsIG5vdCBiZSBhdXRvIGZvY3VzZWQuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzSXRlbTogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BNZW51TGlzdGBdKC9hcGkvbWVudS1saXN0LykgZWxlbWVudC5cbiAgICovXG4gIE1lbnVMaXN0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFja1xuICAgKi9cbiAgb25DbG9zZTogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgTWVudSBlbnRlcnMuXG4gICAqL1xuICBvbkVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZW50ZXJlZC5cbiAgICovXG4gIG9uRW50ZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1lbnUgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBNZW51IGV4aXRzLlxuICAgKi9cbiAgb25FeGl0OiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTWVudSBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBNZW51IGlzIGV4aXRpbmcuXG4gICAqL1xuICBvbkV4aXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtZW51IGlzIHZpc2libGUuXG4gICAqL1xuICBvcGVuOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBQYXBlclByb3BzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBgY2xhc3Nlc2AgcHJvcGVydHkgYXBwbGllZCB0byB0aGUgW2BQb3BvdmVyYF0oL2FwaS9wb3BvdmVyLykgZWxlbWVudC5cbiAgICovXG4gIFBvcG92ZXJDbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICB0aGVtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB0cmFuc2l0aW9uIGluIGBtc2AsIG9yICdhdXRvJ1xuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSksIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2F1dG8nXSldKVxufSA6IHt9O1xuTWVudS5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVBdXRvRm9jdXNJdGVtOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnYXV0bydcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aU1lbnUnLFxuICB3aXRoVGhlbWU6IHRydWVcbn0pKE1lbnUpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Qb3BvdmVyLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX1BvcG92ZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BvcG92ZXJcIikpOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuc3R5bGVzID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJ3YXJuaW5nXCIpKTtcblxudmFyIF9kZWJvdW5jZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImRlYm91bmNlXCIpKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1ldmVudC1saXN0ZW5lclwiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX293bmVyV2luZG93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvb3duZXJXaW5kb3dcIikpO1xuXG52YXIgX3dpdGhTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFN0eWxlc1wiKSk7XG5cbnZhciBfTW9kYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9Nb2RhbFwiKSk7XG5cbnZhciBfR3JvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL0dyb3dcIikpO1xuXG52YXIgX1BhcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vUGFwZXJcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IE1vZGFsXG4vLyA8IDFrYiBwYXlsb2FkIG92ZXJoZWFkIHdoZW4gbG9kYXNoL2RlYm91bmNlIGlzID4gM2tiLlxuZnVuY3Rpb24gZ2V0T2Zmc2V0VG9wKHJlY3QsIHZlcnRpY2FsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInKSB7XG4gICAgb2Zmc2V0ID0gdmVydGljYWw7XG4gIH0gZWxzZSBpZiAodmVydGljYWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC5oZWlnaHQgLyAyO1xuICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnYm90dG9tJykge1xuICAgIG9mZnNldCA9IHJlY3QuaGVpZ2h0O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldDtcbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0TGVmdChyZWN0LCBob3Jpem9udGFsKSB7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGlmICh0eXBlb2YgaG9yaXpvbnRhbCA9PT0gJ251bWJlcicpIHtcbiAgICBvZmZzZXQgPSBob3Jpem9udGFsO1xuICB9IGVsc2UgaWYgKGhvcml6b250YWwgPT09ICdjZW50ZXInKSB7XG4gICAgb2Zmc2V0ID0gcmVjdC53aWR0aCAvIDI7XG4gIH0gZWxzZSBpZiAoaG9yaXpvbnRhbCA9PT0gJ3JpZ2h0Jykge1xuICAgIG9mZnNldCA9IHJlY3Qud2lkdGg7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW5WYWx1ZSh0cmFuc2Zvcm1PcmlnaW4pIHtcbiAgcmV0dXJuIFt0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCwgdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsXS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQobiwgXCJweFwiKSA6IG47XG4gIH0pLmpvaW4oJyAnKTtcbn0gLy8gU3VtIHRoZSBzY3JvbGxUb3AgYmV0d2VlbiB0d28gZWxlbWVudHMuXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KHBhcmVudCwgY2hpbGQpIHtcbiAgdmFyIGVsZW1lbnQgPSBjaGlsZDtcbiAgdmFyIHNjcm9sbFRvcCA9IDA7XG5cbiAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gcGFyZW50KSB7XG4gICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICBzY3JvbGxUb3AgKz0gZWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICByZXR1cm4gc2Nyb2xsVG9wO1xufVxuXG5mdW5jdGlvbiBnZXRBbmNob3JFbChhbmNob3JFbCkge1xuICByZXR1cm4gdHlwZW9mIGFuY2hvckVsID09PSAnZnVuY3Rpb24nID8gYW5jaG9yRWwoKSA6IGFuY2hvckVsO1xufVxuXG52YXIgc3R5bGVzID0ge1xuICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQuICovXG4gIHBhcGVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgb3ZlcmZsb3dZOiAnYXV0bycsXG4gICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAvLyBTbyB3ZSBzZWUgdGhlIHBvcG92ZXIgd2hlbiBpdCdzIGVtcHR5LlxuICAgIC8vIEl0J3MgbW9zdCBsaWtlbHkgb24gaXNzdWUgb24gdXNlcmxhbmQuXG4gICAgbWluV2lkdGg6IDE2LFxuICAgIG1pbkhlaWdodDogMTYsXG4gICAgbWF4V2lkdGg6ICdjYWxjKDEwMCUgLSAzMnB4KScsXG4gICAgbWF4SGVpZ2h0OiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn07XG5leHBvcnRzLnN0eWxlcyA9IHN0eWxlcztcblxudmFyIFBvcG92ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoUG9wb3ZlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBQb3BvdmVyKTtcbiAgICBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUG9wb3ZlcikuY2FsbCh0aGlzKSk7XG4gICAgX3RoaXMuaGFuZGxlR2V0T2Zmc2V0VG9wID0gZ2V0T2Zmc2V0VG9wO1xuICAgIF90aGlzLmhhbmRsZUdldE9mZnNldExlZnQgPSBnZXRPZmZzZXRMZWZ0O1xuXG4gICAgX3RoaXMuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5oYW5kbGVSZXNpemUuY2xlYXIoKTtcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0UG9zaXRpb25pbmdTdHlsZXMgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIHBvc2l0aW9uaW5nID0gX3RoaXMuZ2V0UG9zaXRpb25pbmdTdHlsZShlbGVtZW50KTtcblxuICAgICAgaWYgKHBvc2l0aW9uaW5nLnRvcCAhPT0gbnVsbCkge1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHBvc2l0aW9uaW5nLnRvcDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvc2l0aW9uaW5nLmxlZnQgIT09IG51bGwpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5sZWZ0ID0gcG9zaXRpb25pbmcubGVmdDtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBwb3NpdGlvbmluZy50cmFuc2Zvcm1PcmlnaW47XG4gICAgfTtcblxuICAgIF90aGlzLmdldFBvc2l0aW9uaW5nU3R5bGUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wcy5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfdGhpcyRwcm9wcy5hbmNob3JSZWZlcmVuY2UsXG4gICAgICAgICAgbWFyZ2luVGhyZXNob2xkID0gX3RoaXMkcHJvcHMubWFyZ2luVGhyZXNob2xkOyAvLyBDaGVjayBpZiB0aGUgcGFyZW50IGhhcyByZXF1ZXN0ZWQgYW5jaG9yaW5nIG9uIGFuIGlubmVyIGNvbnRlbnQgbm9kZVxuXG4gICAgICB2YXIgY29udGVudEFuY2hvck9mZnNldCA9IF90aGlzLmdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCk7XG5cbiAgICAgIHZhciBlbGVtUmVjdCA9IHtcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHRcbiAgICAgIH07IC8vIEdldCB0aGUgdHJhbnNmb3JtIG9yaWdpbiBwb2ludCBvbiB0aGUgZWxlbWVudCBpdHNlbGZcblxuICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IF90aGlzLmdldFRyYW5zZm9ybU9yaWdpbihlbGVtUmVjdCwgY29udGVudEFuY2hvck9mZnNldCk7XG5cbiAgICAgIGlmIChhbmNob3JSZWZlcmVuY2UgPT09ICdub25lJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgICBsZWZ0OiBudWxsLFxuICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgICB9O1xuICAgICAgfSAvLyBHZXQgdGhlIG9mZnNldCBvZiBvZiB0aGUgYW5jaG9yaW5nIGVsZW1lbnRcblxuXG4gICAgICB2YXIgYW5jaG9yT2Zmc2V0ID0gX3RoaXMuZ2V0QW5jaG9yT2Zmc2V0KGNvbnRlbnRBbmNob3JPZmZzZXQpOyAvLyBDYWxjdWxhdGUgZWxlbWVudCBwb3NpdGlvbmluZ1xuXG5cbiAgICAgIHZhciB0b3AgPSBhbmNob3JPZmZzZXQudG9wIC0gdHJhbnNmb3JtT3JpZ2luLnZlcnRpY2FsO1xuICAgICAgdmFyIGxlZnQgPSBhbmNob3JPZmZzZXQubGVmdCAtIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsO1xuICAgICAgdmFyIGJvdHRvbSA9IHRvcCArIGVsZW1SZWN0LmhlaWdodDtcbiAgICAgIHZhciByaWdodCA9IGxlZnQgKyBlbGVtUmVjdC53aWR0aDsgLy8gVXNlIHRoZSBwYXJlbnQgd2luZG93IG9mIHRoZSBhbmNob3JFbCBpZiBwcm92aWRlZFxuXG4gICAgICB2YXIgY29udGFpbmVyV2luZG93ID0gKDAsIF9vd25lcldpbmRvdy5kZWZhdWx0KShnZXRBbmNob3JFbChhbmNob3JFbCkpOyAvLyBXaW5kb3cgdGhyZXNob2xkcyB0YWtpbmcgcmVxdWlyZWQgbWFyZ2luIGludG8gYWNjb3VudFxuXG4gICAgICB2YXIgaGVpZ2h0VGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVySGVpZ2h0IC0gbWFyZ2luVGhyZXNob2xkO1xuICAgICAgdmFyIHdpZHRoVGhyZXNob2xkID0gY29udGFpbmVyV2luZG93LmlubmVyV2lkdGggLSBtYXJnaW5UaHJlc2hvbGQ7IC8vIENoZWNrIGlmIHRoZSB2ZXJ0aWNhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICAgIGlmICh0b3AgPCBtYXJnaW5UaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGRpZmYgPSB0b3AgLSBtYXJnaW5UaHJlc2hvbGQ7XG4gICAgICAgIHRvcCAtPSBkaWZmO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwgKz0gZGlmZjtcbiAgICAgIH0gZWxzZSBpZiAoYm90dG9tID4gaGVpZ2h0VGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBfZGlmZiA9IGJvdHRvbSAtIGhlaWdodFRocmVzaG9sZDtcblxuICAgICAgICB0b3AgLT0gX2RpZmY7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbi52ZXJ0aWNhbCArPSBfZGlmZjtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKGVsZW1SZWN0LmhlaWdodCA8IGhlaWdodFRocmVzaG9sZCB8fCAhZWxlbVJlY3QuaGVpZ2h0IHx8ICFoZWlnaHRUaHJlc2hvbGQsIFsnTWF0ZXJpYWwtVUk6IHRoZSBwb3BvdmVyIGNvbXBvbmVudCBpcyB0b28gdGFsbC4nLCBcIlNvbWUgcGFydCBvZiBpdCBjYW4gbm90IGJlIHNlZW4gb24gdGhlIHNjcmVlbiAoXCIuY29uY2F0KGVsZW1SZWN0LmhlaWdodCAtIGhlaWdodFRocmVzaG9sZCwgXCJweCkuXCIpLCAnUGxlYXNlIGNvbnNpZGVyIGFkZGluZyBhIGBtYXgtaGVpZ2h0YCB0byBpbXByb3ZlIHRoZSB1c2VyLWV4cGVyaWVuY2UuJ10uam9pbignXFxuJykpIDogdm9pZCAwOyAvLyBDaGVjayBpZiB0aGUgaG9yaXpvbnRhbCBheGlzIG5lZWRzIHNoaWZ0aW5nXG5cbiAgICAgIGlmIChsZWZ0IDwgbWFyZ2luVGhyZXNob2xkKSB7XG4gICAgICAgIHZhciBfZGlmZjIgPSBsZWZ0IC0gbWFyZ2luVGhyZXNob2xkO1xuXG4gICAgICAgIGxlZnQgLT0gX2RpZmYyO1xuICAgICAgICB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbCArPSBfZGlmZjI7XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0ID4gd2lkdGhUaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIF9kaWZmMyA9IHJpZ2h0IC0gd2lkdGhUaHJlc2hvbGQ7XG5cbiAgICAgICAgbGVmdCAtPSBfZGlmZjM7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbi5ob3Jpem9udGFsICs9IF9kaWZmMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBcIlwiLmNvbmNhdCh0b3AsIFwicHhcIiksXG4gICAgICAgIGxlZnQ6IFwiXCIuY29uY2F0KGxlZnQsIFwicHhcIiksXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogZ2V0VHJhbnNmb3JtT3JpZ2luVmFsdWUodHJhbnNmb3JtT3JpZ2luKVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXJpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uRW50ZXJpbmcpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25FbnRlcmluZyhlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuc2V0UG9zaXRpb25pbmdTdHlsZXMoZWxlbWVudCk7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgX3RoaXMuaGFuZGxlUmVzaXplID0gKDAsIF9kZWJvdW5jZS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLnNldFBvc2l0aW9uaW5nU3R5bGVzKF90aGlzLnBhcGVyUmVmKTtcbiAgICAgIH0sIDE2Nik7IC8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShQb3BvdmVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmFjdGlvbikge1xuICAgICAgICB0aGlzLnByb3BzLmFjdGlvbih7XG4gICAgICAgICAgdXBkYXRlUG9zaXRpb246IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRBbmNob3JPZmZzZXRcIixcbiAgICAvLyBSZXR1cm5zIHRoZSB0b3AvbGVmdCBvZmZzZXQgb2YgdGhlIHBvc2l0aW9uXG4gICAgLy8gdG8gYXR0YWNoIHRvIG9uIHRoZSBhbmNob3IgZWxlbWVudCAob3IgYm9keSBpZiBub25lIGlzIHByb3ZpZGVkKVxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbmNob3JPZmZzZXQoY29udGVudEFuY2hvck9mZnNldCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wczIuYW5jaG9yRWwsXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3RoaXMkcHJvcHMyLmFuY2hvck9yaWdpbixcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfdGhpcyRwcm9wczIuYW5jaG9yUmVmZXJlbmNlLFxuICAgICAgICAgIGFuY2hvclBvc2l0aW9uID0gX3RoaXMkcHJvcHMyLmFuY2hvclBvc2l0aW9uO1xuXG4gICAgICBpZiAoYW5jaG9yUmVmZXJlbmNlID09PSAnYW5jaG9yUG9zaXRpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfd2FybmluZy5kZWZhdWx0KShhbmNob3JQb3NpdGlvbiwgJ01hdGVyaWFsLVVJOiB5b3UgbmVlZCB0byBwcm92aWRlIGEgYGFuY2hvclBvc2l0aW9uYCBwcm9wZXJ0eSB3aGVuIHVzaW5nICcgKyAnPFBvcG92ZXIgYW5jaG9yUmVmZXJlbmNlPVwiYW5jaG9yUG9zaXRpb25cIiAvPi4nKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIGFuY2hvclBvc2l0aW9uO1xuICAgICAgfSAvLyBJZiBhbiBhbmNob3IgZWxlbWVudCB3YXNuJ3QgcHJvdmlkZWQsIGp1c3QgdXNlIHRoZSBwYXJlbnQgYm9keSBlbGVtZW50IG9mIHRoaXMgUG9wb3ZlclxuXG5cbiAgICAgIHZhciBhbmNob3JFbGVtZW50ID0gZ2V0QW5jaG9yRWwoYW5jaG9yRWwpIHx8ICgwLCBfb3duZXJEb2N1bWVudC5kZWZhdWx0KSh0aGlzLnBhcGVyUmVmKS5ib2R5O1xuICAgICAgdmFyIGFuY2hvclJlY3QgPSBhbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGFuY2hvclZlcnRpY2FsID0gY29udGVudEFuY2hvck9mZnNldCA9PT0gMCA/IGFuY2hvck9yaWdpbi52ZXJ0aWNhbCA6ICdjZW50ZXInO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBhbmNob3JSZWN0LnRvcCArIHRoaXMuaGFuZGxlR2V0T2Zmc2V0VG9wKGFuY2hvclJlY3QsIGFuY2hvclZlcnRpY2FsKSxcbiAgICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0ICsgdGhpcy5oYW5kbGVHZXRPZmZzZXRMZWZ0KGFuY2hvclJlY3QsIGFuY2hvck9yaWdpbi5ob3Jpem9udGFsKVxuICAgICAgfTtcbiAgICB9IC8vIFJldHVybnMgdGhlIHZlcnRpY2FsIG9mZnNldCBvZiBpbm5lciBjb250ZW50IHRvIGFuY2hvciB0aGUgdHJhbnNmb3JtIG9uIGlmIHByb3ZpZGVkXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb250ZW50QW5jaG9yT2Zmc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvbnRlbnRBbmNob3JPZmZzZXQoZWxlbWVudCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgZ2V0Q29udGVudEFuY2hvckVsID0gX3RoaXMkcHJvcHMzLmdldENvbnRlbnRBbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JSZWZlcmVuY2UgPSBfdGhpcyRwcm9wczMuYW5jaG9yUmVmZXJlbmNlO1xuICAgICAgdmFyIGNvbnRlbnRBbmNob3JPZmZzZXQgPSAwO1xuXG4gICAgICBpZiAoZ2V0Q29udGVudEFuY2hvckVsICYmIGFuY2hvclJlZmVyZW5jZSA9PT0gJ2FuY2hvckVsJykge1xuICAgICAgICB2YXIgY29udGVudEFuY2hvckVsID0gZ2V0Q29udGVudEFuY2hvckVsKGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChjb250ZW50QW5jaG9yRWwgJiYgZWxlbWVudC5jb250YWlucyhjb250ZW50QW5jaG9yRWwpKSB7XG4gICAgICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50LCBjb250ZW50QW5jaG9yRWwpO1xuICAgICAgICAgIGNvbnRlbnRBbmNob3JPZmZzZXQgPSBjb250ZW50QW5jaG9yRWwub2Zmc2V0VG9wICsgY29udGVudEFuY2hvckVsLmNsaWVudEhlaWdodCAvIDIgLSBzY3JvbGxUb3AgfHwgMDtcbiAgICAgICAgfSAvLyAhPSB0aGUgZGVmYXVsdCB2YWx1ZVxuXG5cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF93YXJuaW5nLmRlZmF1bHQpKHRoaXMucHJvcHMuYW5jaG9yT3JpZ2luLnZlcnRpY2FsID09PSAndG9wJywgWydNYXRlcmlhbC1VSTogeW91IGNhbiBub3QgY2hhbmdlIHRoZSBkZWZhdWx0IGBhbmNob3JPcmlnaW4udmVydGljYWxgIHZhbHVlICcsICd3aGVuIGFsc28gcHJvdmlkaW5nIHRoZSBgZ2V0Q29udGVudEFuY2hvckVsYCBwcm9wZXJ0eSB0byB0aGUgcG9wb3ZlciBjb21wb25lbnQuJywgJ09ubHkgdXNlIG9uZSBvZiB0aGUgdHdvIHByb3BlcnRpZXMuJywgJ1NldCBgZ2V0Q29udGVudEFuY2hvckVsYCB0byBgbnVsbCB8IHVuZGVmaW5lZGAnICsgJyBvciBsZWF2ZSBgYW5jaG9yT3JpZ2luLnZlcnRpY2FsYCB1bmNoYW5nZWQuJ10uam9pbignXFxuJykpIDogdm9pZCAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudEFuY2hvck9mZnNldDtcbiAgICB9IC8vIFJldHVybiB0aGUgYmFzZSB0cmFuc2Zvcm0gb3JpZ2luIHVzaW5nIHRoZSBlbGVtZW50XG4gICAgLy8gYW5kIHRha2luZyB0aGUgY29udGVudCBhbmNob3Igb2Zmc2V0IGludG8gYWNjb3VudCBpZiBpbiB1c2VcblxuICB9LCB7XG4gICAga2V5OiBcImdldFRyYW5zZm9ybU9yaWdpblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1PcmlnaW4oZWxlbVJlY3QpIHtcbiAgICAgIHZhciBjb250ZW50QW5jaG9yT2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgdmFyIHRyYW5zZm9ybU9yaWdpbiA9IHRoaXMucHJvcHMudHJhbnNmb3JtT3JpZ2luO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmVydGljYWw6IHRoaXMuaGFuZGxlR2V0T2Zmc2V0VG9wKGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4udmVydGljYWwpICsgY29udGVudEFuY2hvck9mZnNldCxcbiAgICAgICAgaG9yaXpvbnRhbDogdGhpcy5oYW5kbGVHZXRPZmZzZXRMZWZ0KGVsZW1SZWN0LCB0cmFuc2Zvcm1PcmlnaW4uaG9yaXpvbnRhbClcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgYWN0aW9uID0gX3RoaXMkcHJvcHM0LmFjdGlvbixcbiAgICAgICAgICBhbmNob3JFbCA9IF90aGlzJHByb3BzNC5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfdGhpcyRwcm9wczQuYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIGFuY2hvclBvc2l0aW9uID0gX3RoaXMkcHJvcHM0LmFuY2hvclBvc2l0aW9uLFxuICAgICAgICAgIGFuY2hvclJlZmVyZW5jZSA9IF90aGlzJHByb3BzNC5hbmNob3JSZWZlcmVuY2UsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczQuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NlcyA9IF90aGlzJHByb3BzNC5jbGFzc2VzLFxuICAgICAgICAgIGNvbnRhaW5lclByb3AgPSBfdGhpcyRwcm9wczQuY29udGFpbmVyLFxuICAgICAgICAgIGVsZXZhdGlvbiA9IF90aGlzJHByb3BzNC5lbGV2YXRpb24sXG4gICAgICAgICAgZ2V0Q29udGVudEFuY2hvckVsID0gX3RoaXMkcHJvcHM0LmdldENvbnRlbnRBbmNob3JFbCxcbiAgICAgICAgICBtYXJnaW5UaHJlc2hvbGQgPSBfdGhpcyRwcm9wczQubWFyZ2luVGhyZXNob2xkLFxuICAgICAgICAgIE1vZGFsQ2xhc3NlcyA9IF90aGlzJHByb3BzNC5Nb2RhbENsYXNzZXMsXG4gICAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzNC5vbkVudGVyLFxuICAgICAgICAgIG9uRW50ZXJlZCA9IF90aGlzJHByb3BzNC5vbkVudGVyZWQsXG4gICAgICAgICAgb25FbnRlcmluZyA9IF90aGlzJHByb3BzNC5vbkVudGVyaW5nLFxuICAgICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzNC5vbkV4aXQsXG4gICAgICAgICAgb25FeGl0ZWQgPSBfdGhpcyRwcm9wczQub25FeGl0ZWQsXG4gICAgICAgICAgb25FeGl0aW5nID0gX3RoaXMkcHJvcHM0Lm9uRXhpdGluZyxcbiAgICAgICAgICBvcGVuID0gX3RoaXMkcHJvcHM0Lm9wZW4sXG4gICAgICAgICAgUGFwZXJQcm9wcyA9IF90aGlzJHByb3BzNC5QYXBlclByb3BzLFxuICAgICAgICAgIHJvbGUgPSBfdGhpcyRwcm9wczQucm9sZSxcbiAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW4gPSBfdGhpcyRwcm9wczQudHJhbnNmb3JtT3JpZ2luLFxuICAgICAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfdGhpcyRwcm9wczQuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID0gX3RoaXMkcHJvcHM0LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgICBUcmFuc2l0aW9uUHJvcHMgPSBfdGhpcyRwcm9wczQuVHJhbnNpdGlvblByb3BzLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHM0LCBbXCJhY3Rpb25cIiwgXCJhbmNob3JFbFwiLCBcImFuY2hvck9yaWdpblwiLCBcImFuY2hvclBvc2l0aW9uXCIsIFwiYW5jaG9yUmVmZXJlbmNlXCIsIFwiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY29udGFpbmVyXCIsIFwiZWxldmF0aW9uXCIsIFwiZ2V0Q29udGVudEFuY2hvckVsXCIsIFwibWFyZ2luVGhyZXNob2xkXCIsIFwiTW9kYWxDbGFzc2VzXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcIm9wZW5cIiwgXCJQYXBlclByb3BzXCIsIFwicm9sZVwiLCBcInRyYW5zZm9ybU9yaWdpblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIiwgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIiwgXCJUcmFuc2l0aW9uUHJvcHNcIl0pO1xuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblByb3A7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uRHVyYXRpb25Qcm9wID09PSAnYXV0bycgJiYgIVRyYW5zaXRpb25Db21wb25lbnQubXVpU3VwcG9ydEF1dG8pIHtcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgfSAvLyBJZiB0aGUgY29udGFpbmVyIHByb3AgaXMgcHJvdmlkZWQsIHVzZSB0aGF0XG4gICAgICAvLyBJZiB0aGUgYW5jaG9yRWwgcHJvcCBpcyBwcm92aWRlZCwgdXNlIGl0cyBwYXJlbnQgYm9keSBlbGVtZW50IGFzIHRoZSBjb250YWluZXJcbiAgICAgIC8vIElmIG5laXRoZXIgYXJlIHByb3ZpZGVkIGxldCB0aGUgTW9kYWwgdGFrZSBjYXJlIG9mIGNob29zaW5nIHRoZSBjb250YWluZXJcblxuXG4gICAgICB2YXIgY29udGFpbmVyID0gY29udGFpbmVyUHJvcCB8fCAoYW5jaG9yRWwgPyAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkoZ2V0QW5jaG9yRWwoYW5jaG9yRWwpKS5ib2R5IDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Nb2RhbC5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NlczogTW9kYWxDbGFzc2VzLFxuICAgICAgICBjb250YWluZXI6IGNvbnRhaW5lcixcbiAgICAgICAgb3Blbjogb3BlbixcbiAgICAgICAgQmFja2Ryb3BQcm9wczoge1xuICAgICAgICAgIGludmlzaWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9LCBvdGhlciksIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICAgIGFwcGVhcjogdHJ1ZSxcbiAgICAgICAgaW46IG9wZW4sXG4gICAgICAgIG9uRW50ZXI6IG9uRW50ZXIsXG4gICAgICAgIG9uRW50ZXJlZDogb25FbnRlcmVkLFxuICAgICAgICBvbkVudGVyaW5nOiB0aGlzLmhhbmRsZUVudGVyaW5nLFxuICAgICAgICBvbkV4aXQ6IG9uRXhpdCxcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLFxuICAgICAgICBvbkV4aXRpbmc6IG9uRXhpdGluZyxcbiAgICAgICAgcm9sZTogcm9sZSxcbiAgICAgICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB9LCBUcmFuc2l0aW9uUHJvcHMpLCBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9QYXBlci5kZWZhdWx0LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnBhcGVyLFxuICAgICAgICBlbGV2YXRpb246IGVsZXZhdGlvbixcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgIF90aGlzMi5wYXBlclJlZiA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKF9yZWYpO1xuICAgICAgICB9XG4gICAgICB9LCBQYXBlclByb3BzKSwgX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RFdmVudExpc3RlbmVyLmRlZmF1bHQsIHtcbiAgICAgICAgdGFyZ2V0OiBcIndpbmRvd1wiLFxuICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgIH0pLCBjaGlsZHJlbikpKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBvcG92ZXI7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cblBvcG92ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyBjYWxsYmFjayBwcm9wZXJ0eS4gSXQncyBjYWxsZWQgYnkgdGhlIGNvbXBvbmVudCBvbiBtb3VudC5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB0cmlnZ2VyIGFuIGFjdGlvbiBwcm9ncmFtbWF0aWNhbGx5LlxuICAgKiBJdCBjdXJyZW50bHkgb25seSBzdXBwb3J0cyB1cGRhdGVQb3NpdGlvbigpIGFjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGFjdGlvbnMgVGhpcyBvYmplY3QgY29udGFpbnMgYWxsIHBvc2libGUgYWN0aW9uc1xuICAgKiB0aGF0IGNhbiBiZSB0cmlnZ2VyZWQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGFjdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIERPTSBlbGVtZW50LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgRE9NIGVsZW1lbnQsXG4gICAqIHRoYXQgbWF5IGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBwb3BvdmVyJ3NcbiAgICogYGFuY2hvckVsYCB3aWxsIGF0dGFjaCB0by4gVGhpcyBpcyBub3QgdXNlZCB3aGVuIHRoZVxuICAgKiBhbmNob3JSZWZlcmVuY2UgaXMgJ2FuY2hvclBvc2l0aW9uJy5cbiAgICpcbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXTtcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIGNlbnRlciwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGhvcml6b250YWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10pXSkuaXNSZXF1aXJlZCxcbiAgICB2ZXJ0aWNhbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsndG9wJywgJ2NlbnRlcicsICdib3R0b20nXSldKS5pc1JlcXVpcmVkXG4gIH0pLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb3NpdGlvbiB0aGF0IG1heSBiZSB1c2VkXG4gICAqIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBjb29yZGluYXRlcyBhcmUgcmVsYXRpdmUgdG9cbiAgICogdGhlIGFwcGxpY2F0aW9uJ3MgY2xpZW50IGFyZWEuXG4gICAqL1xuICBhbmNob3JQb3NpdGlvbjogX3Byb3BUeXBlcy5kZWZhdWx0LnNoYXBlKHtcbiAgICBsZWZ0OiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgdG9wOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLypcbiAgICogVGhpcyBkZXRlcm1pbmVzIHdoaWNoIGFuY2hvciBwcm9wIHRvIHJlZmVyIHRvIHRvIHNldFxuICAgKiB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JSZWZlcmVuY2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2FuY2hvckVsJywgJ2FuY2hvclBvc2l0aW9uJywgJ25vbmUnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzLWFwaSkgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQSBub2RlLCBjb21wb25lbnQgaW5zdGFuY2UsIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlaXRoZXIuXG4gICAqIFRoZSBgY29udGFpbmVyYCB3aWxsIHBhc3NlZCB0byB0aGUgTW9kYWwgY29tcG9uZW50LlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSBhbmNob3JFbCdzIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBUaGUgZWxldmF0aW9uIG9mIHRoZSBwb3BvdmVyLlxuICAgKi9cbiAgZWxldmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiBvcmRlciB0byByZXRyaWV2ZSB0aGUgY29udGVudCBhbmNob3IgZWxlbWVudC5cbiAgICogSXQncyB0aGUgb3Bwb3NpdGUgb2YgdGhlIGBhbmNob3JFbGAgcHJvcGVydHkuXG4gICAqIFRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IHNob3VsZCBiZSBhbiBlbGVtZW50IGluc2lkZSB0aGUgcG9wb3Zlci5cbiAgICogSXQncyB1c2VkIHRvIGNvcnJlY3RseSBzY3JvbGwgYW5kIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcG92ZXIuXG4gICAqIFRoZSBwb3NpdGlvbmluZyBzdHJhdGVneSB0cmllcyB0byBtYWtlIHRoZSBjb250ZW50IGFuY2hvciBlbGVtZW50IGp1c3QgYWJvdmUgdGhlXG4gICAqIGFuY2hvciBlbGVtZW50LlxuICAgKi9cbiAgZ2V0Q29udGVudEFuY2hvckVsOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogU3BlY2lmaWVzIGhvdyBjbG9zZSB0byB0aGUgZWRnZSBvZiB0aGUgd2luZG93IHRoZSBwb3BvdmVyIGNhbiBhcHBlYXIuXG4gICAqL1xuICBtYXJnaW5UaHJlc2hvbGQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG5cbiAgLyoqXG4gICAqIGBjbGFzc2VzYCBwcm9wZXJ0eSBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbENsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICovXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBlbnRlcmluZy5cbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaGFzIGVudGVyZWQuXG4gICAqL1xuICBvbkVudGVyZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZW50ZXJpbmcuXG4gICAqL1xuICBvbkVudGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgZXhpdGVkLlxuICAgKi9cbiAgb25FeGl0ZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgZXhpdGluZy5cbiAgICovXG4gIG9uRXhpdGluZzogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHBvcG92ZXIgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgcm9sZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgcG9pbnQgb24gdGhlIHBvcG92ZXIgd2hpY2hcbiAgICogd2lsbCBhdHRhY2ggdG8gdGhlIGFuY2hvcidzIG9yaWdpbi5cbiAgICpcbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tLCB4KHB4KV07XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBjZW50ZXIsIHJpZ2h0LCB4KHB4KV0uXG4gICAqL1xuICB0cmFuc2Zvcm1PcmlnaW46IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgaG9yaXpvbnRhbDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnbGVmdCcsICdjZW50ZXInLCAncmlnaHQnXSldKS5pc1JlcXVpcmVkLFxuICAgIHZlcnRpY2FsOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2YoWyd0b3AnLCAnY2VudGVyJywgJ2JvdHRvbSddKV0pLmlzUmVxdWlyZWRcbiAgfSksXG5cbiAgLyoqXG4gICAqIFRyYW5zaXRpb24gY29tcG9uZW50LlxuICAgKi9cbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcblxuICAvKipcbiAgICogU2V0IHRvICdhdXRvJyB0byBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSB0cmFuc2l0aW9uIHRpbWUgYmFzZWQgb24gaGVpZ2h0LlxuICAgKi9cbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIGVudGVyOiBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLFxuICAgIGV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXJcbiAgfSksIF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ2F1dG8nXSldKSxcblxuICAvKipcbiAgICogUHJvcGVydGllcyBhcHBsaWVkIHRvIHRoZSBgVHJhbnNpdGlvbmAgZWxlbWVudC5cbiAgICovXG4gIFRyYW5zaXRpb25Qcm9wczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvclJlZmVyZW5jZTogJ2FuY2hvckVsJyxcbiAgYW5jaG9yT3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICd0b3AnLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBlbGV2YXRpb246IDgsXG4gIG1hcmdpblRocmVzaG9sZDogMTYsXG4gIHRyYW5zZm9ybU9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgVHJhbnNpdGlvbkNvbXBvbmVudDogX0dyb3cuZGVmYXVsdCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiAnYXV0bydcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVBvcG92ZXInXG59KShQb3BvdmVyKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfR3Jvdy5kZWZhdWx0O1xuICB9XG59KTtcblxudmFyIF9Hcm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Hcm93XCIpKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIikpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mXCIpKTtcblxudmFyIF9pbmhlcml0czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9UcmFuc2l0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uXCIpKTtcblxudmFyIF93aXRoVGhlbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdHlsZXMvd2l0aFRoZW1lXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi90cmFuc2l0aW9ucy91dGlsc1wiKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBUcmFuc2l0aW9uXG5mdW5jdGlvbiBnZXRTY2FsZSh2YWx1ZSkge1xuICByZXR1cm4gXCJzY2FsZShcIi5jb25jYXQodmFsdWUsIFwiLCBcIikuY29uY2F0KE1hdGgucG93KHZhbHVlLCAyKSwgXCIpXCIpO1xufVxuXG52YXIgc3R5bGVzID0ge1xuICBlbnRlcmluZzoge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgdHJhbnNmb3JtOiBnZXRTY2FsZSgxKVxuICB9LFxuICBlbnRlcmVkOiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICAvLyBVc2UgdHJhbnNsYXRlWiB0byBzY3JvbGxpbmcgaXNzdWUgb24gQ2hyb21lLlxuICAgIHRyYW5zZm9ybTogXCJcIi5jb25jYXQoZ2V0U2NhbGUoMSksIFwiIHRyYW5zbGF0ZVooMClcIilcbiAgfVxufTtcbi8qKlxuICogVGhlIEdyb3cgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbVG9vbHRpcF0oL2RlbW9zL3Rvb2x0aXBzLykgYW5kXG4gKiBbUG9wb3Zlcl0oL3V0aWxzL3BvcG92ZXIvKSBjb21wb25lbnRzLlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgR3JvdyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMi5kZWZhdWx0KShHcm93LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBHcm93KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgR3Jvdyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yLmRlZmF1bHQpKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gKDAsIF9nZXRQcm90b3R5cGVPZjMuZGVmYXVsdCkoR3JvdykpLmNhbGwuYXBwbHkoX2dldFByb3RvdHlwZU9mMiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgX3RoaXMuaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdGhlbWUgPSBfdGhpcyRwcm9wcy50aGVtZSxcbiAgICAgICAgICB0aW1lb3V0ID0gX3RoaXMkcHJvcHMudGltZW91dDtcbiAgICAgICgwLCBfdXRpbHMucmVmbG93KShub2RlKTsgLy8gU28gdGhlIGFuaW1hdGlvbiBhbHdheXMgc3RhcnQgZnJvbSB0aGUgc3RhcnQuXG5cbiAgICAgIHZhciBfZ2V0VHJhbnNpdGlvblByb3BzID0gKDAsIF91dGlscy5nZXRUcmFuc2l0aW9uUHJvcHMpKF90aGlzLnByb3BzLCB7XG4gICAgICAgIG1vZGU6ICdlbnRlcidcbiAgICAgIH0pLFxuICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF9nZXRUcmFuc2l0aW9uUHJvcHMuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXkgPSBfZ2V0VHJhbnNpdGlvblByb3BzLmRlbGF5O1xuXG4gICAgICB2YXIgZHVyYXRpb24gPSAwO1xuXG4gICAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgX3RoaXMuYXV0b1RpbWVvdXQgPSBkdXJhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGRlbGF5OiBkZWxheVxuICAgICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgICAgZGVsYXk6IGRlbGF5XG4gICAgICB9KV0uam9pbignLCcpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyKG5vZGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVFeGl0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0aGVtZSA9IF90aGlzJHByb3BzMi50aGVtZSxcbiAgICAgICAgICB0aW1lb3V0ID0gX3RoaXMkcHJvcHMyLnRpbWVvdXQ7XG4gICAgICB2YXIgZHVyYXRpb24gPSAwO1xuXG4gICAgICB2YXIgX2dldFRyYW5zaXRpb25Qcm9wczIgPSAoMCwgX3V0aWxzLmdldFRyYW5zaXRpb25Qcm9wcykoX3RoaXMucHJvcHMsIHtcbiAgICAgICAgbW9kZTogJ2V4aXQnXG4gICAgICB9KSxcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfZ2V0VHJhbnNpdGlvblByb3BzMi5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheSA9IF9nZXRUcmFuc2l0aW9uUHJvcHMyLmRlbGF5O1xuXG4gICAgICBpZiAodGltZW91dCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGR1cmF0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuZ2V0QXV0b0hlaWdodER1cmF0aW9uKG5vZGUuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgX3RoaXMuYXV0b1RpbWVvdXQgPSBkdXJhdGlvbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSBbdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdvcGFjaXR5Jywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGRlbGF5OiBkZWxheVxuICAgICAgfSksIHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAwLjY2NixcbiAgICAgICAgZGVsYXk6IGRlbGF5IHx8IGR1cmF0aW9uICogMC4zMzNcbiAgICAgIH0pXS5qb2luKCcsJyk7XG4gICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGdldFNjYWxlKDAuNzUpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25FeGl0KSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuYWRkRW5kTGlzdGVuZXIgPSBmdW5jdGlvbiAoXywgbmV4dCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLnRpbWVvdXQgPT09ICdhdXRvJykge1xuICAgICAgICBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQobmV4dCwgX3RoaXMuYXV0b1RpbWVvdXQgfHwgMCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKEdyb3csIFt7XG4gICAga2V5OiBcImNvbXBvbmVudFdpbGxVbm1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgb25FbnRlciA9IF90aGlzJHByb3BzMy5vbkVudGVyLFxuICAgICAgICAgIG9uRXhpdCA9IF90aGlzJHByb3BzMy5vbkV4aXQsXG4gICAgICAgICAgc3R5bGVQcm9wID0gX3RoaXMkcHJvcHMzLnN0eWxlLFxuICAgICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMzLnRoZW1lLFxuICAgICAgICAgIHRpbWVvdXQgPSBfdGhpcyRwcm9wczMudGltZW91dCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF90aGlzJHByb3BzMywgW1wiY2hpbGRyZW5cIiwgXCJvbkVudGVyXCIsIFwib25FeGl0XCIsIFwic3R5bGVcIiwgXCJ0aGVtZVwiLCBcInRpbWVvdXRcIl0pO1xuICAgICAgdmFyIHN0eWxlID0gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgc3R5bGVQcm9wLCBfcmVhY3QuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBjaGlsZHJlbi5wcm9wcy5zdHlsZSA6IHt9KTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UcmFuc2l0aW9uLmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICBhcHBlYXI6IHRydWUsXG4gICAgICAgIG9uRW50ZXI6IHRoaXMuaGFuZGxlRW50ZXIsXG4gICAgICAgIG9uRXhpdDogdGhpcy5oYW5kbGVFeGl0LFxuICAgICAgICBhZGRFbmRMaXN0ZW5lcjogdGhpcy5hZGRFbmRMaXN0ZW5lcixcbiAgICAgICAgdGltZW91dDogdGltZW91dCA9PT0gJ2F1dG8nID8gbnVsbCA6IHRpbWVvdXRcbiAgICAgIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICAgIHN0eWxlOiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGdldFNjYWxlKDAuNzUpXG4gICAgICAgICAgfSwgc3R5bGVzW3N0YXRlXSwgc3R5bGUpXG4gICAgICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gR3Jvdztcbn0oX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50KTtcblxuR3Jvdy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBBIHNpbmdsZSBjaGlsZCBjb250ZW50IGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgdGhlbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqXG4gICAqIFNldCB0byAnYXV0bycgdG8gYXV0b21hdGljYWxseSBjYWxjdWxhdGUgdHJhbnNpdGlvbiB0aW1lIGJhc2VkIG9uIGhlaWdodC5cbiAgICovXG4gIHRpbWVvdXQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgZW50ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgZXhpdDogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnYXV0byddKV0pXG59IDoge307XG5Hcm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGltZW91dDogJ2F1dG8nXG59O1xuR3Jvdy5tdWlTdXBwb3J0QXV0byA9IHRydWU7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFRoZW1lLmRlZmF1bHQpKCkoR3Jvdyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX01lbnVMaXN0LmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX01lbnVMaXN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9NZW51TGlzdFwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCIpKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7XG5cbnZhciBfaW5oZXJpdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3REb20gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1kb21cIikpO1xuXG52YXIgX2tleWNvZGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJrZXljb2RlXCIpKTtcblxudmFyIF93YXJuaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwid2FybmluZ1wiKSk7XG5cbnZhciBfb3duZXJEb2N1bWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL293bmVyRG9jdW1lbnRcIikpO1xuXG52YXIgX0xpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9MaXN0XCIpKTtcblxuLy8gQGluaGVyaXRlZENvbXBvbmVudCBMaXN0XG52YXIgTWVudUxpc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoTWVudUxpc3QsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbnVMaXN0KCkge1xuICAgIHZhciBfZ2V0UHJvdG90eXBlT2YyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazIuZGVmYXVsdCkodGhpcywgTWVudUxpc3QpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9ICgwLCBfZ2V0UHJvdG90eXBlT2YzLmRlZmF1bHQpKE1lbnVMaXN0KSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjdXJyZW50VGFiSW5kZXg6IG51bGxcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuYmx1clRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpcy5saXN0UmVmKSB7XG4gICAgICAgICAgdmFyIGxpc3QgPSBfdGhpcy5saXN0UmVmO1xuICAgICAgICAgIHZhciBjdXJyZW50Rm9jdXMgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobGlzdCkuYWN0aXZlRWxlbWVudDtcblxuICAgICAgICAgIGlmICghbGlzdC5jb250YWlucyhjdXJyZW50Rm9jdXMpKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXNldFRhYkluZGV4KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCAzMCk7XG5cbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkJsdXIpIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25CbHVyKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGxpc3QgPSBfdGhpcy5saXN0UmVmO1xuICAgICAgdmFyIGtleSA9ICgwLCBfa2V5Y29kZS5kZWZhdWx0KShldmVudCk7XG4gICAgICB2YXIgY3VycmVudEZvY3VzID0gKDAsIF9vd25lckRvY3VtZW50LmRlZmF1bHQpKGxpc3QpLmFjdGl2ZUVsZW1lbnQ7XG5cbiAgICAgIGlmICgoa2V5ID09PSAndXAnIHx8IGtleSA9PT0gJ2Rvd24nKSAmJiAoIWN1cnJlbnRGb2N1cyB8fCBjdXJyZW50Rm9jdXMgJiYgIWxpc3QuY29udGFpbnMoY3VycmVudEZvY3VzKSkpIHtcbiAgICAgICAgaWYgKF90aGlzLnNlbGVjdGVkSXRlbVJlZikge1xuICAgICAgICAgIF90aGlzLnNlbGVjdGVkSXRlbVJlZi5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpc3QuZmlyc3RDaGlsZC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRGb2N1cy5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBjdXJyZW50Rm9jdXMubmV4dEVsZW1lbnRTaWJsaW5nLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRGb2N1cy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgY3VycmVudEZvY3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25LZXlEb3duKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uS2V5RG93bihldmVudCwga2V5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlSXRlbUZvY3VzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgbGlzdCA9IF90aGlzLmxpc3RSZWY7XG5cbiAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5jaGlsZHJlbi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChsaXN0LmNoaWxkcmVuW2ldID09PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRUYWJJbmRleChpKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MyLmRlZmF1bHQpKE1lbnVMaXN0LCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucmVzZXRUYWJJbmRleCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjb21wb25lbnRXaWxsVW5tb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmJsdXJUaW1lcik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFRhYkluZGV4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRhYkluZGV4KGluZGV4KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudFRhYkluZGV4OiBpbmRleFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvY3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgdmFyIGN1cnJlbnRUYWJJbmRleCA9IHRoaXMuc3RhdGUuY3VycmVudFRhYkluZGV4O1xuICAgICAgdmFyIGxpc3QgPSB0aGlzLmxpc3RSZWY7XG5cbiAgICAgIGlmICghbGlzdCB8fCAhbGlzdC5jaGlsZHJlbiB8fCAhbGlzdC5maXJzdENoaWxkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRUYWJJbmRleCAmJiBjdXJyZW50VGFiSW5kZXggPj0gMCkge1xuICAgICAgICBsaXN0LmNoaWxkcmVuW2N1cnJlbnRUYWJJbmRleF0uZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuZmlyc3RDaGlsZC5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFRhYkluZGV4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0VGFiSW5kZXgoKSB7XG4gICAgICB2YXIgbGlzdCA9IHRoaXMubGlzdFJlZjtcbiAgICAgIHZhciBjdXJyZW50Rm9jdXMgPSAoMCwgX293bmVyRG9jdW1lbnQuZGVmYXVsdCkobGlzdCkuYWN0aXZlRWxlbWVudDtcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QuY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaXRlbXMucHVzaChsaXN0LmNoaWxkcmVuW2ldKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRGb2N1c0luZGV4ID0gaXRlbXMuaW5kZXhPZihjdXJyZW50Rm9jdXMpO1xuXG4gICAgICBpZiAoY3VycmVudEZvY3VzSW5kZXggIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFRhYkluZGV4KGN1cnJlbnRGb2N1c0luZGV4KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJdGVtUmVmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFRhYkluZGV4KGl0ZW1zLmluZGV4T2YodGhpcy5zZWxlY3RlZEl0ZW1SZWYpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuc2V0VGFiSW5kZXgoMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wcy5vbkJsdXIsXG4gICAgICAgICAgb25LZXlEb3duID0gX3RoaXMkcHJvcHMub25LZXlEb3duLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFtcImNoaWxkcmVuXCIsIFwiY2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25LZXlEb3duXCJdKTtcbiAgICAgIHJldHVybiBfcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9MaXN0LmRlZmF1bHQsICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgICAgICByb2xlOiBcIm1lbnVcIixcbiAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoX3JlZikge1xuICAgICAgICAgIF90aGlzMi5saXN0UmVmID0gX3JlYWN0RG9tLmRlZmF1bHQuZmluZERPTU5vZGUoX3JlZik7XG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICBvbktleURvd246IHRoaXMuaGFuZGxlS2V5RG93bixcbiAgICAgICAgb25CbHVyOiB0aGlzLmhhbmRsZUJsdXJcbiAgICAgIH0sIG90aGVyKSwgX3JlYWN0LmRlZmF1bHQuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGlmICghX3JlYWN0LmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcuZGVmYXVsdCkoY2hpbGQudHlwZSAhPT0gX3JlYWN0LmRlZmF1bHQuRnJhZ21lbnQsIFtcIk1hdGVyaWFsLVVJOiB0aGUgTWVudUxpc3QgY29tcG9uZW50IGRvZXNuJ3QgYWNjZXB0IGEgRnJhZ21lbnQgYXMgYSBjaGlsZC5cIiwgJ0NvbnNpZGVyIHByb3ZpZGluZyBhbiBhcnJheSBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICAgIHRhYkluZGV4OiBpbmRleCA9PT0gX3RoaXMyLnN0YXRlLmN1cnJlbnRUYWJJbmRleCA/IDAgOiAtMSxcbiAgICAgICAgICByZWY6IGNoaWxkLnByb3BzLnNlbGVjdGVkID8gZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgX3RoaXMyLnNlbGVjdGVkSXRlbVJlZiA9IF9yZWFjdERvbS5kZWZhdWx0LmZpbmRET01Ob2RlKHJlZik7XG4gICAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICBvbkZvY3VzOiBfdGhpczIuaGFuZGxlSXRlbUZvY3VzXG4gICAgICAgIH0pO1xuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTWVudUxpc3Q7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbk1lbnVMaXN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE1lbnVMaXN0IGNvbnRlbnRzLCBub3JtYWxseSBgTWVudUl0ZW1gcy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkJsdXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbktleURvd246IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXG59IDoge307XG52YXIgX2RlZmF1bHQgPSBNZW51TGlzdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zaG91bGRVcGRhdGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Nob3VsZFVwZGF0ZVwiKSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zaGFsbG93RXF1YWxcIikpO1xuXG52YXIgX3NldERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zZXREaXNwbGF5TmFtZVwiKSk7XG5cbnZhciBfd3JhcERpc3BsYXlOYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi93cmFwRGlzcGxheU5hbWVcIikpO1xuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gKDAsIF9zaG91bGRVcGRhdGUuZGVmYXVsdCkoZnVuY3Rpb24gKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsLmRlZmF1bHQpKHByb3BzLCBuZXh0UHJvcHMpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiAoMCwgX3NldERpc3BsYXlOYW1lLmRlZmF1bHQpKCgwLCBfd3JhcERpc3BsYXlOYW1lLmRlZmF1bHQpKEJhc2VDb21wb25lbnQsICdwdXJlJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gIH1cblxuICByZXR1cm4gaG9jKEJhc2VDb21wb25lbnQpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gcHVyZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfc2V0RGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NldERpc3BsYXlOYW1lXCIpKTtcblxudmFyIF93cmFwRGlzcGxheU5hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dyYXBEaXNwbGF5TmFtZVwiKSk7XG5cbnZhciBzaG91bGRVcGRhdGUgPSBmdW5jdGlvbiBzaG91bGRVcGRhdGUodGVzdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9ICgwLCBfcmVhY3QuY3JlYXRlRmFjdG9yeSkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgU2hvdWxkVXBkYXRlID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgICgwLCBfaW5oZXJpdHNMb29zZTIuZGVmYXVsdCkoU2hvdWxkVXBkYXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gU2hvdWxkVXBkYXRlKCkge1xuICAgICAgICByZXR1cm4gX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBTaG91bGRVcGRhdGUucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGVzdCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2hvdWxkVXBkYXRlO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuICgwLCBfc2V0RGlzcGxheU5hbWUuZGVmYXVsdCkoKDAsIF93cmFwRGlzcGxheU5hbWUuZGVmYXVsdCkoQmFzZUNvbXBvbmVudCwgJ3Nob3VsZFVwZGF0ZScpKShTaG91bGRVcGRhdGUpO1xuICAgIH1cblxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG52YXIgX2RlZmF1bHQgPSBzaG91bGRVcGRhdGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBzZXRTdGF0aWMgPSBmdW5jdGlvbiBzZXRTdGF0aWMoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIEJhc2VDb21wb25lbnRba2V5XSA9IHZhbHVlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9O1xufTtcblxudmFyIF9kZWZhdWx0ID0gc2V0U3RhdGljO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBnZXREaXNwbGF5TmFtZSA9IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50O1xuICB9XG5cbiAgaWYgKCFDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50Jztcbn07XG5cbnZhciBfZGVmYXVsdCA9IGdldERpc3BsYXlOYW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZianMvbGliL3NoYWxsb3dFcXVhbFwiKSk7XG5cbnZhciBfZGVmYXVsdCA9IF9zaGFsbG93RXF1YWwuZGVmYXVsdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1N2Z0ljb24uZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vU3ZnSWNvblwiKSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcblxudmFyIF93aXRoU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3R5bGVzL3dpdGhTdHlsZXNcIikpO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvaGVscGVyc1wiKTtcblxudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBmbGV4U2hyaW5rOiAwLFxuICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJpbmhlcml0XCJgLiAqL1xuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiAyMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cImxhcmdlXCJgLiAqL1xuICAgIGZvbnRTaXplTGFyZ2U6IHtcbiAgICAgIGZvbnRTaXplOiAzNVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBTdmdJY29uKHByb3BzKSB7XG4gIHZhciBfY2xhc3NOYW1lcztcblxuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgY29sb3IgPSBwcm9wcy5jb2xvcixcbiAgICAgIENvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGZvbnRTaXplID0gcHJvcHMuZm9udFNpemUsXG4gICAgICBuYXRpdmVDb2xvciA9IHByb3BzLm5hdGl2ZUNvbG9yLFxuICAgICAgdGl0bGVBY2Nlc3MgPSBwcm9wcy50aXRsZUFjY2VzcyxcbiAgICAgIHZpZXdCb3ggPSBwcm9wcy52aWV3Qm94LFxuICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMi5kZWZhdWx0KShwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcIm5hdGl2ZUNvbG9yXCIsIFwidGl0bGVBY2Nlc3NcIiwgXCJ2aWV3Qm94XCJdKTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc2VzLnJvb3QsIChfY2xhc3NOYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KShfY2xhc3NOYW1lcywgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KCgwLCBfaGVscGVycy5jYXBpdGFsaXplKShjb2xvcikpXSwgY29sb3IgIT09ICdpbmhlcml0JyksICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKF9jbGFzc05hbWVzLCBjbGFzc2VzW1wiZm9udFNpemVcIi5jb25jYXQoKDAsIF9oZWxwZXJzLmNhcGl0YWxpemUpKGZvbnRTaXplKSldLCBmb250U2l6ZSAhPT0gJ2RlZmF1bHQnKSwgX2NsYXNzTmFtZXMpLCBjbGFzc05hbWUpLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgY29sb3I6IG5hdGl2ZUNvbG9yLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogdGl0bGVBY2Nlc3MgPyAnZmFsc2UnIDogJ3RydWUnLFxuICAgIHJvbGU6IHRpdGxlQWNjZXNzID8gJ2ltZycgOiAncHJlc2VudGF0aW9uJ1xuICB9LCBvdGhlciksIGNoaWxkcmVuLCB0aXRsZUFjY2VzcyA/IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCB0aXRsZUFjY2VzcykgOiBudWxsKTtcbn1cblxuU3ZnSWNvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2Nzcy1hcGkpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBjb21wb25lbnQuIEl0IHN1cHBvcnRzIHRob3NlIHRoZW1lIGNvbG9ycyB0aGF0IG1ha2Ugc2Vuc2UgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgKiBZb3UgY2FuIHVzZSB0aGUgYG5hdGl2ZUNvbG9yYCBwcm9wZXJ0eSB0byBhcHBseSBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBjb2xvcjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdwcmltYXJ5JywgJ3NlY29uZGFyeScsICdhY3Rpb24nLCAnZXJyb3InLCAnZGlzYWJsZWQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIERPTSBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLCBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuXG4gIC8qKlxuICAgKiBUaGUgZm9udFNpemUgYXBwbGllZCB0byB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gMjRweCwgYnV0IGNhbiBiZSBjb25maWd1cmUgdG8gaW5oZXJpdCBmb250IHNpemUuXG4gICAqL1xuICBmb250U2l6ZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKFsnaW5oZXJpdCcsICdkZWZhdWx0JywgJ3NtYWxsJywgJ2xhcmdlJ10pLFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGEgY29sb3IgYXR0cmlidXRlIHRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIG5hdGl2ZUNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgc2hhcGUtcmVuZGVyaW5nIGF0dHJpYnV0ZS4gVGhlIGJlaGF2aW9yIG9mIHRoZSBkaWZmZXJlbnQgb3B0aW9ucyBpcyBkZXNjcmliZWRcbiAgICogW2hlcmVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc2hhcGUtcmVuZGVyaW5nKS5cbiAgICogSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzIHdpdGggYmx1cnJ5IGljb25zIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHNoYXBlUmVuZGVyaW5nOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGl0LlxuICAgKiBodHRwczovL3d3dy53My5vcmcvVFIvU1ZHLWFjY2Vzcy8jRXF1aXZhbGVudFxuICAgKi9cbiAgdGl0bGVBY2Nlc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcmVkZWZpbmUgd2hhdCB0aGUgY29vcmRpbmF0ZXMgd2l0aG91dCB1bml0cyBtZWFuIGluc2lkZSBhbiBTVkcgZWxlbWVudC5cbiAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBTVkcgZWxlbWVudCBpcyA1MDAgKHdpZHRoKSBieSAyMDAgKGhlaWdodCksXG4gICAqIGFuZCB5b3UgcGFzcyB2aWV3Qm94PVwiMCAwIDUwIDIwXCIsXG4gICAqIHRoaXMgbWVhbnMgdGhhdCB0aGUgY29vcmRpbmF0ZXMgaW5zaWRlIHRoZSBTVkcgd2lsbCBnbyBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIgKDAsMClcbiAgICogdG8gYm90dG9tIHJpZ2h0ICg1MCwyMCkgYW5kIGVhY2ggdW5pdCB3aWxsIGJlIHdvcnRoIDEwcHguXG4gICAqL1xuICB2aWV3Qm94OiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXG59IDoge307XG5TdmdJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdpbmhlcml0JyxcbiAgY29tcG9uZW50OiAnc3ZnJyxcbiAgZm9udFNpemU6ICdkZWZhdWx0JyxcbiAgdmlld0JveDogJzAgMCAyNCAyNCdcbn07XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfd2l0aFN0eWxlcy5kZWZhdWx0KShzdHlsZXMsIHtcbiAgbmFtZTogJ011aVN2Z0ljb24nXG59KShTdmdJY29uKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZXMgPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX05hdGl2ZVNlbGVjdElucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXRpdmVTZWxlY3RJbnB1dFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N0eWxlcy93aXRoU3R5bGVzXCIpKTtcblxudmFyIF9JbnB1dEJhc2UgPSByZXF1aXJlKFwiLi4vSW5wdXRCYXNlL0lucHV0QmFzZVwiKTtcblxudmFyIF9BcnJvd0Ryb3BEb3duID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaW50ZXJuYWwvc3ZnLWljb25zL0Fycm93RHJvcERvd25cIikpO1xuXG52YXIgX0lucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vSW5wdXRcIikpO1xuXG4vLyBAaW5oZXJpdGVkQ29tcG9uZW50IElucHV0XG52YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGByb290YCBjbGFzcy4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBJbnB1dGAgY29tcG9uZW50IGBzZWxlY3RgIGNsYXNzLiAqL1xuICAgIHNlbGVjdDoge1xuICAgICAgJy1tb3otYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgICAgLy8gUmVzZXRcbiAgICAgIC8vIFdoZW4gaW50ZXJhY3RpbmcgcXVpY2tseSwgdGhlIHRleHQgY2FuIGVuZCB1cCBzZWxlY3RlZC5cbiAgICAgIC8vIE5hdGl2ZSBzZWxlY3QgY2FuJ3QgYmUgc2VsZWN0ZWQgZWl0aGVyLlxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAzMixcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIC8vIFJlc2V0XG4gICAgICBoZWlnaHQ6ICcxLjE4NzVlbScsXG4gICAgICAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcbiAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gMzJweCknLFxuICAgICAgbWluV2lkdGg6IDE2LFxuICAgICAgLy8gU28gaXQgZG9lc24ndCBjb2xsYXBzZS5cbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgJyY6Zm9jdXMnOiB7XG4gICAgICAgIC8vIFNob3cgdGhhdCBpdCdzIG5vdCBhbiB0ZXh0IGlucHV0XG4gICAgICAgIGJhY2tncm91bmQ6IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDUpJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwIC8vIFJlc2V0IENocm9tZSBzdHlsZVxuXG4gICAgICB9LFxuICAgICAgLy8gUmVtb3ZlIElFIDExIGFycm93XG4gICAgICAnJjo6LW1zLWV4cGFuZCc6IHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJyYkZGlzYWJsZWQnOiB7XG4gICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBpZiBgdmFyaWFudD1cImZpbGxlZFwiYC4gKi9cbiAgICBmaWxsZWQ6IHtcbiAgICAgIHdpZHRoOiAnY2FsYygxMDAlIC0gNDRweCknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICB3aWR0aDogJ2NhbGMoMTAwJSAtIDQ2cHgpJyxcbiAgICAgIGJvcmRlclJhZGl1czogdGhlbWUuc2hhcGUuYm9yZGVyUmFkaXVzXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgSW5wdXRgIGNvbXBvbmVudCBgc2VsZWN0TWVudWAgY2xhc3MuICovXG4gICAgc2VsZWN0TWVudToge1xuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIC8vIEZpeCBTYWZhcmkgdGV4dE92ZXJmbG93XG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIC8vIFJlc2V0XG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIG1pbkhlaWdodDogJzEuMTg3NWVtJyAvLyBSZXNldCAoMTlweCksIG1hdGNoIHRoZSBuYXRpdmUgaW5wdXQgbGluZS1oZWlnaHRcblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0YCBjb21wb25lbnQgYGRpc2FibGVkYCBjbGFzcy4gKi9cbiAgICBkaXNhYmxlZDoge30sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYElucHV0YCBjb21wb25lbnQgYGljb25gIGNsYXNzLiAqL1xuICAgIGljb246IHtcbiAgICAgIC8vIFdlIHVzZSBhIHBvc2l0aW9uIGFic29sdXRlIG92ZXIgYSBmbGV4Ym94IGluIG9yZGVyIHRvIGZvcndhcmQgdGhlIHBvaW50ZXIgZXZlbnRzXG4gICAgICAvLyB0byB0aGUgaW5wdXQuXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAnY2FsYyg1MCUgLSAxMnB4KScsXG4gICAgICAvLyBDZW50ZXIgdmVydGljYWxseVxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZSxcbiAgICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJyAvLyBEb24ndCBibG9jayBwb2ludGVyIGV2ZW50cyBvbiB0aGUgc2VsZWN0IHVuZGVyIHRoZSBpY29uLlxuXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQW4gYWx0ZXJuYXRpdmUgdG8gYDxTZWxlY3QgbmF0aXZlIC8+YCB3aXRoIGEgbXVjaCBzbWFsbGVyIGJ1bmRsZSBzaXplIGZvb3RwcmludC5cbiAqL1xuXG5cbmV4cG9ydHMuc3R5bGVzID0gc3R5bGVzO1xuXG5mdW5jdGlvbiBOYXRpdmVTZWxlY3QocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIEljb25Db21wb25lbnQgPSBwcm9wcy5JY29uQ29tcG9uZW50LFxuICAgICAgaW5wdXQgPSBwcm9wcy5pbnB1dCxcbiAgICAgIGlucHV0UHJvcHMgPSBwcm9wcy5pbnB1dFByb3BzLFxuICAgICAgdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJJY29uQ29tcG9uZW50XCIsIFwiaW5wdXRcIiwgXCJpbnB1dFByb3BzXCIsIFwidmFyaWFudFwiXSk7XG4gIHZhciBmY3MgPSAoMCwgX0lucHV0QmFzZS5mb3JtQ29udHJvbFN0YXRlKSh7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgc3RhdGVzOiBbJ3ZhcmlhbnQnXVxuICB9KTtcbiAgcmV0dXJuIF9yZWFjdC5kZWZhdWx0LmNsb25lRWxlbWVudChpbnB1dCwgKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgLy8gTW9zdCBvZiB0aGUgbG9naWMgaXMgaW1wbGVtZW50ZWQgaW4gYE5hdGl2ZVNlbGVjdElucHV0YC5cbiAgICAvLyBUaGUgYFNlbGVjdGAgY29tcG9uZW50IGlzIGEgc2ltcGxlIEFQSSB3cmFwcGVyIHRvIGV4cG9zZSBzb21ldGhpbmcgYmV0dGVyIHRvIHBsYXkgd2l0aC5cbiAgICBpbnB1dENvbXBvbmVudDogX05hdGl2ZVNlbGVjdElucHV0LmRlZmF1bHQsXG4gICAgaW5wdXRQcm9wczogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgSWNvbkNvbXBvbmVudDogSWNvbkNvbXBvbmVudCxcbiAgICAgIHZhcmlhbnQ6IGZjcy52YXJpYW50LFxuICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSwgaW5wdXRQcm9wcywgaW5wdXQgPyBpbnB1dC5wcm9wcy5pbnB1dFByb3BzIDoge30pXG4gIH0sIG90aGVyKSk7XG59XG5cbk5hdGl2ZVNlbGVjdC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIC8qKlxuICAgKiBUaGUgb3B0aW9uIGVsZW1lbnRzIHRvIHBvcHVsYXRlIHRoZSBzZWxlY3Qgd2l0aC5cbiAgICogQ2FuIGJlIHNvbWUgYDxvcHRpb24+YCBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MtYXBpKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBUaGUgaWNvbiB0aGF0IGRpc3BsYXlzIHRoZSBhcnJvdy5cbiAgICovXG4gIEljb25Db21wb25lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XSksXG5cbiAgLyoqXG4gICAqIEFuIGBJbnB1dGAgZWxlbWVudDsgZG9lcyBub3QgaGF2ZSB0byBiZSBhIG1hdGVyaWFsLXVpIHNwZWNpZmljIGBJbnB1dGAuXG4gICAqL1xuICBpbnB1dDogX3Byb3BUeXBlcy5kZWZhdWx0LmVsZW1lbnQsXG5cbiAgLyoqXG4gICAqIEF0dHJpYnV0ZXMgYXBwbGllZCB0byB0aGUgYHNlbGVjdGAgZWxlbWVudC5cbiAgICovXG4gIGlucHV0UHJvcHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogWW91IGNhbiBwdWxsIG91dCB0aGUgbmV3IHZhbHVlIGJ5IGFjY2Vzc2luZyBgZXZlbnQudGFyZ2V0LnZhbHVlYC5cbiAgICovXG4gIG9uQ2hhbmdlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcblxuICAvKipcbiAgICogVGhlIGlucHV0IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sXSksXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZihbJ3N0YW5kYXJkJywgJ291dGxpbmVkJywgJ2ZpbGxlZCddKVxufSA6IHt9O1xuTmF0aXZlU2VsZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgSWNvbkNvbXBvbmVudDogX0Fycm93RHJvcERvd24uZGVmYXVsdCxcbiAgaW5wdXQ6IF9yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0lucHV0LmRlZmF1bHQsIG51bGwpXG59O1xuTmF0aXZlU2VsZWN0LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpRm9ybUNvbnRyb2w6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3Rcbn07XG5OYXRpdmVTZWxlY3QubXVpTmFtZSA9ICdTZWxlY3QnO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX3dpdGhTdHlsZXMuZGVmYXVsdCkoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlOYXRpdmVTZWxlY3QnXG59KShOYXRpdmVTZWxlY3QpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIikpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2ZcIikpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3N0eWxlcyA9IHJlcXVpcmUoXCIuLi9zdHlsZXNcIik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL3V0aWxzXCIpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlcyAqL1xudmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgICdAZ2xvYmFsJzoge1xuICAgICAgaHRtbDoge1xuICAgICAgICBXZWJraXRGb250U21vb3RoaW5nOiAnYW50aWFsaWFzZWQnLFxuICAgICAgICAvLyBBbnRpYWxpYXNpbmcuXG4gICAgICAgIE1vek9zeEZvbnRTbW9vdGhpbmc6ICdncmF5c2NhbGUnLFxuICAgICAgICAvLyBBbnRpYWxpYXNpbmcuXG4gICAgICAgIC8vIENoYW5nZSBmcm9tIGBib3gtc2l6aW5nOiBjb250ZW50LWJveGAgc28gdGhhdCBgd2lkdGhgXG4gICAgICAgIC8vIGlzIG5vdCBhZmZlY3RlZCBieSBgcGFkZGluZ2Agb3IgYGJvcmRlcmAuXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICB9LFxuICAgICAgJyosICo6OmJlZm9yZSwgKjo6YWZ0ZXInOiB7XG4gICAgICAgIGJveFNpemluZzogJ2luaGVyaXQnXG4gICAgICB9LFxuICAgICAgYm9keToge1xuICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQuZGVmYXVsdCxcbiAgICAgICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgICAgICAvLyBTYXZlIHByaW50ZXIgaW5rLlxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5jb21tb24ud2hpdGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIEtpY2tzdGFydCBhbiBlbGVnYW50LCBjb25zaXN0ZW50LCBhbmQgc2ltcGxlIGJhc2VsaW5lIHRvIGJ1aWxkIHVwb24uXG4gKi9cblxuXG52YXIgQ3NzQmFzZWxpbmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czIuZGVmYXVsdCkoQ3NzQmFzZWxpbmUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIENzc0Jhc2VsaW5lKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2syLmRlZmF1bHQpKHRoaXMsIENzc0Jhc2VsaW5lKTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMi5kZWZhdWx0KSh0aGlzLCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShDc3NCYXNlbGluZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShDc3NCYXNlbGluZSwgW3tcbiAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQ3NzQmFzZWxpbmU7XG59KF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbkNzc0Jhc2VsaW5lLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFlvdSBjYW4gd3JhcCBhIG5vZGUuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzZXM6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufSA6IHt9O1xuQ3NzQmFzZWxpbmUucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF91dGlscy5leGFjdFByb3ApKENzc0Jhc2VsaW5lLnByb3BUeXBlcykgOiB7fTtcbkNzc0Jhc2VsaW5lLmRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IG51bGxcbn07XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfc3R5bGVzLndpdGhTdHlsZXMpKHN0eWxlcywge1xuICBuYW1lOiAnTXVpQ3NzQmFzZWxpbmUnXG59KShDc3NCYXNlbGluZSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=