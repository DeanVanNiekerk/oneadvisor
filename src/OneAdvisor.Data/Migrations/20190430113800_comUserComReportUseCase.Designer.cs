// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OneAdvisor.Data;

namespace OneAdvisor.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190430113800_comUserComReportUseCase")]
    partial class comUserComReportUseCase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("idn_RoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("idn_UserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("idn_UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("idn_UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("idn_UserToken");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlternateIdNumber");

                    b.Property<Guid>("ClientTypeId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdNumber");

                    b.Property<string>("Initials");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("MaidenName");

                    b.Property<DateTime?>("MarriageDate");

                    b.Property<Guid?>("MarritalStatusId");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("PreferredName");

                    b.Property<string>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("ClientTypeId");

                    b.HasIndex("MarritalStatusId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("clt_Client");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.ContactEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("ContactTypeId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("clt_Contact");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.ClientTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("clt_ClientType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27bb22b3-4c3d-41a3-48bf-690a98f8f780"),
                            Code = "individual",
                            DisplayOrder = 1,
                            Name = "Individual"
                        },
                        new
                        {
                            Id = new Guid("295565bf-7485-85f1-6c98-947ab0b7770c"),
                            Code = "company",
                            DisplayOrder = 2,
                            Name = "Company"
                        },
                        new
                        {
                            Id = new Guid("55f6c0ef-ae2c-faac-adff-ea3bd269043f"),
                            Code = "trust",
                            DisplayOrder = 3,
                            Name = "Trust"
                        },
                        new
                        {
                            Id = new Guid("bc0b4043-25cc-dbb6-cfd5-981557a10ca1"),
                            Code = "unknown",
                            DisplayOrder = 4,
                            Name = "Unknown Entity"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.ContactTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("clt_ContactType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6349e22-3e27-404a-8584-58e420510834"),
                            Name = "Cellphone Number"
                        },
                        new
                        {
                            Id = new Guid("b3c261d0-4e1d-4dd8-b944-6d6afd1795e0"),
                            Name = "Email Address"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.MarritalStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("clt_MarritalStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77fa3769-7775-4cdd-b5d4-8b526b2d894c"),
                            Name = "Single"
                        },
                        new
                        {
                            Id = new Guid("5f7a5d69-845c-4f8d-b108-7c70084f3f6a"),
                            Name = "Married COP"
                        },
                        new
                        {
                            Id = new Guid("b31331ec-73cb-4985-aa93-e60e04a48095"),
                            Name = "Married ANC"
                        },
                        new
                        {
                            Id = new Guid("b16cbd3b-cf50-4a74-8f38-a8ca6b1cb83f"),
                            Name = "Married ANC (with Accrual)"
                        },
                        new
                        {
                            Id = new Guid("e4f03497-5dbf-4bd0-bc14-660a3969f011"),
                            Name = "Widowed"
                        },
                        new
                        {
                            Id = new Guid("91ebd765-bd8b-4908-94dc-00f09fe37ca7"),
                            Name = "Divorced"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PolicyProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PolicyProductTypeId");

                    b.ToTable("clt_PolicyProduct");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PolicyTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PolicyTypeId");

                    b.ToTable("clt_PolicyProductType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b24f26-5d16-0289-ea4d-754603c3e950"),
                            Code = "med_medical_aid",
                            Name = "Medical Aid",
                            PolicyTypeId = new Guid("023107f5-97a6-456d-9182-7bbda72ca82a")
                        },
                        new
                        {
                            Id = new Guid("f6db6be4-2672-7063-6920-ae95a0130b73"),
                            Code = "med_gap_cover",
                            Name = "Gap Cover",
                            PolicyTypeId = new Guid("023107f5-97a6-456d-9182-7bbda72ca82a")
                        },
                        new
                        {
                            Id = new Guid("0269860e-a5ab-7912-e65a-539c124d5593"),
                            Code = "med_add_medical_savings",
                            Name = "Extra Medical Savings",
                            PolicyTypeId = new Guid("023107f5-97a6-456d-9182-7bbda72ca82a")
                        },
                        new
                        {
                            Id = new Guid("178c71d8-f378-fc92-6347-149108b4f24f"),
                            Code = "life_life_insurance",
                            Name = "Life Insurance",
                            PolicyTypeId = new Guid("f3d877b4-1800-4711-8cc9-35169f8bd60b")
                        },
                        new
                        {
                            Id = new Guid("0c55f316-f446-a8f8-488c-ac1eb587a9c9"),
                            Code = "inv_unit_trust",
                            Name = "Unit Trust",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("3b7ccd1e-44b5-d81e-b6b4-18c56c1c077f"),
                            Code = "inv_endowment",
                            Name = "Endowment",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("62007d95-7d61-4182-b998-9ffb4c5fda0b"),
                            Code = "inv_tax_free",
                            Name = "Tax Free Savings",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("4df79496-16cd-9375-eb86-3cbcd8eb47fc"),
                            Code = "inv_preservation_pension",
                            Name = "Preservation Pension",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("5541cf6c-50ef-5fcd-f584-6673a125c817"),
                            Code = "inv_preservation_provident",
                            Name = "Preservation Provident",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("273e862c-abd5-ac36-3bb7-31ea2e18cb9d"),
                            Code = "inv_retirement_annuity",
                            Name = "Retirement Annuity",
                            PolicyTypeId = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9")
                        },
                        new
                        {
                            Id = new Guid("062d7233-f743-9e5a-8c07-d5580bfa11a4"),
                            Code = "short_personal_lines",
                            Name = "Personal Lines",
                            PolicyTypeId = new Guid("a90a5869-4da5-4cce-8973-9a8194c2bdcb")
                        },
                        new
                        {
                            Id = new Guid("67c1d0a3-b5b4-3c23-4256-4e79266f5378"),
                            Code = "short_commercial_lines",
                            Name = "Commercial Lines",
                            PolicyTypeId = new Guid("a90a5869-4da5-4cce-8973-9a8194c2bdcb")
                        },
                        new
                        {
                            Id = new Guid("da086441-91a9-6e5e-5ad6-3167b2076329"),
                            Code = "rewards_rewards_program",
                            Name = "Rewards Program",
                            PolicyTypeId = new Guid("3d991459-2043-46b9-9357-5446a993b81d")
                        },
                        new
                        {
                            Id = new Guid("a202bce5-8e20-a795-1a38-c93b0cfd41ac"),
                            Code = "group_scheme_pension",
                            Name = "Pension Fund",
                            PolicyTypeId = new Guid("8fe8751f-c4f0-01c5-26bd-a92f918651d2")
                        },
                        new
                        {
                            Id = new Guid("988d7de4-1760-f6e8-b9c2-c68e4d95e7e2"),
                            Code = "group_scheme_provident",
                            Name = "Provident Fund",
                            PolicyTypeId = new Guid("8fe8751f-c4f0-01c5-26bd-a92f918651d2")
                        },
                        new
                        {
                            Id = new Guid("bdb36139-07a5-13aa-7431-128329c3bb28"),
                            Code = "group_scheme_risk",
                            Name = "Group Risk",
                            PolicyTypeId = new Guid("8fe8751f-c4f0-01c5-26bd-a92f918651d2")
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.PolicyTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("clt_PolicyType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a98bb718-4acb-4fad-afe9-5fbba00203b9"),
                            Code = "investment",
                            Name = "Investment"
                        },
                        new
                        {
                            Id = new Guid("f3d877b4-1800-4711-8cc9-35169f8bd60b"),
                            Code = "life_insurance",
                            Name = "Life Insurance"
                        },
                        new
                        {
                            Id = new Guid("a90a5869-4da5-4cce-8973-9a8194c2bdcb"),
                            Code = "short_term",
                            Name = "Short Term Insurance"
                        },
                        new
                        {
                            Id = new Guid("023107f5-97a6-456d-9182-7bbda72ca82a"),
                            Code = "medical_cover",
                            Name = "Medical Cover"
                        },
                        new
                        {
                            Id = new Guid("3d991459-2043-46b9-9357-5446a993b81d"),
                            Code = "rewards",
                            Name = "Rewards Program"
                        },
                        new
                        {
                            Id = new Guid("8fe8751f-c4f0-01c5-26bd-a92f918651d2"),
                            Code = "group_scheme",
                            Name = "Group scheme"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.PolicyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Number")
                        .IsRequired();

                    b.Property<Guid?>("PolicyProductId");

                    b.Property<Guid?>("PolicyProductTypeId");

                    b.Property<Guid?>("PolicyTypeId");

                    b.Property<decimal?>("Premium")
                        .HasColumnType("Money");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PolicyProductId");

                    b.HasIndex("PolicyProductTypeId");

                    b.HasIndex("PolicyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("clt_Policy");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionAllocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FromClientId");

                    b.Property<string>("PolicyIds")
                        .IsRequired();

                    b.Property<Guid>("ToClientId");

                    b.HasKey("Id");

                    b.HasIndex("FromClientId");

                    b.HasIndex("ToClientId");

                    b.ToTable("com_CommissionAllocation");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountIncludingVAT")
                        .HasColumnType("Money");

                    b.Property<Guid>("CommissionStatementId");

                    b.Property<Guid>("CommissionTypeId");

                    b.Property<Guid>("PolicyId");

                    b.Property<string>("SourceData");

                    b.Property<decimal>("VAT")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("CommissionStatementId");

                    b.HasIndex("CommissionTypeId");

                    b.HasIndex("PolicyId");

                    b.ToTable("com_Commission");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionErrorEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClientId");

                    b.Property<Guid>("CommissionStatementId");

                    b.Property<Guid?>("CommissionTypeId");

                    b.Property<string>("Data")
                        .IsRequired();

                    b.Property<bool>("IsFormatValid");

                    b.Property<Guid?>("PolicyId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CommissionStatementId");

                    b.HasIndex("PolicyId");

                    b.ToTable("com_CommissionError");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionStatementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountIncludingVAT")
                        .HasColumnType("Money");

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DateMonth");

                    b.Property<int>("DateYear");

                    b.Property<Guid>("OrganisationId");

                    b.Property<bool>("Processed");

                    b.Property<decimal>("VAT")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("com_CommissionStatement");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionStatementTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CompanyId");

                    b.Property<string>("Config")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("com_CommissionStatementTemplate");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.Lookup.CommissionEarningsTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("com_CommissionEarningsType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b42edc0-fac6-e946-c779-9d90a805c294"),
                            Name = "Monthly Annuity"
                        },
                        new
                        {
                            Id = new Guid("e8799015-6f4a-5d45-5be9-0fcd516e0951"),
                            Name = "Annual Annuity"
                        },
                        new
                        {
                            Id = new Guid("e7f98561-f018-3edd-2118-e3646c89e2a2"),
                            Name = "Life 1st Years"
                        },
                        new
                        {
                            Id = new Guid("9f8fc29d-0f1c-b952-d446-79cc3ed967d7"),
                            Name = "Once Off Commissions"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.Lookup.CommissionTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<Guid>("CommissionEarningsTypeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PolicyTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CommissionEarningsTypeId");

                    b.HasIndex("PolicyTypeId");

                    b.ToTable("com_CommissionType");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.ApplicationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("dir_Application");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Directory"
                        },
                        new
                        {
                            Id = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Client"
                        },
                        new
                        {
                            Id = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Commission"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.AuditLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Data");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Entity");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("dir_AuditLog");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.BranchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("dir_Branch");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.Lookup.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommissionPolicyNumberPrefixes")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("dir_Company");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.OrganisationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("dir_Organisation");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("idn_Role");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.RoleToUseCaseEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasMaxLength(32);

                    b.Property<string>("UseCaseId")
                        .HasMaxLength(256);

                    b.HasKey("RoleId", "UseCaseId");

                    b.HasIndex("UseCaseId");

                    b.ToTable("dir_RoleToUseCase");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.UseCaseEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256);

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("dir_UseCase");

                    b.HasData(
                        new
                        {
                            Id = "dir_view_users",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Users"
                        },
                        new
                        {
                            Id = "dir_edit_users",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Edit Users"
                        },
                        new
                        {
                            Id = "dir_view_organisations",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Organisations"
                        },
                        new
                        {
                            Id = "dir_edit_organisations",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Edit Organisations"
                        },
                        new
                        {
                            Id = "dir_view_branches",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Branches"
                        },
                        new
                        {
                            Id = "dir_edit_branches",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Edit Branches"
                        },
                        new
                        {
                            Id = "dir_view_roles",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Roles"
                        },
                        new
                        {
                            Id = "dir_edit_roles",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Edit Roles"
                        },
                        new
                        {
                            Id = "dir_view_applications",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Applications"
                        },
                        new
                        {
                            Id = "dir_view_usecases",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View UseCases"
                        },
                        new
                        {
                            Id = "dir_view_audit_logs",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Audit Logs"
                        },
                        new
                        {
                            Id = "dir_view_lookups",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "View Lookups"
                        },
                        new
                        {
                            Id = "dir_edit_lookups",
                            ApplicationId = new Guid("66c3b4e8-8a30-4a4b-be4d-3928d12fefe9"),
                            Name = "Edit Lookups"
                        },
                        new
                        {
                            Id = "clt_view_clients",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "View Clients"
                        },
                        new
                        {
                            Id = "clt_edit_clients",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Edit Clients"
                        },
                        new
                        {
                            Id = "clt_view_policies",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "View Policies"
                        },
                        new
                        {
                            Id = "clt_edit_policies",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Edit Policies"
                        },
                        new
                        {
                            Id = "clt_view_contacts",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "View Contacts"
                        },
                        new
                        {
                            Id = "clt_edit_contacts",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Edit Contacts"
                        },
                        new
                        {
                            Id = "clt_import_clients",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Import Clients"
                        },
                        new
                        {
                            Id = "clt_export_clients",
                            ApplicationId = new Guid("605ea52c-3627-48e2-8f7c-4819c5ea555b"),
                            Name = "Export Clients"
                        },
                        new
                        {
                            Id = "com_import_commissions",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Import Commissions"
                        },
                        new
                        {
                            Id = "com_view_commissions",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commissions"
                        },
                        new
                        {
                            Id = "com_edit_commissions",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Edit Commissions"
                        },
                        new
                        {
                            Id = "com_view_commission_statements",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commission Statements"
                        },
                        new
                        {
                            Id = "com_edit_commission_statements",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Edit Commission Statements"
                        },
                        new
                        {
                            Id = "com_view_commission_statement_templates",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commission Statement Templates"
                        },
                        new
                        {
                            Id = "com_edit_commission_statement_templates",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Edit Commission Statement Templates"
                        },
                        new
                        {
                            Id = "com_view_report_client_revenue",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commission Client Revenue Report"
                        },
                        new
                        {
                            Id = "com_view_commission_allocations",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commission Allocations"
                        },
                        new
                        {
                            Id = "com_edit_commission_allocations",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "Edit Commission Allocations"
                        },
                        new
                        {
                            Id = "com_view_report_user_monthly_commission",
                            ApplicationId = new Guid("2fca4500-9142-4940-aaf4-b18925c96d66"),
                            Name = "View Commission User Monthly Commission Report"
                        });
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Aliases")
                        .IsRequired();

                    b.Property<Guid>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Scope")
                        .IsRequired();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("idn_User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.RoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.RoleEntity")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Directory.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.ClientEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.ClientTypeEntity", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.MarritalStatusEntity", "MarritalStatus")
                        .WithMany()
                        .HasForeignKey("MarritalStatusId");

                    b.HasOne("OneAdvisor.Data.Entities.Directory.OrganisationEntity", "Organisation")
                        .WithMany("Clients")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.ContactEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.ClientEntity", "Client")
                        .WithMany("ClientContacts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.ContactTypeEntity", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.Lookup.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductTypeEntity", "PolicyProductType")
                        .WithMany()
                        .HasForeignKey("PolicyProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductTypeEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyTypeEntity", "PolicyType")
                        .WithMany("PolicyProductTypes")
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Client.PolicyEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.ClientEntity", "Client")
                        .WithMany("ClientPolicies")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Directory.Lookup.CompanyEntity", "Company")
                        .WithMany("ClientPolicies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductEntity", "PolicyProduct")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyProductId");

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyProductTypeEntity", "PolicyProductType")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyProductTypeId");

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyTypeEntity", "PolicyType")
                        .WithMany("Policies")
                        .HasForeignKey("PolicyTypeId");

                    b.HasOne("OneAdvisor.Data.Entities.Directory.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionAllocationEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.ClientEntity", "FromClient")
                        .WithMany("FromCommissionAllocations")
                        .HasForeignKey("FromClientId")
                        .HasConstraintName("ForeignKey_FromClient_FromCommissionAllocations")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OneAdvisor.Data.Entities.Client.ClientEntity", "ToClient")
                        .WithMany("ToCommissionAllocations")
                        .HasForeignKey("ToClientId")
                        .HasConstraintName("ForeignKey_ToClient_ToCommissionAllocations")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Commission.CommissionStatementEntity", "CommissionStatement")
                        .WithMany("Commissions")
                        .HasForeignKey("CommissionStatementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Commission.Lookup.CommissionTypeEntity", "CommissionType")
                        .WithMany()
                        .HasForeignKey("CommissionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.PolicyEntity", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionErrorEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Client.ClientEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("OneAdvisor.Data.Entities.Commission.CommissionStatementEntity", "CommissionStatement")
                        .WithMany("CommissionErrors")
                        .HasForeignKey("CommissionStatementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.PolicyEntity", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.CommissionStatementEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.Lookup.CompanyEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Directory.OrganisationEntity", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Commission.Lookup.CommissionTypeEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Commission.Lookup.CommissionEarningsTypeEntity", "CommissionEarningsType")
                        .WithMany()
                        .HasForeignKey("CommissionEarningsTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OneAdvisor.Data.Entities.Client.Lookup.PolicyTypeEntity", "PolicyType")
                        .WithMany("CommissionTypes")
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.BranchEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.OrganisationEntity", "Organisation")
                        .WithMany("Branches")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.RoleEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.ApplicationEntity", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.RoleToUseCaseEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.RoleEntity", "Role")
                        .WithMany("RoleToUseCases")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OneAdvisor.Data.Entities.Directory.UseCaseEntity", "UseCase")
                        .WithMany("RoleToUseCases")
                        .HasForeignKey("UseCaseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OneAdvisor.Data.Entities.Directory.UseCaseEntity", b =>
                {
                    b.HasOne("OneAdvisor.Data.Entities.Directory.ApplicationEntity", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
